// This module contains a collection of YANG definitions
// for Cisco IOS-XR invmgr package operational data.
// 
// This module contains definitions
// for the following management objects:
//   inventory: Inventory information
// 
// Copyright (c) 2013-2018 by Cisco Systems, Inc.
// All rights reserved.
package invmgr_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package invmgr_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-invmgr-oper inventory}", reflect.TypeOf(Inventory{}))
    ydk.RegisterEntity("Cisco-IOS-XR-invmgr-oper:inventory", reflect.TypeOf(Inventory{}))
}

// ThresholdRelation represents Threshold relation
type ThresholdRelation string

const (
    // Sensor value is less than threshold
    ThresholdRelation_less_than ThresholdRelation = "less-than"

    // Sensor value is lesser than  or equal to
    // threshold
    ThresholdRelation_less_or_equal ThresholdRelation = "less-or-equal"

    // Sensor value is greater than threshold
    ThresholdRelation_greater_than ThresholdRelation = "greater-than"

    // Sensor value is greater than or equal to
    // threshold
    ThresholdRelation_greater_or_equal ThresholdRelation = "greater-or-equal"

    // Sensor value is equal to threshold
    ThresholdRelation_equal ThresholdRelation = "equal"

    // Sensor value is not equal to threshold
    ThresholdRelation_not_equal ThresholdRelation = "not-equal"
)

// ThresholdSeverity represents Threshold severity
type ThresholdSeverity string

const (
    // Other
    ThresholdSeverity_other ThresholdSeverity = "other"

    // Minor
    ThresholdSeverity_minor ThresholdSeverity = "minor"

    // Major
    ThresholdSeverity_major ThresholdSeverity = "major"

    // Critical
    ThresholdSeverity_critical ThresholdSeverity = "critical"
)

// SensorStatus represents Sensor status
type SensorStatus string

const (
    // State ok
    SensorStatus_ok SensorStatus = "ok"

    // State Unavailable
    SensorStatus_unavailable SensorStatus = "unavailable"

    // State no operational
    SensorStatus_non_operational SensorStatus = "non-operational"
)

// SensorData represents Sensor measurement data types
type SensorData string

const (
    // Datatype unknown
    SensorData_unknown SensorData = "unknown"

    // AC volts
    SensorData_ac_volts SensorData = "ac-volts"

    // DC volts
    SensorData_dc_volts SensorData = "dc-volts"

    // Amperes
    SensorData_amperes SensorData = "amperes"

    // Power in watts
    SensorData_watts SensorData = "watts"

    // Frequency in hertz
    SensorData_hertz SensorData = "hertz"

    // Celsius
    SensorData_celsius SensorData = "celsius"

    // Rotations per minute
    SensorData_rpm SensorData = "rpm"

    // Power in dBm
    SensorData_dbm SensorData = "dbm"

    // Power in dB
    SensorData_db SensorData = "db"
)

// Unit represents Unit information
type Unit string

const (
    // Degree in celsius
    Unit_celsius Unit = "celsius"

    // Milli volts
    Unit_milli_volts Unit = "milli-volts"

    // Milli amperes
    Unit_milli_amperes Unit = "milli-amperes"

    // Rotations per minute
    Unit_rpm Unit = "rpm"

    // Watts
    Unit_watts Unit = "watts"

    // dBm
    Unit_dbm Unit = "dbm"

    // dB
    Unit_db Unit = "db"
)

// CardResetReason represents Card reset reason
type CardResetReason string

const (
    // reset unknown
    CardResetReason_reset_unknown CardResetReason = "reset-unknown"

    // power up
    CardResetReason_power_up CardResetReason = "power-up"

    // parity error
    CardResetReason_parity_error CardResetReason = "parity-error"

    // clear config reset
    CardResetReason_clear_config_reset CardResetReason = "clear-config-reset"

    // manual reset
    CardResetReason_manual_reset CardResetReason = "manual-reset"

    // watch dog timeout reset
    CardResetReason_watch_dog_timeout_reset CardResetReason = "watch-dog-timeout-reset"

    // resource overflow reset
    CardResetReason_resource_overflow_reset CardResetReason = "resource-overflow-reset"

    // missing task reset
    CardResetReason_missing_task_reset CardResetReason = "missing-task-reset"

    // low voltage reset
    CardResetReason_low_voltage_reset CardResetReason = "low-voltage-reset"

    // controller reset
    CardResetReason_controller_reset CardResetReason = "controller-reset"

    // system reset
    CardResetReason_system_reset CardResetReason = "system-reset"

    // switchover reset
    CardResetReason_switchover_reset CardResetReason = "switchover-reset"

    // upgrade reset
    CardResetReason_upgrade_reset CardResetReason = "upgrade-reset"

    // downgrade reset
    CardResetReason_downgrade_reset CardResetReason = "downgrade-reset"

    // cache error reset
    CardResetReason_cache_error_reset CardResetReason = "cache-error-reset"

    // device driver reset
    CardResetReason_device_driver_reset CardResetReason = "device-driver-reset"

    // software exception reset
    CardResetReason_software_exception_reset CardResetReason = "software-exception-reset"

    // restore config reset
    CardResetReason_restore_config_reset CardResetReason = "restore-config-reset"

    // abort rev reset
    CardResetReason_abort_rev_reset CardResetReason = "abort-rev-reset"

    // burn boot reset
    CardResetReason_burn_boot_reset CardResetReason = "burn-boot-reset"

    // standby cd healthier reset
    CardResetReason_standby_cd_healthier_reset CardResetReason = "standby-cd-healthier-reset"

    // non native config clear reset
    CardResetReason_non_native_config_clear_reset CardResetReason = "non-native-config-clear-reset"

    // memory protection error reset
    CardResetReason_memory_protection_error_reset CardResetReason = "memory-protection-error-reset"

    // card reset reason max
    CardResetReason_card_reset_reason_max CardResetReason = "card-reset-reason-max"
)

// Inventory
// Inventory information
type Inventory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entities Table.
    Entities Inventory_Entities

    // RackTable.
    Racks Inventory_Racks
}

func (inventory *Inventory) GetEntityData() *types.CommonEntityData {
    inventory.EntityData.YFilter = inventory.YFilter
    inventory.EntityData.YangName = "inventory"
    inventory.EntityData.BundleName = "cisco_ios_xr"
    inventory.EntityData.ParentYangName = "Cisco-IOS-XR-invmgr-oper"
    inventory.EntityData.SegmentPath = "Cisco-IOS-XR-invmgr-oper:inventory"
    inventory.EntityData.AbsolutePath = inventory.EntityData.SegmentPath
    inventory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    inventory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    inventory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    inventory.EntityData.Children = types.NewOrderedMap()
    inventory.EntityData.Children.Append("entities", types.YChild{"Entities", &inventory.Entities})
    inventory.EntityData.Children.Append("racks", types.YChild{"Racks", &inventory.Racks})
    inventory.EntityData.Leafs = types.NewOrderedMap()

    inventory.EntityData.YListKeys = []string {}

    return &(inventory.EntityData)
}

// Inventory_Entities
// Entities Table
type Inventory_Entities struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entity name. The type is slice of Inventory_Entities_Entity.
    Entity []*Inventory_Entities_Entity
}

func (entities *Inventory_Entities) GetEntityData() *types.CommonEntityData {
    entities.EntityData.YFilter = entities.YFilter
    entities.EntityData.YangName = "entities"
    entities.EntityData.BundleName = "cisco_ios_xr"
    entities.EntityData.ParentYangName = "inventory"
    entities.EntityData.SegmentPath = "entities"
    entities.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/" + entities.EntityData.SegmentPath
    entities.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    entities.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    entities.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    entities.EntityData.Children = types.NewOrderedMap()
    entities.EntityData.Children.Append("entity", types.YChild{"Entity", nil})
    for i := range entities.Entity {
        entities.EntityData.Children.Append(types.GetSegmentPath(entities.Entity[i]), types.YChild{"Entity", entities.Entity[i]})
    }
    entities.EntityData.Leafs = types.NewOrderedMap()

    entities.EntityData.YListKeys = []string {}

    return &(entities.EntityData)
}

// Inventory_Entities_Entity
// Entity name
type Inventory_Entities_Entity struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Entity name. The type is string.
    Name interface{}

    // SubEntities Table.
    Subentities Inventory_Entities_Entity_Subentities

    // Attributes.
    Attributes Inventory_Entities_Entity_Attributes
}

func (entity *Inventory_Entities_Entity) GetEntityData() *types.CommonEntityData {
    entity.EntityData.YFilter = entity.YFilter
    entity.EntityData.YangName = "entity"
    entity.EntityData.BundleName = "cisco_ios_xr"
    entity.EntityData.ParentYangName = "entities"
    entity.EntityData.SegmentPath = "entity" + types.AddKeyToken(entity.Name, "name")
    entity.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/" + entity.EntityData.SegmentPath
    entity.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    entity.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    entity.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    entity.EntityData.Children = types.NewOrderedMap()
    entity.EntityData.Children.Append("subentities", types.YChild{"Subentities", &entity.Subentities})
    entity.EntityData.Children.Append("attributes", types.YChild{"Attributes", &entity.Attributes})
    entity.EntityData.Leafs = types.NewOrderedMap()
    entity.EntityData.Leafs.Append("name", types.YLeaf{"Name", entity.Name})

    entity.EntityData.YListKeys = []string {"Name"}

    return &(entity.EntityData)
}

// Inventory_Entities_Entity_Subentities
// SubEntities Table
type Inventory_Entities_Entity_Subentities struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Subentity Bag. The type is slice of
    // Inventory_Entities_Entity_Subentities_Subentity.
    Subentity []*Inventory_Entities_Entity_Subentities_Subentity
}

func (subentities *Inventory_Entities_Entity_Subentities) GetEntityData() *types.CommonEntityData {
    subentities.EntityData.YFilter = subentities.YFilter
    subentities.EntityData.YangName = "subentities"
    subentities.EntityData.BundleName = "cisco_ios_xr"
    subentities.EntityData.ParentYangName = "entity"
    subentities.EntityData.SegmentPath = "subentities"
    subentities.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/" + subentities.EntityData.SegmentPath
    subentities.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subentities.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subentities.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subentities.EntityData.Children = types.NewOrderedMap()
    subentities.EntityData.Children.Append("subentity", types.YChild{"Subentity", nil})
    for i := range subentities.Subentity {
        subentities.EntityData.Children.Append(types.GetSegmentPath(subentities.Subentity[i]), types.YChild{"Subentity", subentities.Subentity[i]})
    }
    subentities.EntityData.Leafs = types.NewOrderedMap()

    subentities.EntityData.YListKeys = []string {}

    return &(subentities.EntityData)
}

// Inventory_Entities_Entity_Subentities_Subentity
// Subentity Bag
type Inventory_Entities_Entity_Subentities_Subentity struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Subentity name. The type is string.
    Name interface{}

    // Subentity Name. The type is string with length: 0..255.
    SubentityName interface{}
}

func (subentity *Inventory_Entities_Entity_Subentities_Subentity) GetEntityData() *types.CommonEntityData {
    subentity.EntityData.YFilter = subentity.YFilter
    subentity.EntityData.YangName = "subentity"
    subentity.EntityData.BundleName = "cisco_ios_xr"
    subentity.EntityData.ParentYangName = "subentities"
    subentity.EntityData.SegmentPath = "subentity" + types.AddKeyToken(subentity.Name, "name")
    subentity.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/subentities/" + subentity.EntityData.SegmentPath
    subentity.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subentity.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subentity.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subentity.EntityData.Children = types.NewOrderedMap()
    subentity.EntityData.Leafs = types.NewOrderedMap()
    subentity.EntityData.Leafs.Append("name", types.YLeaf{"Name", subentity.Name})
    subentity.EntityData.Leafs.Append("subentity-name", types.YLeaf{"SubentityName", subentity.SubentityName})

    subentity.EntityData.YListKeys = []string {"Name"}

    return &(subentity.EntityData)
}

// Inventory_Entities_Entity_Attributes
// Attributes
type Inventory_Entities_Entity_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Entities_Entity_Attributes_InvBasicBag

    // VM Node ID Tuple.
    VmNodeId Inventory_Entities_Entity_Attributes_VmNodeId

    // Threshold.
    Threshold Inventory_Entities_Entity_Attributes_Threshold

    // VM Done Tuple.
    VmDone Inventory_Entities_Entity_Attributes_VmDone

    // Inventory EDM FRU info.
    FruInfo Inventory_Entities_Entity_Attributes_FruInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Entities_Entity_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Entities_Entity_Attributes_InvAssetBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Entities_Entity_Attributes_EnvSensorInfo

    // Node ID Tuple.
    NodeId Inventory_Entities_Entity_Attributes_NodeId

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Entities_Entity_Attributes_InvEepromInfo
}

func (attributes *Inventory_Entities_Entity_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "entity"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("vm-node-id", types.YChild{"VmNodeId", &attributes.VmNodeId})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("vm-done", types.YChild{"VmDone", &attributes.VmDone})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("node-id", types.YChild{"NodeId", &attributes.NodeId})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Entities_Entity_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Entities_Entity_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Entities_Entity_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Entities_Entity_Attributes_VmNodeId
// VM Node ID Tuple
type Inventory_Entities_Entity_Attributes_VmNodeId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VM Node Id Tuple. The type is interface{} with range: 0..4294967295.
    VmNodeId interface{}
}

func (vmNodeId *Inventory_Entities_Entity_Attributes_VmNodeId) GetEntityData() *types.CommonEntityData {
    vmNodeId.EntityData.YFilter = vmNodeId.YFilter
    vmNodeId.EntityData.YangName = "vm-node-id"
    vmNodeId.EntityData.BundleName = "cisco_ios_xr"
    vmNodeId.EntityData.ParentYangName = "attributes"
    vmNodeId.EntityData.SegmentPath = "vm-node-id"
    vmNodeId.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/" + vmNodeId.EntityData.SegmentPath
    vmNodeId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vmNodeId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vmNodeId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vmNodeId.EntityData.Children = types.NewOrderedMap()
    vmNodeId.EntityData.Leafs = types.NewOrderedMap()
    vmNodeId.EntityData.Leafs.Append("vm-node-id", types.YLeaf{"VmNodeId", vmNodeId.VmNodeId})

    vmNodeId.EntityData.YListKeys = []string {}

    return &(vmNodeId.EntityData)
}

// Inventory_Entities_Entity_Attributes_Threshold
// Threshold
type Inventory_Entities_Entity_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Minor High.
    MinorHi Inventory_Entities_Entity_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Entities_Entity_Attributes_Threshold_MajorHi

    // Minor Low.
    MinorLo Inventory_Entities_Entity_Attributes_Threshold_MinorLo

    // Major Low.
    MajorLo Inventory_Entities_Entity_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Entities_Entity_Attributes_Threshold_CriticalHi

    // Critical Low.
    CriticalLo Inventory_Entities_Entity_Attributes_Threshold_CriticalLo
}

func (threshold *Inventory_Entities_Entity_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Entities_Entity_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Entities_Entity_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Entities_Entity_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Entities_Entity_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Entities_Entity_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Entities_Entity_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Entities_Entity_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Entities_Entity_Attributes_Threshold_MajorHi
// Major High
type Inventory_Entities_Entity_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Entities_Entity_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Entities_Entity_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Entities_Entity_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Entities_Entity_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Entities_Entity_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Entities_Entity_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Entities_Entity_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Entities_Entity_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Entities_Entity_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Entities_Entity_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Entities_Entity_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Entities_Entity_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Entities_Entity_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Entities_Entity_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Entities_Entity_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Entities_Entity_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Entities_Entity_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Entities_Entity_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Entities_Entity_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Entities_Entity_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Entities_Entity_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Entities_Entity_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Entities_Entity_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Entities_Entity_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Entities_Entity_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Entities_Entity_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Entities_Entity_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Entities_Entity_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Entities_Entity_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Entities_Entity_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Entities_Entity_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Entities_Entity_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Entities_Entity_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Entities_Entity_Attributes_VmDone
// VM Done Tuple
type Inventory_Entities_Entity_Attributes_VmDone struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VM Node Done Tuple. The type is interface{} with range: 0..255.
    VmNodeDone interface{}
}

func (vmDone *Inventory_Entities_Entity_Attributes_VmDone) GetEntityData() *types.CommonEntityData {
    vmDone.EntityData.YFilter = vmDone.YFilter
    vmDone.EntityData.YangName = "vm-done"
    vmDone.EntityData.BundleName = "cisco_ios_xr"
    vmDone.EntityData.ParentYangName = "attributes"
    vmDone.EntityData.SegmentPath = "vm-done"
    vmDone.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/" + vmDone.EntityData.SegmentPath
    vmDone.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vmDone.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vmDone.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vmDone.EntityData.Children = types.NewOrderedMap()
    vmDone.EntityData.Leafs = types.NewOrderedMap()
    vmDone.EntityData.Leafs.Append("vm-node-done", types.YLeaf{"VmNodeDone", vmDone.VmNodeDone})

    vmDone.EntityData.YListKeys = []string {}

    return &(vmDone.EntityData)
}

// Inventory_Entities_Entity_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Entities_Entity_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Entities_Entity_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Entities_Entity_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Entities_Entity_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Entities_Entity_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Entities_Entity_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Entities_Entity_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Entities_Entity_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Entities_Entity_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Entities_Entity_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Entities_Entity_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Entities_Entity_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Entities_Entity_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Entities_Entity_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Entities_Entity_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Entities_Entity_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Entities_Entity_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Entities_Entity_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Entities_Entity_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Entities_Entity_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Entities_Entity_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Entities_Entity_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Entities_Entity_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Entities_Entity_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Entities_Entity_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Entities_Entity_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Entities_Entity_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Entities_Entity_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Entities_Entity_Attributes_NodeId
// Node ID Tuple
type Inventory_Entities_Entity_Attributes_NodeId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Node Id Tuple. The type is interface{} with range: 0..4294967295.
    NodeId interface{}
}

func (nodeId *Inventory_Entities_Entity_Attributes_NodeId) GetEntityData() *types.CommonEntityData {
    nodeId.EntityData.YFilter = nodeId.YFilter
    nodeId.EntityData.YangName = "node-id"
    nodeId.EntityData.BundleName = "cisco_ios_xr"
    nodeId.EntityData.ParentYangName = "attributes"
    nodeId.EntityData.SegmentPath = "node-id"
    nodeId.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/" + nodeId.EntityData.SegmentPath
    nodeId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeId.EntityData.Children = types.NewOrderedMap()
    nodeId.EntityData.Leafs = types.NewOrderedMap()
    nodeId.EntityData.Leafs.Append("node-id", types.YLeaf{"NodeId", nodeId.NodeId})

    nodeId.EntityData.YListKeys = []string {}

    return &(nodeId.EntityData)
}

// Inventory_Entities_Entity_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Entities_Entity_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Entities_Entity_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Entities_Entity_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Entities_Entity_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Entities_Entity_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Entities_Entity_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Entities_Entity_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Entities_Entity_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Entities_Entity_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Entities_Entity_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/entities/entity/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks
// RackTable
type Inventory_Racks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Rack name. The type is slice of Inventory_Racks_Rack.
    Rack []*Inventory_Racks_Rack
}

func (racks *Inventory_Racks) GetEntityData() *types.CommonEntityData {
    racks.EntityData.YFilter = racks.YFilter
    racks.EntityData.YangName = "racks"
    racks.EntityData.BundleName = "cisco_ios_xr"
    racks.EntityData.ParentYangName = "inventory"
    racks.EntityData.SegmentPath = "racks"
    racks.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/" + racks.EntityData.SegmentPath
    racks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    racks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    racks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    racks.EntityData.Children = types.NewOrderedMap()
    racks.EntityData.Children.Append("rack", types.YChild{"Rack", nil})
    for i := range racks.Rack {
        racks.EntityData.Children.Append(types.GetSegmentPath(racks.Rack[i]), types.YChild{"Rack", racks.Rack[i]})
    }
    racks.EntityData.Leafs = types.NewOrderedMap()

    racks.EntityData.YListKeys = []string {}

    return &(racks.EntityData)
}

// Inventory_Racks_Rack
// Rack name
type Inventory_Racks_Rack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Rack name. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity information.
    Entity Inventory_Racks_Rack_Entity

    // Powershelf information.
    Powershelf Inventory_Racks_Rack_Powershelf

    // Fantray information.
    Fantray Inventory_Racks_Rack_Fantray

    // Attributes.
    Attributes Inventory_Racks_Rack_Attributes
}

func (rack *Inventory_Racks_Rack) GetEntityData() *types.CommonEntityData {
    rack.EntityData.YFilter = rack.YFilter
    rack.EntityData.YangName = "rack"
    rack.EntityData.BundleName = "cisco_ios_xr"
    rack.EntityData.ParentYangName = "racks"
    rack.EntityData.SegmentPath = "rack" + types.AddKeyToken(rack.Name, "name")
    rack.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/" + rack.EntityData.SegmentPath
    rack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rack.EntityData.Children = types.NewOrderedMap()
    rack.EntityData.Children.Append("entity", types.YChild{"Entity", &rack.Entity})
    rack.EntityData.Children.Append("powershelf", types.YChild{"Powershelf", &rack.Powershelf})
    rack.EntityData.Children.Append("fantray", types.YChild{"Fantray", &rack.Fantray})
    rack.EntityData.Children.Append("attributes", types.YChild{"Attributes", &rack.Attributes})
    rack.EntityData.Leafs = types.NewOrderedMap()
    rack.EntityData.Leafs.Append("name", types.YLeaf{"Name", rack.Name})

    rack.EntityData.YListKeys = []string {"Name"}

    return &(rack.EntityData)
}

// Inventory_Racks_Rack_Entity
// Entity information
type Inventory_Racks_Rack_Entity struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Slot number. The type is slice of Inventory_Racks_Rack_Entity_Slot.
    Slot []*Inventory_Racks_Rack_Entity_Slot
}

func (entity *Inventory_Racks_Rack_Entity) GetEntityData() *types.CommonEntityData {
    entity.EntityData.YFilter = entity.YFilter
    entity.EntityData.YangName = "entity"
    entity.EntityData.BundleName = "cisco_ios_xr"
    entity.EntityData.ParentYangName = "rack"
    entity.EntityData.SegmentPath = "entity"
    entity.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/" + entity.EntityData.SegmentPath
    entity.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    entity.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    entity.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    entity.EntityData.Children = types.NewOrderedMap()
    entity.EntityData.Children.Append("slot", types.YChild{"Slot", nil})
    for i := range entity.Slot {
        entity.EntityData.Children.Append(types.GetSegmentPath(entity.Slot[i]), types.YChild{"Slot", entity.Slot[i]})
    }
    entity.EntityData.Leafs = types.NewOrderedMap()

    entity.EntityData.YListKeys = []string {}

    return &(entity.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot
// Slot number
type Inventory_Racks_Rack_Entity_Slot struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Slot name. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 1.
    Tsi1s Inventory_Racks_Rack_Entity_Slot_Tsi1s

    // Attributes.
    Attributes Inventory_Racks_Rack_Entity_Slot_Attributes
}

func (slot *Inventory_Racks_Rack_Entity_Slot) GetEntityData() *types.CommonEntityData {
    slot.EntityData.YFilter = slot.YFilter
    slot.EntityData.YangName = "slot"
    slot.EntityData.BundleName = "cisco_ios_xr"
    slot.EntityData.ParentYangName = "entity"
    slot.EntityData.SegmentPath = "slot" + types.AddKeyToken(slot.Name, "name")
    slot.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/" + slot.EntityData.SegmentPath
    slot.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    slot.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    slot.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    slot.EntityData.Children = types.NewOrderedMap()
    slot.EntityData.Children.Append("tsi1s", types.YChild{"Tsi1s", &slot.Tsi1s})
    slot.EntityData.Children.Append("attributes", types.YChild{"Attributes", &slot.Attributes})
    slot.EntityData.Leafs = types.NewOrderedMap()
    slot.EntityData.Leafs.Append("name", types.YLeaf{"Name", slot.Name})

    slot.EntityData.YListKeys = []string {"Name"}

    return &(slot.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s
// Entity Level 1
type Inventory_Racks_Rack_Entity_Slot_Tsi1s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI1. The type is slice of Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1.
    Tsi1 []*Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1
}

func (tsi1s *Inventory_Racks_Rack_Entity_Slot_Tsi1s) GetEntityData() *types.CommonEntityData {
    tsi1s.EntityData.YFilter = tsi1s.YFilter
    tsi1s.EntityData.YangName = "tsi1s"
    tsi1s.EntityData.BundleName = "cisco_ios_xr"
    tsi1s.EntityData.ParentYangName = "slot"
    tsi1s.EntityData.SegmentPath = "tsi1s"
    tsi1s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/" + tsi1s.EntityData.SegmentPath
    tsi1s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi1s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi1s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi1s.EntityData.Children = types.NewOrderedMap()
    tsi1s.EntityData.Children.Append("tsi1", types.YChild{"Tsi1", nil})
    for i := range tsi1s.Tsi1 {
        tsi1s.EntityData.Children.Append(types.GetSegmentPath(tsi1s.Tsi1[i]), types.YChild{"Tsi1", tsi1s.Tsi1[i]})
    }
    tsi1s.EntityData.Leafs = types.NewOrderedMap()

    tsi1s.EntityData.YListKeys = []string {}

    return &(tsi1s.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1
// TSI1
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI1. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 2.
    Tsi2s Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s

    // Attributes.
    Attributes Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes
}

func (tsi1 *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1) GetEntityData() *types.CommonEntityData {
    tsi1.EntityData.YFilter = tsi1.YFilter
    tsi1.EntityData.YangName = "tsi1"
    tsi1.EntityData.BundleName = "cisco_ios_xr"
    tsi1.EntityData.ParentYangName = "tsi1s"
    tsi1.EntityData.SegmentPath = "tsi1" + types.AddKeyToken(tsi1.Name, "name")
    tsi1.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/" + tsi1.EntityData.SegmentPath
    tsi1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi1.EntityData.Children = types.NewOrderedMap()
    tsi1.EntityData.Children.Append("tsi2s", types.YChild{"Tsi2s", &tsi1.Tsi2s})
    tsi1.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi1.Attributes})
    tsi1.EntityData.Leafs = types.NewOrderedMap()
    tsi1.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi1.Name})

    tsi1.EntityData.YListKeys = []string {"Name"}

    return &(tsi1.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s
// Entity Level 2
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI2. The type is slice of
    // Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2.
    Tsi2 []*Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2
}

func (tsi2s *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s) GetEntityData() *types.CommonEntityData {
    tsi2s.EntityData.YFilter = tsi2s.YFilter
    tsi2s.EntityData.YangName = "tsi2s"
    tsi2s.EntityData.BundleName = "cisco_ios_xr"
    tsi2s.EntityData.ParentYangName = "tsi1"
    tsi2s.EntityData.SegmentPath = "tsi2s"
    tsi2s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/" + tsi2s.EntityData.SegmentPath
    tsi2s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi2s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi2s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi2s.EntityData.Children = types.NewOrderedMap()
    tsi2s.EntityData.Children.Append("tsi2", types.YChild{"Tsi2", nil})
    for i := range tsi2s.Tsi2 {
        tsi2s.EntityData.Children.Append(types.GetSegmentPath(tsi2s.Tsi2[i]), types.YChild{"Tsi2", tsi2s.Tsi2[i]})
    }
    tsi2s.EntityData.Leafs = types.NewOrderedMap()

    tsi2s.EntityData.YListKeys = []string {}

    return &(tsi2s.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2
// TSI2
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI2. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 3.
    Tsi3s Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s

    // Attributes.
    Attributes Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes
}

func (tsi2 *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2) GetEntityData() *types.CommonEntityData {
    tsi2.EntityData.YFilter = tsi2.YFilter
    tsi2.EntityData.YangName = "tsi2"
    tsi2.EntityData.BundleName = "cisco_ios_xr"
    tsi2.EntityData.ParentYangName = "tsi2s"
    tsi2.EntityData.SegmentPath = "tsi2" + types.AddKeyToken(tsi2.Name, "name")
    tsi2.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/" + tsi2.EntityData.SegmentPath
    tsi2.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi2.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi2.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi2.EntityData.Children = types.NewOrderedMap()
    tsi2.EntityData.Children.Append("tsi3s", types.YChild{"Tsi3s", &tsi2.Tsi3s})
    tsi2.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi2.Attributes})
    tsi2.EntityData.Leafs = types.NewOrderedMap()
    tsi2.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi2.Name})

    tsi2.EntityData.YListKeys = []string {"Name"}

    return &(tsi2.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s
// Entity Level 3
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI3. The type is slice of
    // Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3.
    Tsi3 []*Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3
}

func (tsi3s *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s) GetEntityData() *types.CommonEntityData {
    tsi3s.EntityData.YFilter = tsi3s.YFilter
    tsi3s.EntityData.YangName = "tsi3s"
    tsi3s.EntityData.BundleName = "cisco_ios_xr"
    tsi3s.EntityData.ParentYangName = "tsi2"
    tsi3s.EntityData.SegmentPath = "tsi3s"
    tsi3s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/" + tsi3s.EntityData.SegmentPath
    tsi3s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi3s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi3s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi3s.EntityData.Children = types.NewOrderedMap()
    tsi3s.EntityData.Children.Append("tsi3", types.YChild{"Tsi3", nil})
    for i := range tsi3s.Tsi3 {
        tsi3s.EntityData.Children.Append(types.GetSegmentPath(tsi3s.Tsi3[i]), types.YChild{"Tsi3", tsi3s.Tsi3[i]})
    }
    tsi3s.EntityData.Leafs = types.NewOrderedMap()

    tsi3s.EntityData.YListKeys = []string {}

    return &(tsi3s.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3
// TSI3
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI3. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 4.
    Tsi4s Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s

    // Attributes.
    Attributes Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes
}

func (tsi3 *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3) GetEntityData() *types.CommonEntityData {
    tsi3.EntityData.YFilter = tsi3.YFilter
    tsi3.EntityData.YangName = "tsi3"
    tsi3.EntityData.BundleName = "cisco_ios_xr"
    tsi3.EntityData.ParentYangName = "tsi3s"
    tsi3.EntityData.SegmentPath = "tsi3" + types.AddKeyToken(tsi3.Name, "name")
    tsi3.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/" + tsi3.EntityData.SegmentPath
    tsi3.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi3.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi3.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi3.EntityData.Children = types.NewOrderedMap()
    tsi3.EntityData.Children.Append("tsi4s", types.YChild{"Tsi4s", &tsi3.Tsi4s})
    tsi3.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi3.Attributes})
    tsi3.EntityData.Leafs = types.NewOrderedMap()
    tsi3.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi3.Name})

    tsi3.EntityData.YListKeys = []string {"Name"}

    return &(tsi3.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s
// Entity Level 4
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI4. The type is slice of
    // Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4.
    Tsi4 []*Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4
}

func (tsi4s *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s) GetEntityData() *types.CommonEntityData {
    tsi4s.EntityData.YFilter = tsi4s.YFilter
    tsi4s.EntityData.YangName = "tsi4s"
    tsi4s.EntityData.BundleName = "cisco_ios_xr"
    tsi4s.EntityData.ParentYangName = "tsi3"
    tsi4s.EntityData.SegmentPath = "tsi4s"
    tsi4s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/" + tsi4s.EntityData.SegmentPath
    tsi4s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi4s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi4s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi4s.EntityData.Children = types.NewOrderedMap()
    tsi4s.EntityData.Children.Append("tsi4", types.YChild{"Tsi4", nil})
    for i := range tsi4s.Tsi4 {
        tsi4s.EntityData.Children.Append(types.GetSegmentPath(tsi4s.Tsi4[i]), types.YChild{"Tsi4", tsi4s.Tsi4[i]})
    }
    tsi4s.EntityData.Leafs = types.NewOrderedMap()

    tsi4s.EntityData.YListKeys = []string {}

    return &(tsi4s.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4
// TSI4
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI4. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 5.
    Tsi5s Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s

    // Attributes.
    Attributes Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes
}

func (tsi4 *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4) GetEntityData() *types.CommonEntityData {
    tsi4.EntityData.YFilter = tsi4.YFilter
    tsi4.EntityData.YangName = "tsi4"
    tsi4.EntityData.BundleName = "cisco_ios_xr"
    tsi4.EntityData.ParentYangName = "tsi4s"
    tsi4.EntityData.SegmentPath = "tsi4" + types.AddKeyToken(tsi4.Name, "name")
    tsi4.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/" + tsi4.EntityData.SegmentPath
    tsi4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi4.EntityData.Children = types.NewOrderedMap()
    tsi4.EntityData.Children.Append("tsi5s", types.YChild{"Tsi5s", &tsi4.Tsi5s})
    tsi4.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi4.Attributes})
    tsi4.EntityData.Leafs = types.NewOrderedMap()
    tsi4.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi4.Name})

    tsi4.EntityData.YListKeys = []string {"Name"}

    return &(tsi4.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s
// Entity Level 5
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI5. The type is slice of
    // Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5.
    Tsi5 []*Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5
}

func (tsi5s *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s) GetEntityData() *types.CommonEntityData {
    tsi5s.EntityData.YFilter = tsi5s.YFilter
    tsi5s.EntityData.YangName = "tsi5s"
    tsi5s.EntityData.BundleName = "cisco_ios_xr"
    tsi5s.EntityData.ParentYangName = "tsi4"
    tsi5s.EntityData.SegmentPath = "tsi5s"
    tsi5s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/" + tsi5s.EntityData.SegmentPath
    tsi5s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi5s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi5s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi5s.EntityData.Children = types.NewOrderedMap()
    tsi5s.EntityData.Children.Append("tsi5", types.YChild{"Tsi5", nil})
    for i := range tsi5s.Tsi5 {
        tsi5s.EntityData.Children.Append(types.GetSegmentPath(tsi5s.Tsi5[i]), types.YChild{"Tsi5", tsi5s.Tsi5[i]})
    }
    tsi5s.EntityData.Leafs = types.NewOrderedMap()

    tsi5s.EntityData.YListKeys = []string {}

    return &(tsi5s.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5
// TSI5
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI5. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 6.
    Tsi6s Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s

    // Attributes.
    Attributes Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes
}

func (tsi5 *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5) GetEntityData() *types.CommonEntityData {
    tsi5.EntityData.YFilter = tsi5.YFilter
    tsi5.EntityData.YangName = "tsi5"
    tsi5.EntityData.BundleName = "cisco_ios_xr"
    tsi5.EntityData.ParentYangName = "tsi5s"
    tsi5.EntityData.SegmentPath = "tsi5" + types.AddKeyToken(tsi5.Name, "name")
    tsi5.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/" + tsi5.EntityData.SegmentPath
    tsi5.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi5.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi5.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi5.EntityData.Children = types.NewOrderedMap()
    tsi5.EntityData.Children.Append("tsi6s", types.YChild{"Tsi6s", &tsi5.Tsi6s})
    tsi5.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi5.Attributes})
    tsi5.EntityData.Leafs = types.NewOrderedMap()
    tsi5.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi5.Name})

    tsi5.EntityData.YListKeys = []string {"Name"}

    return &(tsi5.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s
// Entity Level 6
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI6. The type is slice of
    // Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6.
    Tsi6 []*Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6
}

func (tsi6s *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s) GetEntityData() *types.CommonEntityData {
    tsi6s.EntityData.YFilter = tsi6s.YFilter
    tsi6s.EntityData.YangName = "tsi6s"
    tsi6s.EntityData.BundleName = "cisco_ios_xr"
    tsi6s.EntityData.ParentYangName = "tsi5"
    tsi6s.EntityData.SegmentPath = "tsi6s"
    tsi6s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/" + tsi6s.EntityData.SegmentPath
    tsi6s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi6s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi6s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi6s.EntityData.Children = types.NewOrderedMap()
    tsi6s.EntityData.Children.Append("tsi6", types.YChild{"Tsi6", nil})
    for i := range tsi6s.Tsi6 {
        tsi6s.EntityData.Children.Append(types.GetSegmentPath(tsi6s.Tsi6[i]), types.YChild{"Tsi6", tsi6s.Tsi6[i]})
    }
    tsi6s.EntityData.Leafs = types.NewOrderedMap()

    tsi6s.EntityData.YListKeys = []string {}

    return &(tsi6s.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6
// TSI6
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI6. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 7.
    Tsi7s Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s

    // Attributes.
    Attributes Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes
}

func (tsi6 *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6) GetEntityData() *types.CommonEntityData {
    tsi6.EntityData.YFilter = tsi6.YFilter
    tsi6.EntityData.YangName = "tsi6"
    tsi6.EntityData.BundleName = "cisco_ios_xr"
    tsi6.EntityData.ParentYangName = "tsi6s"
    tsi6.EntityData.SegmentPath = "tsi6" + types.AddKeyToken(tsi6.Name, "name")
    tsi6.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/" + tsi6.EntityData.SegmentPath
    tsi6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi6.EntityData.Children = types.NewOrderedMap()
    tsi6.EntityData.Children.Append("tsi7s", types.YChild{"Tsi7s", &tsi6.Tsi7s})
    tsi6.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi6.Attributes})
    tsi6.EntityData.Leafs = types.NewOrderedMap()
    tsi6.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi6.Name})

    tsi6.EntityData.YListKeys = []string {"Name"}

    return &(tsi6.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s
// Entity Level 7
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI7. The type is slice of
    // Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7.
    Tsi7 []*Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7
}

func (tsi7s *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s) GetEntityData() *types.CommonEntityData {
    tsi7s.EntityData.YFilter = tsi7s.YFilter
    tsi7s.EntityData.YangName = "tsi7s"
    tsi7s.EntityData.BundleName = "cisco_ios_xr"
    tsi7s.EntityData.ParentYangName = "tsi6"
    tsi7s.EntityData.SegmentPath = "tsi7s"
    tsi7s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/" + tsi7s.EntityData.SegmentPath
    tsi7s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi7s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi7s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi7s.EntityData.Children = types.NewOrderedMap()
    tsi7s.EntityData.Children.Append("tsi7", types.YChild{"Tsi7", nil})
    for i := range tsi7s.Tsi7 {
        tsi7s.EntityData.Children.Append(types.GetSegmentPath(tsi7s.Tsi7[i]), types.YChild{"Tsi7", tsi7s.Tsi7[i]})
    }
    tsi7s.EntityData.Leafs = types.NewOrderedMap()

    tsi7s.EntityData.YListKeys = []string {}

    return &(tsi7s.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7
// TSI7
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI7. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 8.
    Tsi8s Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s

    // Attributes.
    Attributes Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes
}

func (tsi7 *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7) GetEntityData() *types.CommonEntityData {
    tsi7.EntityData.YFilter = tsi7.YFilter
    tsi7.EntityData.YangName = "tsi7"
    tsi7.EntityData.BundleName = "cisco_ios_xr"
    tsi7.EntityData.ParentYangName = "tsi7s"
    tsi7.EntityData.SegmentPath = "tsi7" + types.AddKeyToken(tsi7.Name, "name")
    tsi7.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/" + tsi7.EntityData.SegmentPath
    tsi7.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi7.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi7.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi7.EntityData.Children = types.NewOrderedMap()
    tsi7.EntityData.Children.Append("tsi8s", types.YChild{"Tsi8s", &tsi7.Tsi8s})
    tsi7.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi7.Attributes})
    tsi7.EntityData.Leafs = types.NewOrderedMap()
    tsi7.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi7.Name})

    tsi7.EntityData.YListKeys = []string {"Name"}

    return &(tsi7.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s
// Entity Level 8
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI8. The type is slice of
    // Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8.
    Tsi8 []*Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8
}

func (tsi8s *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s) GetEntityData() *types.CommonEntityData {
    tsi8s.EntityData.YFilter = tsi8s.YFilter
    tsi8s.EntityData.YangName = "tsi8s"
    tsi8s.EntityData.BundleName = "cisco_ios_xr"
    tsi8s.EntityData.ParentYangName = "tsi7"
    tsi8s.EntityData.SegmentPath = "tsi8s"
    tsi8s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/" + tsi8s.EntityData.SegmentPath
    tsi8s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi8s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi8s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi8s.EntityData.Children = types.NewOrderedMap()
    tsi8s.EntityData.Children.Append("tsi8", types.YChild{"Tsi8", nil})
    for i := range tsi8s.Tsi8 {
        tsi8s.EntityData.Children.Append(types.GetSegmentPath(tsi8s.Tsi8[i]), types.YChild{"Tsi8", tsi8s.Tsi8[i]})
    }
    tsi8s.EntityData.Leafs = types.NewOrderedMap()

    tsi8s.EntityData.YListKeys = []string {}

    return &(tsi8s.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8
// TSI8
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI8. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 9.
    Tsi9s Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s

    // Attributes.
    Attributes Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes
}

func (tsi8 *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8) GetEntityData() *types.CommonEntityData {
    tsi8.EntityData.YFilter = tsi8.YFilter
    tsi8.EntityData.YangName = "tsi8"
    tsi8.EntityData.BundleName = "cisco_ios_xr"
    tsi8.EntityData.ParentYangName = "tsi8s"
    tsi8.EntityData.SegmentPath = "tsi8" + types.AddKeyToken(tsi8.Name, "name")
    tsi8.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/" + tsi8.EntityData.SegmentPath
    tsi8.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi8.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi8.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi8.EntityData.Children = types.NewOrderedMap()
    tsi8.EntityData.Children.Append("tsi9s", types.YChild{"Tsi9s", &tsi8.Tsi9s})
    tsi8.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi8.Attributes})
    tsi8.EntityData.Leafs = types.NewOrderedMap()
    tsi8.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi8.Name})

    tsi8.EntityData.YListKeys = []string {"Name"}

    return &(tsi8.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s
// Entity Level 9
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI9. The type is slice of
    // Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9.
    Tsi9 []*Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9
}

func (tsi9s *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s) GetEntityData() *types.CommonEntityData {
    tsi9s.EntityData.YFilter = tsi9s.YFilter
    tsi9s.EntityData.YangName = "tsi9s"
    tsi9s.EntityData.BundleName = "cisco_ios_xr"
    tsi9s.EntityData.ParentYangName = "tsi8"
    tsi9s.EntityData.SegmentPath = "tsi9s"
    tsi9s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/" + tsi9s.EntityData.SegmentPath
    tsi9s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi9s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi9s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi9s.EntityData.Children = types.NewOrderedMap()
    tsi9s.EntityData.Children.Append("tsi9", types.YChild{"Tsi9", nil})
    for i := range tsi9s.Tsi9 {
        tsi9s.EntityData.Children.Append(types.GetSegmentPath(tsi9s.Tsi9[i]), types.YChild{"Tsi9", tsi9s.Tsi9[i]})
    }
    tsi9s.EntityData.Leafs = types.NewOrderedMap()

    tsi9s.EntityData.YListKeys = []string {}

    return &(tsi9s.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9
// TSI9
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI9. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 10.
    Tsi10s Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s

    // Attributes.
    Attributes Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes
}

func (tsi9 *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9) GetEntityData() *types.CommonEntityData {
    tsi9.EntityData.YFilter = tsi9.YFilter
    tsi9.EntityData.YangName = "tsi9"
    tsi9.EntityData.BundleName = "cisco_ios_xr"
    tsi9.EntityData.ParentYangName = "tsi9s"
    tsi9.EntityData.SegmentPath = "tsi9" + types.AddKeyToken(tsi9.Name, "name")
    tsi9.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/" + tsi9.EntityData.SegmentPath
    tsi9.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi9.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi9.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi9.EntityData.Children = types.NewOrderedMap()
    tsi9.EntityData.Children.Append("tsi10s", types.YChild{"Tsi10s", &tsi9.Tsi10s})
    tsi9.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi9.Attributes})
    tsi9.EntityData.Leafs = types.NewOrderedMap()
    tsi9.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi9.Name})

    tsi9.EntityData.YListKeys = []string {"Name"}

    return &(tsi9.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s
// Entity Level 10
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI10. The type is slice of
    // Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10.
    Tsi10 []*Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10
}

func (tsi10s *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s) GetEntityData() *types.CommonEntityData {
    tsi10s.EntityData.YFilter = tsi10s.YFilter
    tsi10s.EntityData.YangName = "tsi10s"
    tsi10s.EntityData.BundleName = "cisco_ios_xr"
    tsi10s.EntityData.ParentYangName = "tsi9"
    tsi10s.EntityData.SegmentPath = "tsi10s"
    tsi10s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/" + tsi10s.EntityData.SegmentPath
    tsi10s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi10s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi10s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi10s.EntityData.Children = types.NewOrderedMap()
    tsi10s.EntityData.Children.Append("tsi10", types.YChild{"Tsi10", nil})
    for i := range tsi10s.Tsi10 {
        tsi10s.EntityData.Children.Append(types.GetSegmentPath(tsi10s.Tsi10[i]), types.YChild{"Tsi10", tsi10s.Tsi10[i]})
    }
    tsi10s.EntityData.Leafs = types.NewOrderedMap()

    tsi10s.EntityData.YListKeys = []string {}

    return &(tsi10s.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10
// TSI10
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI10. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 11.
    Tsi11s Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s

    // Attributes.
    Attributes Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes
}

func (tsi10 *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10) GetEntityData() *types.CommonEntityData {
    tsi10.EntityData.YFilter = tsi10.YFilter
    tsi10.EntityData.YangName = "tsi10"
    tsi10.EntityData.BundleName = "cisco_ios_xr"
    tsi10.EntityData.ParentYangName = "tsi10s"
    tsi10.EntityData.SegmentPath = "tsi10" + types.AddKeyToken(tsi10.Name, "name")
    tsi10.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/" + tsi10.EntityData.SegmentPath
    tsi10.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi10.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi10.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi10.EntityData.Children = types.NewOrderedMap()
    tsi10.EntityData.Children.Append("tsi11s", types.YChild{"Tsi11s", &tsi10.Tsi11s})
    tsi10.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi10.Attributes})
    tsi10.EntityData.Leafs = types.NewOrderedMap()
    tsi10.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi10.Name})

    tsi10.EntityData.YListKeys = []string {"Name"}

    return &(tsi10.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s
// Entity Level 11
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI11. The type is slice of
    // Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11.
    Tsi11 []*Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11
}

func (tsi11s *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s) GetEntityData() *types.CommonEntityData {
    tsi11s.EntityData.YFilter = tsi11s.YFilter
    tsi11s.EntityData.YangName = "tsi11s"
    tsi11s.EntityData.BundleName = "cisco_ios_xr"
    tsi11s.EntityData.ParentYangName = "tsi10"
    tsi11s.EntityData.SegmentPath = "tsi11s"
    tsi11s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/" + tsi11s.EntityData.SegmentPath
    tsi11s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi11s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi11s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi11s.EntityData.Children = types.NewOrderedMap()
    tsi11s.EntityData.Children.Append("tsi11", types.YChild{"Tsi11", nil})
    for i := range tsi11s.Tsi11 {
        tsi11s.EntityData.Children.Append(types.GetSegmentPath(tsi11s.Tsi11[i]), types.YChild{"Tsi11", tsi11s.Tsi11[i]})
    }
    tsi11s.EntityData.Leafs = types.NewOrderedMap()

    tsi11s.EntityData.YListKeys = []string {}

    return &(tsi11s.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11
// TSI11
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI11. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Attributes.
    Attributes Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes
}

func (tsi11 *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11) GetEntityData() *types.CommonEntityData {
    tsi11.EntityData.YFilter = tsi11.YFilter
    tsi11.EntityData.YangName = "tsi11"
    tsi11.EntityData.BundleName = "cisco_ios_xr"
    tsi11.EntityData.ParentYangName = "tsi11s"
    tsi11.EntityData.SegmentPath = "tsi11" + types.AddKeyToken(tsi11.Name, "name")
    tsi11.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/" + tsi11.EntityData.SegmentPath
    tsi11.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi11.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi11.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi11.EntityData.Children = types.NewOrderedMap()
    tsi11.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi11.Attributes})
    tsi11.EntityData.Leafs = types.NewOrderedMap()
    tsi11.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi11.Name})

    tsi11.EntityData.YListKeys = []string {"Name"}

    return &(tsi11.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes
// Attributes
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi11"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes
// Attributes
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi10"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes
// Attributes
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi9"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes
// Attributes
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi8"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes
// Attributes
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi7"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes
// Attributes
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi6"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes
// Attributes
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi5"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes
// Attributes
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi4"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes
// Attributes
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi3"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes
// Attributes
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi2"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes
// Attributes
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi1"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Entity_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/tsi1s/tsi1/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes
// Attributes
type Inventory_Racks_Rack_Entity_Slot_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Entity_Slot_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Entity_Slot_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Entity_Slot_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Entity_Slot_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Entity_Slot_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Entity_Slot_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Entity_Slot_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Entity_Slot_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "slot"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Entity_Slot_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Entity_Slot_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Entity_Slot_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Entity_Slot_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Entity_Slot_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Entity_Slot_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Entity_Slot_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Entity_Slot_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Entity_Slot_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Entity_Slot_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Entity_Slot_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Entity_Slot_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Entity_Slot_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Entity_Slot_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Entity_Slot_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Entity_Slot_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Entity_Slot_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Entity_Slot_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Entity_Slot_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Entity_Slot_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Entity_Slot_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Entity_Slot_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Entity_Slot_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Entity_Slot_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Entity_Slot_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Entity_Slot_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Entity_Slot_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Entity_Slot_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Entity_Slot_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Entity_Slot_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Entity_Slot_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Entity_Slot_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Entity_Slot_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Entity_Slot_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Entity_Slot_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/entity/slot/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Powershelf
// Powershelf information
type Inventory_Racks_Rack_Powershelf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Slot number. The type is slice of Inventory_Racks_Rack_Powershelf_Slot.
    Slot []*Inventory_Racks_Rack_Powershelf_Slot
}

func (powershelf *Inventory_Racks_Rack_Powershelf) GetEntityData() *types.CommonEntityData {
    powershelf.EntityData.YFilter = powershelf.YFilter
    powershelf.EntityData.YangName = "powershelf"
    powershelf.EntityData.BundleName = "cisco_ios_xr"
    powershelf.EntityData.ParentYangName = "rack"
    powershelf.EntityData.SegmentPath = "powershelf"
    powershelf.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/" + powershelf.EntityData.SegmentPath
    powershelf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    powershelf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    powershelf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    powershelf.EntityData.Children = types.NewOrderedMap()
    powershelf.EntityData.Children.Append("slot", types.YChild{"Slot", nil})
    for i := range powershelf.Slot {
        powershelf.EntityData.Children.Append(types.GetSegmentPath(powershelf.Slot[i]), types.YChild{"Slot", powershelf.Slot[i]})
    }
    powershelf.EntityData.Leafs = types.NewOrderedMap()

    powershelf.EntityData.YListKeys = []string {}

    return &(powershelf.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot
// Slot number
type Inventory_Racks_Rack_Powershelf_Slot struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Slot name. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 1.
    Tsi1s Inventory_Racks_Rack_Powershelf_Slot_Tsi1s

    // Attributes.
    Attributes Inventory_Racks_Rack_Powershelf_Slot_Attributes
}

func (slot *Inventory_Racks_Rack_Powershelf_Slot) GetEntityData() *types.CommonEntityData {
    slot.EntityData.YFilter = slot.YFilter
    slot.EntityData.YangName = "slot"
    slot.EntityData.BundleName = "cisco_ios_xr"
    slot.EntityData.ParentYangName = "powershelf"
    slot.EntityData.SegmentPath = "slot" + types.AddKeyToken(slot.Name, "name")
    slot.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/" + slot.EntityData.SegmentPath
    slot.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    slot.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    slot.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    slot.EntityData.Children = types.NewOrderedMap()
    slot.EntityData.Children.Append("tsi1s", types.YChild{"Tsi1s", &slot.Tsi1s})
    slot.EntityData.Children.Append("attributes", types.YChild{"Attributes", &slot.Attributes})
    slot.EntityData.Leafs = types.NewOrderedMap()
    slot.EntityData.Leafs.Append("name", types.YLeaf{"Name", slot.Name})

    slot.EntityData.YListKeys = []string {"Name"}

    return &(slot.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s
// Entity Level 1
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI1. The type is slice of Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1.
    Tsi1 []*Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1
}

func (tsi1s *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s) GetEntityData() *types.CommonEntityData {
    tsi1s.EntityData.YFilter = tsi1s.YFilter
    tsi1s.EntityData.YangName = "tsi1s"
    tsi1s.EntityData.BundleName = "cisco_ios_xr"
    tsi1s.EntityData.ParentYangName = "slot"
    tsi1s.EntityData.SegmentPath = "tsi1s"
    tsi1s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/" + tsi1s.EntityData.SegmentPath
    tsi1s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi1s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi1s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi1s.EntityData.Children = types.NewOrderedMap()
    tsi1s.EntityData.Children.Append("tsi1", types.YChild{"Tsi1", nil})
    for i := range tsi1s.Tsi1 {
        tsi1s.EntityData.Children.Append(types.GetSegmentPath(tsi1s.Tsi1[i]), types.YChild{"Tsi1", tsi1s.Tsi1[i]})
    }
    tsi1s.EntityData.Leafs = types.NewOrderedMap()

    tsi1s.EntityData.YListKeys = []string {}

    return &(tsi1s.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1
// TSI1
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI1. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 2.
    Tsi2s Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s

    // Attributes.
    Attributes Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes
}

func (tsi1 *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1) GetEntityData() *types.CommonEntityData {
    tsi1.EntityData.YFilter = tsi1.YFilter
    tsi1.EntityData.YangName = "tsi1"
    tsi1.EntityData.BundleName = "cisco_ios_xr"
    tsi1.EntityData.ParentYangName = "tsi1s"
    tsi1.EntityData.SegmentPath = "tsi1" + types.AddKeyToken(tsi1.Name, "name")
    tsi1.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/" + tsi1.EntityData.SegmentPath
    tsi1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi1.EntityData.Children = types.NewOrderedMap()
    tsi1.EntityData.Children.Append("tsi2s", types.YChild{"Tsi2s", &tsi1.Tsi2s})
    tsi1.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi1.Attributes})
    tsi1.EntityData.Leafs = types.NewOrderedMap()
    tsi1.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi1.Name})

    tsi1.EntityData.YListKeys = []string {"Name"}

    return &(tsi1.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s
// Entity Level 2
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI2. The type is slice of
    // Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2.
    Tsi2 []*Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2
}

func (tsi2s *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s) GetEntityData() *types.CommonEntityData {
    tsi2s.EntityData.YFilter = tsi2s.YFilter
    tsi2s.EntityData.YangName = "tsi2s"
    tsi2s.EntityData.BundleName = "cisco_ios_xr"
    tsi2s.EntityData.ParentYangName = "tsi1"
    tsi2s.EntityData.SegmentPath = "tsi2s"
    tsi2s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/" + tsi2s.EntityData.SegmentPath
    tsi2s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi2s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi2s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi2s.EntityData.Children = types.NewOrderedMap()
    tsi2s.EntityData.Children.Append("tsi2", types.YChild{"Tsi2", nil})
    for i := range tsi2s.Tsi2 {
        tsi2s.EntityData.Children.Append(types.GetSegmentPath(tsi2s.Tsi2[i]), types.YChild{"Tsi2", tsi2s.Tsi2[i]})
    }
    tsi2s.EntityData.Leafs = types.NewOrderedMap()

    tsi2s.EntityData.YListKeys = []string {}

    return &(tsi2s.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2
// TSI2
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI2. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 3.
    Tsi3s Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s

    // Attributes.
    Attributes Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes
}

func (tsi2 *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2) GetEntityData() *types.CommonEntityData {
    tsi2.EntityData.YFilter = tsi2.YFilter
    tsi2.EntityData.YangName = "tsi2"
    tsi2.EntityData.BundleName = "cisco_ios_xr"
    tsi2.EntityData.ParentYangName = "tsi2s"
    tsi2.EntityData.SegmentPath = "tsi2" + types.AddKeyToken(tsi2.Name, "name")
    tsi2.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/" + tsi2.EntityData.SegmentPath
    tsi2.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi2.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi2.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi2.EntityData.Children = types.NewOrderedMap()
    tsi2.EntityData.Children.Append("tsi3s", types.YChild{"Tsi3s", &tsi2.Tsi3s})
    tsi2.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi2.Attributes})
    tsi2.EntityData.Leafs = types.NewOrderedMap()
    tsi2.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi2.Name})

    tsi2.EntityData.YListKeys = []string {"Name"}

    return &(tsi2.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s
// Entity Level 3
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI3. The type is slice of
    // Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3.
    Tsi3 []*Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3
}

func (tsi3s *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s) GetEntityData() *types.CommonEntityData {
    tsi3s.EntityData.YFilter = tsi3s.YFilter
    tsi3s.EntityData.YangName = "tsi3s"
    tsi3s.EntityData.BundleName = "cisco_ios_xr"
    tsi3s.EntityData.ParentYangName = "tsi2"
    tsi3s.EntityData.SegmentPath = "tsi3s"
    tsi3s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/" + tsi3s.EntityData.SegmentPath
    tsi3s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi3s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi3s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi3s.EntityData.Children = types.NewOrderedMap()
    tsi3s.EntityData.Children.Append("tsi3", types.YChild{"Tsi3", nil})
    for i := range tsi3s.Tsi3 {
        tsi3s.EntityData.Children.Append(types.GetSegmentPath(tsi3s.Tsi3[i]), types.YChild{"Tsi3", tsi3s.Tsi3[i]})
    }
    tsi3s.EntityData.Leafs = types.NewOrderedMap()

    tsi3s.EntityData.YListKeys = []string {}

    return &(tsi3s.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3
// TSI3
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI3. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 4.
    Tsi4s Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s

    // Attributes.
    Attributes Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes
}

func (tsi3 *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3) GetEntityData() *types.CommonEntityData {
    tsi3.EntityData.YFilter = tsi3.YFilter
    tsi3.EntityData.YangName = "tsi3"
    tsi3.EntityData.BundleName = "cisco_ios_xr"
    tsi3.EntityData.ParentYangName = "tsi3s"
    tsi3.EntityData.SegmentPath = "tsi3" + types.AddKeyToken(tsi3.Name, "name")
    tsi3.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/" + tsi3.EntityData.SegmentPath
    tsi3.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi3.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi3.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi3.EntityData.Children = types.NewOrderedMap()
    tsi3.EntityData.Children.Append("tsi4s", types.YChild{"Tsi4s", &tsi3.Tsi4s})
    tsi3.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi3.Attributes})
    tsi3.EntityData.Leafs = types.NewOrderedMap()
    tsi3.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi3.Name})

    tsi3.EntityData.YListKeys = []string {"Name"}

    return &(tsi3.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s
// Entity Level 4
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI4. The type is slice of
    // Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4.
    Tsi4 []*Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4
}

func (tsi4s *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s) GetEntityData() *types.CommonEntityData {
    tsi4s.EntityData.YFilter = tsi4s.YFilter
    tsi4s.EntityData.YangName = "tsi4s"
    tsi4s.EntityData.BundleName = "cisco_ios_xr"
    tsi4s.EntityData.ParentYangName = "tsi3"
    tsi4s.EntityData.SegmentPath = "tsi4s"
    tsi4s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/" + tsi4s.EntityData.SegmentPath
    tsi4s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi4s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi4s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi4s.EntityData.Children = types.NewOrderedMap()
    tsi4s.EntityData.Children.Append("tsi4", types.YChild{"Tsi4", nil})
    for i := range tsi4s.Tsi4 {
        tsi4s.EntityData.Children.Append(types.GetSegmentPath(tsi4s.Tsi4[i]), types.YChild{"Tsi4", tsi4s.Tsi4[i]})
    }
    tsi4s.EntityData.Leafs = types.NewOrderedMap()

    tsi4s.EntityData.YListKeys = []string {}

    return &(tsi4s.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4
// TSI4
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI4. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 5.
    Tsi5s Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s

    // Attributes.
    Attributes Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes
}

func (tsi4 *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4) GetEntityData() *types.CommonEntityData {
    tsi4.EntityData.YFilter = tsi4.YFilter
    tsi4.EntityData.YangName = "tsi4"
    tsi4.EntityData.BundleName = "cisco_ios_xr"
    tsi4.EntityData.ParentYangName = "tsi4s"
    tsi4.EntityData.SegmentPath = "tsi4" + types.AddKeyToken(tsi4.Name, "name")
    tsi4.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/" + tsi4.EntityData.SegmentPath
    tsi4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi4.EntityData.Children = types.NewOrderedMap()
    tsi4.EntityData.Children.Append("tsi5s", types.YChild{"Tsi5s", &tsi4.Tsi5s})
    tsi4.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi4.Attributes})
    tsi4.EntityData.Leafs = types.NewOrderedMap()
    tsi4.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi4.Name})

    tsi4.EntityData.YListKeys = []string {"Name"}

    return &(tsi4.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s
// Entity Level 5
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI5. The type is slice of
    // Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5.
    Tsi5 []*Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5
}

func (tsi5s *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s) GetEntityData() *types.CommonEntityData {
    tsi5s.EntityData.YFilter = tsi5s.YFilter
    tsi5s.EntityData.YangName = "tsi5s"
    tsi5s.EntityData.BundleName = "cisco_ios_xr"
    tsi5s.EntityData.ParentYangName = "tsi4"
    tsi5s.EntityData.SegmentPath = "tsi5s"
    tsi5s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/" + tsi5s.EntityData.SegmentPath
    tsi5s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi5s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi5s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi5s.EntityData.Children = types.NewOrderedMap()
    tsi5s.EntityData.Children.Append("tsi5", types.YChild{"Tsi5", nil})
    for i := range tsi5s.Tsi5 {
        tsi5s.EntityData.Children.Append(types.GetSegmentPath(tsi5s.Tsi5[i]), types.YChild{"Tsi5", tsi5s.Tsi5[i]})
    }
    tsi5s.EntityData.Leafs = types.NewOrderedMap()

    tsi5s.EntityData.YListKeys = []string {}

    return &(tsi5s.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5
// TSI5
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI5. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 6.
    Tsi6s Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s

    // Attributes.
    Attributes Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes
}

func (tsi5 *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5) GetEntityData() *types.CommonEntityData {
    tsi5.EntityData.YFilter = tsi5.YFilter
    tsi5.EntityData.YangName = "tsi5"
    tsi5.EntityData.BundleName = "cisco_ios_xr"
    tsi5.EntityData.ParentYangName = "tsi5s"
    tsi5.EntityData.SegmentPath = "tsi5" + types.AddKeyToken(tsi5.Name, "name")
    tsi5.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/" + tsi5.EntityData.SegmentPath
    tsi5.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi5.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi5.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi5.EntityData.Children = types.NewOrderedMap()
    tsi5.EntityData.Children.Append("tsi6s", types.YChild{"Tsi6s", &tsi5.Tsi6s})
    tsi5.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi5.Attributes})
    tsi5.EntityData.Leafs = types.NewOrderedMap()
    tsi5.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi5.Name})

    tsi5.EntityData.YListKeys = []string {"Name"}

    return &(tsi5.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s
// Entity Level 6
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI6. The type is slice of
    // Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6.
    Tsi6 []*Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6
}

func (tsi6s *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s) GetEntityData() *types.CommonEntityData {
    tsi6s.EntityData.YFilter = tsi6s.YFilter
    tsi6s.EntityData.YangName = "tsi6s"
    tsi6s.EntityData.BundleName = "cisco_ios_xr"
    tsi6s.EntityData.ParentYangName = "tsi5"
    tsi6s.EntityData.SegmentPath = "tsi6s"
    tsi6s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/" + tsi6s.EntityData.SegmentPath
    tsi6s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi6s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi6s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi6s.EntityData.Children = types.NewOrderedMap()
    tsi6s.EntityData.Children.Append("tsi6", types.YChild{"Tsi6", nil})
    for i := range tsi6s.Tsi6 {
        tsi6s.EntityData.Children.Append(types.GetSegmentPath(tsi6s.Tsi6[i]), types.YChild{"Tsi6", tsi6s.Tsi6[i]})
    }
    tsi6s.EntityData.Leafs = types.NewOrderedMap()

    tsi6s.EntityData.YListKeys = []string {}

    return &(tsi6s.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6
// TSI6
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI6. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 7.
    Tsi7s Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s

    // Attributes.
    Attributes Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes
}

func (tsi6 *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6) GetEntityData() *types.CommonEntityData {
    tsi6.EntityData.YFilter = tsi6.YFilter
    tsi6.EntityData.YangName = "tsi6"
    tsi6.EntityData.BundleName = "cisco_ios_xr"
    tsi6.EntityData.ParentYangName = "tsi6s"
    tsi6.EntityData.SegmentPath = "tsi6" + types.AddKeyToken(tsi6.Name, "name")
    tsi6.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/" + tsi6.EntityData.SegmentPath
    tsi6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi6.EntityData.Children = types.NewOrderedMap()
    tsi6.EntityData.Children.Append("tsi7s", types.YChild{"Tsi7s", &tsi6.Tsi7s})
    tsi6.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi6.Attributes})
    tsi6.EntityData.Leafs = types.NewOrderedMap()
    tsi6.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi6.Name})

    tsi6.EntityData.YListKeys = []string {"Name"}

    return &(tsi6.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s
// Entity Level 7
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI7. The type is slice of
    // Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7.
    Tsi7 []*Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7
}

func (tsi7s *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s) GetEntityData() *types.CommonEntityData {
    tsi7s.EntityData.YFilter = tsi7s.YFilter
    tsi7s.EntityData.YangName = "tsi7s"
    tsi7s.EntityData.BundleName = "cisco_ios_xr"
    tsi7s.EntityData.ParentYangName = "tsi6"
    tsi7s.EntityData.SegmentPath = "tsi7s"
    tsi7s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/" + tsi7s.EntityData.SegmentPath
    tsi7s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi7s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi7s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi7s.EntityData.Children = types.NewOrderedMap()
    tsi7s.EntityData.Children.Append("tsi7", types.YChild{"Tsi7", nil})
    for i := range tsi7s.Tsi7 {
        tsi7s.EntityData.Children.Append(types.GetSegmentPath(tsi7s.Tsi7[i]), types.YChild{"Tsi7", tsi7s.Tsi7[i]})
    }
    tsi7s.EntityData.Leafs = types.NewOrderedMap()

    tsi7s.EntityData.YListKeys = []string {}

    return &(tsi7s.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7
// TSI7
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI7. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 8.
    Tsi8s Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s

    // Attributes.
    Attributes Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes
}

func (tsi7 *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7) GetEntityData() *types.CommonEntityData {
    tsi7.EntityData.YFilter = tsi7.YFilter
    tsi7.EntityData.YangName = "tsi7"
    tsi7.EntityData.BundleName = "cisco_ios_xr"
    tsi7.EntityData.ParentYangName = "tsi7s"
    tsi7.EntityData.SegmentPath = "tsi7" + types.AddKeyToken(tsi7.Name, "name")
    tsi7.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/" + tsi7.EntityData.SegmentPath
    tsi7.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi7.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi7.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi7.EntityData.Children = types.NewOrderedMap()
    tsi7.EntityData.Children.Append("tsi8s", types.YChild{"Tsi8s", &tsi7.Tsi8s})
    tsi7.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi7.Attributes})
    tsi7.EntityData.Leafs = types.NewOrderedMap()
    tsi7.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi7.Name})

    tsi7.EntityData.YListKeys = []string {"Name"}

    return &(tsi7.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s
// Entity Level 8
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI8. The type is slice of
    // Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8.
    Tsi8 []*Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8
}

func (tsi8s *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s) GetEntityData() *types.CommonEntityData {
    tsi8s.EntityData.YFilter = tsi8s.YFilter
    tsi8s.EntityData.YangName = "tsi8s"
    tsi8s.EntityData.BundleName = "cisco_ios_xr"
    tsi8s.EntityData.ParentYangName = "tsi7"
    tsi8s.EntityData.SegmentPath = "tsi8s"
    tsi8s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/" + tsi8s.EntityData.SegmentPath
    tsi8s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi8s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi8s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi8s.EntityData.Children = types.NewOrderedMap()
    tsi8s.EntityData.Children.Append("tsi8", types.YChild{"Tsi8", nil})
    for i := range tsi8s.Tsi8 {
        tsi8s.EntityData.Children.Append(types.GetSegmentPath(tsi8s.Tsi8[i]), types.YChild{"Tsi8", tsi8s.Tsi8[i]})
    }
    tsi8s.EntityData.Leafs = types.NewOrderedMap()

    tsi8s.EntityData.YListKeys = []string {}

    return &(tsi8s.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8
// TSI8
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI8. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 9.
    Tsi9s Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s

    // Attributes.
    Attributes Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes
}

func (tsi8 *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8) GetEntityData() *types.CommonEntityData {
    tsi8.EntityData.YFilter = tsi8.YFilter
    tsi8.EntityData.YangName = "tsi8"
    tsi8.EntityData.BundleName = "cisco_ios_xr"
    tsi8.EntityData.ParentYangName = "tsi8s"
    tsi8.EntityData.SegmentPath = "tsi8" + types.AddKeyToken(tsi8.Name, "name")
    tsi8.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/" + tsi8.EntityData.SegmentPath
    tsi8.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi8.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi8.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi8.EntityData.Children = types.NewOrderedMap()
    tsi8.EntityData.Children.Append("tsi9s", types.YChild{"Tsi9s", &tsi8.Tsi9s})
    tsi8.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi8.Attributes})
    tsi8.EntityData.Leafs = types.NewOrderedMap()
    tsi8.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi8.Name})

    tsi8.EntityData.YListKeys = []string {"Name"}

    return &(tsi8.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s
// Entity Level 9
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI9. The type is slice of
    // Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9.
    Tsi9 []*Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9
}

func (tsi9s *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s) GetEntityData() *types.CommonEntityData {
    tsi9s.EntityData.YFilter = tsi9s.YFilter
    tsi9s.EntityData.YangName = "tsi9s"
    tsi9s.EntityData.BundleName = "cisco_ios_xr"
    tsi9s.EntityData.ParentYangName = "tsi8"
    tsi9s.EntityData.SegmentPath = "tsi9s"
    tsi9s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/" + tsi9s.EntityData.SegmentPath
    tsi9s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi9s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi9s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi9s.EntityData.Children = types.NewOrderedMap()
    tsi9s.EntityData.Children.Append("tsi9", types.YChild{"Tsi9", nil})
    for i := range tsi9s.Tsi9 {
        tsi9s.EntityData.Children.Append(types.GetSegmentPath(tsi9s.Tsi9[i]), types.YChild{"Tsi9", tsi9s.Tsi9[i]})
    }
    tsi9s.EntityData.Leafs = types.NewOrderedMap()

    tsi9s.EntityData.YListKeys = []string {}

    return &(tsi9s.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9
// TSI9
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI9. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 10.
    Tsi10s Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s

    // Attributes.
    Attributes Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes
}

func (tsi9 *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9) GetEntityData() *types.CommonEntityData {
    tsi9.EntityData.YFilter = tsi9.YFilter
    tsi9.EntityData.YangName = "tsi9"
    tsi9.EntityData.BundleName = "cisco_ios_xr"
    tsi9.EntityData.ParentYangName = "tsi9s"
    tsi9.EntityData.SegmentPath = "tsi9" + types.AddKeyToken(tsi9.Name, "name")
    tsi9.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/" + tsi9.EntityData.SegmentPath
    tsi9.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi9.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi9.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi9.EntityData.Children = types.NewOrderedMap()
    tsi9.EntityData.Children.Append("tsi10s", types.YChild{"Tsi10s", &tsi9.Tsi10s})
    tsi9.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi9.Attributes})
    tsi9.EntityData.Leafs = types.NewOrderedMap()
    tsi9.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi9.Name})

    tsi9.EntityData.YListKeys = []string {"Name"}

    return &(tsi9.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s
// Entity Level 10
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI10. The type is slice of
    // Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10.
    Tsi10 []*Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10
}

func (tsi10s *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s) GetEntityData() *types.CommonEntityData {
    tsi10s.EntityData.YFilter = tsi10s.YFilter
    tsi10s.EntityData.YangName = "tsi10s"
    tsi10s.EntityData.BundleName = "cisco_ios_xr"
    tsi10s.EntityData.ParentYangName = "tsi9"
    tsi10s.EntityData.SegmentPath = "tsi10s"
    tsi10s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/" + tsi10s.EntityData.SegmentPath
    tsi10s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi10s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi10s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi10s.EntityData.Children = types.NewOrderedMap()
    tsi10s.EntityData.Children.Append("tsi10", types.YChild{"Tsi10", nil})
    for i := range tsi10s.Tsi10 {
        tsi10s.EntityData.Children.Append(types.GetSegmentPath(tsi10s.Tsi10[i]), types.YChild{"Tsi10", tsi10s.Tsi10[i]})
    }
    tsi10s.EntityData.Leafs = types.NewOrderedMap()

    tsi10s.EntityData.YListKeys = []string {}

    return &(tsi10s.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10
// TSI10
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI10. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 11.
    Tsi11s Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s

    // Attributes.
    Attributes Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes
}

func (tsi10 *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10) GetEntityData() *types.CommonEntityData {
    tsi10.EntityData.YFilter = tsi10.YFilter
    tsi10.EntityData.YangName = "tsi10"
    tsi10.EntityData.BundleName = "cisco_ios_xr"
    tsi10.EntityData.ParentYangName = "tsi10s"
    tsi10.EntityData.SegmentPath = "tsi10" + types.AddKeyToken(tsi10.Name, "name")
    tsi10.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/" + tsi10.EntityData.SegmentPath
    tsi10.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi10.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi10.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi10.EntityData.Children = types.NewOrderedMap()
    tsi10.EntityData.Children.Append("tsi11s", types.YChild{"Tsi11s", &tsi10.Tsi11s})
    tsi10.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi10.Attributes})
    tsi10.EntityData.Leafs = types.NewOrderedMap()
    tsi10.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi10.Name})

    tsi10.EntityData.YListKeys = []string {"Name"}

    return &(tsi10.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s
// Entity Level 11
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI11. The type is slice of
    // Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11.
    Tsi11 []*Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11
}

func (tsi11s *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s) GetEntityData() *types.CommonEntityData {
    tsi11s.EntityData.YFilter = tsi11s.YFilter
    tsi11s.EntityData.YangName = "tsi11s"
    tsi11s.EntityData.BundleName = "cisco_ios_xr"
    tsi11s.EntityData.ParentYangName = "tsi10"
    tsi11s.EntityData.SegmentPath = "tsi11s"
    tsi11s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/" + tsi11s.EntityData.SegmentPath
    tsi11s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi11s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi11s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi11s.EntityData.Children = types.NewOrderedMap()
    tsi11s.EntityData.Children.Append("tsi11", types.YChild{"Tsi11", nil})
    for i := range tsi11s.Tsi11 {
        tsi11s.EntityData.Children.Append(types.GetSegmentPath(tsi11s.Tsi11[i]), types.YChild{"Tsi11", tsi11s.Tsi11[i]})
    }
    tsi11s.EntityData.Leafs = types.NewOrderedMap()

    tsi11s.EntityData.YListKeys = []string {}

    return &(tsi11s.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11
// TSI11
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI11. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Attributes.
    Attributes Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes
}

func (tsi11 *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11) GetEntityData() *types.CommonEntityData {
    tsi11.EntityData.YFilter = tsi11.YFilter
    tsi11.EntityData.YangName = "tsi11"
    tsi11.EntityData.BundleName = "cisco_ios_xr"
    tsi11.EntityData.ParentYangName = "tsi11s"
    tsi11.EntityData.SegmentPath = "tsi11" + types.AddKeyToken(tsi11.Name, "name")
    tsi11.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/" + tsi11.EntityData.SegmentPath
    tsi11.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi11.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi11.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi11.EntityData.Children = types.NewOrderedMap()
    tsi11.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi11.Attributes})
    tsi11.EntityData.Leafs = types.NewOrderedMap()
    tsi11.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi11.Name})

    tsi11.EntityData.YListKeys = []string {"Name"}

    return &(tsi11.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes
// Attributes
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi11"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes
// Attributes
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi10"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes
// Attributes
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi9"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes
// Attributes
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi8"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes
// Attributes
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi7"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes
// Attributes
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi6"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes
// Attributes
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi5"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes
// Attributes
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi4"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes
// Attributes
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi3"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes
// Attributes
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi2"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes
// Attributes
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi1"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Powershelf_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/tsi1s/tsi1/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes
// Attributes
type Inventory_Racks_Rack_Powershelf_Slot_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Powershelf_Slot_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Powershelf_Slot_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Powershelf_Slot_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Powershelf_Slot_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Powershelf_Slot_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Powershelf_Slot_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Powershelf_Slot_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Powershelf_Slot_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "slot"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Powershelf_Slot_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Powershelf_Slot_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Powershelf_Slot_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Powershelf_Slot_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Powershelf_Slot_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Powershelf_Slot_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Powershelf_Slot_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Powershelf_Slot_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Powershelf_Slot_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Powershelf_Slot_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Powershelf_Slot_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Powershelf_Slot_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Powershelf_Slot_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Powershelf_Slot_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Powershelf_Slot_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Powershelf_Slot_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Powershelf_Slot_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Powershelf_Slot_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Powershelf_Slot_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Powershelf_Slot_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Powershelf_Slot_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Powershelf_Slot_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Powershelf_Slot_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Powershelf_Slot_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Powershelf_Slot_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Powershelf_Slot_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Powershelf_Slot_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Powershelf_Slot_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Powershelf_Slot_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Powershelf_Slot_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Powershelf_Slot_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Powershelf_Slot_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Powershelf_Slot_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Powershelf_Slot_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Powershelf_Slot_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/powershelf/slot/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Fantray
// Fantray information
type Inventory_Racks_Rack_Fantray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Slot number. The type is slice of Inventory_Racks_Rack_Fantray_Slot.
    Slot []*Inventory_Racks_Rack_Fantray_Slot
}

func (fantray *Inventory_Racks_Rack_Fantray) GetEntityData() *types.CommonEntityData {
    fantray.EntityData.YFilter = fantray.YFilter
    fantray.EntityData.YangName = "fantray"
    fantray.EntityData.BundleName = "cisco_ios_xr"
    fantray.EntityData.ParentYangName = "rack"
    fantray.EntityData.SegmentPath = "fantray"
    fantray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/" + fantray.EntityData.SegmentPath
    fantray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fantray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fantray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fantray.EntityData.Children = types.NewOrderedMap()
    fantray.EntityData.Children.Append("slot", types.YChild{"Slot", nil})
    for i := range fantray.Slot {
        fantray.EntityData.Children.Append(types.GetSegmentPath(fantray.Slot[i]), types.YChild{"Slot", fantray.Slot[i]})
    }
    fantray.EntityData.Leafs = types.NewOrderedMap()

    fantray.EntityData.YListKeys = []string {}

    return &(fantray.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot
// Slot number
type Inventory_Racks_Rack_Fantray_Slot struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Slot name. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 1.
    Tsi1s Inventory_Racks_Rack_Fantray_Slot_Tsi1s

    // Attributes.
    Attributes Inventory_Racks_Rack_Fantray_Slot_Attributes
}

func (slot *Inventory_Racks_Rack_Fantray_Slot) GetEntityData() *types.CommonEntityData {
    slot.EntityData.YFilter = slot.YFilter
    slot.EntityData.YangName = "slot"
    slot.EntityData.BundleName = "cisco_ios_xr"
    slot.EntityData.ParentYangName = "fantray"
    slot.EntityData.SegmentPath = "slot" + types.AddKeyToken(slot.Name, "name")
    slot.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/" + slot.EntityData.SegmentPath
    slot.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    slot.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    slot.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    slot.EntityData.Children = types.NewOrderedMap()
    slot.EntityData.Children.Append("tsi1s", types.YChild{"Tsi1s", &slot.Tsi1s})
    slot.EntityData.Children.Append("attributes", types.YChild{"Attributes", &slot.Attributes})
    slot.EntityData.Leafs = types.NewOrderedMap()
    slot.EntityData.Leafs.Append("name", types.YLeaf{"Name", slot.Name})

    slot.EntityData.YListKeys = []string {"Name"}

    return &(slot.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s
// Entity Level 1
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI1. The type is slice of Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1.
    Tsi1 []*Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1
}

func (tsi1s *Inventory_Racks_Rack_Fantray_Slot_Tsi1s) GetEntityData() *types.CommonEntityData {
    tsi1s.EntityData.YFilter = tsi1s.YFilter
    tsi1s.EntityData.YangName = "tsi1s"
    tsi1s.EntityData.BundleName = "cisco_ios_xr"
    tsi1s.EntityData.ParentYangName = "slot"
    tsi1s.EntityData.SegmentPath = "tsi1s"
    tsi1s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/" + tsi1s.EntityData.SegmentPath
    tsi1s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi1s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi1s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi1s.EntityData.Children = types.NewOrderedMap()
    tsi1s.EntityData.Children.Append("tsi1", types.YChild{"Tsi1", nil})
    for i := range tsi1s.Tsi1 {
        tsi1s.EntityData.Children.Append(types.GetSegmentPath(tsi1s.Tsi1[i]), types.YChild{"Tsi1", tsi1s.Tsi1[i]})
    }
    tsi1s.EntityData.Leafs = types.NewOrderedMap()

    tsi1s.EntityData.YListKeys = []string {}

    return &(tsi1s.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1
// TSI1
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI1. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 2.
    Tsi2s Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s

    // Attributes.
    Attributes Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes
}

func (tsi1 *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1) GetEntityData() *types.CommonEntityData {
    tsi1.EntityData.YFilter = tsi1.YFilter
    tsi1.EntityData.YangName = "tsi1"
    tsi1.EntityData.BundleName = "cisco_ios_xr"
    tsi1.EntityData.ParentYangName = "tsi1s"
    tsi1.EntityData.SegmentPath = "tsi1" + types.AddKeyToken(tsi1.Name, "name")
    tsi1.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/" + tsi1.EntityData.SegmentPath
    tsi1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi1.EntityData.Children = types.NewOrderedMap()
    tsi1.EntityData.Children.Append("tsi2s", types.YChild{"Tsi2s", &tsi1.Tsi2s})
    tsi1.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi1.Attributes})
    tsi1.EntityData.Leafs = types.NewOrderedMap()
    tsi1.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi1.Name})

    tsi1.EntityData.YListKeys = []string {"Name"}

    return &(tsi1.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s
// Entity Level 2
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI2. The type is slice of
    // Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2.
    Tsi2 []*Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2
}

func (tsi2s *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s) GetEntityData() *types.CommonEntityData {
    tsi2s.EntityData.YFilter = tsi2s.YFilter
    tsi2s.EntityData.YangName = "tsi2s"
    tsi2s.EntityData.BundleName = "cisco_ios_xr"
    tsi2s.EntityData.ParentYangName = "tsi1"
    tsi2s.EntityData.SegmentPath = "tsi2s"
    tsi2s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/" + tsi2s.EntityData.SegmentPath
    tsi2s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi2s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi2s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi2s.EntityData.Children = types.NewOrderedMap()
    tsi2s.EntityData.Children.Append("tsi2", types.YChild{"Tsi2", nil})
    for i := range tsi2s.Tsi2 {
        tsi2s.EntityData.Children.Append(types.GetSegmentPath(tsi2s.Tsi2[i]), types.YChild{"Tsi2", tsi2s.Tsi2[i]})
    }
    tsi2s.EntityData.Leafs = types.NewOrderedMap()

    tsi2s.EntityData.YListKeys = []string {}

    return &(tsi2s.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2
// TSI2
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI2. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 3.
    Tsi3s Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s

    // Attributes.
    Attributes Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes
}

func (tsi2 *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2) GetEntityData() *types.CommonEntityData {
    tsi2.EntityData.YFilter = tsi2.YFilter
    tsi2.EntityData.YangName = "tsi2"
    tsi2.EntityData.BundleName = "cisco_ios_xr"
    tsi2.EntityData.ParentYangName = "tsi2s"
    tsi2.EntityData.SegmentPath = "tsi2" + types.AddKeyToken(tsi2.Name, "name")
    tsi2.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/" + tsi2.EntityData.SegmentPath
    tsi2.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi2.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi2.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi2.EntityData.Children = types.NewOrderedMap()
    tsi2.EntityData.Children.Append("tsi3s", types.YChild{"Tsi3s", &tsi2.Tsi3s})
    tsi2.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi2.Attributes})
    tsi2.EntityData.Leafs = types.NewOrderedMap()
    tsi2.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi2.Name})

    tsi2.EntityData.YListKeys = []string {"Name"}

    return &(tsi2.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s
// Entity Level 3
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI3. The type is slice of
    // Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3.
    Tsi3 []*Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3
}

func (tsi3s *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s) GetEntityData() *types.CommonEntityData {
    tsi3s.EntityData.YFilter = tsi3s.YFilter
    tsi3s.EntityData.YangName = "tsi3s"
    tsi3s.EntityData.BundleName = "cisco_ios_xr"
    tsi3s.EntityData.ParentYangName = "tsi2"
    tsi3s.EntityData.SegmentPath = "tsi3s"
    tsi3s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/" + tsi3s.EntityData.SegmentPath
    tsi3s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi3s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi3s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi3s.EntityData.Children = types.NewOrderedMap()
    tsi3s.EntityData.Children.Append("tsi3", types.YChild{"Tsi3", nil})
    for i := range tsi3s.Tsi3 {
        tsi3s.EntityData.Children.Append(types.GetSegmentPath(tsi3s.Tsi3[i]), types.YChild{"Tsi3", tsi3s.Tsi3[i]})
    }
    tsi3s.EntityData.Leafs = types.NewOrderedMap()

    tsi3s.EntityData.YListKeys = []string {}

    return &(tsi3s.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3
// TSI3
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI3. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 4.
    Tsi4s Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s

    // Attributes.
    Attributes Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes
}

func (tsi3 *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3) GetEntityData() *types.CommonEntityData {
    tsi3.EntityData.YFilter = tsi3.YFilter
    tsi3.EntityData.YangName = "tsi3"
    tsi3.EntityData.BundleName = "cisco_ios_xr"
    tsi3.EntityData.ParentYangName = "tsi3s"
    tsi3.EntityData.SegmentPath = "tsi3" + types.AddKeyToken(tsi3.Name, "name")
    tsi3.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/" + tsi3.EntityData.SegmentPath
    tsi3.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi3.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi3.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi3.EntityData.Children = types.NewOrderedMap()
    tsi3.EntityData.Children.Append("tsi4s", types.YChild{"Tsi4s", &tsi3.Tsi4s})
    tsi3.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi3.Attributes})
    tsi3.EntityData.Leafs = types.NewOrderedMap()
    tsi3.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi3.Name})

    tsi3.EntityData.YListKeys = []string {"Name"}

    return &(tsi3.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s
// Entity Level 4
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI4. The type is slice of
    // Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4.
    Tsi4 []*Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4
}

func (tsi4s *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s) GetEntityData() *types.CommonEntityData {
    tsi4s.EntityData.YFilter = tsi4s.YFilter
    tsi4s.EntityData.YangName = "tsi4s"
    tsi4s.EntityData.BundleName = "cisco_ios_xr"
    tsi4s.EntityData.ParentYangName = "tsi3"
    tsi4s.EntityData.SegmentPath = "tsi4s"
    tsi4s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/" + tsi4s.EntityData.SegmentPath
    tsi4s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi4s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi4s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi4s.EntityData.Children = types.NewOrderedMap()
    tsi4s.EntityData.Children.Append("tsi4", types.YChild{"Tsi4", nil})
    for i := range tsi4s.Tsi4 {
        tsi4s.EntityData.Children.Append(types.GetSegmentPath(tsi4s.Tsi4[i]), types.YChild{"Tsi4", tsi4s.Tsi4[i]})
    }
    tsi4s.EntityData.Leafs = types.NewOrderedMap()

    tsi4s.EntityData.YListKeys = []string {}

    return &(tsi4s.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4
// TSI4
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI4. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 5.
    Tsi5s Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s

    // Attributes.
    Attributes Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes
}

func (tsi4 *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4) GetEntityData() *types.CommonEntityData {
    tsi4.EntityData.YFilter = tsi4.YFilter
    tsi4.EntityData.YangName = "tsi4"
    tsi4.EntityData.BundleName = "cisco_ios_xr"
    tsi4.EntityData.ParentYangName = "tsi4s"
    tsi4.EntityData.SegmentPath = "tsi4" + types.AddKeyToken(tsi4.Name, "name")
    tsi4.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/" + tsi4.EntityData.SegmentPath
    tsi4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi4.EntityData.Children = types.NewOrderedMap()
    tsi4.EntityData.Children.Append("tsi5s", types.YChild{"Tsi5s", &tsi4.Tsi5s})
    tsi4.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi4.Attributes})
    tsi4.EntityData.Leafs = types.NewOrderedMap()
    tsi4.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi4.Name})

    tsi4.EntityData.YListKeys = []string {"Name"}

    return &(tsi4.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s
// Entity Level 5
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI5. The type is slice of
    // Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5.
    Tsi5 []*Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5
}

func (tsi5s *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s) GetEntityData() *types.CommonEntityData {
    tsi5s.EntityData.YFilter = tsi5s.YFilter
    tsi5s.EntityData.YangName = "tsi5s"
    tsi5s.EntityData.BundleName = "cisco_ios_xr"
    tsi5s.EntityData.ParentYangName = "tsi4"
    tsi5s.EntityData.SegmentPath = "tsi5s"
    tsi5s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/" + tsi5s.EntityData.SegmentPath
    tsi5s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi5s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi5s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi5s.EntityData.Children = types.NewOrderedMap()
    tsi5s.EntityData.Children.Append("tsi5", types.YChild{"Tsi5", nil})
    for i := range tsi5s.Tsi5 {
        tsi5s.EntityData.Children.Append(types.GetSegmentPath(tsi5s.Tsi5[i]), types.YChild{"Tsi5", tsi5s.Tsi5[i]})
    }
    tsi5s.EntityData.Leafs = types.NewOrderedMap()

    tsi5s.EntityData.YListKeys = []string {}

    return &(tsi5s.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5
// TSI5
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI5. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 6.
    Tsi6s Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s

    // Attributes.
    Attributes Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes
}

func (tsi5 *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5) GetEntityData() *types.CommonEntityData {
    tsi5.EntityData.YFilter = tsi5.YFilter
    tsi5.EntityData.YangName = "tsi5"
    tsi5.EntityData.BundleName = "cisco_ios_xr"
    tsi5.EntityData.ParentYangName = "tsi5s"
    tsi5.EntityData.SegmentPath = "tsi5" + types.AddKeyToken(tsi5.Name, "name")
    tsi5.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/" + tsi5.EntityData.SegmentPath
    tsi5.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi5.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi5.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi5.EntityData.Children = types.NewOrderedMap()
    tsi5.EntityData.Children.Append("tsi6s", types.YChild{"Tsi6s", &tsi5.Tsi6s})
    tsi5.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi5.Attributes})
    tsi5.EntityData.Leafs = types.NewOrderedMap()
    tsi5.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi5.Name})

    tsi5.EntityData.YListKeys = []string {"Name"}

    return &(tsi5.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s
// Entity Level 6
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI6. The type is slice of
    // Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6.
    Tsi6 []*Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6
}

func (tsi6s *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s) GetEntityData() *types.CommonEntityData {
    tsi6s.EntityData.YFilter = tsi6s.YFilter
    tsi6s.EntityData.YangName = "tsi6s"
    tsi6s.EntityData.BundleName = "cisco_ios_xr"
    tsi6s.EntityData.ParentYangName = "tsi5"
    tsi6s.EntityData.SegmentPath = "tsi6s"
    tsi6s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/" + tsi6s.EntityData.SegmentPath
    tsi6s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi6s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi6s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi6s.EntityData.Children = types.NewOrderedMap()
    tsi6s.EntityData.Children.Append("tsi6", types.YChild{"Tsi6", nil})
    for i := range tsi6s.Tsi6 {
        tsi6s.EntityData.Children.Append(types.GetSegmentPath(tsi6s.Tsi6[i]), types.YChild{"Tsi6", tsi6s.Tsi6[i]})
    }
    tsi6s.EntityData.Leafs = types.NewOrderedMap()

    tsi6s.EntityData.YListKeys = []string {}

    return &(tsi6s.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6
// TSI6
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI6. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 7.
    Tsi7s Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s

    // Attributes.
    Attributes Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes
}

func (tsi6 *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6) GetEntityData() *types.CommonEntityData {
    tsi6.EntityData.YFilter = tsi6.YFilter
    tsi6.EntityData.YangName = "tsi6"
    tsi6.EntityData.BundleName = "cisco_ios_xr"
    tsi6.EntityData.ParentYangName = "tsi6s"
    tsi6.EntityData.SegmentPath = "tsi6" + types.AddKeyToken(tsi6.Name, "name")
    tsi6.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/" + tsi6.EntityData.SegmentPath
    tsi6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi6.EntityData.Children = types.NewOrderedMap()
    tsi6.EntityData.Children.Append("tsi7s", types.YChild{"Tsi7s", &tsi6.Tsi7s})
    tsi6.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi6.Attributes})
    tsi6.EntityData.Leafs = types.NewOrderedMap()
    tsi6.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi6.Name})

    tsi6.EntityData.YListKeys = []string {"Name"}

    return &(tsi6.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s
// Entity Level 7
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI7. The type is slice of
    // Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7.
    Tsi7 []*Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7
}

func (tsi7s *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s) GetEntityData() *types.CommonEntityData {
    tsi7s.EntityData.YFilter = tsi7s.YFilter
    tsi7s.EntityData.YangName = "tsi7s"
    tsi7s.EntityData.BundleName = "cisco_ios_xr"
    tsi7s.EntityData.ParentYangName = "tsi6"
    tsi7s.EntityData.SegmentPath = "tsi7s"
    tsi7s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/" + tsi7s.EntityData.SegmentPath
    tsi7s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi7s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi7s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi7s.EntityData.Children = types.NewOrderedMap()
    tsi7s.EntityData.Children.Append("tsi7", types.YChild{"Tsi7", nil})
    for i := range tsi7s.Tsi7 {
        tsi7s.EntityData.Children.Append(types.GetSegmentPath(tsi7s.Tsi7[i]), types.YChild{"Tsi7", tsi7s.Tsi7[i]})
    }
    tsi7s.EntityData.Leafs = types.NewOrderedMap()

    tsi7s.EntityData.YListKeys = []string {}

    return &(tsi7s.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7
// TSI7
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI7. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 8.
    Tsi8s Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s

    // Attributes.
    Attributes Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes
}

func (tsi7 *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7) GetEntityData() *types.CommonEntityData {
    tsi7.EntityData.YFilter = tsi7.YFilter
    tsi7.EntityData.YangName = "tsi7"
    tsi7.EntityData.BundleName = "cisco_ios_xr"
    tsi7.EntityData.ParentYangName = "tsi7s"
    tsi7.EntityData.SegmentPath = "tsi7" + types.AddKeyToken(tsi7.Name, "name")
    tsi7.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/" + tsi7.EntityData.SegmentPath
    tsi7.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi7.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi7.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi7.EntityData.Children = types.NewOrderedMap()
    tsi7.EntityData.Children.Append("tsi8s", types.YChild{"Tsi8s", &tsi7.Tsi8s})
    tsi7.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi7.Attributes})
    tsi7.EntityData.Leafs = types.NewOrderedMap()
    tsi7.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi7.Name})

    tsi7.EntityData.YListKeys = []string {"Name"}

    return &(tsi7.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s
// Entity Level 8
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI8. The type is slice of
    // Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8.
    Tsi8 []*Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8
}

func (tsi8s *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s) GetEntityData() *types.CommonEntityData {
    tsi8s.EntityData.YFilter = tsi8s.YFilter
    tsi8s.EntityData.YangName = "tsi8s"
    tsi8s.EntityData.BundleName = "cisco_ios_xr"
    tsi8s.EntityData.ParentYangName = "tsi7"
    tsi8s.EntityData.SegmentPath = "tsi8s"
    tsi8s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/" + tsi8s.EntityData.SegmentPath
    tsi8s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi8s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi8s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi8s.EntityData.Children = types.NewOrderedMap()
    tsi8s.EntityData.Children.Append("tsi8", types.YChild{"Tsi8", nil})
    for i := range tsi8s.Tsi8 {
        tsi8s.EntityData.Children.Append(types.GetSegmentPath(tsi8s.Tsi8[i]), types.YChild{"Tsi8", tsi8s.Tsi8[i]})
    }
    tsi8s.EntityData.Leafs = types.NewOrderedMap()

    tsi8s.EntityData.YListKeys = []string {}

    return &(tsi8s.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8
// TSI8
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI8. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 9.
    Tsi9s Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s

    // Attributes.
    Attributes Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes
}

func (tsi8 *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8) GetEntityData() *types.CommonEntityData {
    tsi8.EntityData.YFilter = tsi8.YFilter
    tsi8.EntityData.YangName = "tsi8"
    tsi8.EntityData.BundleName = "cisco_ios_xr"
    tsi8.EntityData.ParentYangName = "tsi8s"
    tsi8.EntityData.SegmentPath = "tsi8" + types.AddKeyToken(tsi8.Name, "name")
    tsi8.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/" + tsi8.EntityData.SegmentPath
    tsi8.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi8.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi8.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi8.EntityData.Children = types.NewOrderedMap()
    tsi8.EntityData.Children.Append("tsi9s", types.YChild{"Tsi9s", &tsi8.Tsi9s})
    tsi8.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi8.Attributes})
    tsi8.EntityData.Leafs = types.NewOrderedMap()
    tsi8.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi8.Name})

    tsi8.EntityData.YListKeys = []string {"Name"}

    return &(tsi8.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s
// Entity Level 9
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI9. The type is slice of
    // Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9.
    Tsi9 []*Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9
}

func (tsi9s *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s) GetEntityData() *types.CommonEntityData {
    tsi9s.EntityData.YFilter = tsi9s.YFilter
    tsi9s.EntityData.YangName = "tsi9s"
    tsi9s.EntityData.BundleName = "cisco_ios_xr"
    tsi9s.EntityData.ParentYangName = "tsi8"
    tsi9s.EntityData.SegmentPath = "tsi9s"
    tsi9s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/" + tsi9s.EntityData.SegmentPath
    tsi9s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi9s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi9s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi9s.EntityData.Children = types.NewOrderedMap()
    tsi9s.EntityData.Children.Append("tsi9", types.YChild{"Tsi9", nil})
    for i := range tsi9s.Tsi9 {
        tsi9s.EntityData.Children.Append(types.GetSegmentPath(tsi9s.Tsi9[i]), types.YChild{"Tsi9", tsi9s.Tsi9[i]})
    }
    tsi9s.EntityData.Leafs = types.NewOrderedMap()

    tsi9s.EntityData.YListKeys = []string {}

    return &(tsi9s.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9
// TSI9
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI9. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 10.
    Tsi10s Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s

    // Attributes.
    Attributes Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes
}

func (tsi9 *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9) GetEntityData() *types.CommonEntityData {
    tsi9.EntityData.YFilter = tsi9.YFilter
    tsi9.EntityData.YangName = "tsi9"
    tsi9.EntityData.BundleName = "cisco_ios_xr"
    tsi9.EntityData.ParentYangName = "tsi9s"
    tsi9.EntityData.SegmentPath = "tsi9" + types.AddKeyToken(tsi9.Name, "name")
    tsi9.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/" + tsi9.EntityData.SegmentPath
    tsi9.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi9.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi9.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi9.EntityData.Children = types.NewOrderedMap()
    tsi9.EntityData.Children.Append("tsi10s", types.YChild{"Tsi10s", &tsi9.Tsi10s})
    tsi9.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi9.Attributes})
    tsi9.EntityData.Leafs = types.NewOrderedMap()
    tsi9.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi9.Name})

    tsi9.EntityData.YListKeys = []string {"Name"}

    return &(tsi9.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s
// Entity Level 10
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI10. The type is slice of
    // Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10.
    Tsi10 []*Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10
}

func (tsi10s *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s) GetEntityData() *types.CommonEntityData {
    tsi10s.EntityData.YFilter = tsi10s.YFilter
    tsi10s.EntityData.YangName = "tsi10s"
    tsi10s.EntityData.BundleName = "cisco_ios_xr"
    tsi10s.EntityData.ParentYangName = "tsi9"
    tsi10s.EntityData.SegmentPath = "tsi10s"
    tsi10s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/" + tsi10s.EntityData.SegmentPath
    tsi10s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi10s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi10s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi10s.EntityData.Children = types.NewOrderedMap()
    tsi10s.EntityData.Children.Append("tsi10", types.YChild{"Tsi10", nil})
    for i := range tsi10s.Tsi10 {
        tsi10s.EntityData.Children.Append(types.GetSegmentPath(tsi10s.Tsi10[i]), types.YChild{"Tsi10", tsi10s.Tsi10[i]})
    }
    tsi10s.EntityData.Leafs = types.NewOrderedMap()

    tsi10s.EntityData.YListKeys = []string {}

    return &(tsi10s.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10
// TSI10
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI10. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Entity Level 11.
    Tsi11s Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s

    // Attributes.
    Attributes Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes
}

func (tsi10 *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10) GetEntityData() *types.CommonEntityData {
    tsi10.EntityData.YFilter = tsi10.YFilter
    tsi10.EntityData.YangName = "tsi10"
    tsi10.EntityData.BundleName = "cisco_ios_xr"
    tsi10.EntityData.ParentYangName = "tsi10s"
    tsi10.EntityData.SegmentPath = "tsi10" + types.AddKeyToken(tsi10.Name, "name")
    tsi10.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/" + tsi10.EntityData.SegmentPath
    tsi10.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi10.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi10.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi10.EntityData.Children = types.NewOrderedMap()
    tsi10.EntityData.Children.Append("tsi11s", types.YChild{"Tsi11s", &tsi10.Tsi11s})
    tsi10.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi10.Attributes})
    tsi10.EntityData.Leafs = types.NewOrderedMap()
    tsi10.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi10.Name})

    tsi10.EntityData.YListKeys = []string {"Name"}

    return &(tsi10.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s
// Entity Level 11
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TSI11. The type is slice of
    // Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11.
    Tsi11 []*Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11
}

func (tsi11s *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s) GetEntityData() *types.CommonEntityData {
    tsi11s.EntityData.YFilter = tsi11s.YFilter
    tsi11s.EntityData.YangName = "tsi11s"
    tsi11s.EntityData.BundleName = "cisco_ios_xr"
    tsi11s.EntityData.ParentYangName = "tsi10"
    tsi11s.EntityData.SegmentPath = "tsi11s"
    tsi11s.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/" + tsi11s.EntityData.SegmentPath
    tsi11s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi11s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi11s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi11s.EntityData.Children = types.NewOrderedMap()
    tsi11s.EntityData.Children.Append("tsi11", types.YChild{"Tsi11", nil})
    for i := range tsi11s.Tsi11 {
        tsi11s.EntityData.Children.Append(types.GetSegmentPath(tsi11s.Tsi11[i]), types.YChild{"Tsi11", tsi11s.Tsi11[i]})
    }
    tsi11s.EntityData.Leafs = types.NewOrderedMap()

    tsi11s.EntityData.YListKeys = []string {}

    return &(tsi11s.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11
// TSI11
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. TSI11. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    Name interface{}

    // Attributes.
    Attributes Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes
}

func (tsi11 *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11) GetEntityData() *types.CommonEntityData {
    tsi11.EntityData.YFilter = tsi11.YFilter
    tsi11.EntityData.YangName = "tsi11"
    tsi11.EntityData.BundleName = "cisco_ios_xr"
    tsi11.EntityData.ParentYangName = "tsi11s"
    tsi11.EntityData.SegmentPath = "tsi11" + types.AddKeyToken(tsi11.Name, "name")
    tsi11.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/" + tsi11.EntityData.SegmentPath
    tsi11.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tsi11.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tsi11.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tsi11.EntityData.Children = types.NewOrderedMap()
    tsi11.EntityData.Children.Append("attributes", types.YChild{"Attributes", &tsi11.Attributes})
    tsi11.EntityData.Leafs = types.NewOrderedMap()
    tsi11.EntityData.Leafs.Append("name", types.YLeaf{"Name", tsi11.Name})

    tsi11.EntityData.YListKeys = []string {"Name"}

    return &(tsi11.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes
// Attributes
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi11"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Tsi11s_Tsi11_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/tsi11s/tsi11/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes
// Attributes
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi10"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Tsi10s_Tsi10_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/tsi10s/tsi10/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes
// Attributes
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi9"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Tsi9s_Tsi9_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/tsi9s/tsi9/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes
// Attributes
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi8"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Tsi8s_Tsi8_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/tsi8s/tsi8/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes
// Attributes
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi7"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Tsi7s_Tsi7_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/tsi7s/tsi7/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes
// Attributes
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi6"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Tsi6s_Tsi6_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/tsi6s/tsi6/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes
// Attributes
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi5"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Tsi5s_Tsi5_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/tsi5s/tsi5/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes
// Attributes
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi4"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Tsi4s_Tsi4_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/tsi4s/tsi4/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes
// Attributes
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi3"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Tsi3s_Tsi3_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/tsi3s/tsi3/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes
// Attributes
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi2"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Tsi2s_Tsi2_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/tsi2s/tsi2/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes
// Attributes
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "tsi1"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Fantray_Slot_Tsi1s_Tsi1_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/tsi1s/tsi1/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes
// Attributes
type Inventory_Racks_Rack_Fantray_Slot_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Fantray_Slot_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Fantray_Slot_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Fantray_Slot_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Fantray_Slot_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Fantray_Slot_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Fantray_Slot_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Fantray_Slot_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Fantray_Slot_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "slot"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Fantray_Slot_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Fantray_Slot_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Fantray_Slot_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Fantray_Slot_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Fantray_Slot_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Fantray_Slot_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Fantray_Slot_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Fantray_Slot_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Fantray_Slot_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Fantray_Slot_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Fantray_Slot_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Fantray_Slot_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Fantray_Slot_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Fantray_Slot_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Fantray_Slot_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Fantray_Slot_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Fantray_Slot_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Fantray_Slot_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Fantray_Slot_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Fantray_Slot_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Fantray_Slot_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Fantray_Slot_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Fantray_Slot_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Fantray_Slot_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Fantray_Slot_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Fantray_Slot_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Fantray_Slot_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Fantray_Slot_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Fantray_Slot_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Fantray_Slot_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Fantray_Slot_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Fantray_Slot_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Fantray_Slot_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Fantray_Slot_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Fantray_Slot_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/fantray/slot/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

// Inventory_Racks_Rack_Attributes
// Attributes
type Inventory_Racks_Rack_Attributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory Basic Bag.
    InvBasicBag Inventory_Racks_Rack_Attributes_InvBasicBag

    // Environment sensor info.
    EnvSensorInfo Inventory_Racks_Rack_Attributes_EnvSensorInfo

    // Inventory EDM PWG info.
    PwgInfo Inventory_Racks_Rack_Attributes_PwgInfo

    // Environment sensor info XML.
    EnvSensorInfoXml Inventory_Racks_Rack_Attributes_EnvSensorInfoXml

    // Inventory Asset Bag.
    InvAssetBag Inventory_Racks_Rack_Attributes_InvAssetBag

    // Threshold.
    Threshold Inventory_Racks_Rack_Attributes_Threshold

    // Inventory EDM FRU info.
    FruInfo Inventory_Racks_Rack_Attributes_FruInfo

    // Inventory EDM EEPROM Information Bag.
    InvEepromInfo Inventory_Racks_Rack_Attributes_InvEepromInfo
}

func (attributes *Inventory_Racks_Rack_Attributes) GetEntityData() *types.CommonEntityData {
    attributes.EntityData.YFilter = attributes.YFilter
    attributes.EntityData.YangName = "attributes"
    attributes.EntityData.BundleName = "cisco_ios_xr"
    attributes.EntityData.ParentYangName = "rack"
    attributes.EntityData.SegmentPath = "attributes"
    attributes.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/" + attributes.EntityData.SegmentPath
    attributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributes.EntityData.Children = types.NewOrderedMap()
    attributes.EntityData.Children.Append("inv-basic-bag", types.YChild{"InvBasicBag", &attributes.InvBasicBag})
    attributes.EntityData.Children.Append("env-sensor-info", types.YChild{"EnvSensorInfo", &attributes.EnvSensorInfo})
    attributes.EntityData.Children.Append("pwg-info", types.YChild{"PwgInfo", &attributes.PwgInfo})
    attributes.EntityData.Children.Append("env-sensor-info-xml", types.YChild{"EnvSensorInfoXml", &attributes.EnvSensorInfoXml})
    attributes.EntityData.Children.Append("inv-asset-bag", types.YChild{"InvAssetBag", &attributes.InvAssetBag})
    attributes.EntityData.Children.Append("threshold", types.YChild{"Threshold", &attributes.Threshold})
    attributes.EntityData.Children.Append("fru-info", types.YChild{"FruInfo", &attributes.FruInfo})
    attributes.EntityData.Children.Append("inv-eeprom-info", types.YChild{"InvEepromInfo", &attributes.InvEepromInfo})
    attributes.EntityData.Leafs = types.NewOrderedMap()

    attributes.EntityData.YListKeys = []string {}

    return &(attributes.EntityData)
}

// Inventory_Racks_Rack_Attributes_InvBasicBag
// Inventory Basic Bag
type Inventory_Racks_Rack_Attributes_InvBasicBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // describes in user-readable terms       what the entity in question does.
    // The type is string with length: 0..255.
    Description interface{}

    // maps to the vendor OID string. The type is string with length: 0..255.
    VendorType interface{}

    // name string for the entity. The type is string with length: 0..255.
    Name interface{}

    // hw revision string. The type is string with length: 0..255.
    HardwareRevision interface{}

    // firmware revision string. The type is string with length: 0..255.
    FirmwareRevision interface{}

    // software revision string. The type is string with length: 0..255.
    SoftwareRevision interface{}

    // chip module hw revision string. The type is string with length: 0..255.
    ChipHardwareRevision interface{}

    // serial number. The type is string with length: 0..255.
    SerialNumber interface{}

    // manufacturer's name. The type is string with length: 0..255.
    ManufacturerName interface{}

    // model name. The type is string with length: 0..255.
    ModelName interface{}

    // asset Identification string. The type is string with length: 0..255.
    AssetIdStr interface{}

    // asset Identification. The type is interface{} with range:
    // -2147483648..2147483647.
    AssetIdentification interface{}

    // 1 if Field Replaceable Unit 0, if not. The type is bool.
    IsFieldReplaceableUnit interface{}

    // Manufacture Asset Tags. The type is interface{} with range:
    // -2147483648..2147483647.
    ManufacturerAssetTags interface{}

    // Major&minor class of the entity. The type is interface{} with range:
    // -2147483648..2147483647.
    CompositeClassCode interface{}

    // Size of memory associated with       the entity where applicable. The type
    // is interface{} with range: -2147483648..2147483647.
    MemorySize interface{}

    // sysdb name of sensor in the envmon EDM. The type is string with length:
    // 0..255.
    EnvironmentalMonitorPath interface{}

    // useful for storing an entity alias . The type is string with length:
    // 0..255.
    Alias interface{}

    // indicates if this entity is group       or not. The type is bool.
    GroupFlag interface{}

    // integer value for New Deviation Number 0x88. The type is interface{} with
    // range: -2147483648..2147483647.
    NewDeviationNumber interface{}

    // integer value for plim type if     applicable to this entity. The type is
    // interface{} with range: -2147483648..2147483647.
    PhysicalLayerInterfaceModuleType interface{}

    // 1 if UnrecognizedFRU and 0 for recognizedFRU. The type is bool.
    UnrecognizedFru interface{}

    // integer value for Redundancy State if     applicable to this entity. The
    // type is interface{} with range: -2147483648..2147483647.
    Redundancystate interface{}

    // 1 if ce port found, 0 if not. The type is bool.
    Ceport interface{}

    // 1 if xr scoped, 0 if not. The type is bool.
    XrScoped interface{}

    // Unique id for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    UniqueId interface{}

    // Allocated power for an entity. The type is interface{} with range:
    // -2147483648..2147483647.
    AllocatedPower interface{}
}

func (invBasicBag *Inventory_Racks_Rack_Attributes_InvBasicBag) GetEntityData() *types.CommonEntityData {
    invBasicBag.EntityData.YFilter = invBasicBag.YFilter
    invBasicBag.EntityData.YangName = "inv-basic-bag"
    invBasicBag.EntityData.BundleName = "cisco_ios_xr"
    invBasicBag.EntityData.ParentYangName = "attributes"
    invBasicBag.EntityData.SegmentPath = "inv-basic-bag"
    invBasicBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/attributes/" + invBasicBag.EntityData.SegmentPath
    invBasicBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invBasicBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invBasicBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invBasicBag.EntityData.Children = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs = types.NewOrderedMap()
    invBasicBag.EntityData.Leafs.Append("description", types.YLeaf{"Description", invBasicBag.Description})
    invBasicBag.EntityData.Leafs.Append("vendor-type", types.YLeaf{"VendorType", invBasicBag.VendorType})
    invBasicBag.EntityData.Leafs.Append("name", types.YLeaf{"Name", invBasicBag.Name})
    invBasicBag.EntityData.Leafs.Append("hardware-revision", types.YLeaf{"HardwareRevision", invBasicBag.HardwareRevision})
    invBasicBag.EntityData.Leafs.Append("firmware-revision", types.YLeaf{"FirmwareRevision", invBasicBag.FirmwareRevision})
    invBasicBag.EntityData.Leafs.Append("software-revision", types.YLeaf{"SoftwareRevision", invBasicBag.SoftwareRevision})
    invBasicBag.EntityData.Leafs.Append("chip-hardware-revision", types.YLeaf{"ChipHardwareRevision", invBasicBag.ChipHardwareRevision})
    invBasicBag.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", invBasicBag.SerialNumber})
    invBasicBag.EntityData.Leafs.Append("manufacturer-name", types.YLeaf{"ManufacturerName", invBasicBag.ManufacturerName})
    invBasicBag.EntityData.Leafs.Append("model-name", types.YLeaf{"ModelName", invBasicBag.ModelName})
    invBasicBag.EntityData.Leafs.Append("asset-id-str", types.YLeaf{"AssetIdStr", invBasicBag.AssetIdStr})
    invBasicBag.EntityData.Leafs.Append("asset-identification", types.YLeaf{"AssetIdentification", invBasicBag.AssetIdentification})
    invBasicBag.EntityData.Leafs.Append("is-field-replaceable-unit", types.YLeaf{"IsFieldReplaceableUnit", invBasicBag.IsFieldReplaceableUnit})
    invBasicBag.EntityData.Leafs.Append("manufacturer-asset-tags", types.YLeaf{"ManufacturerAssetTags", invBasicBag.ManufacturerAssetTags})
    invBasicBag.EntityData.Leafs.Append("composite-class-code", types.YLeaf{"CompositeClassCode", invBasicBag.CompositeClassCode})
    invBasicBag.EntityData.Leafs.Append("memory-size", types.YLeaf{"MemorySize", invBasicBag.MemorySize})
    invBasicBag.EntityData.Leafs.Append("environmental-monitor-path", types.YLeaf{"EnvironmentalMonitorPath", invBasicBag.EnvironmentalMonitorPath})
    invBasicBag.EntityData.Leafs.Append("alias", types.YLeaf{"Alias", invBasicBag.Alias})
    invBasicBag.EntityData.Leafs.Append("group-flag", types.YLeaf{"GroupFlag", invBasicBag.GroupFlag})
    invBasicBag.EntityData.Leafs.Append("new-deviation-number", types.YLeaf{"NewDeviationNumber", invBasicBag.NewDeviationNumber})
    invBasicBag.EntityData.Leafs.Append("physical-layer-interface-module-type", types.YLeaf{"PhysicalLayerInterfaceModuleType", invBasicBag.PhysicalLayerInterfaceModuleType})
    invBasicBag.EntityData.Leafs.Append("unrecognized-fru", types.YLeaf{"UnrecognizedFru", invBasicBag.UnrecognizedFru})
    invBasicBag.EntityData.Leafs.Append("redundancystate", types.YLeaf{"Redundancystate", invBasicBag.Redundancystate})
    invBasicBag.EntityData.Leafs.Append("ceport", types.YLeaf{"Ceport", invBasicBag.Ceport})
    invBasicBag.EntityData.Leafs.Append("xr-scoped", types.YLeaf{"XrScoped", invBasicBag.XrScoped})
    invBasicBag.EntityData.Leafs.Append("unique-id", types.YLeaf{"UniqueId", invBasicBag.UniqueId})
    invBasicBag.EntityData.Leafs.Append("allocated-power", types.YLeaf{"AllocatedPower", invBasicBag.AllocatedPower})

    invBasicBag.EntityData.YListKeys = []string {}

    return &(invBasicBag.EntityData)
}

// Inventory_Racks_Rack_Attributes_EnvSensorInfo
// Environment sensor info
type Inventory_Racks_Rack_Attributes_EnvSensorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sensor valid bitmap. The type is interface{} with range: 0..4294967295.
    FieldValidityBitmap interface{}

    // Device Name. The type is string with length: 0..50.
    DeviceDescription interface{}

    // Units of variable being read. The type is string with length: 0..50.
    Units interface{}

    // Identifier for this device. The type is interface{} with range:
    // 0..4294967295.
    DeviceId interface{}

    // Current reading of sensor. The type is interface{} with range:
    // 0..4294967295.
    Value interface{}

    // Indicates threshold violation. The type is interface{} with range:
    // 0..4294967295.
    AlarmType interface{}

    // Sensor data type enums. The type is interface{} with range: 0..4294967295.
    DataType interface{}

    // Sensor scale enums. The type is interface{} with range: 0..4294967295.
    Scale interface{}

    // Sensor precision range. The type is interface{} with range: 0..4294967295.
    Precision interface{}

    // Sensor operation state enums. The type is interface{} with range:
    // 0..4294967295.
    Status interface{}

    // Age of the sensor value; set to the current time if directly access the
    // value from sensor. The type is interface{} with range: 0..4294967295.
    AgeTimeStamp interface{}

    // Sensor value update rate;set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Average sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Average interface{}

    // Minimum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Minimum interface{}

    // Maximum Sensor value over time interval. The type is interface{} with
    // range: -2147483648..2147483647.
    Maximum interface{}

    // Time Interval over which sensor value is monitored. The type is interface{}
    // with range: -2147483648..2147483647.
    Interval interface{}
}

func (envSensorInfo *Inventory_Racks_Rack_Attributes_EnvSensorInfo) GetEntityData() *types.CommonEntityData {
    envSensorInfo.EntityData.YFilter = envSensorInfo.YFilter
    envSensorInfo.EntityData.YangName = "env-sensor-info"
    envSensorInfo.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfo.EntityData.ParentYangName = "attributes"
    envSensorInfo.EntityData.SegmentPath = "env-sensor-info"
    envSensorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/attributes/" + envSensorInfo.EntityData.SegmentPath
    envSensorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfo.EntityData.Children = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfo.EntityData.Leafs.Append("field-validity-bitmap", types.YLeaf{"FieldValidityBitmap", envSensorInfo.FieldValidityBitmap})
    envSensorInfo.EntityData.Leafs.Append("device-description", types.YLeaf{"DeviceDescription", envSensorInfo.DeviceDescription})
    envSensorInfo.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfo.Units})
    envSensorInfo.EntityData.Leafs.Append("device-id", types.YLeaf{"DeviceId", envSensorInfo.DeviceId})
    envSensorInfo.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfo.Value})
    envSensorInfo.EntityData.Leafs.Append("alarm-type", types.YLeaf{"AlarmType", envSensorInfo.AlarmType})
    envSensorInfo.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfo.DataType})
    envSensorInfo.EntityData.Leafs.Append("scale", types.YLeaf{"Scale", envSensorInfo.Scale})
    envSensorInfo.EntityData.Leafs.Append("precision", types.YLeaf{"Precision", envSensorInfo.Precision})
    envSensorInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfo.Status})
    envSensorInfo.EntityData.Leafs.Append("age-time-stamp", types.YLeaf{"AgeTimeStamp", envSensorInfo.AgeTimeStamp})
    envSensorInfo.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfo.UpdateRate})
    envSensorInfo.EntityData.Leafs.Append("average", types.YLeaf{"Average", envSensorInfo.Average})
    envSensorInfo.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", envSensorInfo.Minimum})
    envSensorInfo.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", envSensorInfo.Maximum})
    envSensorInfo.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", envSensorInfo.Interval})

    envSensorInfo.EntityData.YListKeys = []string {}

    return &(envSensorInfo.EntityData)
}

// Inventory_Racks_Rack_Attributes_PwgInfo
// Inventory EDM PWG info
type Inventory_Racks_Rack_Attributes_PwgInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // redundancy mode. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupRedundancyMode interface{}

    // power units. The type is string.
    PowerGroupPowerUnits interface{}

    // available current. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerGroupAvailableCurrent interface{}

    // drawn current. The type is interface{} with range: -2147483648..2147483647.
    PowerGroupDrawnCurrent interface{}
}

func (pwgInfo *Inventory_Racks_Rack_Attributes_PwgInfo) GetEntityData() *types.CommonEntityData {
    pwgInfo.EntityData.YFilter = pwgInfo.YFilter
    pwgInfo.EntityData.YangName = "pwg-info"
    pwgInfo.EntityData.BundleName = "cisco_ios_xr"
    pwgInfo.EntityData.ParentYangName = "attributes"
    pwgInfo.EntityData.SegmentPath = "pwg-info"
    pwgInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/attributes/" + pwgInfo.EntityData.SegmentPath
    pwgInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwgInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwgInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwgInfo.EntityData.Children = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs = types.NewOrderedMap()
    pwgInfo.EntityData.Leafs.Append("power-group-redundancy-mode", types.YLeaf{"PowerGroupRedundancyMode", pwgInfo.PowerGroupRedundancyMode})
    pwgInfo.EntityData.Leafs.Append("power-group-power-units", types.YLeaf{"PowerGroupPowerUnits", pwgInfo.PowerGroupPowerUnits})
    pwgInfo.EntityData.Leafs.Append("power-group-available-current", types.YLeaf{"PowerGroupAvailableCurrent", pwgInfo.PowerGroupAvailableCurrent})
    pwgInfo.EntityData.Leafs.Append("power-group-drawn-current", types.YLeaf{"PowerGroupDrawnCurrent", pwgInfo.PowerGroupDrawnCurrent})

    pwgInfo.EntityData.YListKeys = []string {}

    return &(pwgInfo.EntityData)
}

// Inventory_Racks_Rack_Attributes_EnvSensorInfoXml
// Environment sensor info XML
type Inventory_Racks_Rack_Attributes_EnvSensorInfoXml struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device Name. The type is string with length: 0..50.
    Description interface{}

    // Units of variable being read. The type is Unit.
    Units interface{}

    // Current reading of sensor Displays in decimal(ex 1.234) for powersupply
    // sensor type. The type is string with length: 0..50.
    Value interface{}

    // Sensor data type. The type is SensorData.
    DataType interface{}

    // Sensor operation state. The type is SensorStatus.
    Status interface{}

    // Sensor value update rate; set to 0 if sensor value is updated and evaluated
    // immediately. The type is interface{} with range: 0..4294967295.
    UpdateRate interface{}

    // Threshold information.
    Threshold Inventory_Racks_Rack_Attributes_EnvSensorInfoXml_Threshold
}

func (envSensorInfoXml *Inventory_Racks_Rack_Attributes_EnvSensorInfoXml) GetEntityData() *types.CommonEntityData {
    envSensorInfoXml.EntityData.YFilter = envSensorInfoXml.YFilter
    envSensorInfoXml.EntityData.YangName = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.BundleName = "cisco_ios_xr"
    envSensorInfoXml.EntityData.ParentYangName = "attributes"
    envSensorInfoXml.EntityData.SegmentPath = "env-sensor-info-xml"
    envSensorInfoXml.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/attributes/" + envSensorInfoXml.EntityData.SegmentPath
    envSensorInfoXml.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    envSensorInfoXml.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    envSensorInfoXml.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    envSensorInfoXml.EntityData.Children = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Children.Append("threshold", types.YChild{"Threshold", &envSensorInfoXml.Threshold})
    envSensorInfoXml.EntityData.Leafs = types.NewOrderedMap()
    envSensorInfoXml.EntityData.Leafs.Append("description", types.YLeaf{"Description", envSensorInfoXml.Description})
    envSensorInfoXml.EntityData.Leafs.Append("units", types.YLeaf{"Units", envSensorInfoXml.Units})
    envSensorInfoXml.EntityData.Leafs.Append("value", types.YLeaf{"Value", envSensorInfoXml.Value})
    envSensorInfoXml.EntityData.Leafs.Append("data-type", types.YLeaf{"DataType", envSensorInfoXml.DataType})
    envSensorInfoXml.EntityData.Leafs.Append("status", types.YLeaf{"Status", envSensorInfoXml.Status})
    envSensorInfoXml.EntityData.Leafs.Append("update-rate", types.YLeaf{"UpdateRate", envSensorInfoXml.UpdateRate})

    envSensorInfoXml.EntityData.YListKeys = []string {}

    return &(envSensorInfoXml.EntityData)
}

// Inventory_Racks_Rack_Attributes_EnvSensorInfoXml_Threshold
// Threshold information
type Inventory_Racks_Rack_Attributes_EnvSensorInfoXml_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of threshold. The type is slice of
    // Inventory_Racks_Rack_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray.
    ThresholdArray []*Inventory_Racks_Rack_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
}

func (threshold *Inventory_Racks_Rack_Attributes_EnvSensorInfoXml_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "env-sensor-info-xml"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/attributes/env-sensor-info-xml/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("threshold-array", types.YChild{"ThresholdArray", nil})
    for i := range threshold.ThresholdArray {
        types.SetYListKey(threshold.ThresholdArray[i], i)
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.ThresholdArray[i]), types.YChild{"ThresholdArray", threshold.ThresholdArray[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray
// Array of threshold
type Inventory_Racks_Rack_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Indicates minor, major, critical severities. The type is ThresholdSeverity.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // ThresholdRelation.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // -2147483648..2147483647.
    ThresholdValue interface{}

    // Threshold name. The type is string with length: 0..50.
    ThresholdName interface{}
}

func (thresholdArray *Inventory_Racks_Rack_Attributes_EnvSensorInfoXml_Threshold_ThresholdArray) GetEntityData() *types.CommonEntityData {
    thresholdArray.EntityData.YFilter = thresholdArray.YFilter
    thresholdArray.EntityData.YangName = "threshold-array"
    thresholdArray.EntityData.BundleName = "cisco_ios_xr"
    thresholdArray.EntityData.ParentYangName = "threshold"
    thresholdArray.EntityData.SegmentPath = "threshold-array" + types.AddNoKeyToken(thresholdArray)
    thresholdArray.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/attributes/env-sensor-info-xml/threshold/" + thresholdArray.EntityData.SegmentPath
    thresholdArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholdArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholdArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholdArray.EntityData.Children = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs = types.NewOrderedMap()
    thresholdArray.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", thresholdArray.ThresholdSeverity})
    thresholdArray.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", thresholdArray.ThresholdRelation})
    thresholdArray.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", thresholdArray.ThresholdValue})
    thresholdArray.EntityData.Leafs.Append("threshold-name", types.YLeaf{"ThresholdName", thresholdArray.ThresholdName})

    thresholdArray.EntityData.YListKeys = []string {}

    return &(thresholdArray.EntityData)
}

// Inventory_Racks_Rack_Attributes_InvAssetBag
// Inventory Asset Bag
type Inventory_Racks_Rack_Attributes_InvAssetBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with length: 0..255.
    PartNumber interface{}

    // Manufacture Assembly number. The type is string with length: 0..255.
    ManufacturerAssemblyNumber interface{}

    // Manufacture assembly revision. The type is string with length: 0..255.
    ManufacturerAssemblyRevision interface{}

    // The type is string with length: 0..255.
    ManufacturerFirmwareIdentifier interface{}

    // The type is string with length: 0..255.
    ManufacturerSoftwareIdentifier interface{}

    // Common Language Equipment           Identifier number. The type is string
    // with length: 0..255.
    ManufacturerCommonLanguageEquipmentIdentifier interface{}

    // String containing OEM information           if applicable. The type is
    // string with length: 0..255.
    OriginalEquipmentManufacturerString interface{}
}

func (invAssetBag *Inventory_Racks_Rack_Attributes_InvAssetBag) GetEntityData() *types.CommonEntityData {
    invAssetBag.EntityData.YFilter = invAssetBag.YFilter
    invAssetBag.EntityData.YangName = "inv-asset-bag"
    invAssetBag.EntityData.BundleName = "cisco_ios_xr"
    invAssetBag.EntityData.ParentYangName = "attributes"
    invAssetBag.EntityData.SegmentPath = "inv-asset-bag"
    invAssetBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/attributes/" + invAssetBag.EntityData.SegmentPath
    invAssetBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invAssetBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invAssetBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invAssetBag.EntityData.Children = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs = types.NewOrderedMap()
    invAssetBag.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", invAssetBag.PartNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-number", types.YLeaf{"ManufacturerAssemblyNumber", invAssetBag.ManufacturerAssemblyNumber})
    invAssetBag.EntityData.Leafs.Append("manufacturer-assembly-revision", types.YLeaf{"ManufacturerAssemblyRevision", invAssetBag.ManufacturerAssemblyRevision})
    invAssetBag.EntityData.Leafs.Append("manufacturer-firmware-identifier", types.YLeaf{"ManufacturerFirmwareIdentifier", invAssetBag.ManufacturerFirmwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-software-identifier", types.YLeaf{"ManufacturerSoftwareIdentifier", invAssetBag.ManufacturerSoftwareIdentifier})
    invAssetBag.EntityData.Leafs.Append("manufacturer-common-language-equipment-identifier", types.YLeaf{"ManufacturerCommonLanguageEquipmentIdentifier", invAssetBag.ManufacturerCommonLanguageEquipmentIdentifier})
    invAssetBag.EntityData.Leafs.Append("original-equipment-manufacturer-string", types.YLeaf{"OriginalEquipmentManufacturerString", invAssetBag.OriginalEquipmentManufacturerString})

    invAssetBag.EntityData.YListKeys = []string {}

    return &(invAssetBag.EntityData)
}

// Inventory_Racks_Rack_Attributes_Threshold
// Threshold
type Inventory_Racks_Rack_Attributes_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Major Low.
    MajorLo Inventory_Racks_Rack_Attributes_Threshold_MajorLo

    // Critical High.
    CriticalHi Inventory_Racks_Rack_Attributes_Threshold_CriticalHi

    // Minor High.
    MinorHi Inventory_Racks_Rack_Attributes_Threshold_MinorHi

    // Major High.
    MajorHi Inventory_Racks_Rack_Attributes_Threshold_MajorHi

    // Critical Low.
    CriticalLo Inventory_Racks_Rack_Attributes_Threshold_CriticalLo

    // Minor Low.
    MinorLo Inventory_Racks_Rack_Attributes_Threshold_MinorLo
}

func (threshold *Inventory_Racks_Rack_Attributes_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "attributes"
    threshold.EntityData.SegmentPath = "threshold"
    threshold.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/attributes/" + threshold.EntityData.SegmentPath
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("major-lo", types.YChild{"MajorLo", &threshold.MajorLo})
    threshold.EntityData.Children.Append("critical-hi", types.YChild{"CriticalHi", &threshold.CriticalHi})
    threshold.EntityData.Children.Append("minor-hi", types.YChild{"MinorHi", &threshold.MinorHi})
    threshold.EntityData.Children.Append("major-hi", types.YChild{"MajorHi", &threshold.MajorHi})
    threshold.EntityData.Children.Append("critical-lo", types.YChild{"CriticalLo", &threshold.CriticalLo})
    threshold.EntityData.Children.Append("minor-lo", types.YChild{"MinorLo", &threshold.MinorLo})
    threshold.EntityData.Leafs = types.NewOrderedMap()

    threshold.EntityData.YListKeys = []string {}

    return &(threshold.EntityData)
}

// Inventory_Racks_Rack_Attributes_Threshold_MajorLo
// Major Low
type Inventory_Racks_Rack_Attributes_Threshold_MajorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Attributes_Threshold_MajorLo_ThreshBag
}

func (majorLo *Inventory_Racks_Rack_Attributes_Threshold_MajorLo) GetEntityData() *types.CommonEntityData {
    majorLo.EntityData.YFilter = majorLo.YFilter
    majorLo.EntityData.YangName = "major-lo"
    majorLo.EntityData.BundleName = "cisco_ios_xr"
    majorLo.EntityData.ParentYangName = "threshold"
    majorLo.EntityData.SegmentPath = "major-lo"
    majorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/attributes/threshold/" + majorLo.EntityData.SegmentPath
    majorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorLo.EntityData.Children = types.NewOrderedMap()
    majorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorLo.ThreshBag})
    majorLo.EntityData.Leafs = types.NewOrderedMap()

    majorLo.EntityData.YListKeys = []string {}

    return &(majorLo.EntityData)
}

// Inventory_Racks_Rack_Attributes_Threshold_MajorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Attributes_Threshold_MajorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Attributes_Threshold_MajorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/attributes/threshold/major-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Attributes_Threshold_CriticalHi
// Critical High
type Inventory_Racks_Rack_Attributes_Threshold_CriticalHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Attributes_Threshold_CriticalHi_ThreshBag
}

func (criticalHi *Inventory_Racks_Rack_Attributes_Threshold_CriticalHi) GetEntityData() *types.CommonEntityData {
    criticalHi.EntityData.YFilter = criticalHi.YFilter
    criticalHi.EntityData.YangName = "critical-hi"
    criticalHi.EntityData.BundleName = "cisco_ios_xr"
    criticalHi.EntityData.ParentYangName = "threshold"
    criticalHi.EntityData.SegmentPath = "critical-hi"
    criticalHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/attributes/threshold/" + criticalHi.EntityData.SegmentPath
    criticalHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalHi.EntityData.Children = types.NewOrderedMap()
    criticalHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalHi.ThreshBag})
    criticalHi.EntityData.Leafs = types.NewOrderedMap()

    criticalHi.EntityData.YListKeys = []string {}

    return &(criticalHi.EntityData)
}

// Inventory_Racks_Rack_Attributes_Threshold_CriticalHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Attributes_Threshold_CriticalHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Attributes_Threshold_CriticalHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/attributes/threshold/critical-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Attributes_Threshold_MinorHi
// Minor High
type Inventory_Racks_Rack_Attributes_Threshold_MinorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Attributes_Threshold_MinorHi_ThreshBag
}

func (minorHi *Inventory_Racks_Rack_Attributes_Threshold_MinorHi) GetEntityData() *types.CommonEntityData {
    minorHi.EntityData.YFilter = minorHi.YFilter
    minorHi.EntityData.YangName = "minor-hi"
    minorHi.EntityData.BundleName = "cisco_ios_xr"
    minorHi.EntityData.ParentYangName = "threshold"
    minorHi.EntityData.SegmentPath = "minor-hi"
    minorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/attributes/threshold/" + minorHi.EntityData.SegmentPath
    minorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorHi.EntityData.Children = types.NewOrderedMap()
    minorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorHi.ThreshBag})
    minorHi.EntityData.Leafs = types.NewOrderedMap()

    minorHi.EntityData.YListKeys = []string {}

    return &(minorHi.EntityData)
}

// Inventory_Racks_Rack_Attributes_Threshold_MinorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Attributes_Threshold_MinorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Attributes_Threshold_MinorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/attributes/threshold/minor-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Attributes_Threshold_MajorHi
// Major High
type Inventory_Racks_Rack_Attributes_Threshold_MajorHi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Attributes_Threshold_MajorHi_ThreshBag
}

func (majorHi *Inventory_Racks_Rack_Attributes_Threshold_MajorHi) GetEntityData() *types.CommonEntityData {
    majorHi.EntityData.YFilter = majorHi.YFilter
    majorHi.EntityData.YangName = "major-hi"
    majorHi.EntityData.BundleName = "cisco_ios_xr"
    majorHi.EntityData.ParentYangName = "threshold"
    majorHi.EntityData.SegmentPath = "major-hi"
    majorHi.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/attributes/threshold/" + majorHi.EntityData.SegmentPath
    majorHi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    majorHi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    majorHi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    majorHi.EntityData.Children = types.NewOrderedMap()
    majorHi.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &majorHi.ThreshBag})
    majorHi.EntityData.Leafs = types.NewOrderedMap()

    majorHi.EntityData.YListKeys = []string {}

    return &(majorHi.EntityData)
}

// Inventory_Racks_Rack_Attributes_Threshold_MajorHi_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Attributes_Threshold_MajorHi_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Attributes_Threshold_MajorHi_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "major-hi"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/attributes/threshold/major-hi/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Attributes_Threshold_CriticalLo
// Critical Low
type Inventory_Racks_Rack_Attributes_Threshold_CriticalLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Attributes_Threshold_CriticalLo_ThreshBag
}

func (criticalLo *Inventory_Racks_Rack_Attributes_Threshold_CriticalLo) GetEntityData() *types.CommonEntityData {
    criticalLo.EntityData.YFilter = criticalLo.YFilter
    criticalLo.EntityData.YangName = "critical-lo"
    criticalLo.EntityData.BundleName = "cisco_ios_xr"
    criticalLo.EntityData.ParentYangName = "threshold"
    criticalLo.EntityData.SegmentPath = "critical-lo"
    criticalLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/attributes/threshold/" + criticalLo.EntityData.SegmentPath
    criticalLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    criticalLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    criticalLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    criticalLo.EntityData.Children = types.NewOrderedMap()
    criticalLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &criticalLo.ThreshBag})
    criticalLo.EntityData.Leafs = types.NewOrderedMap()

    criticalLo.EntityData.YListKeys = []string {}

    return &(criticalLo.EntityData)
}

// Inventory_Racks_Rack_Attributes_Threshold_CriticalLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Attributes_Threshold_CriticalLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Attributes_Threshold_CriticalLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "critical-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/attributes/threshold/critical-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Attributes_Threshold_MinorLo
// Minor Low
type Inventory_Racks_Rack_Attributes_Threshold_MinorLo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Environment threshold info.
    ThreshBag Inventory_Racks_Rack_Attributes_Threshold_MinorLo_ThreshBag
}

func (minorLo *Inventory_Racks_Rack_Attributes_Threshold_MinorLo) GetEntityData() *types.CommonEntityData {
    minorLo.EntityData.YFilter = minorLo.YFilter
    minorLo.EntityData.YangName = "minor-lo"
    minorLo.EntityData.BundleName = "cisco_ios_xr"
    minorLo.EntityData.ParentYangName = "threshold"
    minorLo.EntityData.SegmentPath = "minor-lo"
    minorLo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/attributes/threshold/" + minorLo.EntityData.SegmentPath
    minorLo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    minorLo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    minorLo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    minorLo.EntityData.Children = types.NewOrderedMap()
    minorLo.EntityData.Children.Append("thresh-bag", types.YChild{"ThreshBag", &minorLo.ThreshBag})
    minorLo.EntityData.Leafs = types.NewOrderedMap()

    minorLo.EntityData.YListKeys = []string {}

    return &(minorLo.EntityData)
}

// Inventory_Racks_Rack_Attributes_Threshold_MinorLo_ThreshBag
// Environment threshold info
type Inventory_Racks_Rack_Attributes_Threshold_MinorLo_ThreshBag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates minor, major, critical severities. The type is interface{} with
    // range: 0..4294967295.
    ThresholdSeverity interface{}

    // Indicates relation between sensor value and threshold. The type is
    // interface{} with range: 0..4294967295.
    ThresholdRelation interface{}

    // Value of the configured threshold. The type is interface{} with range:
    // 0..4294967295.
    ThresholdValue interface{}

    // Indicates the result of the most recent evaluation of the thresholD. The
    // type is bool.
    ThresholdEvaluation interface{}

    // Indicates whether or not a notification should result, in case of threshold
    // violation. The type is bool.
    ThresholdNotificationEnabled interface{}
}

func (threshBag *Inventory_Racks_Rack_Attributes_Threshold_MinorLo_ThreshBag) GetEntityData() *types.CommonEntityData {
    threshBag.EntityData.YFilter = threshBag.YFilter
    threshBag.EntityData.YangName = "thresh-bag"
    threshBag.EntityData.BundleName = "cisco_ios_xr"
    threshBag.EntityData.ParentYangName = "minor-lo"
    threshBag.EntityData.SegmentPath = "thresh-bag"
    threshBag.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/attributes/threshold/minor-lo/" + threshBag.EntityData.SegmentPath
    threshBag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshBag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshBag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshBag.EntityData.Children = types.NewOrderedMap()
    threshBag.EntityData.Leafs = types.NewOrderedMap()
    threshBag.EntityData.Leafs.Append("threshold-severity", types.YLeaf{"ThresholdSeverity", threshBag.ThresholdSeverity})
    threshBag.EntityData.Leafs.Append("threshold-relation", types.YLeaf{"ThresholdRelation", threshBag.ThresholdRelation})
    threshBag.EntityData.Leafs.Append("threshold-value", types.YLeaf{"ThresholdValue", threshBag.ThresholdValue})
    threshBag.EntityData.Leafs.Append("threshold-evaluation", types.YLeaf{"ThresholdEvaluation", threshBag.ThresholdEvaluation})
    threshBag.EntityData.Leafs.Append("threshold-notification-enabled", types.YLeaf{"ThresholdNotificationEnabled", threshBag.ThresholdNotificationEnabled})

    threshBag.EntityData.YListKeys = []string {}

    return &(threshBag.EntityData)
}

// Inventory_Racks_Rack_Attributes_FruInfo
// Inventory EDM FRU info
type Inventory_Racks_Rack_Attributes_FruInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // card admin state: shutdown or not. The type is interface{} with range:
    // -2147483648..2147483647.
    CardAdministrativeState interface{}

    // power admin state: up or down. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerAdministrativeState interface{}

    // card operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    CardOperationalState interface{}

    // card is monitored by a manager or left unmonitored. The type is interface{}
    // with range: -2147483648..2147483647.
    CardMonitorState interface{}

    // card reset reason enum. The type is CardResetReason.
    CardResetReason interface{}

    // power current: not implemented. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerCurrentMeasurement interface{}

    // Power operation state. The type is interface{} with range:
    // -2147483648..2147483647.
    PowerOperationalState interface{}

    // last card oper change state.
    LastOperationalStateChange Inventory_Racks_Rack_Attributes_FruInfo_LastOperationalStateChange

    // card up time.
    CardUpTime Inventory_Racks_Rack_Attributes_FruInfo_CardUpTime
}

func (fruInfo *Inventory_Racks_Rack_Attributes_FruInfo) GetEntityData() *types.CommonEntityData {
    fruInfo.EntityData.YFilter = fruInfo.YFilter
    fruInfo.EntityData.YangName = "fru-info"
    fruInfo.EntityData.BundleName = "cisco_ios_xr"
    fruInfo.EntityData.ParentYangName = "attributes"
    fruInfo.EntityData.SegmentPath = "fru-info"
    fruInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/attributes/" + fruInfo.EntityData.SegmentPath
    fruInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fruInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fruInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fruInfo.EntityData.Children = types.NewOrderedMap()
    fruInfo.EntityData.Children.Append("last-operational-state-change", types.YChild{"LastOperationalStateChange", &fruInfo.LastOperationalStateChange})
    fruInfo.EntityData.Children.Append("card-up-time", types.YChild{"CardUpTime", &fruInfo.CardUpTime})
    fruInfo.EntityData.Leafs = types.NewOrderedMap()
    fruInfo.EntityData.Leafs.Append("card-administrative-state", types.YLeaf{"CardAdministrativeState", fruInfo.CardAdministrativeState})
    fruInfo.EntityData.Leafs.Append("power-administrative-state", types.YLeaf{"PowerAdministrativeState", fruInfo.PowerAdministrativeState})
    fruInfo.EntityData.Leafs.Append("card-operational-state", types.YLeaf{"CardOperationalState", fruInfo.CardOperationalState})
    fruInfo.EntityData.Leafs.Append("card-monitor-state", types.YLeaf{"CardMonitorState", fruInfo.CardMonitorState})
    fruInfo.EntityData.Leafs.Append("card-reset-reason", types.YLeaf{"CardResetReason", fruInfo.CardResetReason})
    fruInfo.EntityData.Leafs.Append("power-current-measurement", types.YLeaf{"PowerCurrentMeasurement", fruInfo.PowerCurrentMeasurement})
    fruInfo.EntityData.Leafs.Append("power-operational-state", types.YLeaf{"PowerOperationalState", fruInfo.PowerOperationalState})

    fruInfo.EntityData.YListKeys = []string {}

    return &(fruInfo.EntityData)
}

// Inventory_Racks_Rack_Attributes_FruInfo_LastOperationalStateChange
// last card oper change state
type Inventory_Racks_Rack_Attributes_FruInfo_LastOperationalStateChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (lastOperationalStateChange *Inventory_Racks_Rack_Attributes_FruInfo_LastOperationalStateChange) GetEntityData() *types.CommonEntityData {
    lastOperationalStateChange.EntityData.YFilter = lastOperationalStateChange.YFilter
    lastOperationalStateChange.EntityData.YangName = "last-operational-state-change"
    lastOperationalStateChange.EntityData.BundleName = "cisco_ios_xr"
    lastOperationalStateChange.EntityData.ParentYangName = "fru-info"
    lastOperationalStateChange.EntityData.SegmentPath = "last-operational-state-change"
    lastOperationalStateChange.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/attributes/fru-info/" + lastOperationalStateChange.EntityData.SegmentPath
    lastOperationalStateChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastOperationalStateChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastOperationalStateChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastOperationalStateChange.EntityData.Children = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs = types.NewOrderedMap()
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", lastOperationalStateChange.TimeInSeconds})
    lastOperationalStateChange.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", lastOperationalStateChange.TimeInNanoSeconds})

    lastOperationalStateChange.EntityData.YListKeys = []string {}

    return &(lastOperationalStateChange.EntityData)
}

// Inventory_Racks_Rack_Attributes_FruInfo_CardUpTime
// card up time
type Inventory_Racks_Rack_Attributes_FruInfo_CardUpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    TimeInSeconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    TimeInNanoSeconds interface{}
}

func (cardUpTime *Inventory_Racks_Rack_Attributes_FruInfo_CardUpTime) GetEntityData() *types.CommonEntityData {
    cardUpTime.EntityData.YFilter = cardUpTime.YFilter
    cardUpTime.EntityData.YangName = "card-up-time"
    cardUpTime.EntityData.BundleName = "cisco_ios_xr"
    cardUpTime.EntityData.ParentYangName = "fru-info"
    cardUpTime.EntityData.SegmentPath = "card-up-time"
    cardUpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/attributes/fru-info/" + cardUpTime.EntityData.SegmentPath
    cardUpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardUpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardUpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardUpTime.EntityData.Children = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs = types.NewOrderedMap()
    cardUpTime.EntityData.Leafs.Append("time-in-seconds", types.YLeaf{"TimeInSeconds", cardUpTime.TimeInSeconds})
    cardUpTime.EntityData.Leafs.Append("time-in-nano-seconds", types.YLeaf{"TimeInNanoSeconds", cardUpTime.TimeInNanoSeconds})

    cardUpTime.EntityData.YListKeys = []string {}

    return &(cardUpTime.EntityData)
}

// Inventory_Racks_Rack_Attributes_InvEepromInfo
// Inventory EDM EEPROM Information Bag
type Inventory_Racks_Rack_Attributes_InvEepromInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inventory card type. The type is interface{} with range: 0..255.
    InvCardType interface{}

    // EEPROM hex data. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    OpaqueData interface{}

    // size of the EEPROM hex data. The type is interface{} with range:
    // 0..4294967295.
    OpaqueDataSize interface{}

    // use eeprom instead of opaque data. The type is interface{} with range:
    // 0..4294967295.
    HasEeprom interface{}

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // Optics form factor. The type is interface{} with range: 0..4294967295.
    FormFactor interface{}

    // Connector type. The type is interface{} with range: 0..4294967295.
    ConnectorType interface{}

    // Otn Application Code. The type is interface{} with range: 0..4294967295.
    OtnApplicationCode interface{}

    // Sonet Application Code. The type is interface{} with range: 0..4294967295.
    SonetApplicationCode interface{}

    // Ethernet Compliance Code. The type is interface{} with range:
    // 0..4294967295.
    EthernetComplianceCode interface{}

    // Date string in IDPROM. The type is string with length: 0..255.
    DateString interface{}

    // EEPROM data not from hex data.
    Eeprom Inventory_Racks_Rack_Attributes_InvEepromInfo_Eeprom
}

func (invEepromInfo *Inventory_Racks_Rack_Attributes_InvEepromInfo) GetEntityData() *types.CommonEntityData {
    invEepromInfo.EntityData.YFilter = invEepromInfo.YFilter
    invEepromInfo.EntityData.YangName = "inv-eeprom-info"
    invEepromInfo.EntityData.BundleName = "cisco_ios_xr"
    invEepromInfo.EntityData.ParentYangName = "attributes"
    invEepromInfo.EntityData.SegmentPath = "inv-eeprom-info"
    invEepromInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/attributes/" + invEepromInfo.EntityData.SegmentPath
    invEepromInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invEepromInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invEepromInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invEepromInfo.EntityData.Children = types.NewOrderedMap()
    invEepromInfo.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", &invEepromInfo.Eeprom})
    invEepromInfo.EntityData.Leafs = types.NewOrderedMap()
    invEepromInfo.EntityData.Leafs.Append("inv-card-type", types.YLeaf{"InvCardType", invEepromInfo.InvCardType})
    invEepromInfo.EntityData.Leafs.Append("opaque-data", types.YLeaf{"OpaqueData", invEepromInfo.OpaqueData})
    invEepromInfo.EntityData.Leafs.Append("opaque-data-size", types.YLeaf{"OpaqueDataSize", invEepromInfo.OpaqueDataSize})
    invEepromInfo.EntityData.Leafs.Append("has-eeprom", types.YLeaf{"HasEeprom", invEepromInfo.HasEeprom})
    invEepromInfo.EntityData.Leafs.Append("description", types.YLeaf{"Description", invEepromInfo.Description})
    invEepromInfo.EntityData.Leafs.Append("form-factor", types.YLeaf{"FormFactor", invEepromInfo.FormFactor})
    invEepromInfo.EntityData.Leafs.Append("connector-type", types.YLeaf{"ConnectorType", invEepromInfo.ConnectorType})
    invEepromInfo.EntityData.Leafs.Append("otn-application-code", types.YLeaf{"OtnApplicationCode", invEepromInfo.OtnApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("sonet-application-code", types.YLeaf{"SonetApplicationCode", invEepromInfo.SonetApplicationCode})
    invEepromInfo.EntityData.Leafs.Append("ethernet-compliance-code", types.YLeaf{"EthernetComplianceCode", invEepromInfo.EthernetComplianceCode})
    invEepromInfo.EntityData.Leafs.Append("date-string", types.YLeaf{"DateString", invEepromInfo.DateString})

    invEepromInfo.EntityData.YListKeys = []string {}

    return &(invEepromInfo.EntityData)
}

// Inventory_Racks_Rack_Attributes_InvEepromInfo_Eeprom
// EEPROM data not from hex data
type Inventory_Racks_Rack_Attributes_InvEepromInfo_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A textual description of physical entity. The type is string with length:
    // 0..255.
    Description interface{}

    // IDPROM Format Revision. The type is string with length: 0..255.
    IdpromFormatRev interface{}

    // Controller family. The type is string with length: 0..255.
    ControllerFamily interface{}

    // Controller type. The type is string with length: 0..255.
    ControllerType interface{}

    // Version ID. The type is string with length: 0..255.
    Vid interface{}

    // Hardware Revision. The type is string with length: 0..255.
    Hwid interface{}

    // Product ID. The type is string with length: 0..255.
    Pid interface{}

    // UDI description. The type is string with length: 0..255.
    UdiDescription interface{}

    // UDI name. The type is string with length: 0..255.
    UdiName interface{}

    // Common Language Equipment Identifier (CLEI) code. The type is string with
    // length: 0..255.
    Clei interface{}

    // Equipment Catalog Item (ECI) number. The type is string with length:
    // 0..255.
    Eci interface{}

    // Top assembly part number. The type is string with length: 0..255.
    TopAssemPartNum interface{}

    // Top assembly revision number. The type is string with length: 0..255.
    TopAssemVid interface{}

    // PCA number. The type is string with length: 0..255.
    PcaNum interface{}

    // PCA revision ID. The type is string with length: 0..255.
    Pcavid interface{}

    // Chassis serial number. The type is string with length: 0..255.
    ChassisSid interface{}

    // Deviation Number # 1. The type is string with length: 0..255.
    DevNum1 interface{}

    // Deviation Number # 2. The type is string with length: 0..255.
    DevNum2 interface{}

    // Deviation Number # 3. The type is string with length: 0..255.
    DevNum3 interface{}

    // Deviation Number # 4. The type is string with length: 0..255.
    DevNum4 interface{}

    // Deviation Number # 5. The type is string with length: 0..255.
    DevNum5 interface{}

    // Deviation Number # 6. The type is string with length: 0..255.
    DevNum6 interface{}

    // Deviation Number # 7. The type is string with length: 0..255.
    DevNum7 interface{}

    // Manufacturing Test Data. The type is string with length: 0..255.
    ManuTestData interface{}

    // Asset ID. The type is string with length: 0..255.
    AssetId interface{}

    // Asset Alias. The type is string with length: 0..255.
    AssetAlias interface{}

    // Base Mac Address #1. The type is string with length: 0..255.
    BaseMacAddress1 interface{}

    // Mac Address Block Size #1. The type is string with length: 0..255.
    MacAddBlkSize1 interface{}

    // Base Mac Address #2. The type is string with length: 0..255.
    BaseMacAddress2 interface{}

    // Mac Address Block Size #2. The type is string with length: 0..255.
    MacAddBlkSize2 interface{}

    // Base Mac Address #3. The type is string with length: 0..255.
    BaseMacAddress3 interface{}

    // Mac Address Block Size #3. The type is string with length: 0..255.
    MacAddBlkSize3 interface{}

    // Base Mac Address #4. The type is string with length: 0..255.
    BaseMacAddress4 interface{}

    // Mac Address Block Size #4. The type is string with length: 0..255.
    MacAddBlkSize4 interface{}

    // PCB Serial Number. The type is string with length: 0..255.
    PcbSerialNum interface{}

    // Power Supply Type. The type is string with length: 0..255.
    PowerSupplyType interface{}

    // Power Consumption. The type is string with length: 0..255.
    PowerConsumption interface{}

    // Block Signature. The type is string with length: 0..255.
    BlockSignature interface{}

    // Block Version. The type is string with length: 0..255.
    BlockVersion interface{}

    // Block Length. The type is string with length: 0..255.
    BlockLength interface{}

    // Block Checksum. The type is string with length: 0..255.
    BlockChecksum interface{}

    // EEPROM Size. The type is string with length: 0..255.
    EepromSize interface{}

    // Block Count. The type is string with length: 0..255.
    BlockCount interface{}

    // FRU Major Type. The type is string with length: 0..255.
    FruMajorType interface{}

    // FRU Minor Type. The type is string with length: 0..255.
    FruMinorType interface{}

    // OEM String. The type is string with length: 0..255.
    OemString interface{}

    // Product ID. The type is string with length: 0..255.
    ProductId interface{}

    // Serial Number. The type is string with length: 0..255.
    SerialNumber interface{}

    // Part Number. The type is string with length: 0..255.
    PartNumber interface{}

    // Part Revision. The type is string with length: 0..255.
    PartRevision interface{}

    // MFG Deviation. The type is string with length: 0..255.
    MfgDeviation interface{}

    // Hardware Version. The type is string with length: 0..255.
    HwVersion interface{}

    // MFG Bits. The type is string with length: 0..255.
    MfgBits interface{}

    // Engineer Use. The type is string with length: 0..255.
    EngineerUse interface{}

    // SNMP OID. The type is string with length: 0..255.
    Snmpoid interface{}

    // RMA Code. The type is string with length: 0..255.
    RmaCode interface{}

    // AlphaNumeric Equipment Catalog Item (ECI) number. The type is string with
    // length: 0..255.
    EciAlphaNumber interface{}

    // RMA Data.
    Rma Inventory_Racks_Rack_Attributes_InvEepromInfo_Eeprom_Rma
}

func (eeprom *Inventory_Racks_Rack_Attributes_InvEepromInfo_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "inv-eeprom-info"
    eeprom.EntityData.SegmentPath = "eeprom"
    eeprom.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/attributes/inv-eeprom-info/" + eeprom.EntityData.SegmentPath
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Children.Append("rma", types.YChild{"Rma", &eeprom.Rma})
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("description", types.YLeaf{"Description", eeprom.Description})
    eeprom.EntityData.Leafs.Append("idprom-format-rev", types.YLeaf{"IdpromFormatRev", eeprom.IdpromFormatRev})
    eeprom.EntityData.Leafs.Append("controller-family", types.YLeaf{"ControllerFamily", eeprom.ControllerFamily})
    eeprom.EntityData.Leafs.Append("controller-type", types.YLeaf{"ControllerType", eeprom.ControllerType})
    eeprom.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", eeprom.Vid})
    eeprom.EntityData.Leafs.Append("hwid", types.YLeaf{"Hwid", eeprom.Hwid})
    eeprom.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", eeprom.Pid})
    eeprom.EntityData.Leafs.Append("udi-description", types.YLeaf{"UdiDescription", eeprom.UdiDescription})
    eeprom.EntityData.Leafs.Append("udi-name", types.YLeaf{"UdiName", eeprom.UdiName})
    eeprom.EntityData.Leafs.Append("clei", types.YLeaf{"Clei", eeprom.Clei})
    eeprom.EntityData.Leafs.Append("eci", types.YLeaf{"Eci", eeprom.Eci})
    eeprom.EntityData.Leafs.Append("top-assem-part-num", types.YLeaf{"TopAssemPartNum", eeprom.TopAssemPartNum})
    eeprom.EntityData.Leafs.Append("top-assem-vid", types.YLeaf{"TopAssemVid", eeprom.TopAssemVid})
    eeprom.EntityData.Leafs.Append("pca-num", types.YLeaf{"PcaNum", eeprom.PcaNum})
    eeprom.EntityData.Leafs.Append("pcavid", types.YLeaf{"Pcavid", eeprom.Pcavid})
    eeprom.EntityData.Leafs.Append("chassis-sid", types.YLeaf{"ChassisSid", eeprom.ChassisSid})
    eeprom.EntityData.Leafs.Append("dev-num1", types.YLeaf{"DevNum1", eeprom.DevNum1})
    eeprom.EntityData.Leafs.Append("dev-num2", types.YLeaf{"DevNum2", eeprom.DevNum2})
    eeprom.EntityData.Leafs.Append("dev-num3", types.YLeaf{"DevNum3", eeprom.DevNum3})
    eeprom.EntityData.Leafs.Append("dev-num4", types.YLeaf{"DevNum4", eeprom.DevNum4})
    eeprom.EntityData.Leafs.Append("dev-num5", types.YLeaf{"DevNum5", eeprom.DevNum5})
    eeprom.EntityData.Leafs.Append("dev-num6", types.YLeaf{"DevNum6", eeprom.DevNum6})
    eeprom.EntityData.Leafs.Append("dev-num7", types.YLeaf{"DevNum7", eeprom.DevNum7})
    eeprom.EntityData.Leafs.Append("manu-test-data", types.YLeaf{"ManuTestData", eeprom.ManuTestData})
    eeprom.EntityData.Leafs.Append("asset-id", types.YLeaf{"AssetId", eeprom.AssetId})
    eeprom.EntityData.Leafs.Append("asset-alias", types.YLeaf{"AssetAlias", eeprom.AssetAlias})
    eeprom.EntityData.Leafs.Append("base-mac-address1", types.YLeaf{"BaseMacAddress1", eeprom.BaseMacAddress1})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size1", types.YLeaf{"MacAddBlkSize1", eeprom.MacAddBlkSize1})
    eeprom.EntityData.Leafs.Append("base-mac-address2", types.YLeaf{"BaseMacAddress2", eeprom.BaseMacAddress2})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size2", types.YLeaf{"MacAddBlkSize2", eeprom.MacAddBlkSize2})
    eeprom.EntityData.Leafs.Append("base-mac-address3", types.YLeaf{"BaseMacAddress3", eeprom.BaseMacAddress3})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size3", types.YLeaf{"MacAddBlkSize3", eeprom.MacAddBlkSize3})
    eeprom.EntityData.Leafs.Append("base-mac-address4", types.YLeaf{"BaseMacAddress4", eeprom.BaseMacAddress4})
    eeprom.EntityData.Leafs.Append("mac-add-blk-size4", types.YLeaf{"MacAddBlkSize4", eeprom.MacAddBlkSize4})
    eeprom.EntityData.Leafs.Append("pcb-serial-num", types.YLeaf{"PcbSerialNum", eeprom.PcbSerialNum})
    eeprom.EntityData.Leafs.Append("power-supply-type", types.YLeaf{"PowerSupplyType", eeprom.PowerSupplyType})
    eeprom.EntityData.Leafs.Append("power-consumption", types.YLeaf{"PowerConsumption", eeprom.PowerConsumption})
    eeprom.EntityData.Leafs.Append("block-signature", types.YLeaf{"BlockSignature", eeprom.BlockSignature})
    eeprom.EntityData.Leafs.Append("block-version", types.YLeaf{"BlockVersion", eeprom.BlockVersion})
    eeprom.EntityData.Leafs.Append("block-length", types.YLeaf{"BlockLength", eeprom.BlockLength})
    eeprom.EntityData.Leafs.Append("block-checksum", types.YLeaf{"BlockChecksum", eeprom.BlockChecksum})
    eeprom.EntityData.Leafs.Append("eeprom-size", types.YLeaf{"EepromSize", eeprom.EepromSize})
    eeprom.EntityData.Leafs.Append("block-count", types.YLeaf{"BlockCount", eeprom.BlockCount})
    eeprom.EntityData.Leafs.Append("fru-major-type", types.YLeaf{"FruMajorType", eeprom.FruMajorType})
    eeprom.EntityData.Leafs.Append("fru-minor-type", types.YLeaf{"FruMinorType", eeprom.FruMinorType})
    eeprom.EntityData.Leafs.Append("oem-string", types.YLeaf{"OemString", eeprom.OemString})
    eeprom.EntityData.Leafs.Append("product-id", types.YLeaf{"ProductId", eeprom.ProductId})
    eeprom.EntityData.Leafs.Append("serial-number", types.YLeaf{"SerialNumber", eeprom.SerialNumber})
    eeprom.EntityData.Leafs.Append("part-number", types.YLeaf{"PartNumber", eeprom.PartNumber})
    eeprom.EntityData.Leafs.Append("part-revision", types.YLeaf{"PartRevision", eeprom.PartRevision})
    eeprom.EntityData.Leafs.Append("mfg-deviation", types.YLeaf{"MfgDeviation", eeprom.MfgDeviation})
    eeprom.EntityData.Leafs.Append("hw-version", types.YLeaf{"HwVersion", eeprom.HwVersion})
    eeprom.EntityData.Leafs.Append("mfg-bits", types.YLeaf{"MfgBits", eeprom.MfgBits})
    eeprom.EntityData.Leafs.Append("engineer-use", types.YLeaf{"EngineerUse", eeprom.EngineerUse})
    eeprom.EntityData.Leafs.Append("snmpoid", types.YLeaf{"Snmpoid", eeprom.Snmpoid})
    eeprom.EntityData.Leafs.Append("rma-code", types.YLeaf{"RmaCode", eeprom.RmaCode})
    eeprom.EntityData.Leafs.Append("eci-alpha-number", types.YLeaf{"EciAlphaNumber", eeprom.EciAlphaNumber})

    eeprom.EntityData.YListKeys = []string {}

    return &(eeprom.EntityData)
}

// Inventory_Racks_Rack_Attributes_InvEepromInfo_Eeprom_Rma
// RMA Data
type Inventory_Racks_Rack_Attributes_InvEepromInfo_Eeprom_Rma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Test history. The type is string with length: 0..255.
    TestHistory interface{}

    // RMA tracking number format is N-N-N. The type is string with length:
    // 0..255.
    RmaNumber interface{}

    // RMA history. The type is string with length: 0..255.
    RmaHistory interface{}
}

func (rma *Inventory_Racks_Rack_Attributes_InvEepromInfo_Eeprom_Rma) GetEntityData() *types.CommonEntityData {
    rma.EntityData.YFilter = rma.YFilter
    rma.EntityData.YangName = "rma"
    rma.EntityData.BundleName = "cisco_ios_xr"
    rma.EntityData.ParentYangName = "eeprom"
    rma.EntityData.SegmentPath = "rma"
    rma.EntityData.AbsolutePath = "Cisco-IOS-XR-invmgr-oper:inventory/racks/rack/attributes/inv-eeprom-info/eeprom/" + rma.EntityData.SegmentPath
    rma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rma.EntityData.Children = types.NewOrderedMap()
    rma.EntityData.Leafs = types.NewOrderedMap()
    rma.EntityData.Leafs.Append("test-history", types.YLeaf{"TestHistory", rma.TestHistory})
    rma.EntityData.Leafs.Append("rma-number", types.YLeaf{"RmaNumber", rma.RmaNumber})
    rma.EntityData.Leafs.Append("rma-history", types.YLeaf{"RmaHistory", rma.RmaHistory})

    rma.EntityData.YListKeys = []string {}

    return &(rma.EntityData)
}

