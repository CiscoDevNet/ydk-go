// This module contains a collection of YANG definitions
// for Cisco IOS-XR clns-isis package operational data.
// 
// This module contains definitions
// for the following management objects:
//   isis: IS-IS operational data
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package clns_isis_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package clns_isis_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-clns-isis-oper isis}", reflect.TypeOf(Isis{}))
    ydk.RegisterEntity("Cisco-IOS-XR-clns-isis-oper:isis", reflect.TypeOf(Isis{}))
}

// SrmsMiFlagEB represents Srms mi flag e b
type SrmsMiFlagEB string

const (
    // False
    SrmsMiFlagEB_false SrmsMiFlagEB = "false"

    // True
    SrmsMiFlagEB_true SrmsMiFlagEB = "true"
)

// SrmsMiAfEB represents Srms mi af e b
type SrmsMiAfEB string

const (
    // None
    SrmsMiAfEB_none SrmsMiAfEB = "none"

    // IPv4
    SrmsMiAfEB_ipv4 SrmsMiAfEB = "ipv4"

    // IPv6
    SrmsMiAfEB_ipv6 SrmsMiAfEB = "ipv6"
)

// SrmsMiSrcEB represents Srms mi src e b
type SrmsMiSrcEB string

const (
    // None
    SrmsMiSrcEB_none SrmsMiSrcEB = "none"

    // Local
    SrmsMiSrcEB_local SrmsMiSrcEB = "local"

    // Remote
    SrmsMiSrcEB_remote SrmsMiSrcEB = "remote"
)

// IsisUloopEvent represents Isis uloop event
type IsisUloopEvent string

const (
    // isis u loop event none
    IsisUloopEvent_isis_u_loop_event_none IsisUloopEvent = "isis-u-loop-event-none"

    // isis u loop event link down
    IsisUloopEvent_isis_u_loop_event_link_down IsisUloopEvent = "isis-u-loop-event-link-down"

    // isis u loop event link up
    IsisUloopEvent_isis_u_loop_event_link_up IsisUloopEvent = "isis-u-loop-event-link-up"

    // isis u loop event ol bit set
    IsisUloopEvent_isis_u_loop_event_ol_bit_set IsisUloopEvent = "isis-u-loop-event-ol-bit-set"

    // isis u loop event ol bit unset
    IsisUloopEvent_isis_u_loop_event_ol_bit_unset IsisUloopEvent = "isis-u-loop-event-ol-bit-unset"
)

// IsisUloopAvoidance represents Isis uloop avoidance
type IsisUloopAvoidance string

const (
    // No MicroLoop avoidance
    IsisUloopAvoidance_isis_u_loop_avoidance_type_none IsisUloopAvoidance = "isis-u-loop-avoidance-type-none"

    // Apply MicroLoop avoidance for all prefixes
    IsisUloopAvoidance_isis_u_loop_avoidance_type_all IsisUloopAvoidance = "isis-u-loop-avoidance-type-all"

    // Apply MicroLoop avoidance only for protected
    // prefixes
    IsisUloopAvoidance_isis_u_loop_avoidance_type_protected IsisUloopAvoidance = "isis-u-loop-avoidance-type-protected"

    // Segment Routing MicroLoop avoidance for All
    // single-link changes
    IsisUloopAvoidance_isis_u_loop_avoidance_type_sr IsisUloopAvoidance = "isis-u-loop-avoidance-type-sr"
)

// IsisMetricStyle represents Isis metric style
type IsisMetricStyle string

const (
    // old-style (ISO 10589) metrics
    IsisMetricStyle_isis_metric_style_narrow IsisMetricStyle = "isis-metric-style-narrow"

    // new-style 32-bit metrics
    IsisMetricStyle_isis_metric_style_wide IsisMetricStyle = "isis-metric-style-wide"

    // send/accept both forms of metric
    IsisMetricStyle_isis_metric_style_transition IsisMetricStyle = "isis-metric-style-transition"
)

// IsisStartupStatus represents Isis startup status
type IsisStartupStatus string

const (
    // Startup-state-machine controlled restart in
    // progress
    IsisStartupStatus_isis_startup_ssm_active IsisStartupStatus = "isis-startup-ssm-active"

    // Startup-state-machine controlled restart
    // complete
    IsisStartupStatus_isis_startup_ssm_complete IsisStartupStatus = "isis-startup-ssm-complete"

    // Startup-state-machine controlled restart
    // aborted
    IsisStartupStatus_isis_startup_ssm_aborted IsisStartupStatus = "isis-startup-ssm-aborted"

    // Startup-state-machine controlled not attempted
    IsisStartupStatus_isis_startup_ssm_not_run IsisStartupStatus = "isis-startup-ssm-not-run"
)

// IsisNsfFlavor represents Isis nsf flavor
type IsisNsfFlavor string

const (
    // NSF not configured
    IsisNsfFlavor_isis_nsf_flav_or_none IsisNsfFlavor = "isis-nsf-flav-or-none"

    // Cisco-proprietary NSF
    IsisNsfFlavor_isis_nsf_flav_or_cisco IsisNsfFlavor = "isis-nsf-flav-or-cisco"

    // IETF-standard NSF
    IsisNsfFlavor_isis_nsf_flav_or_ietf IsisNsfFlavor = "isis-nsf-flav-or-ietf"

    // Cisco-proprietary NSR
    IsisNsfFlavor_isis_nsf_flav_or_nsr IsisNsfFlavor = "isis-nsf-flav-or-nsr"
)

// IsisErrLogLevel represents Isis err log level
type IsisErrLogLevel string

const (
    // isis err log level info
    IsisErrLogLevel_isis_err_log_level_info IsisErrLogLevel = "isis-err-log-level-info"

    // isis err log level warn
    IsisErrLogLevel_isis_err_log_level_warn IsisErrLogLevel = "isis-err-log-level-warn"

    // isis err log level critical
    IsisErrLogLevel_isis_err_log_level_critical IsisErrLogLevel = "isis-err-log-level-critical"
)

// IsisIfAfPrefixUnknownReason represents Isis if af prefix unknown reason
type IsisIfAfPrefixUnknownReason string

const (
    // isis intf af prefix unknown adv suppressed
    IsisIfAfPrefixUnknownReason_isis_intf_af_prefix_unknown_adv_suppressed IsisIfAfPrefixUnknownReason = "isis-intf-af-prefix-unknown-adv-suppressed"

    // isis intf af prefix unknown global addr reg
    // error
    IsisIfAfPrefixUnknownReason_isis_intf_af_prefix_unknown_global_addr_reg_error IsisIfAfPrefixUnknownReason = "isis-intf-af-prefix-unknown-global-addr-reg-error"

    // isis intf af prefix unknown internal error
    IsisIfAfPrefixUnknownReason_isis_intf_af_prefix_unknown_internal_error IsisIfAfPrefixUnknownReason = "isis-intf-af-prefix-unknown-internal-error"
)

// IsisIfAfFwdAddrUnknownReason represents Isis if af fwd addr unknown reason
type IsisIfAfFwdAddrUnknownReason string

const (
    // isis intf af fwd addr unknown cfg passive
    IsisIfAfFwdAddrUnknownReason_isis_intf_af_fwd_addr_unknown_cfg_passive IsisIfAfFwdAddrUnknownReason = "isis-intf-af-fwd-addr-unknown-cfg-passive"

    // isis intf af fwd addr unknown proto doesnt
    // exist
    IsisIfAfFwdAddrUnknownReason_isis_intf_af_fwd_addr_unknown_proto_doesnt_exist IsisIfAfFwdAddrUnknownReason = "isis-intf-af-fwd-addr-unknown-proto-doesnt-exist"

    // isis intf af fwd addr unknown next hop reg
    // error
    IsisIfAfFwdAddrUnknownReason_isis_intf_af_fwd_addr_unknown_next_hop_reg_error IsisIfAfFwdAddrUnknownReason = "isis-intf-af-fwd-addr-unknown-next-hop-reg-error"

    // isis intf af fwd addr unknown no link local add
    IsisIfAfFwdAddrUnknownReason_isis_intf_af_fwd_addr_unknown_no_link_local_add IsisIfAfFwdAddrUnknownReason = "isis-intf-af-fwd-addr-unknown-no-link-local-add"

    // isis intf af fwd addr unknown af not up
    IsisIfAfFwdAddrUnknownReason_isis_intf_af_fwd_addr_unknown_af_not_up IsisIfAfFwdAddrUnknownReason = "isis-intf-af-fwd-addr-unknown-af-not-up"

    // isis intf af fwd addr unknown vrf enabled
    IsisIfAfFwdAddrUnknownReason_isis_intf_af_fwd_addr_unknown_vrf_enabled IsisIfAfFwdAddrUnknownReason = "isis-intf-af-fwd-addr-unknown-vrf-enabled"

    // isis intf af fwd addr unknown internal error
    IsisIfAfFwdAddrUnknownReason_isis_intf_af_fwd_addr_unknown_internal_error IsisIfAfFwdAddrUnknownReason = "isis-intf-af-fwd-addr-unknown-internal-error"
)

// IsisIfAfProtoDownReason represents Isis if af proto down reason
type IsisIfAfProtoDownReason string

const (
    // isis intf af proto down imd conn fail
    IsisIfAfProtoDownReason_isis_intf_af_proto_down_imd_conn_fail IsisIfAfProtoDownReason = "isis-intf-af-proto-down-imd-conn-fail"

    // isis intf af proto down imd node doesnt exist
    IsisIfAfProtoDownReason_isis_intf_af_proto_down_imd_node_doesnt_exist IsisIfAfProtoDownReason = "isis-intf-af-proto-down-imd-node-doesnt-exist"

    // isis intf af proto down imd exist reg error
    IsisIfAfProtoDownReason_isis_intf_af_proto_down_imd_exist_reg_error IsisIfAfProtoDownReason = "isis-intf-af-proto-down-imd-exist-reg-error"

    // isis intf af proto down imd state reg error
    IsisIfAfProtoDownReason_isis_intf_af_proto_down_imd_state_reg_error IsisIfAfProtoDownReason = "isis-intf-af-proto-down-imd-state-reg-error"

    // isis intf af proto down af not up
    IsisIfAfProtoDownReason_isis_intf_af_proto_down_af_not_up IsisIfAfProtoDownReason = "isis-intf-af-proto-down-af-not-up"

    // isis intf af proto down internal error
    IsisIfAfProtoDownReason_isis_intf_af_proto_down_internal_error IsisIfAfProtoDownReason = "isis-intf-af-proto-down-internal-error"
)

// IsisIfAfDisabledReason represents Isis if af disabled reason
type IsisIfAfDisabledReason string

const (
    // isis intf af disabled no topo enabled
    IsisIfAfDisabledReason_isis_intf_af_disabled_no_topo_enabled IsisIfAfDisabledReason = "isis-intf-af-disabled-no-topo-enabled"

    // isis intf af disabled internal error
    IsisIfAfDisabledReason_isis_intf_af_disabled_internal_error IsisIfAfDisabledReason = "isis-intf-af-disabled-internal-error"
)

// IsisFrrTiebreaker represents Isis frr tiebreaker
type IsisFrrTiebreaker string

const (
    // Backup path is via downstream node
    IsisFrrTiebreaker_isis_frr_tiebreaker_down_stream IsisFrrTiebreaker = "isis-frr-tiebreaker-down-stream"

    // Backup path is line card disjoint
    IsisFrrTiebreaker_isis_frr_tiebreaker_lc_disjoint IsisFrrTiebreaker = "isis-frr-tiebreaker-lc-disjoint"

    // Backup path has lowest metric
    IsisFrrTiebreaker_isis_frr_tiebreaker_low_est_backup_metric IsisFrrTiebreaker = "isis-frr-tiebreaker-low-est-backup-metric"

    // Backup path is node protecting
    IsisFrrTiebreaker_isis_frr_tiebreaker_node_protecting IsisFrrTiebreaker = "isis-frr-tiebreaker-node-protecting"

    // Backup path is ECMP
    IsisFrrTiebreaker_isis_frr_tiebreaker_primary_path IsisFrrTiebreaker = "isis-frr-tiebreaker-primary-path"

    // Backup path is not an ECMP
    IsisFrrTiebreaker_isis_frr_tiebreaker_secondary_path IsisFrrTiebreaker = "isis-frr-tiebreaker-secondary-path"

    // Backup path is SRLG disjoint
    IsisFrrTiebreaker_isis_frr_tiebreaker_srlg_disjoint IsisFrrTiebreaker = "isis-frr-tiebreaker-srlg-disjoint"

    // Backup path is link protecting
    IsisFrrTiebreaker_isis_frr_tiebreaker_default IsisFrrTiebreaker = "isis-frr-tiebreaker-default"
)

// IsisFrr represents Isis frr
type IsisFrr string

const (
    // Computation disabled
    IsisFrr_isis_frr_type_none IsisFrr = "isis-frr-type-none"

    // Prefix independent per-link computation
    IsisFrr_isis_frr_type_per_link IsisFrr = "isis-frr-type-per-link"

    // Prefix dependent computation
    IsisFrr_isis_frr_type_per_prefix IsisFrr = "isis-frr-type-per-prefix"

    // Segment Routing Microloop Avoidance computation
    IsisFrr_isis_frr_type_sr_u_loop IsisFrr = "isis-frr-type-sr-u-loop"
)

// IsisIfTopoAdvPrefixDisabledReason represents Isis if topo adv prefix disabled reason
type IsisIfTopoAdvPrefixDisabledReason string

const (
    // isis intf topo adv prefix disabled intf
    // suppressed
    IsisIfTopoAdvPrefixDisabledReason_isis_intf_topo_adv_prefix_disabled_intf_suppressed IsisIfTopoAdvPrefixDisabledReason = "isis-intf-topo-adv-prefix-disabled-intf-suppressed"

    // isis intf topo adv prefix disabled af not up
    IsisIfTopoAdvPrefixDisabledReason_isis_intf_topo_adv_prefix_disabled_af_not_up IsisIfTopoAdvPrefixDisabledReason = "isis-intf-topo-adv-prefix-disabled-af-not-up"

    // isis intf topo adv prefix disabled af prefixes
    // unknown
    IsisIfTopoAdvPrefixDisabledReason_isis_intf_topo_adv_prefix_disabled_af_prefixes_unknown IsisIfTopoAdvPrefixDisabledReason = "isis-intf-topo-adv-prefix-disabled-af-prefixes-unknown"

    // isis intf topo adv prefix disabled internal
    // error
    IsisIfTopoAdvPrefixDisabledReason_isis_intf_topo_adv_prefix_disabled_internal_error IsisIfTopoAdvPrefixDisabledReason = "isis-intf-topo-adv-prefix-disabled-internal-error"
)

// IsisIfTopoAdjFormDisabledReason represents Isis if topo adj form disabled reason
type IsisIfTopoAdjFormDisabledReason string

const (
    // isis intf topo adj form disabled intf passive
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_intf_passive IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-intf-passive"

    // isis intf topo adj form disabled af not up
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_af_not_up IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-af-not-up"

    // isis intf topo adj form disabled af fwd addr
    // unknown
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_af_fwd_addr_unknown IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-af-fwd-addr-unknown"

    // isis intf topo adj form disabled topo not cfg
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_topo_not_cfg IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-topo-not-cfg"

    // isis intf topo adj form disabled topo can not
    // participate
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_topo_can_not_participate IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-topo-can-not-participate"

    // isis intf topo adj form disabled idle
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_idle IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-idle"

    // isis intf topo adj form disabled internal error
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_internal_error IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-internal-error"

    // isis intf topo adj form disabled mtu
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_mtu IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-mtu"

    // isis intf topo adj form disabled snpa
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_snpa IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-snpa"

    // isis intf topo adj form disabled mcast
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_mcast IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-mcast"
)

// IsisIfTopoDisabledReason represents Isis if topo disabled reason
type IsisIfTopoDisabledReason string

const (
    // isis intf topo disabled not cfg
    IsisIfTopoDisabledReason_isis_intf_topo_disabled_not_cfg IsisIfTopoDisabledReason = "isis-intf-topo-disabled-not-cfg"

    // isis intf topo disabled internal error
    IsisIfTopoDisabledReason_isis_intf_topo_disabled_internal_error IsisIfTopoDisabledReason = "isis-intf-topo-disabled-internal-error"
)

// IsisIfMcastInvalidReason represents Isis if mcast invalid reason
type IsisIfMcastInvalidReason string

const (
    // Error when attempting to join this multicast
    // group
    IsisIfMcastInvalidReason_isis_intf_mcast_invalid_join_error IsisIfMcastInvalidReason = "isis-intf-mcast-invalid-join-error"

    // Internal error
    IsisIfMcastInvalidReason_isis_intf_mcast_invalid_internal_error IsisIfMcastInvalidReason = "isis-intf-mcast-invalid-internal-error"

    // Multicast group membership not yet requested
    IsisIfMcastInvalidReason_isis_intf_mcast_invalid_not_yet_needed IsisIfMcastInvalidReason = "isis-intf-mcast-invalid-not-yet-needed"
)

// IsisIfClnsSnpaUnknownReason represents Isis if clns snpa unknown reason
type IsisIfClnsSnpaUnknownReason string

const (
    // isis intf clns snpa unknown access error
    IsisIfClnsSnpaUnknownReason_isis_intf_clns_snpa_unknown_access_error IsisIfClnsSnpaUnknownReason = "isis-intf-clns-snpa-unknown-access-error"

    // isis intf clns snpa unknown not lan
    IsisIfClnsSnpaUnknownReason_isis_intf_clns_snpa_unknown_not_lan IsisIfClnsSnpaUnknownReason = "isis-intf-clns-snpa-unknown-not-lan"

    // isis intf clns snpa unknown internal error
    IsisIfClnsSnpaUnknownReason_isis_intf_clns_snpa_unknown_internal_error IsisIfClnsSnpaUnknownReason = "isis-intf-clns-snpa-unknown-internal-error"
)

// IsisKnown represents Isis known
type IsisKnown string

const (
    // Unknown
    IsisKnown_isis_unknown IsisKnown = "isis-unknown"

    // Known
    IsisKnown_isis_known IsisKnown = "isis-known"
)

// IsisIfClnsMtuInvalidReason represents Isis if clns mtu invalid reason
type IsisIfClnsMtuInvalidReason string

const (
    // isis intf clns mtu invalid too small
    IsisIfClnsMtuInvalidReason_isis_intf_clns_mtu_invalid_too_small IsisIfClnsMtuInvalidReason = "isis-intf-clns-mtu-invalid-too-small"

    // isis intf clns mtu invalid internal error
    IsisIfClnsMtuInvalidReason_isis_intf_clns_mtu_invalid_internal_error IsisIfClnsMtuInvalidReason = "isis-intf-clns-mtu-invalid-internal-error"
)

// IsisIfClnsProtoDownReason represents Isis if clns proto down reason
type IsisIfClnsProtoDownReason string

const (
    // isis intf clns proto down add to intf stack
    // fail
    IsisIfClnsProtoDownReason_isis_intf_clns_proto_down_add_to_intf_stack_fail IsisIfClnsProtoDownReason = "isis-intf-clns-proto-down-add-to-intf-stack-fail"

    // isis intf clns proto down no imd conn
    IsisIfClnsProtoDownReason_isis_intf_clns_proto_down_no_imd_conn IsisIfClnsProtoDownReason = "isis-intf-clns-proto-down-no-imd-conn"

    // isis intf clns proto down imd node doesnt exist
    IsisIfClnsProtoDownReason_isis_intf_clns_proto_down_imd_node_doesnt_exist IsisIfClnsProtoDownReason = "isis-intf-clns-proto-down-imd-node-doesnt-exist"

    // isis intf clns proto down imd exist reg error
    IsisIfClnsProtoDownReason_isis_intf_clns_proto_down_imd_exist_reg_error IsisIfClnsProtoDownReason = "isis-intf-clns-proto-down-imd-exist-reg-error"

    // isis intf clns proto down imd state reg error
    IsisIfClnsProtoDownReason_isis_intf_clns_proto_down_imd_state_reg_error IsisIfClnsProtoDownReason = "isis-intf-clns-proto-down-imd-state-reg-error"

    // isis intf clns proto down clns not up
    IsisIfClnsProtoDownReason_isis_intf_clns_proto_down_clns_not_up IsisIfClnsProtoDownReason = "isis-intf-clns-proto-down-clns-not-up"
)

// IsisUp represents Isis up
type IsisUp string

const (
    // Down
    IsisUp_isis_down IsisUp = "isis-down"

    // Up
    IsisUp_isis_up IsisUp = "isis-up"
)

// IsisIfAdvPrefixDisabledReason represents Isis if adv prefix disabled reason
type IsisIfAdvPrefixDisabledReason string

const (
    // isis intf adv prefix disabled if cfg suppressed
    IsisIfAdvPrefixDisabledReason_isis_intf_adv_prefix_disabled_if_cfg_suppressed IsisIfAdvPrefixDisabledReason = "isis-intf-adv-prefix-disabled-if-cfg-suppressed"

    // isis intf adv prefix disabled no topo
    // participate
    IsisIfAdvPrefixDisabledReason_isis_intf_adv_prefix_disabled_no_topo_participate IsisIfAdvPrefixDisabledReason = "isis-intf-adv-prefix-disabled-no-topo-participate"

    // isis intf adv prefix disabled internal error
    IsisIfAdvPrefixDisabledReason_isis_intf_adv_prefix_disabled_internal_error IsisIfAdvPrefixDisabledReason = "isis-intf-adv-prefix-disabled-internal-error"
)

// IsisIfAdjFormDisabledReason represents Isis if adj form disabled reason
type IsisIfAdjFormDisabledReason string

const (
    // isis intf adj form disabled cfg passive
    IsisIfAdjFormDisabledReason_isis_intf_adj_form_disabled_cfg_passive IsisIfAdjFormDisabledReason = "isis-intf-adj-form-disabled-cfg-passive"

    // isis intf adj form disabled no topo participate
    IsisIfAdjFormDisabledReason_isis_intf_adj_form_disabled_no_topo_participate IsisIfAdjFormDisabledReason = "isis-intf-adj-form-disabled-no-topo-participate"

    // isis intf adj form disabled add to intf stack
    // fail
    IsisIfAdjFormDisabledReason_isis_intf_adj_form_disabled_add_to_intf_stack_fail IsisIfAdjFormDisabledReason = "isis-intf-adj-form-disabled-add-to-intf-stack-fail"

    // isis intf adj form disabled clns io
    IsisIfAdjFormDisabledReason_isis_intf_adj_form_disabled_clns_io IsisIfAdjFormDisabledReason = "isis-intf-adj-form-disabled-clns-io"

    // isis intf adj form disabled internal error
    IsisIfAdjFormDisabledReason_isis_intf_adj_form_disabled_internal_error IsisIfAdjFormDisabledReason = "isis-intf-adj-form-disabled-internal-error"
)

// IsisIfDisabledReason represents Isis if disabled reason
type IsisIfDisabledReason string

const (
    // isis intf disabled no net cfg
    IsisIfDisabledReason_isis_intf_disabled_no_net_cfg IsisIfDisabledReason = "isis-intf-disabled-no-net-cfg"

    // isis intf disabled area missing
    IsisIfDisabledReason_isis_intf_disabled_area_missing IsisIfDisabledReason = "isis-intf-disabled-area-missing"

    // isis intf disabled no area running
    IsisIfDisabledReason_isis_intf_disabled_no_area_running IsisIfDisabledReason = "isis-intf-disabled-no-area-running"

    // isis intf disabled no topos cfg
    IsisIfDisabledReason_isis_intf_disabled_no_topos_cfg IsisIfDisabledReason = "isis-intf-disabled-no-topos-cfg"

    // isis intf disabled no imd conn
    IsisIfDisabledReason_isis_intf_disabled_no_imd_conn IsisIfDisabledReason = "isis-intf-disabled-no-imd-conn"

    // isis intf disabled imd reg error
    IsisIfDisabledReason_isis_intf_disabled_imd_reg_error IsisIfDisabledReason = "isis-intf-disabled-imd-reg-error"

    // isis intf disabled level mismatch
    IsisIfDisabledReason_isis_intf_disabled_level_mismatch IsisIfDisabledReason = "isis-intf-disabled-level-mismatch"

    // isis intf disabled base caps error
    IsisIfDisabledReason_isis_intf_disabled_base_caps_error IsisIfDisabledReason = "isis-intf-disabled-base-caps-error"

    // isis intf disabled intf doesnt exist
    IsisIfDisabledReason_isis_intf_disabled_intf_doesnt_exist IsisIfDisabledReason = "isis-intf-disabled-intf-doesnt-exist"

    // isis intf disabled intf shutdown
    IsisIfDisabledReason_isis_intf_disabled_intf_shutdown IsisIfDisabledReason = "isis-intf-disabled-intf-shutdown"

    // isis intf disabled internal error
    IsisIfDisabledReason_isis_intf_disabled_internal_error IsisIfDisabledReason = "isis-intf-disabled-internal-error"
)

// IsisEnabled represents Isis enabled
type IsisEnabled string

const (
    // Disabled
    IsisEnabled_isis_disabled IsisEnabled = "isis-disabled"

    // Enabled
    IsisEnabled_isis_enabled IsisEnabled = "isis-enabled"
)

// IsisShRouteAdvOrigin represents Origin of a prefix advertisement
type IsisShRouteAdvOrigin string

const (
    // IS-IS interface prefix
    IsisShRouteAdvOrigin_isis_sh_route_adv_origin_interface IsisShRouteAdvOrigin = "isis-sh-route-adv-origin-interface"

    // Redistributed prefix
    IsisShRouteAdvOrigin_isis_sh_route_adv_origin_redistributed IsisShRouteAdvOrigin = "isis-sh-route-adv-origin-redistributed"

    // Native prefix
    IsisShRouteAdvOrigin_isis_sh_route_adv_origin_native IsisShRouteAdvOrigin = "isis-sh-route-adv-origin-native"

    // Summary prefix
    IsisShRouteAdvOrigin_isis_sh_route_adv_origin_summary IsisShRouteAdvOrigin = "isis-sh-route-adv-origin-summary"

    // Explicit origination of default prefix
    IsisShRouteAdvOrigin_isis_sh_route_adv_origin_default IsisShRouteAdvOrigin = "isis-sh-route-adv-origin-default"
)

// IsisPrefixPriority represents Isis prefix priority
type IsisPrefixPriority string

const (
    // Critical priority prefixes
    IsisPrefixPriority_isis_prefix_priority_critical IsisPrefixPriority = "isis-prefix-priority-critical"

    // High priority prefixes
    IsisPrefixPriority_isis_prefix_priority_high IsisPrefixPriority = "isis-prefix-priority-high"

    // Medium priority prefixes
    IsisPrefixPriority_isis_prefix_priority_med IsisPrefixPriority = "isis-prefix-priority-med"

    // Low priority prefixes
    IsisPrefixPriority_isis_prefix_priority_low IsisPrefixPriority = "isis-prefix-priority-low"
)

// IsisPrefixOrigin represents Isis prefix origin
type IsisPrefixOrigin string

const (
    // Level 1 Summary Null Route
    IsisPrefixOrigin_isis_prefix_origin_l1_summary_null IsisPrefixOrigin = "isis-prefix-origin-l1-summary-null"

    // Level 1 Route
    IsisPrefixOrigin_isis_prefix_origin_l1 IsisPrefixOrigin = "isis-prefix-origin-l1"

    // Level 2 Summary Null Route
    IsisPrefixOrigin_isis_prefix_origin_l2_summary_null IsisPrefixOrigin = "isis-prefix-origin-l2-summary-null"

    // Level 2 Route
    IsisPrefixOrigin_isis_prefix_origin_l2 IsisPrefixOrigin = "isis-prefix-origin-l2"

    // Level 1 Interarea Summary Null Route
    IsisPrefixOrigin_isis_prefix_origin_inter_area_summary_null IsisPrefixOrigin = "isis-prefix-origin-inter-area-summary-null"

    // Level 1 Interarea Route
    IsisPrefixOrigin_isis_prefix_origin_inter_area IsisPrefixOrigin = "isis-prefix-origin-inter-area"

    // Nearest Attached Default Route
    IsisPrefixOrigin_isis_prefix_origin_default_nearest_attached IsisPrefixOrigin = "isis-prefix-origin-default-nearest-attached"
)

// IsisRedistProto represents Isis redist proto
type IsisRedistProto string

const (
    // Redistributed protocol is Connected
    IsisRedistProto_isis_redist_connected IsisRedistProto = "isis-redist-connected"

    // Redistributed protocol is Static
    IsisRedistProto_isis_redist_static IsisRedistProto = "isis-redist-static"

    // Redistributed protocol is OSPF
    IsisRedistProto_isis_redist_ospf IsisRedistProto = "isis-redist-ospf"

    // Redistributed protocol is BGP
    IsisRedistProto_isis_redist_bgp IsisRedistProto = "isis-redist-bgp"

    // Redistributed protocol is IS-IS
    IsisRedistProto_isis_redist_isis IsisRedistProto = "isis-redist-isis"

    // Redistributed protocol is OSPFv3
    IsisRedistProto_isis_redist_ospfv3 IsisRedistProto = "isis-redist-ospfv3"

    // Redistributed protocol is RIP
    IsisRedistProto_isis_redist_rip IsisRedistProto = "isis-redist-rip"

    // Redistributed protocol is EIGRP
    IsisRedistProto_isis_redist_eigrp IsisRedistProto = "isis-redist-eigrp"

    // Redistributed protocol is Subscriber
    IsisRedistProto_isis_redist_subscriber IsisRedistProto = "isis-redist-subscriber"

    // Redistributed protocol is Application
    IsisRedistProto_isis_redist_application IsisRedistProto = "isis-redist-application"

    // Redistributed protocol is Mobile
    IsisRedistProto_isis_redist_mobile IsisRedistProto = "isis-redist-mobile"
)

// IsisValid represents Isis valid
type IsisValid string

const (
    // Invalid
    IsisValid_isis_invalid IsisValid = "isis-invalid"

    // Valid
    IsisValid_isis_valid IsisValid = "isis-valid"
)

// IsisTilfaComputation represents Isis tilfa computation
type IsisTilfaComputation string

const (
    // isis tilfa comp none
    IsisTilfaComputation_isis_tilfa_comp_none IsisTilfaComputation = "isis-tilfa-comp-none"

    // isis tilfa comp link
    IsisTilfaComputation_isis_tilfa_comp_link IsisTilfaComputation = "isis-tilfa-comp-link"

    // isis tilfa comp node
    IsisTilfaComputation_isis_tilfa_comp_node IsisTilfaComputation = "isis-tilfa-comp-node"

    // isis tilfa comp srlg
    IsisTilfaComputation_isis_tilfa_comp_srlg IsisTilfaComputation = "isis-tilfa-comp-srlg"

    // isis tilfa comp node srlg
    IsisTilfaComputation_isis_tilfa_comp_node_srlg IsisTilfaComputation = "isis-tilfa-comp-node-srlg"
)

// IsisReachable represents Isis reachable
type IsisReachable string

const (
    // Unreachable
    IsisReachable_isis_unreachable IsisReachable = "isis-unreachable"

    // Reachable
    IsisReachable_isis_reachable IsisReachable = "isis-reachable"
)

// IsisMetricMode represents Isis metric mode
type IsisMetricMode string

const (
    // Fixed
    IsisMetricMode_isis_metric_mode_fixed IsisMetricMode = "isis-metric-mode-fixed"

    // Relative
    IsisMetricMode_isis_metric_mode_relative IsisMetricMode = "isis-metric-mode-relative"

    // Absolute
    IsisMetricMode_isis_metric_mode_absolute IsisMetricMode = "isis-metric-mode-absolute"
)

// IsisSpfTrigger represents Isis spf trigger
type IsisSpfTrigger string

const (
    // Configuration change
    IsisSpfTrigger_isis_spf_trig_config IsisSpfTrigger = "isis-spf-trig-config"

    // NSR FO is done
    IsisSpfTrigger_isis_spf_trig_nsr_fo IsisSpfTrigger = "isis-spf-trig-nsr-fo"

    // Periodic SPF
    IsisSpfTrigger_isis_spf_trig_periodic IsisSpfTrigger = "isis-spf-trig-periodic"

    // Cleared route table
    IsisSpfTrigger_isis_spf_trig_clear IsisSpfTrigger = "isis-spf-trig-clear"

    // New adjacency
    IsisSpfTrigger_isis_spf_trig_newadj IsisSpfTrigger = "isis-spf-trig-newadj"

    // Deleted adjacency
    IsisSpfTrigger_isis_spf_trig_deladj IsisSpfTrigger = "isis-spf-trig-deladj"

    // IP nexthop address change
    IsisSpfTrigger_isis_spf_trig_next_hop IsisSpfTrigger = "isis-spf-trig-next-hop"

    // Changed interface metric
    IsisSpfTrigger_isis_spf_trig_metric IsisSpfTrigger = "isis-spf-trig-metric"

    // Change to elected DIS
    IsisSpfTrigger_isis_spf_trig_dis IsisSpfTrigger = "isis-spf-trig-dis"

    // Change to per-link FRR config
    IsisSpfTrigger_isis_spf_trig_frr_per_link IsisSpfTrigger = "isis-spf-trig-frr-per-link"

    // Change to per-prefix FRR config
    IsisSpfTrigger_isis_spf_trig_frr_per_prefix IsisSpfTrigger = "isis-spf-trig-frr-per-prefix"

    // Change to UCMP config/calculation
    IsisSpfTrigger_isis_spf_trig_ucmp IsisSpfTrigger = "isis-spf-trig-ucmp"

    // New TE Autoroute Tunnel
    IsisSpfTrigger_isis_spf_trig_new_tunnel IsisSpfTrigger = "isis-spf-trig-new-tunnel"

    // Deleted TE Autoroute Tunnel
    IsisSpfTrigger_isis_spf_trig_del_tunnel IsisSpfTrigger = "isis-spf-trig-del-tunnel"

    // Changed TE Autoroute Tunnel
    IsisSpfTrigger_isis_spf_trig_chg_tunnel IsisSpfTrigger = "isis-spf-trig-chg-tunnel"

    // New LSP zero which participates in topology
    IsisSpfTrigger_isis_spf_trig_new_node IsisSpfTrigger = "isis-spf-trig-new-node"

    // New LSP zero which no longer participates in
    // topology
    IsisSpfTrigger_isis_spf_trig_del_node IsisSpfTrigger = "isis-spf-trig-del-node"

    // Previously unseen LSP fragment
    IsisSpfTrigger_isis_spf_trig_newlsp IsisSpfTrigger = "isis-spf-trig-newlsp"

    // LSP expired
    IsisSpfTrigger_isis_spf_trig_lsp_expiry IsisSpfTrigger = "isis-spf-trig-lsp-expiry"

    // Attached bit set
    IsisSpfTrigger_isis_spf_trig_attach_set IsisSpfTrigger = "isis-spf-trig-attach-set"

    // Attached bit cleared
    IsisSpfTrigger_isis_spf_trig_attach_clr IsisSpfTrigger = "isis-spf-trig-attach-clr"

    // Overload bit set
    IsisSpfTrigger_isis_spf_trig_overload_set IsisSpfTrigger = "isis-spf-trig-overload-set"

    // Overload bit cleared
    IsisSpfTrigger_isis_spf_trig_overload_clr IsisSpfTrigger = "isis-spf-trig-overload-clr"

    // Good news link TLV content change
    IsisSpfTrigger_isis_spf_trig_link_good IsisSpfTrigger = "isis-spf-trig-link-good"

    // Bad news link TLV content change
    IsisSpfTrigger_isis_spf_trig_link_bad IsisSpfTrigger = "isis-spf-trig-link-bad"

    // Good news prefix TLV content change
    IsisSpfTrigger_isis_spf_trig_prefix_good IsisSpfTrigger = "isis-spf-trig-prefix-good"

    // Bad news prefix TLV content change
    IsisSpfTrigger_isis_spf_trig_prefix_bad IsisSpfTrigger = "isis-spf-trig-prefix-bad"

    // Neutral (neither good nor bad news) prefix TLV
    // content change
    IsisSpfTrigger_isis_spf_trig_prefix IsisSpfTrigger = "isis-spf-trig-prefix"

    // Area address TLV content change
    IsisSpfTrigger_isis_spf_trig_area_addr IsisSpfTrigger = "isis-spf-trig-area-addr"

    // IP address TLV content change
    IsisSpfTrigger_isis_spf_trig_ip_addr IsisSpfTrigger = "isis-spf-trig-ip-addr"

    // Router id TLV content change
    IsisSpfTrigger_isis_spf_trig_rtrid IsisSpfTrigger = "isis-spf-trig-rtrid"

    // Prefix policy change
    IsisSpfTrigger_isis_spf_trig_prefix_policy IsisSpfTrigger = "isis-spf-trig-prefix-policy"
)

// IsisSpfClass represents Types of route calculation
type IsisSpfClass string

const (
    // Remote microloop avoidance SPF
    IsisSpfClass_isis_spf_frr_sr_u_loop IsisSpfClass = "isis-spf-frr-sr-u-loop"

    // FRR per-link SPF
    IsisSpfClass_isis_spf_frr_per_link IsisSpfClass = "isis-spf-frr-per-link"

    // PRC
    IsisSpfClass_isis_spf_partial IsisSpfClass = "isis-spf-partial"

    // FRR per-prefix SPF
    IsisSpfClass_isis_spf_frr_per_prefix IsisSpfClass = "isis-spf-frr-per-prefix"

    // UCMP SPF
    IsisSpfClass_isis_spf_ucmp_calc IsisSpfClass = "isis-spf-ucmp-calc"

    // Next Hop
    IsisSpfClass_isis_spf_next_hop IsisSpfClass = "isis-spf-next-hop"

    // Incremental SPF
    IsisSpfClass_isis_spf_incremental IsisSpfClass = "isis-spf-incremental"

    // Full SPF
    IsisSpfClass_isis_spf_full IsisSpfClass = "isis-spf-full"
)

// IsisShTePceFloodingScope represents Isis sh te pce flooding scope
type IsisShTePceFloodingScope string

const (
    // Flooding is disabled
    IsisShTePceFloodingScope_none IsisShTePceFloodingScope = "none"

    // Area wide flooding
    IsisShTePceFloodingScope_area IsisShTePceFloodingScope = "area"

    // Domain wide flooding
    IsisShTePceFloodingScope_domain IsisShTePceFloodingScope = "domain"
)

// IsisShTeLink represents Isis sh te link
type IsisShTeLink string

const (
    // Tunnel is absolute
    IsisShTeLink_isis_sh_te_link_p2p IsisShTeLink = "isis-sh-te-link-p2p"

    // Broadcast link
    IsisShTeLink_isis_sh_te_link_broadcast IsisShTeLink = "isis-sh-te-link-broadcast"
)

// IsisLspDbOp represents Isis lsp db op
type IsisLspDbOp string

const (
    // Clear the LSP database
    IsisLspDbOp_isis_lsp_db_clear IsisLspDbOp = "isis-lsp-db-clear"

    // Insertion of new LSP
    IsisLspDbOp_isis_lsp_db_insert_new_lsp IsisLspDbOp = "isis-lsp-db-insert-new-lsp"

    // LSP replacing LSP
    IsisLspDbOp_isis_lsp_db_replace_lsp_with_lsp IsisLspDbOp = "isis-lsp-db-replace-lsp-with-lsp"

    // LSP purged by the local system
    IsisLspDbOp_isis_lsp_db_purge_lsp IsisLspDbOp = "isis-lsp-db-purge-lsp"

    // Removal of the LSP from the database
    IsisLspDbOp_isis_lsp_db_delete_lsp IsisLspDbOp = "isis-lsp-db-delete-lsp"
)

// IsisLspTrigger represents Isis lsp trigger
type IsisLspTrigger string

const (
    // Any configuration change
    IsisLspTrigger_isis_lsp_trig_config IsisLspTrigger = "isis-lsp-trig-config"

    // New adjacency came up
    IsisLspTrigger_isis_lsp_trig_newadj IsisLspTrigger = "isis-lsp-trig-newadj"

    // Adjacency went down
    IsisLspTrigger_isis_lsp_trig_deladj IsisLspTrigger = "isis-lsp-trig-deladj"

    // DIS changed, or pseudonode changed
    IsisLspTrigger_isis_lsp_trig_dr_change IsisLspTrigger = "isis-lsp-trig-dr-change"

    // Active area set changed
    IsisLspTrigger_isis_lsp_trig_area_set IsisLspTrigger = "isis-lsp-trig-area-set"

    // Attached bit changed state
    IsisLspTrigger_isis_lsp_trig_attach IsisLspTrigger = "isis-lsp-trig-attach"

    // LSPDB overload bit changed state
    IsisLspTrigger_isis_lsp_trig_hippity IsisLspTrigger = "isis-lsp-trig-hippity"

    // LSP regeneration
    IsisLspTrigger_isis_lsp_trig_regen IsisLspTrigger = "isis-lsp-trig-regen"

    // Directly connected IP prefix up
    IsisLspTrigger_isis_lsp_trig_ip_if_up IsisLspTrigger = "isis-lsp-trig-ip-if-up"

    // Directly connected IP prefix down
    IsisLspTrigger_isis_lsp_trig_ip_if_down IsisLspTrigger = "isis-lsp-trig-ip-if-down"

    // Interarea IP route appeared or gone
    IsisLspTrigger_isis_lsp_trig_ip_inter_area IsisLspTrigger = "isis-lsp-trig-ip-inter-area"

    // Redistributed IP route appeared or gone
    IsisLspTrigger_isis_lsp_trig_ip_external IsisLspTrigger = "isis-lsp-trig-ip-external"

    // Full IP redistribution
    IsisLspTrigger_isis_lsp_trig_ip_external_full IsisLspTrigger = "isis-lsp-trig-ip-external-full"

    // Default information originate changed
    IsisLspTrigger_isis_lsp_trig_ip_def_orig IsisLspTrigger = "isis-lsp-trig-ip-def-orig"

    // IP interface address changed
    IsisLspTrigger_isis_lsp_trig_ip_addr_chg IsisLspTrigger = "isis-lsp-trig-ip-addr-chg"

    // TE bandwidth resource information
    IsisLspTrigger_isis_lsp_trig_te_info IsisLspTrigger = "isis-lsp-trig-te-info"

    // TE PCE information
    IsisLspTrigger_isis_lsp_trig_te_pce_info IsisLspTrigger = "isis-lsp-trig-te-pce-info"

    // TE forwarding adjacency information
    IsisLspTrigger_isis_lsp_trig_te_fa_info IsisLspTrigger = "isis-lsp-trig-te-fa-info"

    // NSR FO is done
    IsisLspTrigger_isis_lsp_trig_nsr_fo IsisLspTrigger = "isis-lsp-trig-nsr-fo"

    // Pseudo-node generation canceled
    IsisLspTrigger_isis_lsp_trig_pn_cancel IsisLspTrigger = "isis-lsp-trig-pn-cancel"

    // Link-group offset metric change
    IsisLspTrigger_isis_lsp_trig_lkgp IsisLspTrigger = "isis-lsp-trig-lkgp"

    // Proactive Protection metric change
    IsisLspTrigger_isis_lsp_trig_pp IsisLspTrigger = "isis-lsp-trig-pp"

    // Any configuration change that requires all LSPs
    // to be updated
    IsisLspTrigger_isis_lsp_trig_config_force_send IsisLspTrigger = "isis-lsp-trig-config-force-send"

    // Any configuration change that requires the LBD
    // database re-init.
    IsisLspTrigger_isis_lsp_trig_config_force_init IsisLspTrigger = "isis-lsp-trig-config-force-init"

    // Adjacency SID added
    IsisLspTrigger_isis_lsp_trig_adj_sid_add IsisLspTrigger = "isis-lsp-trig-adj-sid-add"

    // Adjacency SID deleted
    IsisLspTrigger_isis_lsp_trig_adj_sid_delete IsisLspTrigger = "isis-lsp-trig-adj-sid-delete"

    // Maximum SID depth change
    IsisLspTrigger_isis_lsp_trig_msd IsisLspTrigger = "isis-lsp-trig-msd"

    // Adjacency SID wait timer expired
    IsisLspTrigger_isis_lsp_trig_adj_sid_wait_timer IsisLspTrigger = "isis-lsp-trig-adj-sid-wait-timer"

    // Direct LSP generation
    IsisLspTrigger_isis_lsp_trig_direct_gen IsisLspTrigger = "isis-lsp-trig-direct-gen"
)

// IsisAdjTopoStatus represents Status of a topology in an adjacency
type IsisAdjTopoStatus string

const (
    // Topology is included in adjacency
    IsisAdjTopoStatus_isis_adj_topo_status_ok IsisAdjTopoStatus = "isis-adj-topo-status-ok"

    // Topology is not configured on the interface
    IsisAdjTopoStatus_isis_adj_topo_status_intf_not_configured IsisAdjTopoStatus = "isis-adj-topo-status-intf-not-configured"

    // Topology is not running on the interface
    IsisAdjTopoStatus_isis_adj_topo_status_intf_not_running IsisAdjTopoStatus = "isis-adj-topo-status-intf-not-running"

    // Adjacency is in INIT state
    IsisAdjTopoStatus_isis_adj_topo_status_init_state IsisAdjTopoStatus = "isis-adj-topo-status-init-state"

    // Neighbor doesn't participate in topology
    IsisAdjTopoStatus_isis_adj_topo_status_neighbor_doesnt_participate IsisAdjTopoStatus = "isis-adj-topo-status-neighbor-doesnt-participate"

    // Neighbor IIH doesn't contain IPv4 address TLV
    IsisAdjTopoStatus_isis_adj_topo_status_ipv4_address_tlv_missing IsisAdjTopoStatus = "isis-adj-topo-status-ipv4-address-tlv-missing"

    // Neighbor's IPv4 address TLV is empty
    IsisAdjTopoStatus_isis_adj_topo_status_ipv4_address_tlv_empty IsisAdjTopoStatus = "isis-adj-topo-status-ipv4-address-tlv-empty"

    // Neighbor IIH doesn't contain IPv6 address TLV
    IsisAdjTopoStatus_isis_adj_topo_status_ipv6_address_tlv_missing IsisAdjTopoStatus = "isis-adj-topo-status-ipv6-address-tlv-missing"

    // Neighbor's IPv6 address TLV is empty
    IsisAdjTopoStatus_isis_adj_topo_status_ipv6_address_tlv_empty IsisAdjTopoStatus = "isis-adj-topo-status-ipv6-address-tlv-empty"

    // Neighbor's IPv4 address matches ours
    IsisAdjTopoStatus_isis_adj_topo_status_ipv4_address_matches_ours IsisAdjTopoStatus = "isis-adj-topo-status-ipv4-address-matches-ours"

    // Neighbor's IPv6 address matches ours
    IsisAdjTopoStatus_isis_adj_topo_status_ipv6_address_matches_ours IsisAdjTopoStatus = "isis-adj-topo-status-ipv6-address-matches-ours"

    // Neighbor's IPv4 address is in a different
    // subnet to ours
    IsisAdjTopoStatus_isis_adj_topo_status_ipv4_address_subnet_mismatch IsisAdjTopoStatus = "isis-adj-topo-status-ipv4-address-subnet-mismatch"

    // Neighbor's IPv6 address is not link local
    IsisAdjTopoStatus_isis_adj_topo_status_ipv6_address_not_link_local IsisAdjTopoStatus = "isis-adj-topo-status-ipv6-address-not-link-local"
)

// IsisAdjBfdState represents Current BFD state of an adjacency
type IsisAdjBfdState string

const (
    // No BFD session created
    IsisAdjBfdState_isis_adj_bfd_no_state IsisAdjBfdState = "isis-adj-bfd-no-state"

    // BFD session is DOWN
    IsisAdjBfdState_isis_adj_bfd_down_state IsisAdjBfdState = "isis-adj-bfd-down-state"

    // Waiting for BFD session to come UP
    IsisAdjBfdState_isis_adj_bfd_init_state IsisAdjBfdState = "isis-adj-bfd-init-state"

    // BFD session is UP
    IsisAdjBfdState_isis_adj_bfd_up_state IsisAdjBfdState = "isis-adj-bfd-up-state"
)

// IsisAdjTopoChange represents Per-topology change type for an adjacency
type IsisAdjTopoChange string

const (
    // Topology up
    IsisAdjTopoChange_isis_adj_topo_up_change IsisAdjTopoChange = "isis-adj-topo-up-change"

    // Topology next-hop changed
    IsisAdjTopoChange_isis_adj_topo_next_hop_change IsisAdjTopoChange = "isis-adj-topo-next-hop-change"

    // Topology down
    IsisAdjTopoChange_isis_adj_topo_down_change IsisAdjTopoChange = "isis-adj-topo-down-change"
)

// IsisAdjStateReason represents Isis adj state reason
type IsisAdjStateReason string

const (
    // NSF Restart
    IsisAdjStateReason_isis_adj_up_nsf_restart IsisAdjStateReason = "isis-adj-up-nsf-restart"

    // New adjacency
    IsisAdjStateReason_isis_adj_up_new_adj IsisAdjStateReason = "isis-adj-up-new-adj"

    // Restarted
    IsisAdjStateReason_isis_adj_up_restarted IsisAdjStateReason = "isis-adj-up-restarted"

    // Restored during NSF
    IsisAdjStateReason_isis_adj_up_nsf_restored IsisAdjStateReason = "isis-adj-up-nsf-restored"

    // Restored from checkpoint
    IsisAdjStateReason_isis_adj_up_chkpt_restored IsisAdjStateReason = "isis-adj-up-chkpt-restored"

    // Into INIT
    IsisAdjStateReason_isis_adj_init_reason IsisAdjStateReason = "isis-adj-init-reason"

    // Neighbor forgot us
    IsisAdjStateReason_isis_adj_init_neighbor_forgot IsisAdjStateReason = "isis-adj-init-neighbor-forgot"

    // Holdtime expired
    IsisAdjStateReason_isis_adj_down_hold_time IsisAdjStateReason = "isis-adj-down-hold-time"

    // Interface state going down
    IsisAdjStateReason_isis_adj_down_if_down IsisAdjStateReason = "isis-adj-down-if-down"

    // Area address/level mismatch
    IsisAdjStateReason_isis_adj_down_cfg_mismatch IsisAdjStateReason = "isis-adj-down-cfg-mismatch"

    // Circuit ID changed
    IsisAdjStateReason_isis_adj_down_circ_id IsisAdjStateReason = "isis-adj-down-circ-id"

    // NSF could not CSNP Ack P2P adjacency
    IsisAdjStateReason_isis_adj_down_nsf_ack_fail IsisAdjStateReason = "isis-adj-down-nsf-ack-fail"

    // Clear of the Adjacency DB
    IsisAdjStateReason_isis_adj_down_db_clear IsisAdjStateReason = "isis-adj-down-db-clear"

    // Neighbors have no common link topology
    IsisAdjStateReason_isis_adj_down_no_common_topology IsisAdjStateReason = "isis-adj-down-no-common-topology"

    // Restart TLV missing during IETF NSF restart
    IsisAdjStateReason_isis_adj_down_restart_tlv_missing IsisAdjStateReason = "isis-adj-down-restart-tlv-missing"

    // BFD session has gone DOWN
    IsisAdjStateReason_isis_adj_down_bfd_down IsisAdjStateReason = "isis-adj-down-bfd-down"

    // 3-way state down
    IsisAdjStateReason_isis_adj_down_3way_down IsisAdjStateReason = "isis-adj-down-3way-down"
)

// IsisLevel represents Isis level
type IsisLevel string

const (
    // isis level0
    IsisLevel_isis_level0 IsisLevel = "isis-level0"

    // isis level1
    IsisLevel_isis_level1 IsisLevel = "isis-level1"

    // isis level2
    IsisLevel_isis_level2 IsisLevel = "isis-level2"
)

// IsisSubAfId represents Isis sub af id
type IsisSubAfId string

const (
    // Unicast
    IsisSubAfId_unicast IsisSubAfId = "unicast"

    // Multicast
    IsisSubAfId_multicast IsisSubAfId = "multicast"
)

// IsisAfId represents Isis af id
type IsisAfId string

const (
    // IPv4
    IsisAfId_ipv4 IsisAfId = "ipv4"

    // IPv6
    IsisAfId_ipv6 IsisAfId = "ipv6"
)

// IsisMediaClass represents Isis media class
type IsisMediaClass string

const (
    // LAN
    IsisMediaClass_isis_media_class_lan IsisMediaClass = "isis-media-class-lan"

    // P2P
    IsisMediaClass_isis_media_class_p2p IsisMediaClass = "isis-media-class-p2p"

    // Loopback
    IsisMediaClass_isis_media_class_loop_back IsisMediaClass = "isis-media-class-loop-back"
)

// IsisLevels represents Isis levels
type IsisLevels string

const (
    // isis levels none
    IsisLevels_isis_levels_none IsisLevels = "isis-levels-none"

    // isis levels 1
    IsisLevels_isis_levels_1 IsisLevels = "isis-levels-1"

    // isis levels 2
    IsisLevels_isis_levels_2 IsisLevels = "isis-levels-2"

    // isis levels 12
    IsisLevels_isis_levels_12 IsisLevels = "isis-levels-12"

    // isis levels total
    IsisLevels_isis_levels_total IsisLevels = "isis-levels-total"
)

// IsisAdjState represents Isis adj state
type IsisAdjState string

const (
    // Adjacency up
    IsisAdjState_isis_adj_up_state IsisAdjState = "isis-adj-up-state"

    // Adjacency initializing
    IsisAdjState_isis_adj_init_state IsisAdjState = "isis-adj-init-state"

    // Adjacency down/failed
    IsisAdjState_isis_adj_failed_state IsisAdjState = "isis-adj-failed-state"
)

// Isis
// IS-IS operational data
type Isis struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Per-instance operational data.
    Instances Isis_Instances
}

func (isis *Isis) GetEntityData() *types.CommonEntityData {
    isis.EntityData.YFilter = isis.YFilter
    isis.EntityData.YangName = "isis"
    isis.EntityData.BundleName = "cisco_ios_xr"
    isis.EntityData.ParentYangName = "Cisco-IOS-XR-clns-isis-oper"
    isis.EntityData.SegmentPath = "Cisco-IOS-XR-clns-isis-oper:isis"
    isis.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isis.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isis.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isis.EntityData.Children = make(map[string]types.YChild)
    isis.EntityData.Children["instances"] = types.YChild{"Instances", &isis.Instances}
    isis.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(isis.EntityData)
}

// Isis_Instances
// Per-instance operational data
type Isis_Instances struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IS-IS instance. The type is slice of Isis_Instances_Instance.
    Instance []Isis_Instances_Instance
}

func (instances *Isis_Instances) GetEntityData() *types.CommonEntityData {
    instances.EntityData.YFilter = instances.YFilter
    instances.EntityData.YangName = "instances"
    instances.EntityData.BundleName = "cisco_ios_xr"
    instances.EntityData.ParentYangName = "isis"
    instances.EntityData.SegmentPath = "instances"
    instances.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instances.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instances.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instances.EntityData.Children = make(map[string]types.YChild)
    instances.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range instances.Instance {
        instances.EntityData.Children[types.GetSegmentPath(&instances.Instance[i])] = types.YChild{"Instance", &instances.Instance[i]}
    }
    instances.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(instances.EntityData)
}

// Isis_Instances_Instance
// IS-IS instance
type Isis_Instances_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Instance identifier. The type is string with
    // length: 1..40.
    InstanceName interface{}

    // Neighbor table.
    Neighbors Isis_Instances_Instance_Neighbors

    // Hostname table.
    HostNames Isis_Instances_Instance_HostNames

    // Per-instance statistics.
    StatisticsGlobal Isis_Instances_Instance_StatisticsGlobal

    // Level table.
    Levels Isis_Instances_Instance_Levels

    // Topology table.
    Topologies Isis_Instances_Instance_Topologies

    // NSR Status information.
    NsrStatus Isis_Instances_Instance_NsrStatus

    // Interface table.
    Interfaces Isis_Instances_Instance_Interfaces

    // Checkpointed adjacency table.
    CheckpointAdjacencies Isis_Instances_Instance_CheckpointAdjacencies

    // Segment Routing Mapping Server operational data.
    Srms Isis_Instances_Instance_Srms

    // Log of errors and warnings.
    ErrorLog Isis_Instances_Instance_ErrorLog

    // Checkpointed interface table.
    CheckpointInterfaces Isis_Instances_Instance_CheckpointInterfaces

    // Interface statistics table.
    InterfaceStatistics Isis_Instances_Instance_InterfaceStatistics

    // Basic protocol information about an IS-IS instance.
    Protocol Isis_Instances_Instance_Protocol

    // Neighbor-summary table.
    NeighborSummaries Isis_Instances_Instance_NeighborSummaries

    // Checkpointed LSP table.
    CheckpointLsps Isis_Instances_Instance_CheckpointLsps

    // Mesh-group information.
    MeshGroups Isis_Instances_Instance_MeshGroups

    // NSR Statistics information.
    NsrStatistics Isis_Instances_Instance_NsrStatistics

    // Checkpointed TE tunnel table.
    CheckpointTeTunnels Isis_Instances_Instance_CheckpointTeTunnels
}

func (instance *Isis_Instances_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "instances"
    instance.EntityData.SegmentPath = "instance" + "[instance-name='" + fmt.Sprintf("%v", instance.InstanceName) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Children["neighbors"] = types.YChild{"Neighbors", &instance.Neighbors}
    instance.EntityData.Children["host-names"] = types.YChild{"HostNames", &instance.HostNames}
    instance.EntityData.Children["statistics-global"] = types.YChild{"StatisticsGlobal", &instance.StatisticsGlobal}
    instance.EntityData.Children["levels"] = types.YChild{"Levels", &instance.Levels}
    instance.EntityData.Children["topologies"] = types.YChild{"Topologies", &instance.Topologies}
    instance.EntityData.Children["nsr-status"] = types.YChild{"NsrStatus", &instance.NsrStatus}
    instance.EntityData.Children["interfaces"] = types.YChild{"Interfaces", &instance.Interfaces}
    instance.EntityData.Children["checkpoint-adjacencies"] = types.YChild{"CheckpointAdjacencies", &instance.CheckpointAdjacencies}
    instance.EntityData.Children["srms"] = types.YChild{"Srms", &instance.Srms}
    instance.EntityData.Children["error-log"] = types.YChild{"ErrorLog", &instance.ErrorLog}
    instance.EntityData.Children["checkpoint-interfaces"] = types.YChild{"CheckpointInterfaces", &instance.CheckpointInterfaces}
    instance.EntityData.Children["interface-statistics"] = types.YChild{"InterfaceStatistics", &instance.InterfaceStatistics}
    instance.EntityData.Children["protocol"] = types.YChild{"Protocol", &instance.Protocol}
    instance.EntityData.Children["neighbor-summaries"] = types.YChild{"NeighborSummaries", &instance.NeighborSummaries}
    instance.EntityData.Children["checkpoint-lsps"] = types.YChild{"CheckpointLsps", &instance.CheckpointLsps}
    instance.EntityData.Children["mesh-groups"] = types.YChild{"MeshGroups", &instance.MeshGroups}
    instance.EntityData.Children["nsr-statistics"] = types.YChild{"NsrStatistics", &instance.NsrStatistics}
    instance.EntityData.Children["checkpoint-te-tunnels"] = types.YChild{"CheckpointTeTunnels", &instance.CheckpointTeTunnels}
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-name"] = types.YLeaf{"InstanceName", instance.InstanceName}
    return &(instance.EntityData)
}

// Isis_Instances_Instance_Neighbors
// Neighbor table
type Isis_Instances_Instance_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A single neighbor router. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor.
    Neighbor []Isis_Instances_Instance_Neighbors_Neighbor
}

func (neighbors *Isis_Instances_Instance_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "cisco_ios_xr"
    neighbors.EntityData.ParentYangName = "instance"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbors.EntityData.Children = make(map[string]types.YChild)
    neighbors.EntityData.Children["neighbor"] = types.YChild{"Neighbor", nil}
    for i := range neighbors.Neighbor {
        neighbors.EntityData.Children[types.GetSegmentPath(&neighbors.Neighbor[i])] = types.YChild{"Neighbor", &neighbors.Neighbor[i]}
    }
    neighbors.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(neighbors.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor
// A single neighbor router
type Isis_Instances_Instance_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // System ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    SystemId interface{}

    // Interface name. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // Neighbor system ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSystemId interface{}

    // Neighbor SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Local interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    LocalInterface interface{}

    // Neighbor (adjacency) state. The type is IsisAdjState.
    NeighborState interface{}

    // Circuit type. The type is IsisLevels.
    NeighborCircuitType interface{}

    // TRUE if neighbor is IETF-NSF capable. The type is interface{} with range:
    // 0..4294967295.
    NeighborIetfNsfCapableFlag interface{}

    // Link media type. The type is IsisMediaClass.
    NeighborMediaType interface{}

    // Time (s) until neighbor declared down if no IIH received. The type is
    // interface{} with range: 0..4294967295.
    NeighborHoldtime interface{}

    // TRUE if NeighborUptime is set. The type is bool.
    NeighborUptimeValidFlag interface{}

    // How long the neighbor has been up (s). The type is interface{} with range:
    // 0..4294967295.
    NeighborUptime interface{}

    // ISIS NSR STANDBY. The type is bool.
    NsrStandby interface{}

    // Active area addresses. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress.
    NeighborActiveAreaAddress []Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress

    // Topologies supported by both neighbor and local system. The type is slice
    // of Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported.
    TopologiesSupported []Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported

    // Per address-family data. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData.
    NeighborPerAddressFamilyData []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData
}

func (neighbor *Isis_Instances_Instance_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "cisco_ios_xr"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor"
    neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbor.EntityData.Children = make(map[string]types.YChild)
    neighbor.EntityData.Children["neighbor-active-area-address"] = types.YChild{"NeighborActiveAreaAddress", nil}
    for i := range neighbor.NeighborActiveAreaAddress {
        neighbor.EntityData.Children[types.GetSegmentPath(&neighbor.NeighborActiveAreaAddress[i])] = types.YChild{"NeighborActiveAreaAddress", &neighbor.NeighborActiveAreaAddress[i]}
    }
    neighbor.EntityData.Children["topologies-supported"] = types.YChild{"TopologiesSupported", nil}
    for i := range neighbor.TopologiesSupported {
        neighbor.EntityData.Children[types.GetSegmentPath(&neighbor.TopologiesSupported[i])] = types.YChild{"TopologiesSupported", &neighbor.TopologiesSupported[i]}
    }
    neighbor.EntityData.Children["neighbor-per-address-family-data"] = types.YChild{"NeighborPerAddressFamilyData", nil}
    for i := range neighbor.NeighborPerAddressFamilyData {
        neighbor.EntityData.Children[types.GetSegmentPath(&neighbor.NeighborPerAddressFamilyData[i])] = types.YChild{"NeighborPerAddressFamilyData", &neighbor.NeighborPerAddressFamilyData[i]}
    }
    neighbor.EntityData.Leafs = make(map[string]types.YLeaf)
    neighbor.EntityData.Leafs["system-id"] = types.YLeaf{"SystemId", neighbor.SystemId}
    neighbor.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", neighbor.InterfaceName}
    neighbor.EntityData.Leafs["neighbor-system-id"] = types.YLeaf{"NeighborSystemId", neighbor.NeighborSystemId}
    neighbor.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", neighbor.NeighborSnpa}
    neighbor.EntityData.Leafs["local-interface"] = types.YLeaf{"LocalInterface", neighbor.LocalInterface}
    neighbor.EntityData.Leafs["neighbor-state"] = types.YLeaf{"NeighborState", neighbor.NeighborState}
    neighbor.EntityData.Leafs["neighbor-circuit-type"] = types.YLeaf{"NeighborCircuitType", neighbor.NeighborCircuitType}
    neighbor.EntityData.Leafs["neighbor-ietf-nsf-capable-flag"] = types.YLeaf{"NeighborIetfNsfCapableFlag", neighbor.NeighborIetfNsfCapableFlag}
    neighbor.EntityData.Leafs["neighbor-media-type"] = types.YLeaf{"NeighborMediaType", neighbor.NeighborMediaType}
    neighbor.EntityData.Leafs["neighbor-holdtime"] = types.YLeaf{"NeighborHoldtime", neighbor.NeighborHoldtime}
    neighbor.EntityData.Leafs["neighbor-uptime-valid-flag"] = types.YLeaf{"NeighborUptimeValidFlag", neighbor.NeighborUptimeValidFlag}
    neighbor.EntityData.Leafs["neighbor-uptime"] = types.YLeaf{"NeighborUptime", neighbor.NeighborUptime}
    neighbor.EntityData.Leafs["nsr-standby"] = types.YLeaf{"NsrStandby", neighbor.NsrStandby}
    return &(neighbor.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress
// Active area addresses
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern: b'[a-fA-F0-9]{2}(\\.[a-fA-F0-9]{4}){0,6}'.
    Entry interface{}
}

func (neighborActiveAreaAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress) GetEntityData() *types.CommonEntityData {
    neighborActiveAreaAddress.EntityData.YFilter = neighborActiveAreaAddress.YFilter
    neighborActiveAreaAddress.EntityData.YangName = "neighbor-active-area-address"
    neighborActiveAreaAddress.EntityData.BundleName = "cisco_ios_xr"
    neighborActiveAreaAddress.EntityData.ParentYangName = "neighbor"
    neighborActiveAreaAddress.EntityData.SegmentPath = "neighbor-active-area-address"
    neighborActiveAreaAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborActiveAreaAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborActiveAreaAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborActiveAreaAddress.EntityData.Children = make(map[string]types.YChild)
    neighborActiveAreaAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    neighborActiveAreaAddress.EntityData.Leafs["entry"] = types.YLeaf{"Entry", neighborActiveAreaAddress.Entry}
    return &(neighborActiveAreaAddress.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported
// Topologies supported by both neighbor and local
// system
type Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF name. The type is IsisAfId.
    AfName interface{}

    // Sub-AF name. The type is IsisSubAfId.
    SafName interface{}

    // VRF Name. The type is string.
    VrfName interface{}

    // Topology Name. The type is string.
    TopologyName interface{}
}

func (topologiesSupported *Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported) GetEntityData() *types.CommonEntityData {
    topologiesSupported.EntityData.YFilter = topologiesSupported.YFilter
    topologiesSupported.EntityData.YangName = "topologies-supported"
    topologiesSupported.EntityData.BundleName = "cisco_ios_xr"
    topologiesSupported.EntityData.ParentYangName = "neighbor"
    topologiesSupported.EntityData.SegmentPath = "topologies-supported"
    topologiesSupported.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topologiesSupported.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topologiesSupported.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topologiesSupported.EntityData.Children = make(map[string]types.YChild)
    topologiesSupported.EntityData.Leafs = make(map[string]types.YLeaf)
    topologiesSupported.EntityData.Leafs["af-name"] = types.YLeaf{"AfName", topologiesSupported.AfName}
    topologiesSupported.EntityData.Leafs["saf-name"] = types.YLeaf{"SafName", topologiesSupported.SafName}
    topologiesSupported.EntityData.Leafs["vrf-name"] = types.YLeaf{"VrfName", topologiesSupported.VrfName}
    topologiesSupported.EntityData.Leafs["topology-name"] = types.YLeaf{"TopologyName", topologiesSupported.TopologyName}
    return &(topologiesSupported.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData
// Per address-family data
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IsisAfId.
    AfName interface{}

    // IPV4 neighbor info.
    Ipv4 Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4

    // IPV6 neighbor info.
    Ipv6 Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6
}

func (neighborPerAddressFamilyData *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData) GetEntityData() *types.CommonEntityData {
    neighborPerAddressFamilyData.EntityData.YFilter = neighborPerAddressFamilyData.YFilter
    neighborPerAddressFamilyData.EntityData.YangName = "neighbor-per-address-family-data"
    neighborPerAddressFamilyData.EntityData.BundleName = "cisco_ios_xr"
    neighborPerAddressFamilyData.EntityData.ParentYangName = "neighbor"
    neighborPerAddressFamilyData.EntityData.SegmentPath = "neighbor-per-address-family-data"
    neighborPerAddressFamilyData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborPerAddressFamilyData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborPerAddressFamilyData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborPerAddressFamilyData.EntityData.Children = make(map[string]types.YChild)
    neighborPerAddressFamilyData.EntityData.Children["ipv4"] = types.YChild{"Ipv4", &neighborPerAddressFamilyData.Ipv4}
    neighborPerAddressFamilyData.EntityData.Children["ipv6"] = types.YChild{"Ipv6", &neighborPerAddressFamilyData.Ipv6}
    neighborPerAddressFamilyData.EntityData.Leafs = make(map[string]types.YLeaf)
    neighborPerAddressFamilyData.EntityData.Leafs["af-name"] = types.YLeaf{"AfName", neighborPerAddressFamilyData.AfName}
    return &(neighborPerAddressFamilyData.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4
// IPV4 neighbor info
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency next hop. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NextHop interface{}

    // Adjacency SID.
    AdjacencySid Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid

    // Adjacency SID not eligible for FRR protection.
    NonFrrAdjacencySid Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid

    // Adjacency interface addresses. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress.
    InterfaceAddress []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress

    // Per bundle member Adjacency sid. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid.
    UnderlyingAdjacencySid []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid

    // Underlying interface list for bundle interfaces. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface.
    UnderlyingInterface []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface
}

func (ipv4 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "neighbor-per-address-family-data"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = make(map[string]types.YChild)
    ipv4.EntityData.Children["adjacency-sid"] = types.YChild{"AdjacencySid", &ipv4.AdjacencySid}
    ipv4.EntityData.Children["non-frr-adjacency-sid"] = types.YChild{"NonFrrAdjacencySid", &ipv4.NonFrrAdjacencySid}
    ipv4.EntityData.Children["interface-address"] = types.YChild{"InterfaceAddress", nil}
    for i := range ipv4.InterfaceAddress {
        ipv4.EntityData.Children[types.GetSegmentPath(&ipv4.InterfaceAddress[i])] = types.YChild{"InterfaceAddress", &ipv4.InterfaceAddress[i]}
    }
    ipv4.EntityData.Children["underlying-adjacency-sid"] = types.YChild{"UnderlyingAdjacencySid", nil}
    for i := range ipv4.UnderlyingAdjacencySid {
        ipv4.EntityData.Children[types.GetSegmentPath(&ipv4.UnderlyingAdjacencySid[i])] = types.YChild{"UnderlyingAdjacencySid", &ipv4.UnderlyingAdjacencySid[i]}
    }
    ipv4.EntityData.Children["underlying-interface"] = types.YChild{"UnderlyingInterface", nil}
    for i := range ipv4.UnderlyingInterface {
        ipv4.EntityData.Children[types.GetSegmentPath(&ipv4.UnderlyingInterface[i])] = types.YChild{"UnderlyingInterface", &ipv4.UnderlyingInterface[i]}
    }
    ipv4.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv4.EntityData.Leafs["next-hop"] = types.YLeaf{"NextHop", ipv4.NextHop}
    return &(ipv4.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid
// Adjacency SID
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency SID value. The type is interface{} with range: 0..4294967295.
    AdjacencySidValue interface{}

    // Adjacency SID Backup Info.
    AdjacencySidBackup Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup

    // Adjacency SID Backup Info TE.
    AdjacencySidBackupTe Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe
}

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid) GetEntityData() *types.CommonEntityData {
    adjacencySid.EntityData.YFilter = adjacencySid.YFilter
    adjacencySid.EntityData.YangName = "adjacency-sid"
    adjacencySid.EntityData.BundleName = "cisco_ios_xr"
    adjacencySid.EntityData.ParentYangName = "ipv4"
    adjacencySid.EntityData.SegmentPath = "adjacency-sid"
    adjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySid.EntityData.Children = make(map[string]types.YChild)
    adjacencySid.EntityData.Children["adjacency-sid-backup"] = types.YChild{"AdjacencySidBackup", &adjacencySid.AdjacencySidBackup}
    adjacencySid.EntityData.Children["adjacency-sid-backup-te"] = types.YChild{"AdjacencySidBackupTe", &adjacencySid.AdjacencySidBackupTe}
    adjacencySid.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencySid.EntityData.Leafs["adjacency-sid-value"] = types.YLeaf{"AdjacencySidValue", adjacencySid.AdjacencySidValue}
    return &(adjacencySid.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup
// Adjacency SID Backup Info
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetEntityData() *types.CommonEntityData {
    adjacencySidBackup.EntityData.YFilter = adjacencySidBackup.YFilter
    adjacencySidBackup.EntityData.YangName = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackup.EntityData.ParentYangName = "adjacency-sid"
    adjacencySidBackup.EntityData.SegmentPath = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackup.EntityData.Children = make(map[string]types.YChild)
    adjacencySidBackup.EntityData.Children["backup-label-stack"] = types.YChild{"BackupLabelStack", nil}
    for i := range adjacencySidBackup.BackupLabelStack {
        adjacencySidBackup.EntityData.Children[types.GetSegmentPath(&adjacencySidBackup.BackupLabelStack[i])] = types.YChild{"BackupLabelStack", &adjacencySidBackup.BackupLabelStack[i]}
    }
    adjacencySidBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencySidBackup.EntityData.Leafs["backup-label-stack-size"] = types.YLeaf{"BackupLabelStackSize", adjacencySidBackup.BackupLabelStackSize}
    adjacencySidBackup.EntityData.Leafs["backup-node-address"] = types.YLeaf{"BackupNodeAddress", adjacencySidBackup.BackupNodeAddress}
    adjacencySidBackup.EntityData.Leafs["backup-nexthop"] = types.YLeaf{"BackupNexthop", adjacencySidBackup.BackupNexthop}
    adjacencySidBackup.EntityData.Leafs["backup-interface"] = types.YLeaf{"BackupInterface", adjacencySidBackup.BackupInterface}
    return &(adjacencySidBackup.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack"
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = make(map[string]types.YChild)
    backupLabelStack.EntityData.Leafs = make(map[string]types.YLeaf)
    backupLabelStack.EntityData.Leafs["entry"] = types.YLeaf{"Entry", backupLabelStack.Entry}
    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe
// Adjacency SID Backup Info TE
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetEntityData() *types.CommonEntityData {
    adjacencySidBackupTe.EntityData.YFilter = adjacencySidBackupTe.YFilter
    adjacencySidBackupTe.EntityData.YangName = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackupTe.EntityData.ParentYangName = "adjacency-sid"
    adjacencySidBackupTe.EntityData.SegmentPath = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackupTe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackupTe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackupTe.EntityData.Children = make(map[string]types.YChild)
    adjacencySidBackupTe.EntityData.Children["backup-label-stack"] = types.YChild{"BackupLabelStack", nil}
    for i := range adjacencySidBackupTe.BackupLabelStack {
        adjacencySidBackupTe.EntityData.Children[types.GetSegmentPath(&adjacencySidBackupTe.BackupLabelStack[i])] = types.YChild{"BackupLabelStack", &adjacencySidBackupTe.BackupLabelStack[i]}
    }
    adjacencySidBackupTe.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencySidBackupTe.EntityData.Leafs["backup-label-stack-size"] = types.YLeaf{"BackupLabelStackSize", adjacencySidBackupTe.BackupLabelStackSize}
    adjacencySidBackupTe.EntityData.Leafs["backup-node-address"] = types.YLeaf{"BackupNodeAddress", adjacencySidBackupTe.BackupNodeAddress}
    adjacencySidBackupTe.EntityData.Leafs["backup-nexthop"] = types.YLeaf{"BackupNexthop", adjacencySidBackupTe.BackupNexthop}
    adjacencySidBackupTe.EntityData.Leafs["backup-interface"] = types.YLeaf{"BackupInterface", adjacencySidBackupTe.BackupInterface}
    return &(adjacencySidBackupTe.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup-te"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack"
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = make(map[string]types.YChild)
    backupLabelStack.EntityData.Leafs = make(map[string]types.YLeaf)
    backupLabelStack.EntityData.Leafs["entry"] = types.YLeaf{"Entry", backupLabelStack.Entry}
    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid
// Adjacency SID not eligible for FRR protection
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency SID value. The type is interface{} with range: 0..4294967295.
    AdjacencySidValue interface{}

    // Adjacency SID Backup Info.
    AdjacencySidBackup Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup

    // Adjacency SID Backup Info TE.
    AdjacencySidBackupTe Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetEntityData() *types.CommonEntityData {
    nonFrrAdjacencySid.EntityData.YFilter = nonFrrAdjacencySid.YFilter
    nonFrrAdjacencySid.EntityData.YangName = "non-frr-adjacency-sid"
    nonFrrAdjacencySid.EntityData.BundleName = "cisco_ios_xr"
    nonFrrAdjacencySid.EntityData.ParentYangName = "ipv4"
    nonFrrAdjacencySid.EntityData.SegmentPath = "non-frr-adjacency-sid"
    nonFrrAdjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonFrrAdjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonFrrAdjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonFrrAdjacencySid.EntityData.Children = make(map[string]types.YChild)
    nonFrrAdjacencySid.EntityData.Children["adjacency-sid-backup"] = types.YChild{"AdjacencySidBackup", &nonFrrAdjacencySid.AdjacencySidBackup}
    nonFrrAdjacencySid.EntityData.Children["adjacency-sid-backup-te"] = types.YChild{"AdjacencySidBackupTe", &nonFrrAdjacencySid.AdjacencySidBackupTe}
    nonFrrAdjacencySid.EntityData.Leafs = make(map[string]types.YLeaf)
    nonFrrAdjacencySid.EntityData.Leafs["adjacency-sid-value"] = types.YLeaf{"AdjacencySidValue", nonFrrAdjacencySid.AdjacencySidValue}
    return &(nonFrrAdjacencySid.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup
// Adjacency SID Backup Info
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetEntityData() *types.CommonEntityData {
    adjacencySidBackup.EntityData.YFilter = adjacencySidBackup.YFilter
    adjacencySidBackup.EntityData.YangName = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackup.EntityData.ParentYangName = "non-frr-adjacency-sid"
    adjacencySidBackup.EntityData.SegmentPath = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackup.EntityData.Children = make(map[string]types.YChild)
    adjacencySidBackup.EntityData.Children["backup-label-stack"] = types.YChild{"BackupLabelStack", nil}
    for i := range adjacencySidBackup.BackupLabelStack {
        adjacencySidBackup.EntityData.Children[types.GetSegmentPath(&adjacencySidBackup.BackupLabelStack[i])] = types.YChild{"BackupLabelStack", &adjacencySidBackup.BackupLabelStack[i]}
    }
    adjacencySidBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencySidBackup.EntityData.Leafs["backup-label-stack-size"] = types.YLeaf{"BackupLabelStackSize", adjacencySidBackup.BackupLabelStackSize}
    adjacencySidBackup.EntityData.Leafs["backup-node-address"] = types.YLeaf{"BackupNodeAddress", adjacencySidBackup.BackupNodeAddress}
    adjacencySidBackup.EntityData.Leafs["backup-nexthop"] = types.YLeaf{"BackupNexthop", adjacencySidBackup.BackupNexthop}
    adjacencySidBackup.EntityData.Leafs["backup-interface"] = types.YLeaf{"BackupInterface", adjacencySidBackup.BackupInterface}
    return &(adjacencySidBackup.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack"
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = make(map[string]types.YChild)
    backupLabelStack.EntityData.Leafs = make(map[string]types.YLeaf)
    backupLabelStack.EntityData.Leafs["entry"] = types.YLeaf{"Entry", backupLabelStack.Entry}
    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe
// Adjacency SID Backup Info TE
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetEntityData() *types.CommonEntityData {
    adjacencySidBackupTe.EntityData.YFilter = adjacencySidBackupTe.YFilter
    adjacencySidBackupTe.EntityData.YangName = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackupTe.EntityData.ParentYangName = "non-frr-adjacency-sid"
    adjacencySidBackupTe.EntityData.SegmentPath = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackupTe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackupTe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackupTe.EntityData.Children = make(map[string]types.YChild)
    adjacencySidBackupTe.EntityData.Children["backup-label-stack"] = types.YChild{"BackupLabelStack", nil}
    for i := range adjacencySidBackupTe.BackupLabelStack {
        adjacencySidBackupTe.EntityData.Children[types.GetSegmentPath(&adjacencySidBackupTe.BackupLabelStack[i])] = types.YChild{"BackupLabelStack", &adjacencySidBackupTe.BackupLabelStack[i]}
    }
    adjacencySidBackupTe.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencySidBackupTe.EntityData.Leafs["backup-label-stack-size"] = types.YLeaf{"BackupLabelStackSize", adjacencySidBackupTe.BackupLabelStackSize}
    adjacencySidBackupTe.EntityData.Leafs["backup-node-address"] = types.YLeaf{"BackupNodeAddress", adjacencySidBackupTe.BackupNodeAddress}
    adjacencySidBackupTe.EntityData.Leafs["backup-nexthop"] = types.YLeaf{"BackupNexthop", adjacencySidBackupTe.BackupNexthop}
    adjacencySidBackupTe.EntityData.Leafs["backup-interface"] = types.YLeaf{"BackupInterface", adjacencySidBackupTe.BackupInterface}
    return &(adjacencySidBackupTe.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup-te"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack"
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = make(map[string]types.YChild)
    backupLabelStack.EntityData.Leafs = make(map[string]types.YLeaf)
    backupLabelStack.EntityData.Leafs["entry"] = types.YLeaf{"Entry", backupLabelStack.Entry}
    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress
// Adjacency interface addresses
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Entry interface{}
}

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress) GetEntityData() *types.CommonEntityData {
    interfaceAddress.EntityData.YFilter = interfaceAddress.YFilter
    interfaceAddress.EntityData.YangName = "interface-address"
    interfaceAddress.EntityData.BundleName = "cisco_ios_xr"
    interfaceAddress.EntityData.ParentYangName = "ipv4"
    interfaceAddress.EntityData.SegmentPath = "interface-address"
    interfaceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAddress.EntityData.Children = make(map[string]types.YChild)
    interfaceAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    interfaceAddress.EntityData.Leafs["entry"] = types.YLeaf{"Entry", interfaceAddress.Entry}
    return &(interfaceAddress.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid
// Per bundle member Adjacency sid
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetEntityData() *types.CommonEntityData {
    underlyingAdjacencySid.EntityData.YFilter = underlyingAdjacencySid.YFilter
    underlyingAdjacencySid.EntityData.YangName = "underlying-adjacency-sid"
    underlyingAdjacencySid.EntityData.BundleName = "cisco_ios_xr"
    underlyingAdjacencySid.EntityData.ParentYangName = "ipv4"
    underlyingAdjacencySid.EntityData.SegmentPath = "underlying-adjacency-sid"
    underlyingAdjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    underlyingAdjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    underlyingAdjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    underlyingAdjacencySid.EntityData.Children = make(map[string]types.YChild)
    underlyingAdjacencySid.EntityData.Leafs = make(map[string]types.YLeaf)
    underlyingAdjacencySid.EntityData.Leafs["entry"] = types.YLeaf{"Entry", underlyingAdjacencySid.Entry}
    return &(underlyingAdjacencySid.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface
// Underlying interface list for bundle interfaces
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local interface handle. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceHandle interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface) GetEntityData() *types.CommonEntityData {
    underlyingInterface.EntityData.YFilter = underlyingInterface.YFilter
    underlyingInterface.EntityData.YangName = "underlying-interface"
    underlyingInterface.EntityData.BundleName = "cisco_ios_xr"
    underlyingInterface.EntityData.ParentYangName = "ipv4"
    underlyingInterface.EntityData.SegmentPath = "underlying-interface"
    underlyingInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    underlyingInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    underlyingInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    underlyingInterface.EntityData.Children = make(map[string]types.YChild)
    underlyingInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    underlyingInterface.EntityData.Leafs["interface-handle"] = types.YLeaf{"InterfaceHandle", underlyingInterface.InterfaceHandle}
    underlyingInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", underlyingInterface.InterfaceName}
    return &(underlyingInterface.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6
// IPV6 neighbor info
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency next hop. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NextHop interface{}

    // Adjacency SID.
    AdjacencySid Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid

    // Adjacency SID not eligible for FRR protection.
    NonFrrAdjacencySid Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid

    // Adjacency interface addresses. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress.
    InterfaceAddress []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress

    // Per bundle member Adjacency sid. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid.
    UnderlyingAdjacencySid []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid

    // Underlying interface list for bundle interfaces. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface.
    UnderlyingInterface []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface
}

func (ipv6 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6) GetEntityData() *types.CommonEntityData {
    ipv6.EntityData.YFilter = ipv6.YFilter
    ipv6.EntityData.YangName = "ipv6"
    ipv6.EntityData.BundleName = "cisco_ios_xr"
    ipv6.EntityData.ParentYangName = "neighbor-per-address-family-data"
    ipv6.EntityData.SegmentPath = "ipv6"
    ipv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6.EntityData.Children = make(map[string]types.YChild)
    ipv6.EntityData.Children["adjacency-sid"] = types.YChild{"AdjacencySid", &ipv6.AdjacencySid}
    ipv6.EntityData.Children["non-frr-adjacency-sid"] = types.YChild{"NonFrrAdjacencySid", &ipv6.NonFrrAdjacencySid}
    ipv6.EntityData.Children["interface-address"] = types.YChild{"InterfaceAddress", nil}
    for i := range ipv6.InterfaceAddress {
        ipv6.EntityData.Children[types.GetSegmentPath(&ipv6.InterfaceAddress[i])] = types.YChild{"InterfaceAddress", &ipv6.InterfaceAddress[i]}
    }
    ipv6.EntityData.Children["underlying-adjacency-sid"] = types.YChild{"UnderlyingAdjacencySid", nil}
    for i := range ipv6.UnderlyingAdjacencySid {
        ipv6.EntityData.Children[types.GetSegmentPath(&ipv6.UnderlyingAdjacencySid[i])] = types.YChild{"UnderlyingAdjacencySid", &ipv6.UnderlyingAdjacencySid[i]}
    }
    ipv6.EntityData.Children["underlying-interface"] = types.YChild{"UnderlyingInterface", nil}
    for i := range ipv6.UnderlyingInterface {
        ipv6.EntityData.Children[types.GetSegmentPath(&ipv6.UnderlyingInterface[i])] = types.YChild{"UnderlyingInterface", &ipv6.UnderlyingInterface[i]}
    }
    ipv6.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv6.EntityData.Leafs["next-hop"] = types.YLeaf{"NextHop", ipv6.NextHop}
    return &(ipv6.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid
// Adjacency SID
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency SID value. The type is interface{} with range: 0..4294967295.
    AdjacencySidValue interface{}

    // Adjacency SID Backup Info.
    AdjacencySidBackup Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup

    // Adjacency SID Backup Info TE.
    AdjacencySidBackupTe Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe
}

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid) GetEntityData() *types.CommonEntityData {
    adjacencySid.EntityData.YFilter = adjacencySid.YFilter
    adjacencySid.EntityData.YangName = "adjacency-sid"
    adjacencySid.EntityData.BundleName = "cisco_ios_xr"
    adjacencySid.EntityData.ParentYangName = "ipv6"
    adjacencySid.EntityData.SegmentPath = "adjacency-sid"
    adjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySid.EntityData.Children = make(map[string]types.YChild)
    adjacencySid.EntityData.Children["adjacency-sid-backup"] = types.YChild{"AdjacencySidBackup", &adjacencySid.AdjacencySidBackup}
    adjacencySid.EntityData.Children["adjacency-sid-backup-te"] = types.YChild{"AdjacencySidBackupTe", &adjacencySid.AdjacencySidBackupTe}
    adjacencySid.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencySid.EntityData.Leafs["adjacency-sid-value"] = types.YLeaf{"AdjacencySidValue", adjacencySid.AdjacencySidValue}
    return &(adjacencySid.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup
// Adjacency SID Backup Info
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetEntityData() *types.CommonEntityData {
    adjacencySidBackup.EntityData.YFilter = adjacencySidBackup.YFilter
    adjacencySidBackup.EntityData.YangName = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackup.EntityData.ParentYangName = "adjacency-sid"
    adjacencySidBackup.EntityData.SegmentPath = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackup.EntityData.Children = make(map[string]types.YChild)
    adjacencySidBackup.EntityData.Children["backup-label-stack"] = types.YChild{"BackupLabelStack", nil}
    for i := range adjacencySidBackup.BackupLabelStack {
        adjacencySidBackup.EntityData.Children[types.GetSegmentPath(&adjacencySidBackup.BackupLabelStack[i])] = types.YChild{"BackupLabelStack", &adjacencySidBackup.BackupLabelStack[i]}
    }
    adjacencySidBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencySidBackup.EntityData.Leafs["backup-label-stack-size"] = types.YLeaf{"BackupLabelStackSize", adjacencySidBackup.BackupLabelStackSize}
    adjacencySidBackup.EntityData.Leafs["backup-node-address"] = types.YLeaf{"BackupNodeAddress", adjacencySidBackup.BackupNodeAddress}
    adjacencySidBackup.EntityData.Leafs["backup-nexthop"] = types.YLeaf{"BackupNexthop", adjacencySidBackup.BackupNexthop}
    adjacencySidBackup.EntityData.Leafs["backup-interface"] = types.YLeaf{"BackupInterface", adjacencySidBackup.BackupInterface}
    return &(adjacencySidBackup.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack"
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = make(map[string]types.YChild)
    backupLabelStack.EntityData.Leafs = make(map[string]types.YLeaf)
    backupLabelStack.EntityData.Leafs["entry"] = types.YLeaf{"Entry", backupLabelStack.Entry}
    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe
// Adjacency SID Backup Info TE
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetEntityData() *types.CommonEntityData {
    adjacencySidBackupTe.EntityData.YFilter = adjacencySidBackupTe.YFilter
    adjacencySidBackupTe.EntityData.YangName = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackupTe.EntityData.ParentYangName = "adjacency-sid"
    adjacencySidBackupTe.EntityData.SegmentPath = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackupTe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackupTe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackupTe.EntityData.Children = make(map[string]types.YChild)
    adjacencySidBackupTe.EntityData.Children["backup-label-stack"] = types.YChild{"BackupLabelStack", nil}
    for i := range adjacencySidBackupTe.BackupLabelStack {
        adjacencySidBackupTe.EntityData.Children[types.GetSegmentPath(&adjacencySidBackupTe.BackupLabelStack[i])] = types.YChild{"BackupLabelStack", &adjacencySidBackupTe.BackupLabelStack[i]}
    }
    adjacencySidBackupTe.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencySidBackupTe.EntityData.Leafs["backup-label-stack-size"] = types.YLeaf{"BackupLabelStackSize", adjacencySidBackupTe.BackupLabelStackSize}
    adjacencySidBackupTe.EntityData.Leafs["backup-node-address"] = types.YLeaf{"BackupNodeAddress", adjacencySidBackupTe.BackupNodeAddress}
    adjacencySidBackupTe.EntityData.Leafs["backup-nexthop"] = types.YLeaf{"BackupNexthop", adjacencySidBackupTe.BackupNexthop}
    adjacencySidBackupTe.EntityData.Leafs["backup-interface"] = types.YLeaf{"BackupInterface", adjacencySidBackupTe.BackupInterface}
    return &(adjacencySidBackupTe.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup-te"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack"
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = make(map[string]types.YChild)
    backupLabelStack.EntityData.Leafs = make(map[string]types.YLeaf)
    backupLabelStack.EntityData.Leafs["entry"] = types.YLeaf{"Entry", backupLabelStack.Entry}
    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid
// Adjacency SID not eligible for FRR protection
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency SID value. The type is interface{} with range: 0..4294967295.
    AdjacencySidValue interface{}

    // Adjacency SID Backup Info.
    AdjacencySidBackup Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup

    // Adjacency SID Backup Info TE.
    AdjacencySidBackupTe Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetEntityData() *types.CommonEntityData {
    nonFrrAdjacencySid.EntityData.YFilter = nonFrrAdjacencySid.YFilter
    nonFrrAdjacencySid.EntityData.YangName = "non-frr-adjacency-sid"
    nonFrrAdjacencySid.EntityData.BundleName = "cisco_ios_xr"
    nonFrrAdjacencySid.EntityData.ParentYangName = "ipv6"
    nonFrrAdjacencySid.EntityData.SegmentPath = "non-frr-adjacency-sid"
    nonFrrAdjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonFrrAdjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonFrrAdjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonFrrAdjacencySid.EntityData.Children = make(map[string]types.YChild)
    nonFrrAdjacencySid.EntityData.Children["adjacency-sid-backup"] = types.YChild{"AdjacencySidBackup", &nonFrrAdjacencySid.AdjacencySidBackup}
    nonFrrAdjacencySid.EntityData.Children["adjacency-sid-backup-te"] = types.YChild{"AdjacencySidBackupTe", &nonFrrAdjacencySid.AdjacencySidBackupTe}
    nonFrrAdjacencySid.EntityData.Leafs = make(map[string]types.YLeaf)
    nonFrrAdjacencySid.EntityData.Leafs["adjacency-sid-value"] = types.YLeaf{"AdjacencySidValue", nonFrrAdjacencySid.AdjacencySidValue}
    return &(nonFrrAdjacencySid.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup
// Adjacency SID Backup Info
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetEntityData() *types.CommonEntityData {
    adjacencySidBackup.EntityData.YFilter = adjacencySidBackup.YFilter
    adjacencySidBackup.EntityData.YangName = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackup.EntityData.ParentYangName = "non-frr-adjacency-sid"
    adjacencySidBackup.EntityData.SegmentPath = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackup.EntityData.Children = make(map[string]types.YChild)
    adjacencySidBackup.EntityData.Children["backup-label-stack"] = types.YChild{"BackupLabelStack", nil}
    for i := range adjacencySidBackup.BackupLabelStack {
        adjacencySidBackup.EntityData.Children[types.GetSegmentPath(&adjacencySidBackup.BackupLabelStack[i])] = types.YChild{"BackupLabelStack", &adjacencySidBackup.BackupLabelStack[i]}
    }
    adjacencySidBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencySidBackup.EntityData.Leafs["backup-label-stack-size"] = types.YLeaf{"BackupLabelStackSize", adjacencySidBackup.BackupLabelStackSize}
    adjacencySidBackup.EntityData.Leafs["backup-node-address"] = types.YLeaf{"BackupNodeAddress", adjacencySidBackup.BackupNodeAddress}
    adjacencySidBackup.EntityData.Leafs["backup-nexthop"] = types.YLeaf{"BackupNexthop", adjacencySidBackup.BackupNexthop}
    adjacencySidBackup.EntityData.Leafs["backup-interface"] = types.YLeaf{"BackupInterface", adjacencySidBackup.BackupInterface}
    return &(adjacencySidBackup.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack"
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = make(map[string]types.YChild)
    backupLabelStack.EntityData.Leafs = make(map[string]types.YLeaf)
    backupLabelStack.EntityData.Leafs["entry"] = types.YLeaf{"Entry", backupLabelStack.Entry}
    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe
// Adjacency SID Backup Info TE
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetEntityData() *types.CommonEntityData {
    adjacencySidBackupTe.EntityData.YFilter = adjacencySidBackupTe.YFilter
    adjacencySidBackupTe.EntityData.YangName = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackupTe.EntityData.ParentYangName = "non-frr-adjacency-sid"
    adjacencySidBackupTe.EntityData.SegmentPath = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackupTe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackupTe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackupTe.EntityData.Children = make(map[string]types.YChild)
    adjacencySidBackupTe.EntityData.Children["backup-label-stack"] = types.YChild{"BackupLabelStack", nil}
    for i := range adjacencySidBackupTe.BackupLabelStack {
        adjacencySidBackupTe.EntityData.Children[types.GetSegmentPath(&adjacencySidBackupTe.BackupLabelStack[i])] = types.YChild{"BackupLabelStack", &adjacencySidBackupTe.BackupLabelStack[i]}
    }
    adjacencySidBackupTe.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencySidBackupTe.EntityData.Leafs["backup-label-stack-size"] = types.YLeaf{"BackupLabelStackSize", adjacencySidBackupTe.BackupLabelStackSize}
    adjacencySidBackupTe.EntityData.Leafs["backup-node-address"] = types.YLeaf{"BackupNodeAddress", adjacencySidBackupTe.BackupNodeAddress}
    adjacencySidBackupTe.EntityData.Leafs["backup-nexthop"] = types.YLeaf{"BackupNexthop", adjacencySidBackupTe.BackupNexthop}
    adjacencySidBackupTe.EntityData.Leafs["backup-interface"] = types.YLeaf{"BackupInterface", adjacencySidBackupTe.BackupInterface}
    return &(adjacencySidBackupTe.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup-te"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack"
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = make(map[string]types.YChild)
    backupLabelStack.EntityData.Leafs = make(map[string]types.YLeaf)
    backupLabelStack.EntityData.Leafs["entry"] = types.YLeaf{"Entry", backupLabelStack.Entry}
    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress
// Adjacency interface addresses
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Entry interface{}
}

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress) GetEntityData() *types.CommonEntityData {
    interfaceAddress.EntityData.YFilter = interfaceAddress.YFilter
    interfaceAddress.EntityData.YangName = "interface-address"
    interfaceAddress.EntityData.BundleName = "cisco_ios_xr"
    interfaceAddress.EntityData.ParentYangName = "ipv6"
    interfaceAddress.EntityData.SegmentPath = "interface-address"
    interfaceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAddress.EntityData.Children = make(map[string]types.YChild)
    interfaceAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    interfaceAddress.EntityData.Leafs["entry"] = types.YLeaf{"Entry", interfaceAddress.Entry}
    return &(interfaceAddress.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid
// Per bundle member Adjacency sid
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetEntityData() *types.CommonEntityData {
    underlyingAdjacencySid.EntityData.YFilter = underlyingAdjacencySid.YFilter
    underlyingAdjacencySid.EntityData.YangName = "underlying-adjacency-sid"
    underlyingAdjacencySid.EntityData.BundleName = "cisco_ios_xr"
    underlyingAdjacencySid.EntityData.ParentYangName = "ipv6"
    underlyingAdjacencySid.EntityData.SegmentPath = "underlying-adjacency-sid"
    underlyingAdjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    underlyingAdjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    underlyingAdjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    underlyingAdjacencySid.EntityData.Children = make(map[string]types.YChild)
    underlyingAdjacencySid.EntityData.Leafs = make(map[string]types.YLeaf)
    underlyingAdjacencySid.EntityData.Leafs["entry"] = types.YLeaf{"Entry", underlyingAdjacencySid.Entry}
    return &(underlyingAdjacencySid.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface
// Underlying interface list for bundle interfaces
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local interface handle. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceHandle interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface) GetEntityData() *types.CommonEntityData {
    underlyingInterface.EntityData.YFilter = underlyingInterface.YFilter
    underlyingInterface.EntityData.YangName = "underlying-interface"
    underlyingInterface.EntityData.BundleName = "cisco_ios_xr"
    underlyingInterface.EntityData.ParentYangName = "ipv6"
    underlyingInterface.EntityData.SegmentPath = "underlying-interface"
    underlyingInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    underlyingInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    underlyingInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    underlyingInterface.EntityData.Children = make(map[string]types.YChild)
    underlyingInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    underlyingInterface.EntityData.Leafs["interface-handle"] = types.YLeaf{"InterfaceHandle", underlyingInterface.InterfaceHandle}
    underlyingInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", underlyingInterface.InterfaceName}
    return &(underlyingInterface.EntityData)
}

// Isis_Instances_Instance_HostNames
// Hostname table
type Isis_Instances_Instance_HostNames struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Hostname table entry. The type is slice of
    // Isis_Instances_Instance_HostNames_HostName.
    HostName []Isis_Instances_Instance_HostNames_HostName
}

func (hostNames *Isis_Instances_Instance_HostNames) GetEntityData() *types.CommonEntityData {
    hostNames.EntityData.YFilter = hostNames.YFilter
    hostNames.EntityData.YangName = "host-names"
    hostNames.EntityData.BundleName = "cisco_ios_xr"
    hostNames.EntityData.ParentYangName = "instance"
    hostNames.EntityData.SegmentPath = "host-names"
    hostNames.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hostNames.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hostNames.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hostNames.EntityData.Children = make(map[string]types.YChild)
    hostNames.EntityData.Children["host-name"] = types.YChild{"HostName", nil}
    for i := range hostNames.HostName {
        hostNames.EntityData.Children[types.GetSegmentPath(&hostNames.HostName[i])] = types.YChild{"HostName", &hostNames.HostName[i]}
    }
    hostNames.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(hostNames.EntityData)
}

// Isis_Instances_Instance_HostNames_HostName
// Hostname table entry
type Isis_Instances_Instance_HostNames_HostName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. System ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    SystemId interface{}

    // TRUE if this is the local IS. The type is bool.
    LocalIsFlag interface{}

    // Host levels. The type is IsisLevels.
    HostLevels interface{}

    // Host name. The type is string.
    HostName interface{}
}

func (hostName *Isis_Instances_Instance_HostNames_HostName) GetEntityData() *types.CommonEntityData {
    hostName.EntityData.YFilter = hostName.YFilter
    hostName.EntityData.YangName = "host-name"
    hostName.EntityData.BundleName = "cisco_ios_xr"
    hostName.EntityData.ParentYangName = "host-names"
    hostName.EntityData.SegmentPath = "host-name" + "[system-id='" + fmt.Sprintf("%v", hostName.SystemId) + "']"
    hostName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hostName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hostName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hostName.EntityData.Children = make(map[string]types.YChild)
    hostName.EntityData.Leafs = make(map[string]types.YLeaf)
    hostName.EntityData.Leafs["system-id"] = types.YLeaf{"SystemId", hostName.SystemId}
    hostName.EntityData.Leafs["local-is-flag"] = types.YLeaf{"LocalIsFlag", hostName.LocalIsFlag}
    hostName.EntityData.Leafs["host-levels"] = types.YLeaf{"HostLevels", hostName.HostLevels}
    hostName.EntityData.Leafs["host-name"] = types.YLeaf{"HostName", hostName.HostName}
    return &(hostName.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal
// Per-instance statistics
type Isis_Instances_Instance_StatisticsGlobal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Statistics.
    Statistics Isis_Instances_Instance_StatisticsGlobal_Statistics

    // Per-area data. The type is slice of
    // Isis_Instances_Instance_StatisticsGlobal_PerAreaData.
    PerAreaData []Isis_Instances_Instance_StatisticsGlobal_PerAreaData
}

func (statisticsGlobal *Isis_Instances_Instance_StatisticsGlobal) GetEntityData() *types.CommonEntityData {
    statisticsGlobal.EntityData.YFilter = statisticsGlobal.YFilter
    statisticsGlobal.EntityData.YangName = "statistics-global"
    statisticsGlobal.EntityData.BundleName = "cisco_ios_xr"
    statisticsGlobal.EntityData.ParentYangName = "instance"
    statisticsGlobal.EntityData.SegmentPath = "statistics-global"
    statisticsGlobal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statisticsGlobal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statisticsGlobal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statisticsGlobal.EntityData.Children = make(map[string]types.YChild)
    statisticsGlobal.EntityData.Children["statistics"] = types.YChild{"Statistics", &statisticsGlobal.Statistics}
    statisticsGlobal.EntityData.Children["per-area-data"] = types.YChild{"PerAreaData", nil}
    for i := range statisticsGlobal.PerAreaData {
        statisticsGlobal.EntityData.Children[types.GetSegmentPath(&statisticsGlobal.PerAreaData[i])] = types.YChild{"PerAreaData", &statisticsGlobal.PerAreaData[i]}
    }
    statisticsGlobal.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(statisticsGlobal.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_Statistics
// Statistics
type Isis_Instances_Instance_StatisticsGlobal_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fast-PSNP cache lookups. The type is interface{} with range: 0..4294967295.
    FastPsnpLookupCount interface{}

    // Fast-PSNP cache hits. The type is interface{} with range: 0..4294967295.
    FastPsnpLookupHitCount interface{}

    // Fast-CSNP cache lookups. The type is interface{} with range: 0..4294967295.
    FastCsnpLookupCount interface{}

    // Fast-CSNP cache hits. The type is interface{} with range: 0..4294967295.
    FastCsnpLookupHitCount interface{}

    // Fast-CSNP cache updates. The type is interface{} with range: 0..4294967295.
    FastCsnpCacheUpdateCount interface{}

    // LSPs received with holdtime 0. The type is interface{} with range:
    // 0..4294967295.
    ZeroHoldtimeLspCount interface{}

    // LSPs received with invalid checksum. The type is interface{} with range:
    // 0..4294967295.
    InvalidChecksumLspCount interface{}

    // IIHs dropped - Not Used. The type is interface{} with range: 0..4294967295.
    IihDroppedCount interface{}

    // LSPs dropped. The type is interface{} with range: 0..4294967295.
    LspDroppedCount interface{}

    // SNPs dropped. The type is interface{} with range: 0..4294967295.
    SnpDroppedCount interface{}

    // Maximum IIH queue length - Not Used. The type is interface{} with range:
    // 0..4294967295.
    MaximumIihQueueLength interface{}

    // Maximum update PDU queue length. The type is interface{} with range:
    // 0..4294967295.
    MaximumPduQueueLength interface{}

    // Update PDU queue length. The type is interface{} with range: 0..4294967295.
    PduQueueLength interface{}

    // Average hello receive rate in packets per second. The type is interface{}
    // with range: 0..4294967295. Units are packet/s.
    AvgHelloRecvRate interface{}

    // Average csnp receive rate in packets per second. The type is interface{}
    // with range: 0..4294967295. Units are packet/s.
    AvgCsnpRecvRate interface{}

    // Average psnp receive rate in packets per second. The type is interface{}
    // with range: 0..4294967295. Units are packet/s.
    AvgPsnpRecvRate interface{}

    // Average LSP receive rate in packets per second. The type is interface{}
    // with range: 0..4294967295. Units are packet/s.
    AvgLspRecvRate interface{}

    // Average hello send rate in packets per second. The type is interface{} with
    // range: 0..4294967295. Units are packet/s.
    AvgHelloSendRate interface{}

    // Average csnp send rate in packets per second. The type is interface{} with
    // range: 0..4294967295. Units are packet/s.
    AvgCsnpSendRate interface{}

    // Average psnp send rate in packets per second. The type is interface{} with
    // range: 0..4294967295. Units are packet/s.
    AvgPsnpSendRate interface{}

    // Average LSP send rate in packets per second. The type is interface{} with
    // range: 0..4294967295. Units are packet/s.
    AvgLspSendRate interface{}

    // Average hello process time.
    AvgHelloProcessTime Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloProcessTime

    // Average CSNP process time.
    AvgCsnpProcessTime Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpProcessTime

    // Average PSNP process time.
    AvgPsnpProcessTime Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpProcessTime

    // Average LSP process time.
    AvgLspProcessTime Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspProcessTime

    // Average hello transmit time.
    AvgHelloTransmitTime Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloTransmitTime

    // Average CSNP transmit time.
    AvgCsnpTransmitTime Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpTransmitTime

    // Average PSNP transmit time.
    AvgPsnpTransmitTime Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpTransmitTime

    // Average LSP transmit time.
    AvgLspTransmitTime Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspTransmitTime
}

func (statistics *Isis_Instances_Instance_StatisticsGlobal_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "statistics-global"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = make(map[string]types.YChild)
    statistics.EntityData.Children["avg-hello-process-time"] = types.YChild{"AvgHelloProcessTime", &statistics.AvgHelloProcessTime}
    statistics.EntityData.Children["avg-csnp-process-time"] = types.YChild{"AvgCsnpProcessTime", &statistics.AvgCsnpProcessTime}
    statistics.EntityData.Children["avg-psnp-process-time"] = types.YChild{"AvgPsnpProcessTime", &statistics.AvgPsnpProcessTime}
    statistics.EntityData.Children["avg-lsp-process-time"] = types.YChild{"AvgLspProcessTime", &statistics.AvgLspProcessTime}
    statistics.EntityData.Children["avg-hello-transmit-time"] = types.YChild{"AvgHelloTransmitTime", &statistics.AvgHelloTransmitTime}
    statistics.EntityData.Children["avg-csnp-transmit-time"] = types.YChild{"AvgCsnpTransmitTime", &statistics.AvgCsnpTransmitTime}
    statistics.EntityData.Children["avg-psnp-transmit-time"] = types.YChild{"AvgPsnpTransmitTime", &statistics.AvgPsnpTransmitTime}
    statistics.EntityData.Children["avg-lsp-transmit-time"] = types.YChild{"AvgLspTransmitTime", &statistics.AvgLspTransmitTime}
    statistics.EntityData.Leafs = make(map[string]types.YLeaf)
    statistics.EntityData.Leafs["fast-psnp-lookup-count"] = types.YLeaf{"FastPsnpLookupCount", statistics.FastPsnpLookupCount}
    statistics.EntityData.Leafs["fast-psnp-lookup-hit-count"] = types.YLeaf{"FastPsnpLookupHitCount", statistics.FastPsnpLookupHitCount}
    statistics.EntityData.Leafs["fast-csnp-lookup-count"] = types.YLeaf{"FastCsnpLookupCount", statistics.FastCsnpLookupCount}
    statistics.EntityData.Leafs["fast-csnp-lookup-hit-count"] = types.YLeaf{"FastCsnpLookupHitCount", statistics.FastCsnpLookupHitCount}
    statistics.EntityData.Leafs["fast-csnp-cache-update-count"] = types.YLeaf{"FastCsnpCacheUpdateCount", statistics.FastCsnpCacheUpdateCount}
    statistics.EntityData.Leafs["zero-holdtime-lsp-count"] = types.YLeaf{"ZeroHoldtimeLspCount", statistics.ZeroHoldtimeLspCount}
    statistics.EntityData.Leafs["invalid-checksum-lsp-count"] = types.YLeaf{"InvalidChecksumLspCount", statistics.InvalidChecksumLspCount}
    statistics.EntityData.Leafs["iih-dropped-count"] = types.YLeaf{"IihDroppedCount", statistics.IihDroppedCount}
    statistics.EntityData.Leafs["lsp-dropped-count"] = types.YLeaf{"LspDroppedCount", statistics.LspDroppedCount}
    statistics.EntityData.Leafs["snp-dropped-count"] = types.YLeaf{"SnpDroppedCount", statistics.SnpDroppedCount}
    statistics.EntityData.Leafs["maximum-iih-queue-length"] = types.YLeaf{"MaximumIihQueueLength", statistics.MaximumIihQueueLength}
    statistics.EntityData.Leafs["maximum-pdu-queue-length"] = types.YLeaf{"MaximumPduQueueLength", statistics.MaximumPduQueueLength}
    statistics.EntityData.Leafs["pdu-queue-length"] = types.YLeaf{"PduQueueLength", statistics.PduQueueLength}
    statistics.EntityData.Leafs["avg-hello-recv-rate"] = types.YLeaf{"AvgHelloRecvRate", statistics.AvgHelloRecvRate}
    statistics.EntityData.Leafs["avg-csnp-recv-rate"] = types.YLeaf{"AvgCsnpRecvRate", statistics.AvgCsnpRecvRate}
    statistics.EntityData.Leafs["avg-psnp-recv-rate"] = types.YLeaf{"AvgPsnpRecvRate", statistics.AvgPsnpRecvRate}
    statistics.EntityData.Leafs["avg-lsp-recv-rate"] = types.YLeaf{"AvgLspRecvRate", statistics.AvgLspRecvRate}
    statistics.EntityData.Leafs["avg-hello-send-rate"] = types.YLeaf{"AvgHelloSendRate", statistics.AvgHelloSendRate}
    statistics.EntityData.Leafs["avg-csnp-send-rate"] = types.YLeaf{"AvgCsnpSendRate", statistics.AvgCsnpSendRate}
    statistics.EntityData.Leafs["avg-psnp-send-rate"] = types.YLeaf{"AvgPsnpSendRate", statistics.AvgPsnpSendRate}
    statistics.EntityData.Leafs["avg-lsp-send-rate"] = types.YLeaf{"AvgLspSendRate", statistics.AvgLspSendRate}
    return &(statistics.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloProcessTime
// Average hello process time
type Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloProcessTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (avgHelloProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloProcessTime) GetEntityData() *types.CommonEntityData {
    avgHelloProcessTime.EntityData.YFilter = avgHelloProcessTime.YFilter
    avgHelloProcessTime.EntityData.YangName = "avg-hello-process-time"
    avgHelloProcessTime.EntityData.BundleName = "cisco_ios_xr"
    avgHelloProcessTime.EntityData.ParentYangName = "statistics"
    avgHelloProcessTime.EntityData.SegmentPath = "avg-hello-process-time"
    avgHelloProcessTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    avgHelloProcessTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    avgHelloProcessTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    avgHelloProcessTime.EntityData.Children = make(map[string]types.YChild)
    avgHelloProcessTime.EntityData.Leafs = make(map[string]types.YLeaf)
    avgHelloProcessTime.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", avgHelloProcessTime.Seconds}
    avgHelloProcessTime.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", avgHelloProcessTime.NanoSeconds}
    return &(avgHelloProcessTime.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpProcessTime
// Average CSNP process time
type Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpProcessTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (avgCsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpProcessTime) GetEntityData() *types.CommonEntityData {
    avgCsnpProcessTime.EntityData.YFilter = avgCsnpProcessTime.YFilter
    avgCsnpProcessTime.EntityData.YangName = "avg-csnp-process-time"
    avgCsnpProcessTime.EntityData.BundleName = "cisco_ios_xr"
    avgCsnpProcessTime.EntityData.ParentYangName = "statistics"
    avgCsnpProcessTime.EntityData.SegmentPath = "avg-csnp-process-time"
    avgCsnpProcessTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    avgCsnpProcessTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    avgCsnpProcessTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    avgCsnpProcessTime.EntityData.Children = make(map[string]types.YChild)
    avgCsnpProcessTime.EntityData.Leafs = make(map[string]types.YLeaf)
    avgCsnpProcessTime.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", avgCsnpProcessTime.Seconds}
    avgCsnpProcessTime.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", avgCsnpProcessTime.NanoSeconds}
    return &(avgCsnpProcessTime.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpProcessTime
// Average PSNP process time
type Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpProcessTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (avgPsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpProcessTime) GetEntityData() *types.CommonEntityData {
    avgPsnpProcessTime.EntityData.YFilter = avgPsnpProcessTime.YFilter
    avgPsnpProcessTime.EntityData.YangName = "avg-psnp-process-time"
    avgPsnpProcessTime.EntityData.BundleName = "cisco_ios_xr"
    avgPsnpProcessTime.EntityData.ParentYangName = "statistics"
    avgPsnpProcessTime.EntityData.SegmentPath = "avg-psnp-process-time"
    avgPsnpProcessTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    avgPsnpProcessTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    avgPsnpProcessTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    avgPsnpProcessTime.EntityData.Children = make(map[string]types.YChild)
    avgPsnpProcessTime.EntityData.Leafs = make(map[string]types.YLeaf)
    avgPsnpProcessTime.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", avgPsnpProcessTime.Seconds}
    avgPsnpProcessTime.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", avgPsnpProcessTime.NanoSeconds}
    return &(avgPsnpProcessTime.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspProcessTime
// Average LSP process time
type Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspProcessTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (avgLspProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspProcessTime) GetEntityData() *types.CommonEntityData {
    avgLspProcessTime.EntityData.YFilter = avgLspProcessTime.YFilter
    avgLspProcessTime.EntityData.YangName = "avg-lsp-process-time"
    avgLspProcessTime.EntityData.BundleName = "cisco_ios_xr"
    avgLspProcessTime.EntityData.ParentYangName = "statistics"
    avgLspProcessTime.EntityData.SegmentPath = "avg-lsp-process-time"
    avgLspProcessTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    avgLspProcessTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    avgLspProcessTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    avgLspProcessTime.EntityData.Children = make(map[string]types.YChild)
    avgLspProcessTime.EntityData.Leafs = make(map[string]types.YLeaf)
    avgLspProcessTime.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", avgLspProcessTime.Seconds}
    avgLspProcessTime.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", avgLspProcessTime.NanoSeconds}
    return &(avgLspProcessTime.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloTransmitTime
// Average hello transmit time
type Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloTransmitTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (avgHelloTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloTransmitTime) GetEntityData() *types.CommonEntityData {
    avgHelloTransmitTime.EntityData.YFilter = avgHelloTransmitTime.YFilter
    avgHelloTransmitTime.EntityData.YangName = "avg-hello-transmit-time"
    avgHelloTransmitTime.EntityData.BundleName = "cisco_ios_xr"
    avgHelloTransmitTime.EntityData.ParentYangName = "statistics"
    avgHelloTransmitTime.EntityData.SegmentPath = "avg-hello-transmit-time"
    avgHelloTransmitTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    avgHelloTransmitTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    avgHelloTransmitTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    avgHelloTransmitTime.EntityData.Children = make(map[string]types.YChild)
    avgHelloTransmitTime.EntityData.Leafs = make(map[string]types.YLeaf)
    avgHelloTransmitTime.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", avgHelloTransmitTime.Seconds}
    avgHelloTransmitTime.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", avgHelloTransmitTime.NanoSeconds}
    return &(avgHelloTransmitTime.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpTransmitTime
// Average CSNP transmit time
type Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpTransmitTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (avgCsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpTransmitTime) GetEntityData() *types.CommonEntityData {
    avgCsnpTransmitTime.EntityData.YFilter = avgCsnpTransmitTime.YFilter
    avgCsnpTransmitTime.EntityData.YangName = "avg-csnp-transmit-time"
    avgCsnpTransmitTime.EntityData.BundleName = "cisco_ios_xr"
    avgCsnpTransmitTime.EntityData.ParentYangName = "statistics"
    avgCsnpTransmitTime.EntityData.SegmentPath = "avg-csnp-transmit-time"
    avgCsnpTransmitTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    avgCsnpTransmitTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    avgCsnpTransmitTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    avgCsnpTransmitTime.EntityData.Children = make(map[string]types.YChild)
    avgCsnpTransmitTime.EntityData.Leafs = make(map[string]types.YLeaf)
    avgCsnpTransmitTime.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", avgCsnpTransmitTime.Seconds}
    avgCsnpTransmitTime.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", avgCsnpTransmitTime.NanoSeconds}
    return &(avgCsnpTransmitTime.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpTransmitTime
// Average PSNP transmit time
type Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpTransmitTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (avgPsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpTransmitTime) GetEntityData() *types.CommonEntityData {
    avgPsnpTransmitTime.EntityData.YFilter = avgPsnpTransmitTime.YFilter
    avgPsnpTransmitTime.EntityData.YangName = "avg-psnp-transmit-time"
    avgPsnpTransmitTime.EntityData.BundleName = "cisco_ios_xr"
    avgPsnpTransmitTime.EntityData.ParentYangName = "statistics"
    avgPsnpTransmitTime.EntityData.SegmentPath = "avg-psnp-transmit-time"
    avgPsnpTransmitTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    avgPsnpTransmitTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    avgPsnpTransmitTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    avgPsnpTransmitTime.EntityData.Children = make(map[string]types.YChild)
    avgPsnpTransmitTime.EntityData.Leafs = make(map[string]types.YLeaf)
    avgPsnpTransmitTime.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", avgPsnpTransmitTime.Seconds}
    avgPsnpTransmitTime.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", avgPsnpTransmitTime.NanoSeconds}
    return &(avgPsnpTransmitTime.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspTransmitTime
// Average LSP transmit time
type Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspTransmitTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (avgLspTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspTransmitTime) GetEntityData() *types.CommonEntityData {
    avgLspTransmitTime.EntityData.YFilter = avgLspTransmitTime.YFilter
    avgLspTransmitTime.EntityData.YangName = "avg-lsp-transmit-time"
    avgLspTransmitTime.EntityData.BundleName = "cisco_ios_xr"
    avgLspTransmitTime.EntityData.ParentYangName = "statistics"
    avgLspTransmitTime.EntityData.SegmentPath = "avg-lsp-transmit-time"
    avgLspTransmitTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    avgLspTransmitTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    avgLspTransmitTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    avgLspTransmitTime.EntityData.Children = make(map[string]types.YChild)
    avgLspTransmitTime.EntityData.Leafs = make(map[string]types.YLeaf)
    avgLspTransmitTime.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", avgLspTransmitTime.Seconds}
    avgLspTransmitTime.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", avgLspTransmitTime.NanoSeconds}
    return &(avgLspTransmitTime.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_PerAreaData
// Per-area data
type Isis_Instances_Instance_StatisticsGlobal_PerAreaData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Level this data applies to. The type is IsisLevel.
    Level interface{}

    // Statistics.
    Statistics Isis_Instances_Instance_StatisticsGlobal_PerAreaData_Statistics

    // Per-topoogy statistics. The type is slice of
    // Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData.
    PerTopologyData []Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData
}

func (perAreaData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData) GetEntityData() *types.CommonEntityData {
    perAreaData.EntityData.YFilter = perAreaData.YFilter
    perAreaData.EntityData.YangName = "per-area-data"
    perAreaData.EntityData.BundleName = "cisco_ios_xr"
    perAreaData.EntityData.ParentYangName = "statistics-global"
    perAreaData.EntityData.SegmentPath = "per-area-data"
    perAreaData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perAreaData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perAreaData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perAreaData.EntityData.Children = make(map[string]types.YChild)
    perAreaData.EntityData.Children["statistics"] = types.YChild{"Statistics", &perAreaData.Statistics}
    perAreaData.EntityData.Children["per-topology-data"] = types.YChild{"PerTopologyData", nil}
    for i := range perAreaData.PerTopologyData {
        perAreaData.EntityData.Children[types.GetSegmentPath(&perAreaData.PerTopologyData[i])] = types.YChild{"PerTopologyData", &perAreaData.PerTopologyData[i]}
    }
    perAreaData.EntityData.Leafs = make(map[string]types.YLeaf)
    perAreaData.EntityData.Leafs["level"] = types.YLeaf{"Level", perAreaData.Level}
    return &(perAreaData.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_PerAreaData_Statistics
// Statistics
type Isis_Instances_Instance_StatisticsGlobal_PerAreaData_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of times system LSP rebuilt. The type is interface{} with range:
    // 0..4294967295.
    SystemLspBuildCount interface{}

    // Number of times system LSP refreshed. The type is interface{} with range:
    // 0..4294967295.
    SystemLspRefreshCount interface{}
}

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "per-area-data"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = make(map[string]types.YChild)
    statistics.EntityData.Leafs = make(map[string]types.YLeaf)
    statistics.EntityData.Leafs["system-lsp-build-count"] = types.YLeaf{"SystemLspBuildCount", statistics.SystemLspBuildCount}
    statistics.EntityData.Leafs["system-lsp-refresh-count"] = types.YLeaf{"SystemLspRefreshCount", statistics.SystemLspRefreshCount}
    return &(statistics.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData
// Per-topoogy statistics
type Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology ID.
    Id Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Id

    // Statistics.
    Statistics Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Statistics
}

func (perTopologyData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData) GetEntityData() *types.CommonEntityData {
    perTopologyData.EntityData.YFilter = perTopologyData.YFilter
    perTopologyData.EntityData.YangName = "per-topology-data"
    perTopologyData.EntityData.BundleName = "cisco_ios_xr"
    perTopologyData.EntityData.ParentYangName = "per-area-data"
    perTopologyData.EntityData.SegmentPath = "per-topology-data"
    perTopologyData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perTopologyData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perTopologyData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perTopologyData.EntityData.Children = make(map[string]types.YChild)
    perTopologyData.EntityData.Children["id"] = types.YChild{"Id", &perTopologyData.Id}
    perTopologyData.EntityData.Children["statistics"] = types.YChild{"Statistics", &perTopologyData.Statistics}
    perTopologyData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(perTopologyData.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Id
// Topology ID
type Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Id struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF name. The type is IsisAfId.
    AfName interface{}

    // Sub-AF name. The type is IsisSubAfId.
    SafName interface{}

    // VRF Name. The type is string.
    VrfName interface{}

    // Topology Name. The type is string.
    TopologyName interface{}
}

func (id *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Id) GetEntityData() *types.CommonEntityData {
    id.EntityData.YFilter = id.YFilter
    id.EntityData.YangName = "id"
    id.EntityData.BundleName = "cisco_ios_xr"
    id.EntityData.ParentYangName = "per-topology-data"
    id.EntityData.SegmentPath = "id"
    id.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    id.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    id.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    id.EntityData.Children = make(map[string]types.YChild)
    id.EntityData.Leafs = make(map[string]types.YLeaf)
    id.EntityData.Leafs["af-name"] = types.YLeaf{"AfName", id.AfName}
    id.EntityData.Leafs["saf-name"] = types.YLeaf{"SafName", id.SafName}
    id.EntityData.Leafs["vrf-name"] = types.YLeaf{"VrfName", id.VrfName}
    id.EntityData.Leafs["topology-name"] = types.YLeaf{"TopologyName", id.TopologyName}
    return &(id.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Statistics
// Statistics
type Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of full SPF calculations run. The type is interface{} with range:
    // 0..4294967295.
    SpfRunCount interface{}

    // Number of ISPF calculations run. The type is interface{} with range:
    // 0..4294967295.
    IspfRunCount interface{}

    // Number of Next Hop Calculations run. The type is interface{} with range:
    // 0..4294967295.
    NhcRunCount interface{}

    // Number of PRCs run. The type is interface{} with range: 0..4294967295.
    PrcRunCount interface{}

    // Number of periodic SPF calculations run. The type is interface{} with
    // range: 0..4294967295.
    PeriodicRunCount interface{}
}

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "per-topology-data"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = make(map[string]types.YChild)
    statistics.EntityData.Leafs = make(map[string]types.YLeaf)
    statistics.EntityData.Leafs["spf-run-count"] = types.YLeaf{"SpfRunCount", statistics.SpfRunCount}
    statistics.EntityData.Leafs["ispf-run-count"] = types.YLeaf{"IspfRunCount", statistics.IspfRunCount}
    statistics.EntityData.Leafs["nhc-run-count"] = types.YLeaf{"NhcRunCount", statistics.NhcRunCount}
    statistics.EntityData.Leafs["prc-run-count"] = types.YLeaf{"PrcRunCount", statistics.PrcRunCount}
    statistics.EntityData.Leafs["periodic-run-count"] = types.YLeaf{"PeriodicRunCount", statistics.PeriodicRunCount}
    return &(statistics.EntityData)
}

// Isis_Instances_Instance_Levels
// Level table
type Isis_Instances_Instance_Levels struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Per-level operational data. The type is slice of
    // Isis_Instances_Instance_Levels_Level.
    Level []Isis_Instances_Instance_Levels_Level
}

func (levels *Isis_Instances_Instance_Levels) GetEntityData() *types.CommonEntityData {
    levels.EntityData.YFilter = levels.YFilter
    levels.EntityData.YangName = "levels"
    levels.EntityData.BundleName = "cisco_ios_xr"
    levels.EntityData.ParentYangName = "instance"
    levels.EntityData.SegmentPath = "levels"
    levels.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    levels.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    levels.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    levels.EntityData.Children = make(map[string]types.YChild)
    levels.EntityData.Children["level"] = types.YChild{"Level", nil}
    for i := range levels.Level {
        levels.EntityData.Children[types.GetSegmentPath(&levels.Level[i])] = types.YChild{"Level", &levels.Level[i]}
    }
    levels.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(levels.EntityData)
}

// Isis_Instances_Instance_Levels_Level
// Per-level operational data
type Isis_Instances_Instance_Levels_Level struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Level. The type is IsisInternalLevel.
    Level interface{}

    // Log of adjacency changes within a single level.
    AdjacencyLog Isis_Instances_Instance_Levels_Level_AdjacencyLog

    // Summary information for one level's LSP database.
    LspTableSummary Isis_Instances_Instance_Levels_Level_LspTableSummary

    // Adjacency table.
    Adjacencies Isis_Instances_Instance_Levels_Level_Adjacencies

    // Detailed LSP table. Use to retrieve LSPs with TLV content.
    DetailedLsps Isis_Instances_Instance_Levels_Level_DetailedLsps

    // LSP table.
    Lsps Isis_Instances_Instance_Levels_Level_Lsps

    // LSP-log for a single level.
    LspLog Isis_Instances_Instance_Levels_Level_LspLog

    // Database-log for a single level.
    DatabaseLog Isis_Instances_Instance_Levels_Level_DatabaseLog
}

func (level *Isis_Instances_Instance_Levels_Level) GetEntityData() *types.CommonEntityData {
    level.EntityData.YFilter = level.YFilter
    level.EntityData.YangName = "level"
    level.EntityData.BundleName = "cisco_ios_xr"
    level.EntityData.ParentYangName = "levels"
    level.EntityData.SegmentPath = "level" + "[level='" + fmt.Sprintf("%v", level.Level) + "']"
    level.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    level.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    level.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    level.EntityData.Children = make(map[string]types.YChild)
    level.EntityData.Children["adjacency-log"] = types.YChild{"AdjacencyLog", &level.AdjacencyLog}
    level.EntityData.Children["lsp-table-summary"] = types.YChild{"LspTableSummary", &level.LspTableSummary}
    level.EntityData.Children["adjacencies"] = types.YChild{"Adjacencies", &level.Adjacencies}
    level.EntityData.Children["detailed-lsps"] = types.YChild{"DetailedLsps", &level.DetailedLsps}
    level.EntityData.Children["lsps"] = types.YChild{"Lsps", &level.Lsps}
    level.EntityData.Children["lsp-log"] = types.YChild{"LspLog", &level.LspLog}
    level.EntityData.Children["database-log"] = types.YChild{"DatabaseLog", &level.DatabaseLog}
    level.EntityData.Leafs = make(map[string]types.YLeaf)
    level.EntityData.Leafs["level"] = types.YLeaf{"Level", level.Level}
    return &(level.EntityData)
}

// Isis_Instances_Instance_Levels_Level_AdjacencyLog
// Log of adjacency changes within a single
// level
type Isis_Instances_Instance_Levels_Level_AdjacencyLog struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency Log entries. The type is slice of
    // Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry.
    LogEntry []Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry
}

func (adjacencyLog *Isis_Instances_Instance_Levels_Level_AdjacencyLog) GetEntityData() *types.CommonEntityData {
    adjacencyLog.EntityData.YFilter = adjacencyLog.YFilter
    adjacencyLog.EntityData.YangName = "adjacency-log"
    adjacencyLog.EntityData.BundleName = "cisco_ios_xr"
    adjacencyLog.EntityData.ParentYangName = "level"
    adjacencyLog.EntityData.SegmentPath = "adjacency-log"
    adjacencyLog.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyLog.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyLog.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyLog.EntityData.Children = make(map[string]types.YChild)
    adjacencyLog.EntityData.Children["log-entry"] = types.YChild{"LogEntry", nil}
    for i := range adjacencyLog.LogEntry {
        adjacencyLog.EntityData.Children[types.GetSegmentPath(&adjacencyLog.LogEntry[i])] = types.YChild{"LogEntry", &adjacencyLog.LogEntry[i]}
    }
    adjacencyLog.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(adjacencyLog.EntityData)
}

// Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry
// Adjacency Log entries
type Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor system ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    AdjLogNeighborSystemId interface{}

    // Interface name. The type is string.
    InterfaceName interface{}

    // Previous adjacency state. The type is IsisAdjState.
    PrevAdjState interface{}

    // Current adjacency state. The type is IsisAdjState.
    CurAdjState interface{}

    // Reason adjacency changed state. The type is IsisAdjStateReason.
    StateReason interface{}

    // Generic entry data.
    GenericData Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData

    // Per-topology changes. The type is slice of
    // Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange.
    AdjacencyPerTopologyChange []Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange
}

func (logEntry *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry) GetEntityData() *types.CommonEntityData {
    logEntry.EntityData.YFilter = logEntry.YFilter
    logEntry.EntityData.YangName = "log-entry"
    logEntry.EntityData.BundleName = "cisco_ios_xr"
    logEntry.EntityData.ParentYangName = "adjacency-log"
    logEntry.EntityData.SegmentPath = "log-entry"
    logEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    logEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    logEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    logEntry.EntityData.Children = make(map[string]types.YChild)
    logEntry.EntityData.Children["generic-data"] = types.YChild{"GenericData", &logEntry.GenericData}
    logEntry.EntityData.Children["adjacency-per-topology-change"] = types.YChild{"AdjacencyPerTopologyChange", nil}
    for i := range logEntry.AdjacencyPerTopologyChange {
        logEntry.EntityData.Children[types.GetSegmentPath(&logEntry.AdjacencyPerTopologyChange[i])] = types.YChild{"AdjacencyPerTopologyChange", &logEntry.AdjacencyPerTopologyChange[i]}
    }
    logEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    logEntry.EntityData.Leafs["adj-log-neighbor-system-id"] = types.YLeaf{"AdjLogNeighborSystemId", logEntry.AdjLogNeighborSystemId}
    logEntry.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", logEntry.InterfaceName}
    logEntry.EntityData.Leafs["prev-adj-state"] = types.YLeaf{"PrevAdjState", logEntry.PrevAdjState}
    logEntry.EntityData.Leafs["cur-adj-state"] = types.YLeaf{"CurAdjState", logEntry.CurAdjState}
    logEntry.EntityData.Leafs["state-reason"] = types.YLeaf{"StateReason", logEntry.StateReason}
    return &(logEntry.EntityData)
}

// Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData
// Generic entry data
type Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in UTC relative to Jan 1st, 1970.
    Timestamp Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData_Timestamp
}

func (genericData *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData) GetEntityData() *types.CommonEntityData {
    genericData.EntityData.YFilter = genericData.YFilter
    genericData.EntityData.YangName = "generic-data"
    genericData.EntityData.BundleName = "cisco_ios_xr"
    genericData.EntityData.ParentYangName = "log-entry"
    genericData.EntityData.SegmentPath = "generic-data"
    genericData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericData.EntityData.Children = make(map[string]types.YChild)
    genericData.EntityData.Children["timestamp"] = types.YChild{"Timestamp", &genericData.Timestamp}
    genericData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(genericData.EntityData)
}

// Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData_Timestamp
// Time in UTC relative to Jan 1st, 1970
type Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData_Timestamp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (timestamp *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData_Timestamp) GetEntityData() *types.CommonEntityData {
    timestamp.EntityData.YFilter = timestamp.YFilter
    timestamp.EntityData.YangName = "timestamp"
    timestamp.EntityData.BundleName = "cisco_ios_xr"
    timestamp.EntityData.ParentYangName = "generic-data"
    timestamp.EntityData.SegmentPath = "timestamp"
    timestamp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timestamp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timestamp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timestamp.EntityData.Children = make(map[string]types.YChild)
    timestamp.EntityData.Leafs = make(map[string]types.YLeaf)
    timestamp.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", timestamp.Seconds}
    timestamp.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", timestamp.NanoSeconds}
    return &(timestamp.EntityData)
}

// Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange
// Per-topology changes
type Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Change. The type is IsisAdjTopoChange.
    Change interface{}

    // Topology ID.
    Id Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange_Id
}

func (adjacencyPerTopologyChange *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange) GetEntityData() *types.CommonEntityData {
    adjacencyPerTopologyChange.EntityData.YFilter = adjacencyPerTopologyChange.YFilter
    adjacencyPerTopologyChange.EntityData.YangName = "adjacency-per-topology-change"
    adjacencyPerTopologyChange.EntityData.BundleName = "cisco_ios_xr"
    adjacencyPerTopologyChange.EntityData.ParentYangName = "log-entry"
    adjacencyPerTopologyChange.EntityData.SegmentPath = "adjacency-per-topology-change"
    adjacencyPerTopologyChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyPerTopologyChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyPerTopologyChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyPerTopologyChange.EntityData.Children = make(map[string]types.YChild)
    adjacencyPerTopologyChange.EntityData.Children["id"] = types.YChild{"Id", &adjacencyPerTopologyChange.Id}
    adjacencyPerTopologyChange.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencyPerTopologyChange.EntityData.Leafs["change"] = types.YLeaf{"Change", adjacencyPerTopologyChange.Change}
    return &(adjacencyPerTopologyChange.EntityData)
}

// Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange_Id
// Topology ID
type Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange_Id struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF name. The type is IsisAfId.
    AfName interface{}

    // Sub-AF name. The type is IsisSubAfId.
    SafName interface{}

    // VRF Name. The type is string.
    VrfName interface{}

    // Topology Name. The type is string.
    TopologyName interface{}
}

func (id *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange_Id) GetEntityData() *types.CommonEntityData {
    id.EntityData.YFilter = id.YFilter
    id.EntityData.YangName = "id"
    id.EntityData.BundleName = "cisco_ios_xr"
    id.EntityData.ParentYangName = "adjacency-per-topology-change"
    id.EntityData.SegmentPath = "id"
    id.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    id.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    id.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    id.EntityData.Children = make(map[string]types.YChild)
    id.EntityData.Leafs = make(map[string]types.YLeaf)
    id.EntityData.Leafs["af-name"] = types.YLeaf{"AfName", id.AfName}
    id.EntityData.Leafs["saf-name"] = types.YLeaf{"SafName", id.SafName}
    id.EntityData.Leafs["vrf-name"] = types.YLeaf{"VrfName", id.VrfName}
    id.EntityData.Leafs["topology-name"] = types.YLeaf{"TopologyName", id.TopologyName}
    return &(id.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspTableSummary
// Summary information for one level's LSP
// database
type Isis_Instances_Instance_Levels_Level_LspTableSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Statistics for fragment 0 LSPs.
    Fragment0LspStats Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats

    // Statistics for all LSP fragments.
    AllFragmentLspStats Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats
}

func (lspTableSummary *Isis_Instances_Instance_Levels_Level_LspTableSummary) GetEntityData() *types.CommonEntityData {
    lspTableSummary.EntityData.YFilter = lspTableSummary.YFilter
    lspTableSummary.EntityData.YangName = "lsp-table-summary"
    lspTableSummary.EntityData.BundleName = "cisco_ios_xr"
    lspTableSummary.EntityData.ParentYangName = "level"
    lspTableSummary.EntityData.SegmentPath = "lsp-table-summary"
    lspTableSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lspTableSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lspTableSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lspTableSummary.EntityData.Children = make(map[string]types.YChild)
    lspTableSummary.EntityData.Children["fragment0lsp-stats"] = types.YChild{"Fragment0LspStats", &lspTableSummary.Fragment0LspStats}
    lspTableSummary.EntityData.Children["all-fragment-lsp-stats"] = types.YChild{"AllFragmentLspStats", &lspTableSummary.AllFragmentLspStats}
    lspTableSummary.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(lspTableSummary.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats
// Statistics for fragment 0 LSPs
type Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary by class of node.
    NodeCounters Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters

    // Per topology counters. The type is slice of
    // Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter.
    PerTopologyCounter []Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter
}

func (fragment0LspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats) GetEntityData() *types.CommonEntityData {
    fragment0LspStats.EntityData.YFilter = fragment0LspStats.YFilter
    fragment0LspStats.EntityData.YangName = "fragment0lsp-stats"
    fragment0LspStats.EntityData.BundleName = "cisco_ios_xr"
    fragment0LspStats.EntityData.ParentYangName = "lsp-table-summary"
    fragment0LspStats.EntityData.SegmentPath = "fragment0lsp-stats"
    fragment0LspStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fragment0LspStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fragment0LspStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fragment0LspStats.EntityData.Children = make(map[string]types.YChild)
    fragment0LspStats.EntityData.Children["node-counters"] = types.YChild{"NodeCounters", &fragment0LspStats.NodeCounters}
    fragment0LspStats.EntityData.Children["per-topology-counter"] = types.YChild{"PerTopologyCounter", nil}
    for i := range fragment0LspStats.PerTopologyCounter {
        fragment0LspStats.EntityData.Children[types.GetSegmentPath(&fragment0LspStats.PerTopologyCounter[i])] = types.YChild{"PerTopologyCounter", &fragment0LspStats.PerTopologyCounter[i]}
    }
    fragment0LspStats.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fragment0LspStats.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters
// Summary by class of node
type Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router LSPs.
    RouteLspCount Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_RouteLspCount

    // Pseudonode LSPs.
    PseudoNodeLspCount Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_PseudoNodeLspCount
}

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters) GetEntityData() *types.CommonEntityData {
    nodeCounters.EntityData.YFilter = nodeCounters.YFilter
    nodeCounters.EntityData.YangName = "node-counters"
    nodeCounters.EntityData.BundleName = "cisco_ios_xr"
    nodeCounters.EntityData.ParentYangName = "fragment0lsp-stats"
    nodeCounters.EntityData.SegmentPath = "node-counters"
    nodeCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeCounters.EntityData.Children = make(map[string]types.YChild)
    nodeCounters.EntityData.Children["route-lsp-count"] = types.YChild{"RouteLspCount", &nodeCounters.RouteLspCount}
    nodeCounters.EntityData.Children["pseudo-node-lsp-count"] = types.YChild{"PseudoNodeLspCount", &nodeCounters.PseudoNodeLspCount}
    nodeCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(nodeCounters.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_RouteLspCount
// Router LSPs
type Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_RouteLspCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active LSPs. The type is interface{} with range: 0..4294967295.
    ActiveLspCount interface{}

    // Number of purged LSPs. The type is interface{} with range: 0..4294967295.
    PurgedLspCount interface{}
}

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_RouteLspCount) GetEntityData() *types.CommonEntityData {
    routeLspCount.EntityData.YFilter = routeLspCount.YFilter
    routeLspCount.EntityData.YangName = "route-lsp-count"
    routeLspCount.EntityData.BundleName = "cisco_ios_xr"
    routeLspCount.EntityData.ParentYangName = "node-counters"
    routeLspCount.EntityData.SegmentPath = "route-lsp-count"
    routeLspCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeLspCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeLspCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeLspCount.EntityData.Children = make(map[string]types.YChild)
    routeLspCount.EntityData.Leafs = make(map[string]types.YLeaf)
    routeLspCount.EntityData.Leafs["active-lsp-count"] = types.YLeaf{"ActiveLspCount", routeLspCount.ActiveLspCount}
    routeLspCount.EntityData.Leafs["purged-lsp-count"] = types.YLeaf{"PurgedLspCount", routeLspCount.PurgedLspCount}
    return &(routeLspCount.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_PseudoNodeLspCount
// Pseudonode LSPs
type Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_PseudoNodeLspCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active LSPs. The type is interface{} with range: 0..4294967295.
    ActiveLspCount interface{}

    // Number of purged LSPs. The type is interface{} with range: 0..4294967295.
    PurgedLspCount interface{}
}

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_NodeCounters_PseudoNodeLspCount) GetEntityData() *types.CommonEntityData {
    pseudoNodeLspCount.EntityData.YFilter = pseudoNodeLspCount.YFilter
    pseudoNodeLspCount.EntityData.YangName = "pseudo-node-lsp-count"
    pseudoNodeLspCount.EntityData.BundleName = "cisco_ios_xr"
    pseudoNodeLspCount.EntityData.ParentYangName = "node-counters"
    pseudoNodeLspCount.EntityData.SegmentPath = "pseudo-node-lsp-count"
    pseudoNodeLspCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudoNodeLspCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudoNodeLspCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudoNodeLspCount.EntityData.Children = make(map[string]types.YChild)
    pseudoNodeLspCount.EntityData.Leafs = make(map[string]types.YLeaf)
    pseudoNodeLspCount.EntityData.Leafs["active-lsp-count"] = types.YLeaf{"ActiveLspCount", pseudoNodeLspCount.ActiveLspCount}
    pseudoNodeLspCount.EntityData.Leafs["purged-lsp-count"] = types.YLeaf{"PurgedLspCount", pseudoNodeLspCount.PurgedLspCount}
    return &(pseudoNodeLspCount.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter
// Per topology counters
type Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology ID.
    Id Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_Id

    // Number of LSPs with their per-topology overload bit set.
    OverloadedLspCount Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_OverloadedLspCount

    // Number of LSPs with their per-topology attached bit set.
    AttachedLspCount Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_AttachedLspCount
}

func (perTopologyCounter *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter) GetEntityData() *types.CommonEntityData {
    perTopologyCounter.EntityData.YFilter = perTopologyCounter.YFilter
    perTopologyCounter.EntityData.YangName = "per-topology-counter"
    perTopologyCounter.EntityData.BundleName = "cisco_ios_xr"
    perTopologyCounter.EntityData.ParentYangName = "fragment0lsp-stats"
    perTopologyCounter.EntityData.SegmentPath = "per-topology-counter"
    perTopologyCounter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perTopologyCounter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perTopologyCounter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perTopologyCounter.EntityData.Children = make(map[string]types.YChild)
    perTopologyCounter.EntityData.Children["id"] = types.YChild{"Id", &perTopologyCounter.Id}
    perTopologyCounter.EntityData.Children["overloaded-lsp-count"] = types.YChild{"OverloadedLspCount", &perTopologyCounter.OverloadedLspCount}
    perTopologyCounter.EntityData.Children["attached-lsp-count"] = types.YChild{"AttachedLspCount", &perTopologyCounter.AttachedLspCount}
    perTopologyCounter.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(perTopologyCounter.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_Id
// Topology ID
type Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_Id struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF name. The type is IsisAfId.
    AfName interface{}

    // Sub-AF name. The type is IsisSubAfId.
    SafName interface{}

    // VRF Name. The type is string.
    VrfName interface{}

    // Topology Name. The type is string.
    TopologyName interface{}
}

func (id *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_Id) GetEntityData() *types.CommonEntityData {
    id.EntityData.YFilter = id.YFilter
    id.EntityData.YangName = "id"
    id.EntityData.BundleName = "cisco_ios_xr"
    id.EntityData.ParentYangName = "per-topology-counter"
    id.EntityData.SegmentPath = "id"
    id.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    id.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    id.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    id.EntityData.Children = make(map[string]types.YChild)
    id.EntityData.Leafs = make(map[string]types.YLeaf)
    id.EntityData.Leafs["af-name"] = types.YLeaf{"AfName", id.AfName}
    id.EntityData.Leafs["saf-name"] = types.YLeaf{"SafName", id.SafName}
    id.EntityData.Leafs["vrf-name"] = types.YLeaf{"VrfName", id.VrfName}
    id.EntityData.Leafs["topology-name"] = types.YLeaf{"TopologyName", id.TopologyName}
    return &(id.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_OverloadedLspCount
// Number of LSPs with their per-topology overload
// bit set
type Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_OverloadedLspCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active LSPs. The type is interface{} with range: 0..4294967295.
    ActiveLspCount interface{}

    // Number of purged LSPs. The type is interface{} with range: 0..4294967295.
    PurgedLspCount interface{}
}

func (overloadedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_OverloadedLspCount) GetEntityData() *types.CommonEntityData {
    overloadedLspCount.EntityData.YFilter = overloadedLspCount.YFilter
    overloadedLspCount.EntityData.YangName = "overloaded-lsp-count"
    overloadedLspCount.EntityData.BundleName = "cisco_ios_xr"
    overloadedLspCount.EntityData.ParentYangName = "per-topology-counter"
    overloadedLspCount.EntityData.SegmentPath = "overloaded-lsp-count"
    overloadedLspCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    overloadedLspCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    overloadedLspCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    overloadedLspCount.EntityData.Children = make(map[string]types.YChild)
    overloadedLspCount.EntityData.Leafs = make(map[string]types.YLeaf)
    overloadedLspCount.EntityData.Leafs["active-lsp-count"] = types.YLeaf{"ActiveLspCount", overloadedLspCount.ActiveLspCount}
    overloadedLspCount.EntityData.Leafs["purged-lsp-count"] = types.YLeaf{"PurgedLspCount", overloadedLspCount.PurgedLspCount}
    return &(overloadedLspCount.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_AttachedLspCount
// Number of LSPs with their per-topology attached
// bit set
type Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_AttachedLspCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active LSPs. The type is interface{} with range: 0..4294967295.
    ActiveLspCount interface{}

    // Number of purged LSPs. The type is interface{} with range: 0..4294967295.
    PurgedLspCount interface{}
}

func (attachedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0LspStats_PerTopologyCounter_AttachedLspCount) GetEntityData() *types.CommonEntityData {
    attachedLspCount.EntityData.YFilter = attachedLspCount.YFilter
    attachedLspCount.EntityData.YangName = "attached-lsp-count"
    attachedLspCount.EntityData.BundleName = "cisco_ios_xr"
    attachedLspCount.EntityData.ParentYangName = "per-topology-counter"
    attachedLspCount.EntityData.SegmentPath = "attached-lsp-count"
    attachedLspCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attachedLspCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attachedLspCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attachedLspCount.EntityData.Children = make(map[string]types.YChild)
    attachedLspCount.EntityData.Leafs = make(map[string]types.YLeaf)
    attachedLspCount.EntityData.Leafs["active-lsp-count"] = types.YLeaf{"ActiveLspCount", attachedLspCount.ActiveLspCount}
    attachedLspCount.EntityData.Leafs["purged-lsp-count"] = types.YLeaf{"PurgedLspCount", attachedLspCount.PurgedLspCount}
    return &(attachedLspCount.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats
// Statistics for all LSP fragments
type Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary by class of node.
    NodeCounters Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters
}

func (allFragmentLspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats) GetEntityData() *types.CommonEntityData {
    allFragmentLspStats.EntityData.YFilter = allFragmentLspStats.YFilter
    allFragmentLspStats.EntityData.YangName = "all-fragment-lsp-stats"
    allFragmentLspStats.EntityData.BundleName = "cisco_ios_xr"
    allFragmentLspStats.EntityData.ParentYangName = "lsp-table-summary"
    allFragmentLspStats.EntityData.SegmentPath = "all-fragment-lsp-stats"
    allFragmentLspStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allFragmentLspStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allFragmentLspStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allFragmentLspStats.EntityData.Children = make(map[string]types.YChild)
    allFragmentLspStats.EntityData.Children["node-counters"] = types.YChild{"NodeCounters", &allFragmentLspStats.NodeCounters}
    allFragmentLspStats.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(allFragmentLspStats.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters
// Summary by class of node
type Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router LSPs.
    RouteLspCount Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_RouteLspCount

    // Pseudonode LSPs.
    PseudoNodeLspCount Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_PseudoNodeLspCount
}

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters) GetEntityData() *types.CommonEntityData {
    nodeCounters.EntityData.YFilter = nodeCounters.YFilter
    nodeCounters.EntityData.YangName = "node-counters"
    nodeCounters.EntityData.BundleName = "cisco_ios_xr"
    nodeCounters.EntityData.ParentYangName = "all-fragment-lsp-stats"
    nodeCounters.EntityData.SegmentPath = "node-counters"
    nodeCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeCounters.EntityData.Children = make(map[string]types.YChild)
    nodeCounters.EntityData.Children["route-lsp-count"] = types.YChild{"RouteLspCount", &nodeCounters.RouteLspCount}
    nodeCounters.EntityData.Children["pseudo-node-lsp-count"] = types.YChild{"PseudoNodeLspCount", &nodeCounters.PseudoNodeLspCount}
    nodeCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(nodeCounters.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_RouteLspCount
// Router LSPs
type Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_RouteLspCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active LSPs. The type is interface{} with range: 0..4294967295.
    ActiveLspCount interface{}

    // Number of purged LSPs. The type is interface{} with range: 0..4294967295.
    PurgedLspCount interface{}
}

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_RouteLspCount) GetEntityData() *types.CommonEntityData {
    routeLspCount.EntityData.YFilter = routeLspCount.YFilter
    routeLspCount.EntityData.YangName = "route-lsp-count"
    routeLspCount.EntityData.BundleName = "cisco_ios_xr"
    routeLspCount.EntityData.ParentYangName = "node-counters"
    routeLspCount.EntityData.SegmentPath = "route-lsp-count"
    routeLspCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeLspCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeLspCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeLspCount.EntityData.Children = make(map[string]types.YChild)
    routeLspCount.EntityData.Leafs = make(map[string]types.YLeaf)
    routeLspCount.EntityData.Leafs["active-lsp-count"] = types.YLeaf{"ActiveLspCount", routeLspCount.ActiveLspCount}
    routeLspCount.EntityData.Leafs["purged-lsp-count"] = types.YLeaf{"PurgedLspCount", routeLspCount.PurgedLspCount}
    return &(routeLspCount.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_PseudoNodeLspCount
// Pseudonode LSPs
type Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_PseudoNodeLspCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active LSPs. The type is interface{} with range: 0..4294967295.
    ActiveLspCount interface{}

    // Number of purged LSPs. The type is interface{} with range: 0..4294967295.
    PurgedLspCount interface{}
}

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_PseudoNodeLspCount) GetEntityData() *types.CommonEntityData {
    pseudoNodeLspCount.EntityData.YFilter = pseudoNodeLspCount.YFilter
    pseudoNodeLspCount.EntityData.YangName = "pseudo-node-lsp-count"
    pseudoNodeLspCount.EntityData.BundleName = "cisco_ios_xr"
    pseudoNodeLspCount.EntityData.ParentYangName = "node-counters"
    pseudoNodeLspCount.EntityData.SegmentPath = "pseudo-node-lsp-count"
    pseudoNodeLspCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudoNodeLspCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudoNodeLspCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudoNodeLspCount.EntityData.Children = make(map[string]types.YChild)
    pseudoNodeLspCount.EntityData.Leafs = make(map[string]types.YLeaf)
    pseudoNodeLspCount.EntityData.Leafs["active-lsp-count"] = types.YLeaf{"ActiveLspCount", pseudoNodeLspCount.ActiveLspCount}
    pseudoNodeLspCount.EntityData.Leafs["purged-lsp-count"] = types.YLeaf{"PurgedLspCount", pseudoNodeLspCount.PurgedLspCount}
    return &(pseudoNodeLspCount.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies
// Adjacency table
type Isis_Instances_Instance_Levels_Level_Adjacencies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A single IS-IS adjacency. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency.
    Adjacency []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency
}

func (adjacencies *Isis_Instances_Instance_Levels_Level_Adjacencies) GetEntityData() *types.CommonEntityData {
    adjacencies.EntityData.YFilter = adjacencies.YFilter
    adjacencies.EntityData.YangName = "adjacencies"
    adjacencies.EntityData.BundleName = "cisco_ios_xr"
    adjacencies.EntityData.ParentYangName = "level"
    adjacencies.EntityData.SegmentPath = "adjacencies"
    adjacencies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencies.EntityData.Children = make(map[string]types.YChild)
    adjacencies.EntityData.Children["adjacency"] = types.YChild{"Adjacency", nil}
    for i := range adjacencies.Adjacency {
        adjacencies.EntityData.Children[types.GetSegmentPath(&adjacencies.Adjacency[i])] = types.YChild{"Adjacency", &adjacencies.Adjacency[i]}
    }
    adjacencies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(adjacencies.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency
// A single IS-IS adjacency
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // System ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    SystemId interface{}

    // Interface name. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // Neighbor system ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    AdjacencySystemId interface{}

    // Neighbor SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    AdjacencySnpa interface{}

    // Local interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    AdjacencyInterface interface{}

    // Link media type. The type is IsisMediaClass.
    AdjacencyMediaType interface{}

    // Adjacency state. The type is IsisAdjState.
    AdjacencyState interface{}

    // Adjacency IPv4 BFD state. The type is IsisAdjBfdState.
    AdjacencyBfdState interface{}

    // Adjacency IPv6 BFD state. The type is IsisAdjBfdState.
    AdjacencyIpv6BfdState interface{}

    // Is IPv4 BFD retry timer running. The type is bool.
    AdjIpv4BfdRetryRunning interface{}

    // Is IPv6 BFD retry timer running. The type is bool.
    AdjIpv6BfdRetryRunning interface{}

    // Time to expiration of IPv4 BFD retry timer (s). The type is interface{}
    // with range: 0..4294967295.
    AdjIpv4BfdRetryExp interface{}

    // Time to expiration of IPv6 BFD retry timer (s). The type is interface{}
    // with range: 0..4294967295.
    AdjIpv6BfdRetryExp interface{}

    // IPv4 BFD retry counter. The type is interface{} with range: 0..4294967295.
    AdjIpv4BfdRetryCount interface{}

    // IPv6 BFD retry counter. The type is interface{} with range: 0..4294967295.
    AdjIpv6BfdRetryCount interface{}

    // TRUE if AdjacencyUptime is set. The type is bool.
    AdjacencyUptimeValidFlag interface{}

    // How long the adjacency has been up (s). The type is interface{} with range:
    // 0..4294967295.
    AdjacencyUptime interface{}

    // Time (s) until adjacency declared down if no IIH received. The type is
    // interface{} with range: 0..4294967295.
    AdjacencyHoldtime interface{}

    // Adjacency checkpoint object ID. The type is interface{} with range:
    // 0..4294967295.
    AdjacencyCheckpointObjectId interface{}

    // TRUE if neighbor is IETF-NSF capable. The type is bool.
    AdjacencyIetfNsfCapableFlag interface{}

    // Priority of DIS on this LAN. Valid only if aj_media_class is
    // ISIS_MEDIA_CLASS_LAN. The type is interface{} with range: 0..255.
    AdjacencyDispriority interface{}

    // Neighbor IS priority. Valid only if aj_media_class is ISIS_MEDIA_CLASS_LAN.
    // The type is interface{} with range: 0..255.
    AdjacencyNeighborPriority interface{}

    // Local IS priority. Valid only if aj_media_class is ISIS_MEDIA_CLASS_LAN.
    // The type is interface{} with range: 0..255.
    AdjacencyLocalPriority interface{}

    // TRUE if local system is DIS. Valid only if AdjacencyMediaType is
    // ISIS_MEDIA_CLASS_LAN. The type is bool.
    LocalDisFlag interface{}

    // TRUE if neighbor is DIS. Valid only if AdjacencyMediaType is
    // ISIS_MEDIA_CLASS_LAN. The type is bool.
    NeighborDisFlag interface{}

    // ISIS NSR STANDBY. The type is interface{} with range: 0..255.
    NsrStandby interface{}

    // Area addresses active over this adjacency. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress.
    AdjacencyAreaAddress []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress

    // Per-topology data. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology.
    AdjacencyTopology []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology

    // Per-address-family data. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData.
    AdjacencyPerAddressFamilyData []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData
}

func (adjacency *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency) GetEntityData() *types.CommonEntityData {
    adjacency.EntityData.YFilter = adjacency.YFilter
    adjacency.EntityData.YangName = "adjacency"
    adjacency.EntityData.BundleName = "cisco_ios_xr"
    adjacency.EntityData.ParentYangName = "adjacencies"
    adjacency.EntityData.SegmentPath = "adjacency"
    adjacency.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacency.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacency.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacency.EntityData.Children = make(map[string]types.YChild)
    adjacency.EntityData.Children["adjacency-area-address"] = types.YChild{"AdjacencyAreaAddress", nil}
    for i := range adjacency.AdjacencyAreaAddress {
        adjacency.EntityData.Children[types.GetSegmentPath(&adjacency.AdjacencyAreaAddress[i])] = types.YChild{"AdjacencyAreaAddress", &adjacency.AdjacencyAreaAddress[i]}
    }
    adjacency.EntityData.Children["adjacency-topology"] = types.YChild{"AdjacencyTopology", nil}
    for i := range adjacency.AdjacencyTopology {
        adjacency.EntityData.Children[types.GetSegmentPath(&adjacency.AdjacencyTopology[i])] = types.YChild{"AdjacencyTopology", &adjacency.AdjacencyTopology[i]}
    }
    adjacency.EntityData.Children["adjacency-per-address-family-data"] = types.YChild{"AdjacencyPerAddressFamilyData", nil}
    for i := range adjacency.AdjacencyPerAddressFamilyData {
        adjacency.EntityData.Children[types.GetSegmentPath(&adjacency.AdjacencyPerAddressFamilyData[i])] = types.YChild{"AdjacencyPerAddressFamilyData", &adjacency.AdjacencyPerAddressFamilyData[i]}
    }
    adjacency.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacency.EntityData.Leafs["system-id"] = types.YLeaf{"SystemId", adjacency.SystemId}
    adjacency.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", adjacency.InterfaceName}
    adjacency.EntityData.Leafs["adjacency-system-id"] = types.YLeaf{"AdjacencySystemId", adjacency.AdjacencySystemId}
    adjacency.EntityData.Leafs["adjacency-snpa"] = types.YLeaf{"AdjacencySnpa", adjacency.AdjacencySnpa}
    adjacency.EntityData.Leafs["adjacency-interface"] = types.YLeaf{"AdjacencyInterface", adjacency.AdjacencyInterface}
    adjacency.EntityData.Leafs["adjacency-media-type"] = types.YLeaf{"AdjacencyMediaType", adjacency.AdjacencyMediaType}
    adjacency.EntityData.Leafs["adjacency-state"] = types.YLeaf{"AdjacencyState", adjacency.AdjacencyState}
    adjacency.EntityData.Leafs["adjacency-bfd-state"] = types.YLeaf{"AdjacencyBfdState", adjacency.AdjacencyBfdState}
    adjacency.EntityData.Leafs["adjacency-ipv6bfd-state"] = types.YLeaf{"AdjacencyIpv6BfdState", adjacency.AdjacencyIpv6BfdState}
    adjacency.EntityData.Leafs["adj-ipv4bfd-retry-running"] = types.YLeaf{"AdjIpv4BfdRetryRunning", adjacency.AdjIpv4BfdRetryRunning}
    adjacency.EntityData.Leafs["adj-ipv6bfd-retry-running"] = types.YLeaf{"AdjIpv6BfdRetryRunning", adjacency.AdjIpv6BfdRetryRunning}
    adjacency.EntityData.Leafs["adj-ipv4bfd-retry-exp"] = types.YLeaf{"AdjIpv4BfdRetryExp", adjacency.AdjIpv4BfdRetryExp}
    adjacency.EntityData.Leafs["adj-ipv6bfd-retry-exp"] = types.YLeaf{"AdjIpv6BfdRetryExp", adjacency.AdjIpv6BfdRetryExp}
    adjacency.EntityData.Leafs["adj-ipv4bfd-retry-count"] = types.YLeaf{"AdjIpv4BfdRetryCount", adjacency.AdjIpv4BfdRetryCount}
    adjacency.EntityData.Leafs["adj-ipv6bfd-retry-count"] = types.YLeaf{"AdjIpv6BfdRetryCount", adjacency.AdjIpv6BfdRetryCount}
    adjacency.EntityData.Leafs["adjacency-uptime-valid-flag"] = types.YLeaf{"AdjacencyUptimeValidFlag", adjacency.AdjacencyUptimeValidFlag}
    adjacency.EntityData.Leafs["adjacency-uptime"] = types.YLeaf{"AdjacencyUptime", adjacency.AdjacencyUptime}
    adjacency.EntityData.Leafs["adjacency-holdtime"] = types.YLeaf{"AdjacencyHoldtime", adjacency.AdjacencyHoldtime}
    adjacency.EntityData.Leafs["adjacency-checkpoint-object-id"] = types.YLeaf{"AdjacencyCheckpointObjectId", adjacency.AdjacencyCheckpointObjectId}
    adjacency.EntityData.Leafs["adjacency-ietf-nsf-capable-flag"] = types.YLeaf{"AdjacencyIetfNsfCapableFlag", adjacency.AdjacencyIetfNsfCapableFlag}
    adjacency.EntityData.Leafs["adjacency-dispriority"] = types.YLeaf{"AdjacencyDispriority", adjacency.AdjacencyDispriority}
    adjacency.EntityData.Leafs["adjacency-neighbor-priority"] = types.YLeaf{"AdjacencyNeighborPriority", adjacency.AdjacencyNeighborPriority}
    adjacency.EntityData.Leafs["adjacency-local-priority"] = types.YLeaf{"AdjacencyLocalPriority", adjacency.AdjacencyLocalPriority}
    adjacency.EntityData.Leafs["local-dis-flag"] = types.YLeaf{"LocalDisFlag", adjacency.LocalDisFlag}
    adjacency.EntityData.Leafs["neighbor-dis-flag"] = types.YLeaf{"NeighborDisFlag", adjacency.NeighborDisFlag}
    adjacency.EntityData.Leafs["nsr-standby"] = types.YLeaf{"NsrStandby", adjacency.NsrStandby}
    return &(adjacency.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress
// Area addresses active over this adjacency
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern: b'[a-fA-F0-9]{2}(\\.[a-fA-F0-9]{4}){0,6}'.
    Entry interface{}
}

func (adjacencyAreaAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress) GetEntityData() *types.CommonEntityData {
    adjacencyAreaAddress.EntityData.YFilter = adjacencyAreaAddress.YFilter
    adjacencyAreaAddress.EntityData.YangName = "adjacency-area-address"
    adjacencyAreaAddress.EntityData.BundleName = "cisco_ios_xr"
    adjacencyAreaAddress.EntityData.ParentYangName = "adjacency"
    adjacencyAreaAddress.EntityData.SegmentPath = "adjacency-area-address"
    adjacencyAreaAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyAreaAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyAreaAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyAreaAddress.EntityData.Children = make(map[string]types.YChild)
    adjacencyAreaAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencyAreaAddress.EntityData.Leafs["entry"] = types.YLeaf{"Entry", adjacencyAreaAddress.Entry}
    return &(adjacencyAreaAddress.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology
// Per-topology data
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status of topology in adjacency. The type is IsisAdjTopoStatus.
    TopologyStatus interface{}

    // TRUE if suppressed parallel point-to-point link. The type is bool.
    ParallelP2PLinkSuppressedFlag interface{}

    // Topology ID.
    Id Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology_Id
}

func (adjacencyTopology *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology) GetEntityData() *types.CommonEntityData {
    adjacencyTopology.EntityData.YFilter = adjacencyTopology.YFilter
    adjacencyTopology.EntityData.YangName = "adjacency-topology"
    adjacencyTopology.EntityData.BundleName = "cisco_ios_xr"
    adjacencyTopology.EntityData.ParentYangName = "adjacency"
    adjacencyTopology.EntityData.SegmentPath = "adjacency-topology"
    adjacencyTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyTopology.EntityData.Children = make(map[string]types.YChild)
    adjacencyTopology.EntityData.Children["id"] = types.YChild{"Id", &adjacencyTopology.Id}
    adjacencyTopology.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencyTopology.EntityData.Leafs["topology-status"] = types.YLeaf{"TopologyStatus", adjacencyTopology.TopologyStatus}
    adjacencyTopology.EntityData.Leafs["parallel-p2p-link-suppressed-flag"] = types.YLeaf{"ParallelP2PLinkSuppressedFlag", adjacencyTopology.ParallelP2PLinkSuppressedFlag}
    return &(adjacencyTopology.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology_Id
// Topology ID
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology_Id struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF name. The type is IsisAfId.
    AfName interface{}

    // Sub-AF name. The type is IsisSubAfId.
    SafName interface{}

    // VRF Name. The type is string.
    VrfName interface{}

    // Topology Name. The type is string.
    TopologyName interface{}
}

func (id *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology_Id) GetEntityData() *types.CommonEntityData {
    id.EntityData.YFilter = id.YFilter
    id.EntityData.YangName = "id"
    id.EntityData.BundleName = "cisco_ios_xr"
    id.EntityData.ParentYangName = "adjacency-topology"
    id.EntityData.SegmentPath = "id"
    id.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    id.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    id.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    id.EntityData.Children = make(map[string]types.YChild)
    id.EntityData.Leafs = make(map[string]types.YLeaf)
    id.EntityData.Leafs["af-name"] = types.YLeaf{"AfName", id.AfName}
    id.EntityData.Leafs["saf-name"] = types.YLeaf{"SafName", id.SafName}
    id.EntityData.Leafs["vrf-name"] = types.YLeaf{"VrfName", id.VrfName}
    id.EntityData.Leafs["topology-name"] = types.YLeaf{"TopologyName", id.TopologyName}
    return &(id.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData
// Per-address-family data
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IsisAfId.
    AfName interface{}

    // IPV4 neighbor info.
    Ipv4 Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4

    // IPV6 neighbor info.
    Ipv6 Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6
}

func (adjacencyPerAddressFamilyData *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData) GetEntityData() *types.CommonEntityData {
    adjacencyPerAddressFamilyData.EntityData.YFilter = adjacencyPerAddressFamilyData.YFilter
    adjacencyPerAddressFamilyData.EntityData.YangName = "adjacency-per-address-family-data"
    adjacencyPerAddressFamilyData.EntityData.BundleName = "cisco_ios_xr"
    adjacencyPerAddressFamilyData.EntityData.ParentYangName = "adjacency"
    adjacencyPerAddressFamilyData.EntityData.SegmentPath = "adjacency-per-address-family-data"
    adjacencyPerAddressFamilyData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyPerAddressFamilyData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyPerAddressFamilyData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyPerAddressFamilyData.EntityData.Children = make(map[string]types.YChild)
    adjacencyPerAddressFamilyData.EntityData.Children["ipv4"] = types.YChild{"Ipv4", &adjacencyPerAddressFamilyData.Ipv4}
    adjacencyPerAddressFamilyData.EntityData.Children["ipv6"] = types.YChild{"Ipv6", &adjacencyPerAddressFamilyData.Ipv6}
    adjacencyPerAddressFamilyData.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencyPerAddressFamilyData.EntityData.Leafs["af-name"] = types.YLeaf{"AfName", adjacencyPerAddressFamilyData.AfName}
    return &(adjacencyPerAddressFamilyData.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4
// IPV4 neighbor info
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency next hop. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NextHop interface{}

    // Adjacency SID.
    AdjacencySid Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid

    // Adjacency SID not eligible for FRR protection.
    NonFrrAdjacencySid Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid

    // Adjacency interface addresses. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress.
    InterfaceAddress []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress

    // Per bundle member Adjacency sid. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid.
    UnderlyingAdjacencySid []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid

    // Underlying interface list for bundle interfaces. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface.
    UnderlyingInterface []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface
}

func (ipv4 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "adjacency-per-address-family-data"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = make(map[string]types.YChild)
    ipv4.EntityData.Children["adjacency-sid"] = types.YChild{"AdjacencySid", &ipv4.AdjacencySid}
    ipv4.EntityData.Children["non-frr-adjacency-sid"] = types.YChild{"NonFrrAdjacencySid", &ipv4.NonFrrAdjacencySid}
    ipv4.EntityData.Children["interface-address"] = types.YChild{"InterfaceAddress", nil}
    for i := range ipv4.InterfaceAddress {
        ipv4.EntityData.Children[types.GetSegmentPath(&ipv4.InterfaceAddress[i])] = types.YChild{"InterfaceAddress", &ipv4.InterfaceAddress[i]}
    }
    ipv4.EntityData.Children["underlying-adjacency-sid"] = types.YChild{"UnderlyingAdjacencySid", nil}
    for i := range ipv4.UnderlyingAdjacencySid {
        ipv4.EntityData.Children[types.GetSegmentPath(&ipv4.UnderlyingAdjacencySid[i])] = types.YChild{"UnderlyingAdjacencySid", &ipv4.UnderlyingAdjacencySid[i]}
    }
    ipv4.EntityData.Children["underlying-interface"] = types.YChild{"UnderlyingInterface", nil}
    for i := range ipv4.UnderlyingInterface {
        ipv4.EntityData.Children[types.GetSegmentPath(&ipv4.UnderlyingInterface[i])] = types.YChild{"UnderlyingInterface", &ipv4.UnderlyingInterface[i]}
    }
    ipv4.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv4.EntityData.Leafs["next-hop"] = types.YLeaf{"NextHop", ipv4.NextHop}
    return &(ipv4.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid
// Adjacency SID
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency SID value. The type is interface{} with range: 0..4294967295.
    AdjacencySidValue interface{}

    // Adjacency SID Backup Info.
    AdjacencySidBackup Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup

    // Adjacency SID Backup Info TE.
    AdjacencySidBackupTe Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe
}

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid) GetEntityData() *types.CommonEntityData {
    adjacencySid.EntityData.YFilter = adjacencySid.YFilter
    adjacencySid.EntityData.YangName = "adjacency-sid"
    adjacencySid.EntityData.BundleName = "cisco_ios_xr"
    adjacencySid.EntityData.ParentYangName = "ipv4"
    adjacencySid.EntityData.SegmentPath = "adjacency-sid"
    adjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySid.EntityData.Children = make(map[string]types.YChild)
    adjacencySid.EntityData.Children["adjacency-sid-backup"] = types.YChild{"AdjacencySidBackup", &adjacencySid.AdjacencySidBackup}
    adjacencySid.EntityData.Children["adjacency-sid-backup-te"] = types.YChild{"AdjacencySidBackupTe", &adjacencySid.AdjacencySidBackupTe}
    adjacencySid.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencySid.EntityData.Leafs["adjacency-sid-value"] = types.YLeaf{"AdjacencySidValue", adjacencySid.AdjacencySidValue}
    return &(adjacencySid.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup
// Adjacency SID Backup Info
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetEntityData() *types.CommonEntityData {
    adjacencySidBackup.EntityData.YFilter = adjacencySidBackup.YFilter
    adjacencySidBackup.EntityData.YangName = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackup.EntityData.ParentYangName = "adjacency-sid"
    adjacencySidBackup.EntityData.SegmentPath = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackup.EntityData.Children = make(map[string]types.YChild)
    adjacencySidBackup.EntityData.Children["backup-label-stack"] = types.YChild{"BackupLabelStack", nil}
    for i := range adjacencySidBackup.BackupLabelStack {
        adjacencySidBackup.EntityData.Children[types.GetSegmentPath(&adjacencySidBackup.BackupLabelStack[i])] = types.YChild{"BackupLabelStack", &adjacencySidBackup.BackupLabelStack[i]}
    }
    adjacencySidBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencySidBackup.EntityData.Leafs["backup-label-stack-size"] = types.YLeaf{"BackupLabelStackSize", adjacencySidBackup.BackupLabelStackSize}
    adjacencySidBackup.EntityData.Leafs["backup-node-address"] = types.YLeaf{"BackupNodeAddress", adjacencySidBackup.BackupNodeAddress}
    adjacencySidBackup.EntityData.Leafs["backup-nexthop"] = types.YLeaf{"BackupNexthop", adjacencySidBackup.BackupNexthop}
    adjacencySidBackup.EntityData.Leafs["backup-interface"] = types.YLeaf{"BackupInterface", adjacencySidBackup.BackupInterface}
    return &(adjacencySidBackup.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack"
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = make(map[string]types.YChild)
    backupLabelStack.EntityData.Leafs = make(map[string]types.YLeaf)
    backupLabelStack.EntityData.Leafs["entry"] = types.YLeaf{"Entry", backupLabelStack.Entry}
    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe
// Adjacency SID Backup Info TE
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetEntityData() *types.CommonEntityData {
    adjacencySidBackupTe.EntityData.YFilter = adjacencySidBackupTe.YFilter
    adjacencySidBackupTe.EntityData.YangName = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackupTe.EntityData.ParentYangName = "adjacency-sid"
    adjacencySidBackupTe.EntityData.SegmentPath = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackupTe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackupTe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackupTe.EntityData.Children = make(map[string]types.YChild)
    adjacencySidBackupTe.EntityData.Children["backup-label-stack"] = types.YChild{"BackupLabelStack", nil}
    for i := range adjacencySidBackupTe.BackupLabelStack {
        adjacencySidBackupTe.EntityData.Children[types.GetSegmentPath(&adjacencySidBackupTe.BackupLabelStack[i])] = types.YChild{"BackupLabelStack", &adjacencySidBackupTe.BackupLabelStack[i]}
    }
    adjacencySidBackupTe.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencySidBackupTe.EntityData.Leafs["backup-label-stack-size"] = types.YLeaf{"BackupLabelStackSize", adjacencySidBackupTe.BackupLabelStackSize}
    adjacencySidBackupTe.EntityData.Leafs["backup-node-address"] = types.YLeaf{"BackupNodeAddress", adjacencySidBackupTe.BackupNodeAddress}
    adjacencySidBackupTe.EntityData.Leafs["backup-nexthop"] = types.YLeaf{"BackupNexthop", adjacencySidBackupTe.BackupNexthop}
    adjacencySidBackupTe.EntityData.Leafs["backup-interface"] = types.YLeaf{"BackupInterface", adjacencySidBackupTe.BackupInterface}
    return &(adjacencySidBackupTe.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup-te"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack"
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = make(map[string]types.YChild)
    backupLabelStack.EntityData.Leafs = make(map[string]types.YLeaf)
    backupLabelStack.EntityData.Leafs["entry"] = types.YLeaf{"Entry", backupLabelStack.Entry}
    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid
// Adjacency SID not eligible for FRR protection
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency SID value. The type is interface{} with range: 0..4294967295.
    AdjacencySidValue interface{}

    // Adjacency SID Backup Info.
    AdjacencySidBackup Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup

    // Adjacency SID Backup Info TE.
    AdjacencySidBackupTe Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetEntityData() *types.CommonEntityData {
    nonFrrAdjacencySid.EntityData.YFilter = nonFrrAdjacencySid.YFilter
    nonFrrAdjacencySid.EntityData.YangName = "non-frr-adjacency-sid"
    nonFrrAdjacencySid.EntityData.BundleName = "cisco_ios_xr"
    nonFrrAdjacencySid.EntityData.ParentYangName = "ipv4"
    nonFrrAdjacencySid.EntityData.SegmentPath = "non-frr-adjacency-sid"
    nonFrrAdjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonFrrAdjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonFrrAdjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonFrrAdjacencySid.EntityData.Children = make(map[string]types.YChild)
    nonFrrAdjacencySid.EntityData.Children["adjacency-sid-backup"] = types.YChild{"AdjacencySidBackup", &nonFrrAdjacencySid.AdjacencySidBackup}
    nonFrrAdjacencySid.EntityData.Children["adjacency-sid-backup-te"] = types.YChild{"AdjacencySidBackupTe", &nonFrrAdjacencySid.AdjacencySidBackupTe}
    nonFrrAdjacencySid.EntityData.Leafs = make(map[string]types.YLeaf)
    nonFrrAdjacencySid.EntityData.Leafs["adjacency-sid-value"] = types.YLeaf{"AdjacencySidValue", nonFrrAdjacencySid.AdjacencySidValue}
    return &(nonFrrAdjacencySid.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup
// Adjacency SID Backup Info
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetEntityData() *types.CommonEntityData {
    adjacencySidBackup.EntityData.YFilter = adjacencySidBackup.YFilter
    adjacencySidBackup.EntityData.YangName = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackup.EntityData.ParentYangName = "non-frr-adjacency-sid"
    adjacencySidBackup.EntityData.SegmentPath = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackup.EntityData.Children = make(map[string]types.YChild)
    adjacencySidBackup.EntityData.Children["backup-label-stack"] = types.YChild{"BackupLabelStack", nil}
    for i := range adjacencySidBackup.BackupLabelStack {
        adjacencySidBackup.EntityData.Children[types.GetSegmentPath(&adjacencySidBackup.BackupLabelStack[i])] = types.YChild{"BackupLabelStack", &adjacencySidBackup.BackupLabelStack[i]}
    }
    adjacencySidBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencySidBackup.EntityData.Leafs["backup-label-stack-size"] = types.YLeaf{"BackupLabelStackSize", adjacencySidBackup.BackupLabelStackSize}
    adjacencySidBackup.EntityData.Leafs["backup-node-address"] = types.YLeaf{"BackupNodeAddress", adjacencySidBackup.BackupNodeAddress}
    adjacencySidBackup.EntityData.Leafs["backup-nexthop"] = types.YLeaf{"BackupNexthop", adjacencySidBackup.BackupNexthop}
    adjacencySidBackup.EntityData.Leafs["backup-interface"] = types.YLeaf{"BackupInterface", adjacencySidBackup.BackupInterface}
    return &(adjacencySidBackup.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack"
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = make(map[string]types.YChild)
    backupLabelStack.EntityData.Leafs = make(map[string]types.YLeaf)
    backupLabelStack.EntityData.Leafs["entry"] = types.YLeaf{"Entry", backupLabelStack.Entry}
    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe
// Adjacency SID Backup Info TE
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetEntityData() *types.CommonEntityData {
    adjacencySidBackupTe.EntityData.YFilter = adjacencySidBackupTe.YFilter
    adjacencySidBackupTe.EntityData.YangName = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackupTe.EntityData.ParentYangName = "non-frr-adjacency-sid"
    adjacencySidBackupTe.EntityData.SegmentPath = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackupTe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackupTe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackupTe.EntityData.Children = make(map[string]types.YChild)
    adjacencySidBackupTe.EntityData.Children["backup-label-stack"] = types.YChild{"BackupLabelStack", nil}
    for i := range adjacencySidBackupTe.BackupLabelStack {
        adjacencySidBackupTe.EntityData.Children[types.GetSegmentPath(&adjacencySidBackupTe.BackupLabelStack[i])] = types.YChild{"BackupLabelStack", &adjacencySidBackupTe.BackupLabelStack[i]}
    }
    adjacencySidBackupTe.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencySidBackupTe.EntityData.Leafs["backup-label-stack-size"] = types.YLeaf{"BackupLabelStackSize", adjacencySidBackupTe.BackupLabelStackSize}
    adjacencySidBackupTe.EntityData.Leafs["backup-node-address"] = types.YLeaf{"BackupNodeAddress", adjacencySidBackupTe.BackupNodeAddress}
    adjacencySidBackupTe.EntityData.Leafs["backup-nexthop"] = types.YLeaf{"BackupNexthop", adjacencySidBackupTe.BackupNexthop}
    adjacencySidBackupTe.EntityData.Leafs["backup-interface"] = types.YLeaf{"BackupInterface", adjacencySidBackupTe.BackupInterface}
    return &(adjacencySidBackupTe.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup-te"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack"
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = make(map[string]types.YChild)
    backupLabelStack.EntityData.Leafs = make(map[string]types.YLeaf)
    backupLabelStack.EntityData.Leafs["entry"] = types.YLeaf{"Entry", backupLabelStack.Entry}
    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress
// Adjacency interface addresses
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Entry interface{}
}

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress) GetEntityData() *types.CommonEntityData {
    interfaceAddress.EntityData.YFilter = interfaceAddress.YFilter
    interfaceAddress.EntityData.YangName = "interface-address"
    interfaceAddress.EntityData.BundleName = "cisco_ios_xr"
    interfaceAddress.EntityData.ParentYangName = "ipv4"
    interfaceAddress.EntityData.SegmentPath = "interface-address"
    interfaceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAddress.EntityData.Children = make(map[string]types.YChild)
    interfaceAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    interfaceAddress.EntityData.Leafs["entry"] = types.YLeaf{"Entry", interfaceAddress.Entry}
    return &(interfaceAddress.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid
// Per bundle member Adjacency sid
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetEntityData() *types.CommonEntityData {
    underlyingAdjacencySid.EntityData.YFilter = underlyingAdjacencySid.YFilter
    underlyingAdjacencySid.EntityData.YangName = "underlying-adjacency-sid"
    underlyingAdjacencySid.EntityData.BundleName = "cisco_ios_xr"
    underlyingAdjacencySid.EntityData.ParentYangName = "ipv4"
    underlyingAdjacencySid.EntityData.SegmentPath = "underlying-adjacency-sid"
    underlyingAdjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    underlyingAdjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    underlyingAdjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    underlyingAdjacencySid.EntityData.Children = make(map[string]types.YChild)
    underlyingAdjacencySid.EntityData.Leafs = make(map[string]types.YLeaf)
    underlyingAdjacencySid.EntityData.Leafs["entry"] = types.YLeaf{"Entry", underlyingAdjacencySid.Entry}
    return &(underlyingAdjacencySid.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface
// Underlying interface list for bundle interfaces
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local interface handle. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceHandle interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface) GetEntityData() *types.CommonEntityData {
    underlyingInterface.EntityData.YFilter = underlyingInterface.YFilter
    underlyingInterface.EntityData.YangName = "underlying-interface"
    underlyingInterface.EntityData.BundleName = "cisco_ios_xr"
    underlyingInterface.EntityData.ParentYangName = "ipv4"
    underlyingInterface.EntityData.SegmentPath = "underlying-interface"
    underlyingInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    underlyingInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    underlyingInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    underlyingInterface.EntityData.Children = make(map[string]types.YChild)
    underlyingInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    underlyingInterface.EntityData.Leafs["interface-handle"] = types.YLeaf{"InterfaceHandle", underlyingInterface.InterfaceHandle}
    underlyingInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", underlyingInterface.InterfaceName}
    return &(underlyingInterface.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6
// IPV6 neighbor info
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency next hop. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NextHop interface{}

    // Adjacency SID.
    AdjacencySid Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid

    // Adjacency SID not eligible for FRR protection.
    NonFrrAdjacencySid Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid

    // Adjacency interface addresses. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress.
    InterfaceAddress []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress

    // Per bundle member Adjacency sid. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid.
    UnderlyingAdjacencySid []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid

    // Underlying interface list for bundle interfaces. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface.
    UnderlyingInterface []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface
}

func (ipv6 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6) GetEntityData() *types.CommonEntityData {
    ipv6.EntityData.YFilter = ipv6.YFilter
    ipv6.EntityData.YangName = "ipv6"
    ipv6.EntityData.BundleName = "cisco_ios_xr"
    ipv6.EntityData.ParentYangName = "adjacency-per-address-family-data"
    ipv6.EntityData.SegmentPath = "ipv6"
    ipv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6.EntityData.Children = make(map[string]types.YChild)
    ipv6.EntityData.Children["adjacency-sid"] = types.YChild{"AdjacencySid", &ipv6.AdjacencySid}
    ipv6.EntityData.Children["non-frr-adjacency-sid"] = types.YChild{"NonFrrAdjacencySid", &ipv6.NonFrrAdjacencySid}
    ipv6.EntityData.Children["interface-address"] = types.YChild{"InterfaceAddress", nil}
    for i := range ipv6.InterfaceAddress {
        ipv6.EntityData.Children[types.GetSegmentPath(&ipv6.InterfaceAddress[i])] = types.YChild{"InterfaceAddress", &ipv6.InterfaceAddress[i]}
    }
    ipv6.EntityData.Children["underlying-adjacency-sid"] = types.YChild{"UnderlyingAdjacencySid", nil}
    for i := range ipv6.UnderlyingAdjacencySid {
        ipv6.EntityData.Children[types.GetSegmentPath(&ipv6.UnderlyingAdjacencySid[i])] = types.YChild{"UnderlyingAdjacencySid", &ipv6.UnderlyingAdjacencySid[i]}
    }
    ipv6.EntityData.Children["underlying-interface"] = types.YChild{"UnderlyingInterface", nil}
    for i := range ipv6.UnderlyingInterface {
        ipv6.EntityData.Children[types.GetSegmentPath(&ipv6.UnderlyingInterface[i])] = types.YChild{"UnderlyingInterface", &ipv6.UnderlyingInterface[i]}
    }
    ipv6.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv6.EntityData.Leafs["next-hop"] = types.YLeaf{"NextHop", ipv6.NextHop}
    return &(ipv6.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid
// Adjacency SID
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency SID value. The type is interface{} with range: 0..4294967295.
    AdjacencySidValue interface{}

    // Adjacency SID Backup Info.
    AdjacencySidBackup Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup

    // Adjacency SID Backup Info TE.
    AdjacencySidBackupTe Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe
}

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid) GetEntityData() *types.CommonEntityData {
    adjacencySid.EntityData.YFilter = adjacencySid.YFilter
    adjacencySid.EntityData.YangName = "adjacency-sid"
    adjacencySid.EntityData.BundleName = "cisco_ios_xr"
    adjacencySid.EntityData.ParentYangName = "ipv6"
    adjacencySid.EntityData.SegmentPath = "adjacency-sid"
    adjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySid.EntityData.Children = make(map[string]types.YChild)
    adjacencySid.EntityData.Children["adjacency-sid-backup"] = types.YChild{"AdjacencySidBackup", &adjacencySid.AdjacencySidBackup}
    adjacencySid.EntityData.Children["adjacency-sid-backup-te"] = types.YChild{"AdjacencySidBackupTe", &adjacencySid.AdjacencySidBackupTe}
    adjacencySid.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencySid.EntityData.Leafs["adjacency-sid-value"] = types.YLeaf{"AdjacencySidValue", adjacencySid.AdjacencySidValue}
    return &(adjacencySid.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup
// Adjacency SID Backup Info
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetEntityData() *types.CommonEntityData {
    adjacencySidBackup.EntityData.YFilter = adjacencySidBackup.YFilter
    adjacencySidBackup.EntityData.YangName = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackup.EntityData.ParentYangName = "adjacency-sid"
    adjacencySidBackup.EntityData.SegmentPath = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackup.EntityData.Children = make(map[string]types.YChild)
    adjacencySidBackup.EntityData.Children["backup-label-stack"] = types.YChild{"BackupLabelStack", nil}
    for i := range adjacencySidBackup.BackupLabelStack {
        adjacencySidBackup.EntityData.Children[types.GetSegmentPath(&adjacencySidBackup.BackupLabelStack[i])] = types.YChild{"BackupLabelStack", &adjacencySidBackup.BackupLabelStack[i]}
    }
    adjacencySidBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencySidBackup.EntityData.Leafs["backup-label-stack-size"] = types.YLeaf{"BackupLabelStackSize", adjacencySidBackup.BackupLabelStackSize}
    adjacencySidBackup.EntityData.Leafs["backup-node-address"] = types.YLeaf{"BackupNodeAddress", adjacencySidBackup.BackupNodeAddress}
    adjacencySidBackup.EntityData.Leafs["backup-nexthop"] = types.YLeaf{"BackupNexthop", adjacencySidBackup.BackupNexthop}
    adjacencySidBackup.EntityData.Leafs["backup-interface"] = types.YLeaf{"BackupInterface", adjacencySidBackup.BackupInterface}
    return &(adjacencySidBackup.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack"
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = make(map[string]types.YChild)
    backupLabelStack.EntityData.Leafs = make(map[string]types.YLeaf)
    backupLabelStack.EntityData.Leafs["entry"] = types.YLeaf{"Entry", backupLabelStack.Entry}
    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe
// Adjacency SID Backup Info TE
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetEntityData() *types.CommonEntityData {
    adjacencySidBackupTe.EntityData.YFilter = adjacencySidBackupTe.YFilter
    adjacencySidBackupTe.EntityData.YangName = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackupTe.EntityData.ParentYangName = "adjacency-sid"
    adjacencySidBackupTe.EntityData.SegmentPath = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackupTe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackupTe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackupTe.EntityData.Children = make(map[string]types.YChild)
    adjacencySidBackupTe.EntityData.Children["backup-label-stack"] = types.YChild{"BackupLabelStack", nil}
    for i := range adjacencySidBackupTe.BackupLabelStack {
        adjacencySidBackupTe.EntityData.Children[types.GetSegmentPath(&adjacencySidBackupTe.BackupLabelStack[i])] = types.YChild{"BackupLabelStack", &adjacencySidBackupTe.BackupLabelStack[i]}
    }
    adjacencySidBackupTe.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencySidBackupTe.EntityData.Leafs["backup-label-stack-size"] = types.YLeaf{"BackupLabelStackSize", adjacencySidBackupTe.BackupLabelStackSize}
    adjacencySidBackupTe.EntityData.Leafs["backup-node-address"] = types.YLeaf{"BackupNodeAddress", adjacencySidBackupTe.BackupNodeAddress}
    adjacencySidBackupTe.EntityData.Leafs["backup-nexthop"] = types.YLeaf{"BackupNexthop", adjacencySidBackupTe.BackupNexthop}
    adjacencySidBackupTe.EntityData.Leafs["backup-interface"] = types.YLeaf{"BackupInterface", adjacencySidBackupTe.BackupInterface}
    return &(adjacencySidBackupTe.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup-te"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack"
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = make(map[string]types.YChild)
    backupLabelStack.EntityData.Leafs = make(map[string]types.YLeaf)
    backupLabelStack.EntityData.Leafs["entry"] = types.YLeaf{"Entry", backupLabelStack.Entry}
    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid
// Adjacency SID not eligible for FRR protection
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency SID value. The type is interface{} with range: 0..4294967295.
    AdjacencySidValue interface{}

    // Adjacency SID Backup Info.
    AdjacencySidBackup Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup

    // Adjacency SID Backup Info TE.
    AdjacencySidBackupTe Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetEntityData() *types.CommonEntityData {
    nonFrrAdjacencySid.EntityData.YFilter = nonFrrAdjacencySid.YFilter
    nonFrrAdjacencySid.EntityData.YangName = "non-frr-adjacency-sid"
    nonFrrAdjacencySid.EntityData.BundleName = "cisco_ios_xr"
    nonFrrAdjacencySid.EntityData.ParentYangName = "ipv6"
    nonFrrAdjacencySid.EntityData.SegmentPath = "non-frr-adjacency-sid"
    nonFrrAdjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonFrrAdjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonFrrAdjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonFrrAdjacencySid.EntityData.Children = make(map[string]types.YChild)
    nonFrrAdjacencySid.EntityData.Children["adjacency-sid-backup"] = types.YChild{"AdjacencySidBackup", &nonFrrAdjacencySid.AdjacencySidBackup}
    nonFrrAdjacencySid.EntityData.Children["adjacency-sid-backup-te"] = types.YChild{"AdjacencySidBackupTe", &nonFrrAdjacencySid.AdjacencySidBackupTe}
    nonFrrAdjacencySid.EntityData.Leafs = make(map[string]types.YLeaf)
    nonFrrAdjacencySid.EntityData.Leafs["adjacency-sid-value"] = types.YLeaf{"AdjacencySidValue", nonFrrAdjacencySid.AdjacencySidValue}
    return &(nonFrrAdjacencySid.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup
// Adjacency SID Backup Info
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetEntityData() *types.CommonEntityData {
    adjacencySidBackup.EntityData.YFilter = adjacencySidBackup.YFilter
    adjacencySidBackup.EntityData.YangName = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackup.EntityData.ParentYangName = "non-frr-adjacency-sid"
    adjacencySidBackup.EntityData.SegmentPath = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackup.EntityData.Children = make(map[string]types.YChild)
    adjacencySidBackup.EntityData.Children["backup-label-stack"] = types.YChild{"BackupLabelStack", nil}
    for i := range adjacencySidBackup.BackupLabelStack {
        adjacencySidBackup.EntityData.Children[types.GetSegmentPath(&adjacencySidBackup.BackupLabelStack[i])] = types.YChild{"BackupLabelStack", &adjacencySidBackup.BackupLabelStack[i]}
    }
    adjacencySidBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencySidBackup.EntityData.Leafs["backup-label-stack-size"] = types.YLeaf{"BackupLabelStackSize", adjacencySidBackup.BackupLabelStackSize}
    adjacencySidBackup.EntityData.Leafs["backup-node-address"] = types.YLeaf{"BackupNodeAddress", adjacencySidBackup.BackupNodeAddress}
    adjacencySidBackup.EntityData.Leafs["backup-nexthop"] = types.YLeaf{"BackupNexthop", adjacencySidBackup.BackupNexthop}
    adjacencySidBackup.EntityData.Leafs["backup-interface"] = types.YLeaf{"BackupInterface", adjacencySidBackup.BackupInterface}
    return &(adjacencySidBackup.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack"
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = make(map[string]types.YChild)
    backupLabelStack.EntityData.Leafs = make(map[string]types.YLeaf)
    backupLabelStack.EntityData.Leafs["entry"] = types.YLeaf{"Entry", backupLabelStack.Entry}
    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe
// Adjacency SID Backup Info TE
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack.
    BackupLabelStack []Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetEntityData() *types.CommonEntityData {
    adjacencySidBackupTe.EntityData.YFilter = adjacencySidBackupTe.YFilter
    adjacencySidBackupTe.EntityData.YangName = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackupTe.EntityData.ParentYangName = "non-frr-adjacency-sid"
    adjacencySidBackupTe.EntityData.SegmentPath = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackupTe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackupTe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackupTe.EntityData.Children = make(map[string]types.YChild)
    adjacencySidBackupTe.EntityData.Children["backup-label-stack"] = types.YChild{"BackupLabelStack", nil}
    for i := range adjacencySidBackupTe.BackupLabelStack {
        adjacencySidBackupTe.EntityData.Children[types.GetSegmentPath(&adjacencySidBackupTe.BackupLabelStack[i])] = types.YChild{"BackupLabelStack", &adjacencySidBackupTe.BackupLabelStack[i]}
    }
    adjacencySidBackupTe.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencySidBackupTe.EntityData.Leafs["backup-label-stack-size"] = types.YLeaf{"BackupLabelStackSize", adjacencySidBackupTe.BackupLabelStackSize}
    adjacencySidBackupTe.EntityData.Leafs["backup-node-address"] = types.YLeaf{"BackupNodeAddress", adjacencySidBackupTe.BackupNodeAddress}
    adjacencySidBackupTe.EntityData.Leafs["backup-nexthop"] = types.YLeaf{"BackupNexthop", adjacencySidBackupTe.BackupNexthop}
    adjacencySidBackupTe.EntityData.Leafs["backup-interface"] = types.YLeaf{"BackupInterface", adjacencySidBackupTe.BackupInterface}
    return &(adjacencySidBackupTe.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup-te"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack"
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = make(map[string]types.YChild)
    backupLabelStack.EntityData.Leafs = make(map[string]types.YLeaf)
    backupLabelStack.EntityData.Leafs["entry"] = types.YLeaf{"Entry", backupLabelStack.Entry}
    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress
// Adjacency interface addresses
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Entry interface{}
}

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress) GetEntityData() *types.CommonEntityData {
    interfaceAddress.EntityData.YFilter = interfaceAddress.YFilter
    interfaceAddress.EntityData.YangName = "interface-address"
    interfaceAddress.EntityData.BundleName = "cisco_ios_xr"
    interfaceAddress.EntityData.ParentYangName = "ipv6"
    interfaceAddress.EntityData.SegmentPath = "interface-address"
    interfaceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAddress.EntityData.Children = make(map[string]types.YChild)
    interfaceAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    interfaceAddress.EntityData.Leafs["entry"] = types.YLeaf{"Entry", interfaceAddress.Entry}
    return &(interfaceAddress.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid
// Per bundle member Adjacency sid
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetEntityData() *types.CommonEntityData {
    underlyingAdjacencySid.EntityData.YFilter = underlyingAdjacencySid.YFilter
    underlyingAdjacencySid.EntityData.YangName = "underlying-adjacency-sid"
    underlyingAdjacencySid.EntityData.BundleName = "cisco_ios_xr"
    underlyingAdjacencySid.EntityData.ParentYangName = "ipv6"
    underlyingAdjacencySid.EntityData.SegmentPath = "underlying-adjacency-sid"
    underlyingAdjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    underlyingAdjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    underlyingAdjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    underlyingAdjacencySid.EntityData.Children = make(map[string]types.YChild)
    underlyingAdjacencySid.EntityData.Leafs = make(map[string]types.YLeaf)
    underlyingAdjacencySid.EntityData.Leafs["entry"] = types.YLeaf{"Entry", underlyingAdjacencySid.Entry}
    return &(underlyingAdjacencySid.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface
// Underlying interface list for bundle interfaces
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local interface handle. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceHandle interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface) GetEntityData() *types.CommonEntityData {
    underlyingInterface.EntityData.YFilter = underlyingInterface.YFilter
    underlyingInterface.EntityData.YangName = "underlying-interface"
    underlyingInterface.EntityData.BundleName = "cisco_ios_xr"
    underlyingInterface.EntityData.ParentYangName = "ipv6"
    underlyingInterface.EntityData.SegmentPath = "underlying-interface"
    underlyingInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    underlyingInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    underlyingInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    underlyingInterface.EntityData.Children = make(map[string]types.YChild)
    underlyingInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    underlyingInterface.EntityData.Leafs["interface-handle"] = types.YLeaf{"InterfaceHandle", underlyingInterface.InterfaceHandle}
    underlyingInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", underlyingInterface.InterfaceName}
    return &(underlyingInterface.EntityData)
}

// Isis_Instances_Instance_Levels_Level_DetailedLsps
// Detailed LSP table. Use to retrieve LSPs
// with TLV content.
type Isis_Instances_Instance_Levels_Level_DetailedLsps struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An IS-IS LSP with detailed TLV data included. The type is slice of
    // Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp.
    DetailedLsp []Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp
}

func (detailedLsps *Isis_Instances_Instance_Levels_Level_DetailedLsps) GetEntityData() *types.CommonEntityData {
    detailedLsps.EntityData.YFilter = detailedLsps.YFilter
    detailedLsps.EntityData.YangName = "detailed-lsps"
    detailedLsps.EntityData.BundleName = "cisco_ios_xr"
    detailedLsps.EntityData.ParentYangName = "level"
    detailedLsps.EntityData.SegmentPath = "detailed-lsps"
    detailedLsps.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailedLsps.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailedLsps.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailedLsps.EntityData.Children = make(map[string]types.YChild)
    detailedLsps.EntityData.Children["detailed-lsp"] = types.YChild{"DetailedLsp", nil}
    for i := range detailedLsps.DetailedLsp {
        detailedLsps.EntityData.Children[types.GetSegmentPath(&detailedLsps.DetailedLsp[i])] = types.YChild{"DetailedLsp", &detailedLsps.DetailedLsp[i]}
    }
    detailedLsps.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detailedLsps.EntityData)
}

// Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp
// An IS-IS LSP with detailed TLV data
// included
type Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. LSP ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}\\-[a-fA-F0-9]{2}'.
    LspId interface{}

    // LSP as received/sent over the wire, starting from the LSP ID field. The
    // type is string with pattern: b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    LspBody interface{}

    // Information from the LSP header.
    LspHeaderData Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp_LspHeaderData
}

func (detailedLsp *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp) GetEntityData() *types.CommonEntityData {
    detailedLsp.EntityData.YFilter = detailedLsp.YFilter
    detailedLsp.EntityData.YangName = "detailed-lsp"
    detailedLsp.EntityData.BundleName = "cisco_ios_xr"
    detailedLsp.EntityData.ParentYangName = "detailed-lsps"
    detailedLsp.EntityData.SegmentPath = "detailed-lsp" + "[lsp-id='" + fmt.Sprintf("%v", detailedLsp.LspId) + "']"
    detailedLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailedLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailedLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailedLsp.EntityData.Children = make(map[string]types.YChild)
    detailedLsp.EntityData.Children["lsp-header-data"] = types.YChild{"LspHeaderData", &detailedLsp.LspHeaderData}
    detailedLsp.EntityData.Leafs = make(map[string]types.YLeaf)
    detailedLsp.EntityData.Leafs["lsp-id"] = types.YLeaf{"LspId", detailedLsp.LspId}
    detailedLsp.EntityData.Leafs["lsp-body"] = types.YLeaf{"LspBody", detailedLsp.LspBody}
    return &(detailedLsp.EntityData)
}

// Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp_LspHeaderData
// Information from the LSP header
type Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp_LspHeaderData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LSP ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}\\-[a-fA-F0-9]{2}'.
    LspId interface{}

    // TRUE if this is a locally generated LSP. The type is bool.
    LocalLspFlag interface{}

    // TRUE if this LSP has not expired. The type is bool.
    LspActiveFlag interface{}

    // Time, in seconds, until LSP expiry (if active) or deletion (if expired) .
    // The type is interface{} with range: 0..65535. Units are second.
    LspHoldtime interface{}

    // The LSP sequence number. The type is interface{} with range: 0..4294967295.
    LspSequenceNumber interface{}

    // The LSP checksum. The type is interface{} with range: 0..65535.
    LspChecksum interface{}

    // TRUE if partition repair is supported. The type is bool.
    LspPartitionRepairSupportedFlag interface{}

    // TRUE if attached bit is set. The type is bool.
    LspAttachedFlag interface{}

    // TRUE if the overload bit is set. The type is bool.
    LspOverloadedFlag interface{}

    // TRUE if the LSP is non-v1a, XXX for testing. The type is interface{} with
    // range: 0..65535.
    LspNonv1AFlag interface{}

    // The type of the IS sourcing the LSP. The type is IsisLevels.
    LspLevel interface{}

    // The total length of the LSP. The type is interface{} with range: 0..65535.
    LspLength interface{}

    // max area addresses. The type is interface{} with range: 0..255.
    MaxAreaAddresses interface{}

    // System Id length. The type is interface{} with range: 0..255.
    IdLength interface{}

    // isis version. The type is interface{} with range: 0..255.
    Version interface{}

    // isis version2. The type is interface{} with range: 0..255.
    Version2 interface{}
}

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp_LspHeaderData) GetEntityData() *types.CommonEntityData {
    lspHeaderData.EntityData.YFilter = lspHeaderData.YFilter
    lspHeaderData.EntityData.YangName = "lsp-header-data"
    lspHeaderData.EntityData.BundleName = "cisco_ios_xr"
    lspHeaderData.EntityData.ParentYangName = "detailed-lsp"
    lspHeaderData.EntityData.SegmentPath = "lsp-header-data"
    lspHeaderData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lspHeaderData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lspHeaderData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lspHeaderData.EntityData.Children = make(map[string]types.YChild)
    lspHeaderData.EntityData.Leafs = make(map[string]types.YLeaf)
    lspHeaderData.EntityData.Leafs["lsp-id"] = types.YLeaf{"LspId", lspHeaderData.LspId}
    lspHeaderData.EntityData.Leafs["local-lsp-flag"] = types.YLeaf{"LocalLspFlag", lspHeaderData.LocalLspFlag}
    lspHeaderData.EntityData.Leafs["lsp-active-flag"] = types.YLeaf{"LspActiveFlag", lspHeaderData.LspActiveFlag}
    lspHeaderData.EntityData.Leafs["lsp-holdtime"] = types.YLeaf{"LspHoldtime", lspHeaderData.LspHoldtime}
    lspHeaderData.EntityData.Leafs["lsp-sequence-number"] = types.YLeaf{"LspSequenceNumber", lspHeaderData.LspSequenceNumber}
    lspHeaderData.EntityData.Leafs["lsp-checksum"] = types.YLeaf{"LspChecksum", lspHeaderData.LspChecksum}
    lspHeaderData.EntityData.Leafs["lsp-partition-repair-supported-flag"] = types.YLeaf{"LspPartitionRepairSupportedFlag", lspHeaderData.LspPartitionRepairSupportedFlag}
    lspHeaderData.EntityData.Leafs["lsp-attached-flag"] = types.YLeaf{"LspAttachedFlag", lspHeaderData.LspAttachedFlag}
    lspHeaderData.EntityData.Leafs["lsp-overloaded-flag"] = types.YLeaf{"LspOverloadedFlag", lspHeaderData.LspOverloadedFlag}
    lspHeaderData.EntityData.Leafs["lsp-nonv1a-flag"] = types.YLeaf{"LspNonv1AFlag", lspHeaderData.LspNonv1AFlag}
    lspHeaderData.EntityData.Leafs["lsp-level"] = types.YLeaf{"LspLevel", lspHeaderData.LspLevel}
    lspHeaderData.EntityData.Leafs["lsp-length"] = types.YLeaf{"LspLength", lspHeaderData.LspLength}
    lspHeaderData.EntityData.Leafs["max-area-addresses"] = types.YLeaf{"MaxAreaAddresses", lspHeaderData.MaxAreaAddresses}
    lspHeaderData.EntityData.Leafs["id-length"] = types.YLeaf{"IdLength", lspHeaderData.IdLength}
    lspHeaderData.EntityData.Leafs["version"] = types.YLeaf{"Version", lspHeaderData.Version}
    lspHeaderData.EntityData.Leafs["version2"] = types.YLeaf{"Version2", lspHeaderData.Version2}
    return &(lspHeaderData.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Lsps
// LSP table
type Isis_Instances_Instance_Levels_Level_Lsps struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An IS-IS LSP (header information only). The type is slice of
    // Isis_Instances_Instance_Levels_Level_Lsps_Lsp.
    Lsp []Isis_Instances_Instance_Levels_Level_Lsps_Lsp
}

func (lsps *Isis_Instances_Instance_Levels_Level_Lsps) GetEntityData() *types.CommonEntityData {
    lsps.EntityData.YFilter = lsps.YFilter
    lsps.EntityData.YangName = "lsps"
    lsps.EntityData.BundleName = "cisco_ios_xr"
    lsps.EntityData.ParentYangName = "level"
    lsps.EntityData.SegmentPath = "lsps"
    lsps.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsps.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsps.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsps.EntityData.Children = make(map[string]types.YChild)
    lsps.EntityData.Children["lsp"] = types.YChild{"Lsp", nil}
    for i := range lsps.Lsp {
        lsps.EntityData.Children[types.GetSegmentPath(&lsps.Lsp[i])] = types.YChild{"Lsp", &lsps.Lsp[i]}
    }
    lsps.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(lsps.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Lsps_Lsp
// An IS-IS LSP (header information only)
type Isis_Instances_Instance_Levels_Level_Lsps_Lsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. LSP ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}\\-[a-fA-F0-9]{2}'.
    LspId interface{}

    // LSP as received/sent over the wire, starting from the LSP ID field. The
    // type is string with pattern: b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    LspBody interface{}

    // Information from the LSP header.
    LspHeaderData Isis_Instances_Instance_Levels_Level_Lsps_Lsp_LspHeaderData
}

func (lsp *Isis_Instances_Instance_Levels_Level_Lsps_Lsp) GetEntityData() *types.CommonEntityData {
    lsp.EntityData.YFilter = lsp.YFilter
    lsp.EntityData.YangName = "lsp"
    lsp.EntityData.BundleName = "cisco_ios_xr"
    lsp.EntityData.ParentYangName = "lsps"
    lsp.EntityData.SegmentPath = "lsp" + "[lsp-id='" + fmt.Sprintf("%v", lsp.LspId) + "']"
    lsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsp.EntityData.Children = make(map[string]types.YChild)
    lsp.EntityData.Children["lsp-header-data"] = types.YChild{"LspHeaderData", &lsp.LspHeaderData}
    lsp.EntityData.Leafs = make(map[string]types.YLeaf)
    lsp.EntityData.Leafs["lsp-id"] = types.YLeaf{"LspId", lsp.LspId}
    lsp.EntityData.Leafs["lsp-body"] = types.YLeaf{"LspBody", lsp.LspBody}
    return &(lsp.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Lsps_Lsp_LspHeaderData
// Information from the LSP header
type Isis_Instances_Instance_Levels_Level_Lsps_Lsp_LspHeaderData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LSP ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}\\-[a-fA-F0-9]{2}'.
    LspId interface{}

    // TRUE if this is a locally generated LSP. The type is bool.
    LocalLspFlag interface{}

    // TRUE if this LSP has not expired. The type is bool.
    LspActiveFlag interface{}

    // Time, in seconds, until LSP expiry (if active) or deletion (if expired) .
    // The type is interface{} with range: 0..65535. Units are second.
    LspHoldtime interface{}

    // The LSP sequence number. The type is interface{} with range: 0..4294967295.
    LspSequenceNumber interface{}

    // The LSP checksum. The type is interface{} with range: 0..65535.
    LspChecksum interface{}

    // TRUE if partition repair is supported. The type is bool.
    LspPartitionRepairSupportedFlag interface{}

    // TRUE if attached bit is set. The type is bool.
    LspAttachedFlag interface{}

    // TRUE if the overload bit is set. The type is bool.
    LspOverloadedFlag interface{}

    // TRUE if the LSP is non-v1a, XXX for testing. The type is interface{} with
    // range: 0..65535.
    LspNonv1AFlag interface{}

    // The type of the IS sourcing the LSP. The type is IsisLevels.
    LspLevel interface{}

    // The total length of the LSP. The type is interface{} with range: 0..65535.
    LspLength interface{}

    // max area addresses. The type is interface{} with range: 0..255.
    MaxAreaAddresses interface{}

    // System Id length. The type is interface{} with range: 0..255.
    IdLength interface{}

    // isis version. The type is interface{} with range: 0..255.
    Version interface{}

    // isis version2. The type is interface{} with range: 0..255.
    Version2 interface{}
}

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_Lsps_Lsp_LspHeaderData) GetEntityData() *types.CommonEntityData {
    lspHeaderData.EntityData.YFilter = lspHeaderData.YFilter
    lspHeaderData.EntityData.YangName = "lsp-header-data"
    lspHeaderData.EntityData.BundleName = "cisco_ios_xr"
    lspHeaderData.EntityData.ParentYangName = "lsp"
    lspHeaderData.EntityData.SegmentPath = "lsp-header-data"
    lspHeaderData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lspHeaderData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lspHeaderData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lspHeaderData.EntityData.Children = make(map[string]types.YChild)
    lspHeaderData.EntityData.Leafs = make(map[string]types.YLeaf)
    lspHeaderData.EntityData.Leafs["lsp-id"] = types.YLeaf{"LspId", lspHeaderData.LspId}
    lspHeaderData.EntityData.Leafs["local-lsp-flag"] = types.YLeaf{"LocalLspFlag", lspHeaderData.LocalLspFlag}
    lspHeaderData.EntityData.Leafs["lsp-active-flag"] = types.YLeaf{"LspActiveFlag", lspHeaderData.LspActiveFlag}
    lspHeaderData.EntityData.Leafs["lsp-holdtime"] = types.YLeaf{"LspHoldtime", lspHeaderData.LspHoldtime}
    lspHeaderData.EntityData.Leafs["lsp-sequence-number"] = types.YLeaf{"LspSequenceNumber", lspHeaderData.LspSequenceNumber}
    lspHeaderData.EntityData.Leafs["lsp-checksum"] = types.YLeaf{"LspChecksum", lspHeaderData.LspChecksum}
    lspHeaderData.EntityData.Leafs["lsp-partition-repair-supported-flag"] = types.YLeaf{"LspPartitionRepairSupportedFlag", lspHeaderData.LspPartitionRepairSupportedFlag}
    lspHeaderData.EntityData.Leafs["lsp-attached-flag"] = types.YLeaf{"LspAttachedFlag", lspHeaderData.LspAttachedFlag}
    lspHeaderData.EntityData.Leafs["lsp-overloaded-flag"] = types.YLeaf{"LspOverloadedFlag", lspHeaderData.LspOverloadedFlag}
    lspHeaderData.EntityData.Leafs["lsp-nonv1a-flag"] = types.YLeaf{"LspNonv1AFlag", lspHeaderData.LspNonv1AFlag}
    lspHeaderData.EntityData.Leafs["lsp-level"] = types.YLeaf{"LspLevel", lspHeaderData.LspLevel}
    lspHeaderData.EntityData.Leafs["lsp-length"] = types.YLeaf{"LspLength", lspHeaderData.LspLength}
    lspHeaderData.EntityData.Leafs["max-area-addresses"] = types.YLeaf{"MaxAreaAddresses", lspHeaderData.MaxAreaAddresses}
    lspHeaderData.EntityData.Leafs["id-length"] = types.YLeaf{"IdLength", lspHeaderData.IdLength}
    lspHeaderData.EntityData.Leafs["version"] = types.YLeaf{"Version", lspHeaderData.Version}
    lspHeaderData.EntityData.Leafs["version2"] = types.YLeaf{"Version2", lspHeaderData.Version2}
    return &(lspHeaderData.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspLog
// LSP-log for a single level
type Isis_Instances_Instance_Levels_Level_LspLog struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Log entries. The type is slice of
    // Isis_Instances_Instance_Levels_Level_LspLog_LogEntry.
    LogEntry []Isis_Instances_Instance_Levels_Level_LspLog_LogEntry
}

func (lspLog *Isis_Instances_Instance_Levels_Level_LspLog) GetEntityData() *types.CommonEntityData {
    lspLog.EntityData.YFilter = lspLog.YFilter
    lspLog.EntityData.YangName = "lsp-log"
    lspLog.EntityData.BundleName = "cisco_ios_xr"
    lspLog.EntityData.ParentYangName = "level"
    lspLog.EntityData.SegmentPath = "lsp-log"
    lspLog.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lspLog.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lspLog.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lspLog.EntityData.Children = make(map[string]types.YChild)
    lspLog.EntityData.Children["log-entry"] = types.YChild{"LogEntry", nil}
    for i := range lspLog.LogEntry {
        lspLog.EntityData.Children[types.GetSegmentPath(&lspLog.LogEntry[i])] = types.YChild{"LogEntry", &lspLog.LogEntry[i]}
    }
    lspLog.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(lspLog.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspLog_LogEntry
// Log entries
type Isis_Instances_Instance_Levels_Level_LspLog_LogEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of triggers on this run. May not be equal to the number of trigger
    // event types if one or more trigger events has occurred more than once. The
    // type is interface{} with range: 0..4294967295.
    TriggerCount interface{}

    // Number of delayed triggers. The type is interface{} with range:
    // 0..4294967295.
    DelayedTriggerCount interface{}

    // Appropriate interface, if any. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    LogInterface interface{}

    // Pseudo-node number. The type is interface{} with range: 0..255.
    PseudoNodeNumber interface{}

    // Generic entry data.
    GenericData Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData

    // Triggers applying to this log entry. The type is slice of
    // Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger.
    Trigger []Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger
}

func (logEntry *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry) GetEntityData() *types.CommonEntityData {
    logEntry.EntityData.YFilter = logEntry.YFilter
    logEntry.EntityData.YangName = "log-entry"
    logEntry.EntityData.BundleName = "cisco_ios_xr"
    logEntry.EntityData.ParentYangName = "lsp-log"
    logEntry.EntityData.SegmentPath = "log-entry"
    logEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    logEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    logEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    logEntry.EntityData.Children = make(map[string]types.YChild)
    logEntry.EntityData.Children["generic-data"] = types.YChild{"GenericData", &logEntry.GenericData}
    logEntry.EntityData.Children["trigger"] = types.YChild{"Trigger", nil}
    for i := range logEntry.Trigger {
        logEntry.EntityData.Children[types.GetSegmentPath(&logEntry.Trigger[i])] = types.YChild{"Trigger", &logEntry.Trigger[i]}
    }
    logEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    logEntry.EntityData.Leafs["trigger-count"] = types.YLeaf{"TriggerCount", logEntry.TriggerCount}
    logEntry.EntityData.Leafs["delayed-trigger-count"] = types.YLeaf{"DelayedTriggerCount", logEntry.DelayedTriggerCount}
    logEntry.EntityData.Leafs["log-interface"] = types.YLeaf{"LogInterface", logEntry.LogInterface}
    logEntry.EntityData.Leafs["pseudo-node-number"] = types.YLeaf{"PseudoNodeNumber", logEntry.PseudoNodeNumber}
    return &(logEntry.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData
// Generic entry data
type Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in UTC relative to Jan 1st, 1970.
    Timestamp Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData_Timestamp
}

func (genericData *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData) GetEntityData() *types.CommonEntityData {
    genericData.EntityData.YFilter = genericData.YFilter
    genericData.EntityData.YangName = "generic-data"
    genericData.EntityData.BundleName = "cisco_ios_xr"
    genericData.EntityData.ParentYangName = "log-entry"
    genericData.EntityData.SegmentPath = "generic-data"
    genericData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericData.EntityData.Children = make(map[string]types.YChild)
    genericData.EntityData.Children["timestamp"] = types.YChild{"Timestamp", &genericData.Timestamp}
    genericData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(genericData.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData_Timestamp
// Time in UTC relative to Jan 1st, 1970
type Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData_Timestamp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (timestamp *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData_Timestamp) GetEntityData() *types.CommonEntityData {
    timestamp.EntityData.YFilter = timestamp.YFilter
    timestamp.EntityData.YangName = "timestamp"
    timestamp.EntityData.BundleName = "cisco_ios_xr"
    timestamp.EntityData.ParentYangName = "generic-data"
    timestamp.EntityData.SegmentPath = "timestamp"
    timestamp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timestamp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timestamp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timestamp.EntityData.Children = make(map[string]types.YChild)
    timestamp.EntityData.Leafs = make(map[string]types.YLeaf)
    timestamp.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", timestamp.Seconds}
    timestamp.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", timestamp.NanoSeconds}
    return &(timestamp.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger
// Triggers applying to this log entry.
type Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is IsisLspTrigger.
    Entry interface{}
}

func (trigger *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger) GetEntityData() *types.CommonEntityData {
    trigger.EntityData.YFilter = trigger.YFilter
    trigger.EntityData.YangName = "trigger"
    trigger.EntityData.BundleName = "cisco_ios_xr"
    trigger.EntityData.ParentYangName = "log-entry"
    trigger.EntityData.SegmentPath = "trigger"
    trigger.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trigger.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trigger.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trigger.EntityData.Children = make(map[string]types.YChild)
    trigger.EntityData.Leafs = make(map[string]types.YLeaf)
    trigger.EntityData.Leafs["entry"] = types.YLeaf{"Entry", trigger.Entry}
    return &(trigger.EntityData)
}

// Isis_Instances_Instance_Levels_Level_DatabaseLog
// Database-log for a single level
type Isis_Instances_Instance_Levels_Level_DatabaseLog struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entries. The type is slice of
    // Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry.
    LogEntry []Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry
}

func (databaseLog *Isis_Instances_Instance_Levels_Level_DatabaseLog) GetEntityData() *types.CommonEntityData {
    databaseLog.EntityData.YFilter = databaseLog.YFilter
    databaseLog.EntityData.YangName = "database-log"
    databaseLog.EntityData.BundleName = "cisco_ios_xr"
    databaseLog.EntityData.ParentYangName = "level"
    databaseLog.EntityData.SegmentPath = "database-log"
    databaseLog.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseLog.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseLog.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseLog.EntityData.Children = make(map[string]types.YChild)
    databaseLog.EntityData.Children["log-entry"] = types.YChild{"LogEntry", nil}
    for i := range databaseLog.LogEntry {
        databaseLog.EntityData.Children[types.GetSegmentPath(&databaseLog.LogEntry[i])] = types.YChild{"LogEntry", &databaseLog.LogEntry[i]}
    }
    databaseLog.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(databaseLog.EntityData)
}

// Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry
// Entries
type Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operation applying to this entry. The type is IsisLspDbOp.
    LspdbOperation interface{}

    // Generic entry data.
    GenericData Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData

    // Entry being inserted or the updated version of an old entry.
    NewLspEntry Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_NewLspEntry

    // Entry being replaced.
    OldLspEntry Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_OldLspEntry
}

func (logEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry) GetEntityData() *types.CommonEntityData {
    logEntry.EntityData.YFilter = logEntry.YFilter
    logEntry.EntityData.YangName = "log-entry"
    logEntry.EntityData.BundleName = "cisco_ios_xr"
    logEntry.EntityData.ParentYangName = "database-log"
    logEntry.EntityData.SegmentPath = "log-entry"
    logEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    logEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    logEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    logEntry.EntityData.Children = make(map[string]types.YChild)
    logEntry.EntityData.Children["generic-data"] = types.YChild{"GenericData", &logEntry.GenericData}
    logEntry.EntityData.Children["new-lsp-entry"] = types.YChild{"NewLspEntry", &logEntry.NewLspEntry}
    logEntry.EntityData.Children["old-lsp-entry"] = types.YChild{"OldLspEntry", &logEntry.OldLspEntry}
    logEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    logEntry.EntityData.Leafs["lspdb-operation"] = types.YLeaf{"LspdbOperation", logEntry.LspdbOperation}
    return &(logEntry.EntityData)
}

// Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData
// Generic entry data
type Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in UTC relative to Jan 1st, 1970.
    Timestamp Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData_Timestamp
}

func (genericData *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData) GetEntityData() *types.CommonEntityData {
    genericData.EntityData.YFilter = genericData.YFilter
    genericData.EntityData.YangName = "generic-data"
    genericData.EntityData.BundleName = "cisco_ios_xr"
    genericData.EntityData.ParentYangName = "log-entry"
    genericData.EntityData.SegmentPath = "generic-data"
    genericData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericData.EntityData.Children = make(map[string]types.YChild)
    genericData.EntityData.Children["timestamp"] = types.YChild{"Timestamp", &genericData.Timestamp}
    genericData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(genericData.EntityData)
}

// Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData_Timestamp
// Time in UTC relative to Jan 1st, 1970
type Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData_Timestamp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (timestamp *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData_Timestamp) GetEntityData() *types.CommonEntityData {
    timestamp.EntityData.YFilter = timestamp.YFilter
    timestamp.EntityData.YangName = "timestamp"
    timestamp.EntityData.BundleName = "cisco_ios_xr"
    timestamp.EntityData.ParentYangName = "generic-data"
    timestamp.EntityData.SegmentPath = "timestamp"
    timestamp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timestamp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timestamp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timestamp.EntityData.Children = make(map[string]types.YChild)
    timestamp.EntityData.Leafs = make(map[string]types.YLeaf)
    timestamp.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", timestamp.Seconds}
    timestamp.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", timestamp.NanoSeconds}
    return &(timestamp.EntityData)
}

// Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_NewLspEntry
// Entry being inserted or the updated version of
// an old entry.
type Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_NewLspEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LSP ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}\\-[a-fA-F0-9]{2}'.
    LspId interface{}

    // TRUE if this is a locally generated LSP. The type is bool.
    LocalLspFlag interface{}

    // TRUE if this LSP has not expired. The type is bool.
    LspActiveFlag interface{}

    // Time, in seconds, until LSP expiry (if active) or deletion (if expired) .
    // The type is interface{} with range: 0..65535. Units are second.
    LspHoldtime interface{}

    // The LSP sequence number. The type is interface{} with range: 0..4294967295.
    LspSequenceNumber interface{}

    // The LSP checksum. The type is interface{} with range: 0..65535.
    LspChecksum interface{}

    // TRUE if partition repair is supported. The type is bool.
    LspPartitionRepairSupportedFlag interface{}

    // TRUE if attached bit is set. The type is bool.
    LspAttachedFlag interface{}

    // TRUE if the overload bit is set. The type is bool.
    LspOverloadedFlag interface{}

    // TRUE if the LSP is non-v1a, XXX for testing. The type is interface{} with
    // range: 0..65535.
    LspNonv1AFlag interface{}

    // The type of the IS sourcing the LSP. The type is IsisLevels.
    LspLevel interface{}

    // The total length of the LSP. The type is interface{} with range: 0..65535.
    LspLength interface{}

    // max area addresses. The type is interface{} with range: 0..255.
    MaxAreaAddresses interface{}

    // System Id length. The type is interface{} with range: 0..255.
    IdLength interface{}

    // isis version. The type is interface{} with range: 0..255.
    Version interface{}

    // isis version2. The type is interface{} with range: 0..255.
    Version2 interface{}
}

func (newLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_NewLspEntry) GetEntityData() *types.CommonEntityData {
    newLspEntry.EntityData.YFilter = newLspEntry.YFilter
    newLspEntry.EntityData.YangName = "new-lsp-entry"
    newLspEntry.EntityData.BundleName = "cisco_ios_xr"
    newLspEntry.EntityData.ParentYangName = "log-entry"
    newLspEntry.EntityData.SegmentPath = "new-lsp-entry"
    newLspEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newLspEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newLspEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newLspEntry.EntityData.Children = make(map[string]types.YChild)
    newLspEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    newLspEntry.EntityData.Leafs["lsp-id"] = types.YLeaf{"LspId", newLspEntry.LspId}
    newLspEntry.EntityData.Leafs["local-lsp-flag"] = types.YLeaf{"LocalLspFlag", newLspEntry.LocalLspFlag}
    newLspEntry.EntityData.Leafs["lsp-active-flag"] = types.YLeaf{"LspActiveFlag", newLspEntry.LspActiveFlag}
    newLspEntry.EntityData.Leafs["lsp-holdtime"] = types.YLeaf{"LspHoldtime", newLspEntry.LspHoldtime}
    newLspEntry.EntityData.Leafs["lsp-sequence-number"] = types.YLeaf{"LspSequenceNumber", newLspEntry.LspSequenceNumber}
    newLspEntry.EntityData.Leafs["lsp-checksum"] = types.YLeaf{"LspChecksum", newLspEntry.LspChecksum}
    newLspEntry.EntityData.Leafs["lsp-partition-repair-supported-flag"] = types.YLeaf{"LspPartitionRepairSupportedFlag", newLspEntry.LspPartitionRepairSupportedFlag}
    newLspEntry.EntityData.Leafs["lsp-attached-flag"] = types.YLeaf{"LspAttachedFlag", newLspEntry.LspAttachedFlag}
    newLspEntry.EntityData.Leafs["lsp-overloaded-flag"] = types.YLeaf{"LspOverloadedFlag", newLspEntry.LspOverloadedFlag}
    newLspEntry.EntityData.Leafs["lsp-nonv1a-flag"] = types.YLeaf{"LspNonv1AFlag", newLspEntry.LspNonv1AFlag}
    newLspEntry.EntityData.Leafs["lsp-level"] = types.YLeaf{"LspLevel", newLspEntry.LspLevel}
    newLspEntry.EntityData.Leafs["lsp-length"] = types.YLeaf{"LspLength", newLspEntry.LspLength}
    newLspEntry.EntityData.Leafs["max-area-addresses"] = types.YLeaf{"MaxAreaAddresses", newLspEntry.MaxAreaAddresses}
    newLspEntry.EntityData.Leafs["id-length"] = types.YLeaf{"IdLength", newLspEntry.IdLength}
    newLspEntry.EntityData.Leafs["version"] = types.YLeaf{"Version", newLspEntry.Version}
    newLspEntry.EntityData.Leafs["version2"] = types.YLeaf{"Version2", newLspEntry.Version2}
    return &(newLspEntry.EntityData)
}

// Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_OldLspEntry
// Entry being replaced.
type Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_OldLspEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LSP ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}\\-[a-fA-F0-9]{2}'.
    LspId interface{}

    // TRUE if this is a locally generated LSP. The type is bool.
    LocalLspFlag interface{}

    // TRUE if this LSP has not expired. The type is bool.
    LspActiveFlag interface{}

    // Time, in seconds, until LSP expiry (if active) or deletion (if expired) .
    // The type is interface{} with range: 0..65535. Units are second.
    LspHoldtime interface{}

    // The LSP sequence number. The type is interface{} with range: 0..4294967295.
    LspSequenceNumber interface{}

    // The LSP checksum. The type is interface{} with range: 0..65535.
    LspChecksum interface{}

    // TRUE if partition repair is supported. The type is bool.
    LspPartitionRepairSupportedFlag interface{}

    // TRUE if attached bit is set. The type is bool.
    LspAttachedFlag interface{}

    // TRUE if the overload bit is set. The type is bool.
    LspOverloadedFlag interface{}

    // TRUE if the LSP is non-v1a, XXX for testing. The type is interface{} with
    // range: 0..65535.
    LspNonv1AFlag interface{}

    // The type of the IS sourcing the LSP. The type is IsisLevels.
    LspLevel interface{}

    // The total length of the LSP. The type is interface{} with range: 0..65535.
    LspLength interface{}

    // max area addresses. The type is interface{} with range: 0..255.
    MaxAreaAddresses interface{}

    // System Id length. The type is interface{} with range: 0..255.
    IdLength interface{}

    // isis version. The type is interface{} with range: 0..255.
    Version interface{}

    // isis version2. The type is interface{} with range: 0..255.
    Version2 interface{}
}

func (oldLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_OldLspEntry) GetEntityData() *types.CommonEntityData {
    oldLspEntry.EntityData.YFilter = oldLspEntry.YFilter
    oldLspEntry.EntityData.YangName = "old-lsp-entry"
    oldLspEntry.EntityData.BundleName = "cisco_ios_xr"
    oldLspEntry.EntityData.ParentYangName = "log-entry"
    oldLspEntry.EntityData.SegmentPath = "old-lsp-entry"
    oldLspEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oldLspEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oldLspEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oldLspEntry.EntityData.Children = make(map[string]types.YChild)
    oldLspEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    oldLspEntry.EntityData.Leafs["lsp-id"] = types.YLeaf{"LspId", oldLspEntry.LspId}
    oldLspEntry.EntityData.Leafs["local-lsp-flag"] = types.YLeaf{"LocalLspFlag", oldLspEntry.LocalLspFlag}
    oldLspEntry.EntityData.Leafs["lsp-active-flag"] = types.YLeaf{"LspActiveFlag", oldLspEntry.LspActiveFlag}
    oldLspEntry.EntityData.Leafs["lsp-holdtime"] = types.YLeaf{"LspHoldtime", oldLspEntry.LspHoldtime}
    oldLspEntry.EntityData.Leafs["lsp-sequence-number"] = types.YLeaf{"LspSequenceNumber", oldLspEntry.LspSequenceNumber}
    oldLspEntry.EntityData.Leafs["lsp-checksum"] = types.YLeaf{"LspChecksum", oldLspEntry.LspChecksum}
    oldLspEntry.EntityData.Leafs["lsp-partition-repair-supported-flag"] = types.YLeaf{"LspPartitionRepairSupportedFlag", oldLspEntry.LspPartitionRepairSupportedFlag}
    oldLspEntry.EntityData.Leafs["lsp-attached-flag"] = types.YLeaf{"LspAttachedFlag", oldLspEntry.LspAttachedFlag}
    oldLspEntry.EntityData.Leafs["lsp-overloaded-flag"] = types.YLeaf{"LspOverloadedFlag", oldLspEntry.LspOverloadedFlag}
    oldLspEntry.EntityData.Leafs["lsp-nonv1a-flag"] = types.YLeaf{"LspNonv1AFlag", oldLspEntry.LspNonv1AFlag}
    oldLspEntry.EntityData.Leafs["lsp-level"] = types.YLeaf{"LspLevel", oldLspEntry.LspLevel}
    oldLspEntry.EntityData.Leafs["lsp-length"] = types.YLeaf{"LspLength", oldLspEntry.LspLength}
    oldLspEntry.EntityData.Leafs["max-area-addresses"] = types.YLeaf{"MaxAreaAddresses", oldLspEntry.MaxAreaAddresses}
    oldLspEntry.EntityData.Leafs["id-length"] = types.YLeaf{"IdLength", oldLspEntry.IdLength}
    oldLspEntry.EntityData.Leafs["version"] = types.YLeaf{"Version", oldLspEntry.Version}
    oldLspEntry.EntityData.Leafs["version2"] = types.YLeaf{"Version2", oldLspEntry.Version2}
    return &(oldLspEntry.EntityData)
}

// Isis_Instances_Instance_Topologies
// Topology table
type Isis_Instances_Instance_Topologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Per-topology data. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology.
    Topology []Isis_Instances_Instance_Topologies_Topology
}

func (topologies *Isis_Instances_Instance_Topologies) GetEntityData() *types.CommonEntityData {
    topologies.EntityData.YFilter = topologies.YFilter
    topologies.EntityData.YangName = "topologies"
    topologies.EntityData.BundleName = "cisco_ios_xr"
    topologies.EntityData.ParentYangName = "instance"
    topologies.EntityData.SegmentPath = "topologies"
    topologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topologies.EntityData.Children = make(map[string]types.YChild)
    topologies.EntityData.Children["topology"] = types.YChild{"Topology", nil}
    for i := range topologies.Topology {
        topologies.EntityData.Children[types.GetSegmentPath(&topologies.Topology[i])] = types.YChild{"Topology", &topologies.Topology[i]}
    }
    topologies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(topologies.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology
// Per-topology data
type Isis_Instances_Instance_Topologies_Topology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is IsisAddressFamily.
    AfName interface{}

    // Sub address family. The type is IsisSubAddressFamily.
    SafName interface{}

    // Topology Name. The type is string with length: 1..32.
    TopologyName interface{}

    // FRR summary information for a particular IS-IS topology.
    FrrSummary Isis_Instances_Instance_Topologies_Topology_FrrSummary

    // Per-topology level table.
    TopologyLevels Isis_Instances_Instance_Topologies_Topology_TopologyLevels

    // IPv6 local route.
    Ipv6Routes Isis_Instances_Instance_Topologies_Topology_Ipv6Routes

    // IPv6 FRR table.
    Ipv6FrrBackups Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups

    // IPv4 FRR table.
    Ipv4FrrBackups Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups

    // IPv4 local route table.
    Ipv4Routes Isis_Instances_Instance_Topologies_Topology_Ipv4Routes
}

func (topology *Isis_Instances_Instance_Topologies_Topology) GetEntityData() *types.CommonEntityData {
    topology.EntityData.YFilter = topology.YFilter
    topology.EntityData.YangName = "topology"
    topology.EntityData.BundleName = "cisco_ios_xr"
    topology.EntityData.ParentYangName = "topologies"
    topology.EntityData.SegmentPath = "topology"
    topology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topology.EntityData.Children = make(map[string]types.YChild)
    topology.EntityData.Children["frr-summary"] = types.YChild{"FrrSummary", &topology.FrrSummary}
    topology.EntityData.Children["topology-levels"] = types.YChild{"TopologyLevels", &topology.TopologyLevels}
    topology.EntityData.Children["ipv6-routes"] = types.YChild{"Ipv6Routes", &topology.Ipv6Routes}
    topology.EntityData.Children["ipv6frr-backups"] = types.YChild{"Ipv6FrrBackups", &topology.Ipv6FrrBackups}
    topology.EntityData.Children["ipv4frr-backups"] = types.YChild{"Ipv4FrrBackups", &topology.Ipv4FrrBackups}
    topology.EntityData.Children["ipv4-routes"] = types.YChild{"Ipv4Routes", &topology.Ipv4Routes}
    topology.EntityData.Leafs = make(map[string]types.YLeaf)
    topology.EntityData.Leafs["af-name"] = types.YLeaf{"AfName", topology.AfName}
    topology.EntityData.Leafs["saf-name"] = types.YLeaf{"SafName", topology.SafName}
    topology.EntityData.Leafs["topology-name"] = types.YLeaf{"TopologyName", topology.TopologyName}
    return &(topology.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_FrrSummary
// FRR summary information for a particular
// IS-IS topology
type Isis_Instances_Instance_Topologies_Topology_FrrSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FRR summary for prefixes reachable in L1.
    Level1Prefixes Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes

    // FRR summary for prefixes reachable in L2.
    Level2Prefixes Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes

    // Unreachable prefixes.
    UnreachablePrefixes Isis_Instances_Instance_Topologies_Topology_FrrSummary_UnreachablePrefixes
}

func (frrSummary *Isis_Instances_Instance_Topologies_Topology_FrrSummary) GetEntityData() *types.CommonEntityData {
    frrSummary.EntityData.YFilter = frrSummary.YFilter
    frrSummary.EntityData.YangName = "frr-summary"
    frrSummary.EntityData.BundleName = "cisco_ios_xr"
    frrSummary.EntityData.ParentYangName = "topology"
    frrSummary.EntityData.SegmentPath = "frr-summary"
    frrSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrSummary.EntityData.Children = make(map[string]types.YChild)
    frrSummary.EntityData.Children["level1-prefixes"] = types.YChild{"Level1Prefixes", &frrSummary.Level1Prefixes}
    frrSummary.EntityData.Children["level2-prefixes"] = types.YChild{"Level2Prefixes", &frrSummary.Level2Prefixes}
    frrSummary.EntityData.Children["unreachable-prefixes"] = types.YChild{"UnreachablePrefixes", &frrSummary.UnreachablePrefixes}
    frrSummary.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(frrSummary.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes
// FRR summary for prefixes reachable in L1
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of prefixes with all paths having FRR backup.
    AllPathsProtected Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_AllPathsProtected

    // Number of prefixes with some paths having FRR backup.
    SomePathsProtected Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_SomePathsProtected

    // Number of reachable prefixes without FRR backup.
    Unprotected Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_Unprotected
}

func (level1Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes) GetEntityData() *types.CommonEntityData {
    level1Prefixes.EntityData.YFilter = level1Prefixes.YFilter
    level1Prefixes.EntityData.YangName = "level1-prefixes"
    level1Prefixes.EntityData.BundleName = "cisco_ios_xr"
    level1Prefixes.EntityData.ParentYangName = "frr-summary"
    level1Prefixes.EntityData.SegmentPath = "level1-prefixes"
    level1Prefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    level1Prefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    level1Prefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    level1Prefixes.EntityData.Children = make(map[string]types.YChild)
    level1Prefixes.EntityData.Children["all-paths-protected"] = types.YChild{"AllPathsProtected", &level1Prefixes.AllPathsProtected}
    level1Prefixes.EntityData.Children["some-paths-protected"] = types.YChild{"SomePathsProtected", &level1Prefixes.SomePathsProtected}
    level1Prefixes.EntityData.Children["unprotected"] = types.YChild{"Unprotected", &level1Prefixes.Unprotected}
    level1Prefixes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(level1Prefixes.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_AllPathsProtected
// Number of prefixes with all paths having FRR
// backup
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_AllPathsProtected struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_AllPathsProtected) GetEntityData() *types.CommonEntityData {
    allPathsProtected.EntityData.YFilter = allPathsProtected.YFilter
    allPathsProtected.EntityData.YangName = "all-paths-protected"
    allPathsProtected.EntityData.BundleName = "cisco_ios_xr"
    allPathsProtected.EntityData.ParentYangName = "level1-prefixes"
    allPathsProtected.EntityData.SegmentPath = "all-paths-protected"
    allPathsProtected.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allPathsProtected.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allPathsProtected.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allPathsProtected.EntityData.Children = make(map[string]types.YChild)
    allPathsProtected.EntityData.Leafs = make(map[string]types.YLeaf)
    allPathsProtected.EntityData.Leafs["critical"] = types.YLeaf{"Critical", allPathsProtected.Critical}
    allPathsProtected.EntityData.Leafs["high"] = types.YLeaf{"High", allPathsProtected.High}
    allPathsProtected.EntityData.Leafs["medium"] = types.YLeaf{"Medium", allPathsProtected.Medium}
    allPathsProtected.EntityData.Leafs["low"] = types.YLeaf{"Low", allPathsProtected.Low}
    return &(allPathsProtected.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_SomePathsProtected
// Number of prefixes with some paths having FRR
// backup
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_SomePathsProtected struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_SomePathsProtected) GetEntityData() *types.CommonEntityData {
    somePathsProtected.EntityData.YFilter = somePathsProtected.YFilter
    somePathsProtected.EntityData.YangName = "some-paths-protected"
    somePathsProtected.EntityData.BundleName = "cisco_ios_xr"
    somePathsProtected.EntityData.ParentYangName = "level1-prefixes"
    somePathsProtected.EntityData.SegmentPath = "some-paths-protected"
    somePathsProtected.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    somePathsProtected.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    somePathsProtected.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    somePathsProtected.EntityData.Children = make(map[string]types.YChild)
    somePathsProtected.EntityData.Leafs = make(map[string]types.YLeaf)
    somePathsProtected.EntityData.Leafs["critical"] = types.YLeaf{"Critical", somePathsProtected.Critical}
    somePathsProtected.EntityData.Leafs["high"] = types.YLeaf{"High", somePathsProtected.High}
    somePathsProtected.EntityData.Leafs["medium"] = types.YLeaf{"Medium", somePathsProtected.Medium}
    somePathsProtected.EntityData.Leafs["low"] = types.YLeaf{"Low", somePathsProtected.Low}
    return &(somePathsProtected.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_Unprotected
// Number of reachable prefixes without FRR backup
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_Unprotected struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_Unprotected) GetEntityData() *types.CommonEntityData {
    unprotected.EntityData.YFilter = unprotected.YFilter
    unprotected.EntityData.YangName = "unprotected"
    unprotected.EntityData.BundleName = "cisco_ios_xr"
    unprotected.EntityData.ParentYangName = "level1-prefixes"
    unprotected.EntityData.SegmentPath = "unprotected"
    unprotected.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unprotected.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unprotected.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unprotected.EntityData.Children = make(map[string]types.YChild)
    unprotected.EntityData.Leafs = make(map[string]types.YLeaf)
    unprotected.EntityData.Leafs["critical"] = types.YLeaf{"Critical", unprotected.Critical}
    unprotected.EntityData.Leafs["high"] = types.YLeaf{"High", unprotected.High}
    unprotected.EntityData.Leafs["medium"] = types.YLeaf{"Medium", unprotected.Medium}
    unprotected.EntityData.Leafs["low"] = types.YLeaf{"Low", unprotected.Low}
    return &(unprotected.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes
// FRR summary for prefixes reachable in L2
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of prefixes with all paths having FRR backup.
    AllPathsProtected Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_AllPathsProtected

    // Number of prefixes with some paths having FRR backup.
    SomePathsProtected Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_SomePathsProtected

    // Number of reachable prefixes without FRR backup.
    Unprotected Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_Unprotected
}

func (level2Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes) GetEntityData() *types.CommonEntityData {
    level2Prefixes.EntityData.YFilter = level2Prefixes.YFilter
    level2Prefixes.EntityData.YangName = "level2-prefixes"
    level2Prefixes.EntityData.BundleName = "cisco_ios_xr"
    level2Prefixes.EntityData.ParentYangName = "frr-summary"
    level2Prefixes.EntityData.SegmentPath = "level2-prefixes"
    level2Prefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    level2Prefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    level2Prefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    level2Prefixes.EntityData.Children = make(map[string]types.YChild)
    level2Prefixes.EntityData.Children["all-paths-protected"] = types.YChild{"AllPathsProtected", &level2Prefixes.AllPathsProtected}
    level2Prefixes.EntityData.Children["some-paths-protected"] = types.YChild{"SomePathsProtected", &level2Prefixes.SomePathsProtected}
    level2Prefixes.EntityData.Children["unprotected"] = types.YChild{"Unprotected", &level2Prefixes.Unprotected}
    level2Prefixes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(level2Prefixes.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_AllPathsProtected
// Number of prefixes with all paths having FRR
// backup
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_AllPathsProtected struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_AllPathsProtected) GetEntityData() *types.CommonEntityData {
    allPathsProtected.EntityData.YFilter = allPathsProtected.YFilter
    allPathsProtected.EntityData.YangName = "all-paths-protected"
    allPathsProtected.EntityData.BundleName = "cisco_ios_xr"
    allPathsProtected.EntityData.ParentYangName = "level2-prefixes"
    allPathsProtected.EntityData.SegmentPath = "all-paths-protected"
    allPathsProtected.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allPathsProtected.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allPathsProtected.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allPathsProtected.EntityData.Children = make(map[string]types.YChild)
    allPathsProtected.EntityData.Leafs = make(map[string]types.YLeaf)
    allPathsProtected.EntityData.Leafs["critical"] = types.YLeaf{"Critical", allPathsProtected.Critical}
    allPathsProtected.EntityData.Leafs["high"] = types.YLeaf{"High", allPathsProtected.High}
    allPathsProtected.EntityData.Leafs["medium"] = types.YLeaf{"Medium", allPathsProtected.Medium}
    allPathsProtected.EntityData.Leafs["low"] = types.YLeaf{"Low", allPathsProtected.Low}
    return &(allPathsProtected.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_SomePathsProtected
// Number of prefixes with some paths having FRR
// backup
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_SomePathsProtected struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_SomePathsProtected) GetEntityData() *types.CommonEntityData {
    somePathsProtected.EntityData.YFilter = somePathsProtected.YFilter
    somePathsProtected.EntityData.YangName = "some-paths-protected"
    somePathsProtected.EntityData.BundleName = "cisco_ios_xr"
    somePathsProtected.EntityData.ParentYangName = "level2-prefixes"
    somePathsProtected.EntityData.SegmentPath = "some-paths-protected"
    somePathsProtected.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    somePathsProtected.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    somePathsProtected.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    somePathsProtected.EntityData.Children = make(map[string]types.YChild)
    somePathsProtected.EntityData.Leafs = make(map[string]types.YLeaf)
    somePathsProtected.EntityData.Leafs["critical"] = types.YLeaf{"Critical", somePathsProtected.Critical}
    somePathsProtected.EntityData.Leafs["high"] = types.YLeaf{"High", somePathsProtected.High}
    somePathsProtected.EntityData.Leafs["medium"] = types.YLeaf{"Medium", somePathsProtected.Medium}
    somePathsProtected.EntityData.Leafs["low"] = types.YLeaf{"Low", somePathsProtected.Low}
    return &(somePathsProtected.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_Unprotected
// Number of reachable prefixes without FRR backup
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_Unprotected struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_Unprotected) GetEntityData() *types.CommonEntityData {
    unprotected.EntityData.YFilter = unprotected.YFilter
    unprotected.EntityData.YangName = "unprotected"
    unprotected.EntityData.BundleName = "cisco_ios_xr"
    unprotected.EntityData.ParentYangName = "level2-prefixes"
    unprotected.EntityData.SegmentPath = "unprotected"
    unprotected.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unprotected.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unprotected.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unprotected.EntityData.Children = make(map[string]types.YChild)
    unprotected.EntityData.Leafs = make(map[string]types.YLeaf)
    unprotected.EntityData.Leafs["critical"] = types.YLeaf{"Critical", unprotected.Critical}
    unprotected.EntityData.Leafs["high"] = types.YLeaf{"High", unprotected.High}
    unprotected.EntityData.Leafs["medium"] = types.YLeaf{"Medium", unprotected.Medium}
    unprotected.EntityData.Leafs["low"] = types.YLeaf{"Low", unprotected.Low}
    return &(unprotected.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_UnreachablePrefixes
// Unreachable prefixes
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_UnreachablePrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (unreachablePrefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_UnreachablePrefixes) GetEntityData() *types.CommonEntityData {
    unreachablePrefixes.EntityData.YFilter = unreachablePrefixes.YFilter
    unreachablePrefixes.EntityData.YangName = "unreachable-prefixes"
    unreachablePrefixes.EntityData.BundleName = "cisco_ios_xr"
    unreachablePrefixes.EntityData.ParentYangName = "frr-summary"
    unreachablePrefixes.EntityData.SegmentPath = "unreachable-prefixes"
    unreachablePrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unreachablePrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unreachablePrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unreachablePrefixes.EntityData.Children = make(map[string]types.YChild)
    unreachablePrefixes.EntityData.Leafs = make(map[string]types.YLeaf)
    unreachablePrefixes.EntityData.Leafs["critical"] = types.YLeaf{"Critical", unreachablePrefixes.Critical}
    unreachablePrefixes.EntityData.Leafs["high"] = types.YLeaf{"High", unreachablePrefixes.High}
    unreachablePrefixes.EntityData.Leafs["medium"] = types.YLeaf{"Medium", unreachablePrefixes.Medium}
    unreachablePrefixes.EntityData.Leafs["low"] = types.YLeaf{"Low", unreachablePrefixes.Low}
    return &(unreachablePrefixes.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels
// Per-topology level table
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Per-level topology operational data. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel.
    TopologyLevel []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel
}

func (topologyLevels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels) GetEntityData() *types.CommonEntityData {
    topologyLevels.EntityData.YFilter = topologyLevels.YFilter
    topologyLevels.EntityData.YangName = "topology-levels"
    topologyLevels.EntityData.BundleName = "cisco_ios_xr"
    topologyLevels.EntityData.ParentYangName = "topology"
    topologyLevels.EntityData.SegmentPath = "topology-levels"
    topologyLevels.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topologyLevels.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topologyLevels.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topologyLevels.EntityData.Children = make(map[string]types.YChild)
    topologyLevels.EntityData.Children["topology-level"] = types.YChild{"TopologyLevel", nil}
    for i := range topologyLevels.TopologyLevel {
        topologyLevels.EntityData.Children[types.GetSegmentPath(&topologyLevels.TopologyLevel[i])] = types.YChild{"TopologyLevel", &topologyLevels.TopologyLevel[i]}
    }
    topologyLevels.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(topologyLevels.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel
// Per-level topology operational data
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Level. The type is IsisInternalLevel.
    Level interface{}

    // TE advertisements for a single level and topology. Only available within
    // the IPv4 Unicast topology.
    TeAdvertisements Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements

    // TE adjacency-log for a single level and topology. Only available within the
    // IPv4 Unicast topology.
    TeAdjacencyLog Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog

    // Log of route calculations for a single level and topology.
    SpfLog Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog

    // TE tunnels table. Only available within the IPv4 Unicast topology.
    TeTunnels Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels

    // IPv4 IS Topology table.
    Ipv4LinkTopologies Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies

    // Summary information for a particular IS Topology.
    TopologySummary Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary

    // IPv6 IS Topology table.
    Ipv6LinkTopologies Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies
}

func (topologyLevel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel) GetEntityData() *types.CommonEntityData {
    topologyLevel.EntityData.YFilter = topologyLevel.YFilter
    topologyLevel.EntityData.YangName = "topology-level"
    topologyLevel.EntityData.BundleName = "cisco_ios_xr"
    topologyLevel.EntityData.ParentYangName = "topology-levels"
    topologyLevel.EntityData.SegmentPath = "topology-level" + "[level='" + fmt.Sprintf("%v", topologyLevel.Level) + "']"
    topologyLevel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topologyLevel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topologyLevel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topologyLevel.EntityData.Children = make(map[string]types.YChild)
    topologyLevel.EntityData.Children["te-advertisements"] = types.YChild{"TeAdvertisements", &topologyLevel.TeAdvertisements}
    topologyLevel.EntityData.Children["te-adjacency-log"] = types.YChild{"TeAdjacencyLog", &topologyLevel.TeAdjacencyLog}
    topologyLevel.EntityData.Children["spf-log"] = types.YChild{"SpfLog", &topologyLevel.SpfLog}
    topologyLevel.EntityData.Children["te-tunnels"] = types.YChild{"TeTunnels", &topologyLevel.TeTunnels}
    topologyLevel.EntityData.Children["ipv4-link-topologies"] = types.YChild{"Ipv4LinkTopologies", &topologyLevel.Ipv4LinkTopologies}
    topologyLevel.EntityData.Children["topology-summary"] = types.YChild{"TopologySummary", &topologyLevel.TopologySummary}
    topologyLevel.EntityData.Children["ipv6-link-topologies"] = types.YChild{"Ipv6LinkTopologies", &topologyLevel.Ipv6LinkTopologies}
    topologyLevel.EntityData.Leafs = make(map[string]types.YLeaf)
    topologyLevel.EntityData.Leafs["level"] = types.YLeaf{"Level", topologyLevel.Level}
    return &(topologyLevel.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements
// TE advertisements for a single level and
// topology. Only available within the IPv4
// Unicast topology.
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates whether any TE advertisements are present. The type is bool.
    TeAdvDataPresent interface{}

    // Local system ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    TeSystemId interface{}

    // Local TE router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    TeLocalRouterId interface{}

    // TE PCE advertisements.
    Tepceadv Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_Tepceadv

    // List of TE advertisement entries. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv.
    TeAdv []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv
}

func (teAdvertisements *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements) GetEntityData() *types.CommonEntityData {
    teAdvertisements.EntityData.YFilter = teAdvertisements.YFilter
    teAdvertisements.EntityData.YangName = "te-advertisements"
    teAdvertisements.EntityData.BundleName = "cisco_ios_xr"
    teAdvertisements.EntityData.ParentYangName = "topology-level"
    teAdvertisements.EntityData.SegmentPath = "te-advertisements"
    teAdvertisements.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teAdvertisements.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teAdvertisements.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teAdvertisements.EntityData.Children = make(map[string]types.YChild)
    teAdvertisements.EntityData.Children["tepceadv"] = types.YChild{"Tepceadv", &teAdvertisements.Tepceadv}
    teAdvertisements.EntityData.Children["te-adv"] = types.YChild{"TeAdv", nil}
    for i := range teAdvertisements.TeAdv {
        teAdvertisements.EntityData.Children[types.GetSegmentPath(&teAdvertisements.TeAdv[i])] = types.YChild{"TeAdv", &teAdvertisements.TeAdv[i]}
    }
    teAdvertisements.EntityData.Leafs = make(map[string]types.YLeaf)
    teAdvertisements.EntityData.Leafs["te-adv-data-present"] = types.YLeaf{"TeAdvDataPresent", teAdvertisements.TeAdvDataPresent}
    teAdvertisements.EntityData.Leafs["te-system-id"] = types.YLeaf{"TeSystemId", teAdvertisements.TeSystemId}
    teAdvertisements.EntityData.Leafs["te-local-router-id"] = types.YLeaf{"TeLocalRouterId", teAdvertisements.TeLocalRouterId}
    return &(teAdvertisements.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_Tepceadv
// TE PCE advertisements
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_Tepceadv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates whether any PCE advertisements are present. The type is bool.
    PceAdvDataPresent interface{}

    // Flooding scope for PCE advertisement. The type is IsisShTePceFloodingScope.
    PceFloodingScope interface{}

    // IPv4 PCE address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    PceAddressIpv4 interface{}

    // PCE path scope bits. The type is interface{} with range: 0..255.
    PcePathScopeBits interface{}

    // PCE path scope preferences. The type is interface{} with range: 0..65535.
    PcePathScopePrefs interface{}
}

func (tepceadv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_Tepceadv) GetEntityData() *types.CommonEntityData {
    tepceadv.EntityData.YFilter = tepceadv.YFilter
    tepceadv.EntityData.YangName = "tepceadv"
    tepceadv.EntityData.BundleName = "cisco_ios_xr"
    tepceadv.EntityData.ParentYangName = "te-advertisements"
    tepceadv.EntityData.SegmentPath = "tepceadv"
    tepceadv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tepceadv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tepceadv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tepceadv.EntityData.Children = make(map[string]types.YChild)
    tepceadv.EntityData.Leafs = make(map[string]types.YLeaf)
    tepceadv.EntityData.Leafs["pce-adv-data-present"] = types.YLeaf{"PceAdvDataPresent", tepceadv.PceAdvDataPresent}
    tepceadv.EntityData.Leafs["pce-flooding-scope"] = types.YLeaf{"PceFloodingScope", tepceadv.PceFloodingScope}
    tepceadv.EntityData.Leafs["pce-address-ipv4"] = types.YLeaf{"PceAddressIpv4", tepceadv.PceAddressIpv4}
    tepceadv.EntityData.Leafs["pce-path-scope-bits"] = types.YLeaf{"PcePathScopeBits", tepceadv.PcePathScopeBits}
    tepceadv.EntityData.Leafs["pce-path-scope-prefs"] = types.YLeaf{"PcePathScopePrefs", tepceadv.PcePathScopePrefs}
    return &(tepceadv.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv
// List of TE advertisement entries
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor system ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    TeNeighborSystemId interface{}

    // Link type. The type is IsisShTeLink.
    LinkType interface{}

    // Local IP address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    LocalIpAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    TeNeighborIpAddress interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    TeMetric interface{}

    // Physical link bandwidth. The type is interface{} with range: 0..4294967295.
    TePhysicalLinkBandwidth interface{}

    // Reservable link bandwidth in global pool. The type is interface{} with
    // range: 0..4294967295.
    TeReservedLinkBandwidth interface{}

    // Reservable link bandwidth in subpool. The type is interface{} with range:
    // 0..4294967295.
    TeSubpoolReservedLinkBandwidth interface{}

    // Affinity bits. The type is interface{} with range: 0..4294967295.
    TeAffinity interface{}

    // TE Ext Admin Number. The type is interface{} with range: 0..4294967295.
    TeExtAdminNum interface{}

    // Indicates whether any TE sub TLVs are present. The type is bool.
    TeSubTlvDataPresent interface{}

    // Bandwidth in use in global pool. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth.
    TeTransmittedBandwidth []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth

    // Bandwidth in use in subpool. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth.
    TeSubpoolTransmittedBandwidth []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth

    // TE Extended Admin Group. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub.
    TeExtAdminSub []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub

    // List of TE sub TLVs. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv.
    TeSubTlv []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv
}

func (teAdv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv) GetEntityData() *types.CommonEntityData {
    teAdv.EntityData.YFilter = teAdv.YFilter
    teAdv.EntityData.YangName = "te-adv"
    teAdv.EntityData.BundleName = "cisco_ios_xr"
    teAdv.EntityData.ParentYangName = "te-advertisements"
    teAdv.EntityData.SegmentPath = "te-adv"
    teAdv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teAdv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teAdv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teAdv.EntityData.Children = make(map[string]types.YChild)
    teAdv.EntityData.Children["te-transmitted-bandwidth"] = types.YChild{"TeTransmittedBandwidth", nil}
    for i := range teAdv.TeTransmittedBandwidth {
        teAdv.EntityData.Children[types.GetSegmentPath(&teAdv.TeTransmittedBandwidth[i])] = types.YChild{"TeTransmittedBandwidth", &teAdv.TeTransmittedBandwidth[i]}
    }
    teAdv.EntityData.Children["te-subpool-transmitted-bandwidth"] = types.YChild{"TeSubpoolTransmittedBandwidth", nil}
    for i := range teAdv.TeSubpoolTransmittedBandwidth {
        teAdv.EntityData.Children[types.GetSegmentPath(&teAdv.TeSubpoolTransmittedBandwidth[i])] = types.YChild{"TeSubpoolTransmittedBandwidth", &teAdv.TeSubpoolTransmittedBandwidth[i]}
    }
    teAdv.EntityData.Children["te-ext-admin-sub"] = types.YChild{"TeExtAdminSub", nil}
    for i := range teAdv.TeExtAdminSub {
        teAdv.EntityData.Children[types.GetSegmentPath(&teAdv.TeExtAdminSub[i])] = types.YChild{"TeExtAdminSub", &teAdv.TeExtAdminSub[i]}
    }
    teAdv.EntityData.Children["te-sub-tlv"] = types.YChild{"TeSubTlv", nil}
    for i := range teAdv.TeSubTlv {
        teAdv.EntityData.Children[types.GetSegmentPath(&teAdv.TeSubTlv[i])] = types.YChild{"TeSubTlv", &teAdv.TeSubTlv[i]}
    }
    teAdv.EntityData.Leafs = make(map[string]types.YLeaf)
    teAdv.EntityData.Leafs["te-neighbor-system-id"] = types.YLeaf{"TeNeighborSystemId", teAdv.TeNeighborSystemId}
    teAdv.EntityData.Leafs["link-type"] = types.YLeaf{"LinkType", teAdv.LinkType}
    teAdv.EntityData.Leafs["local-ip-address"] = types.YLeaf{"LocalIpAddress", teAdv.LocalIpAddress}
    teAdv.EntityData.Leafs["te-neighbor-ip-address"] = types.YLeaf{"TeNeighborIpAddress", teAdv.TeNeighborIpAddress}
    teAdv.EntityData.Leafs["te-metric"] = types.YLeaf{"TeMetric", teAdv.TeMetric}
    teAdv.EntityData.Leafs["te-physical-link-bandwidth"] = types.YLeaf{"TePhysicalLinkBandwidth", teAdv.TePhysicalLinkBandwidth}
    teAdv.EntityData.Leafs["te-reserved-link-bandwidth"] = types.YLeaf{"TeReservedLinkBandwidth", teAdv.TeReservedLinkBandwidth}
    teAdv.EntityData.Leafs["te-subpool-reserved-link-bandwidth"] = types.YLeaf{"TeSubpoolReservedLinkBandwidth", teAdv.TeSubpoolReservedLinkBandwidth}
    teAdv.EntityData.Leafs["te-affinity"] = types.YLeaf{"TeAffinity", teAdv.TeAffinity}
    teAdv.EntityData.Leafs["te-ext-admin-num"] = types.YLeaf{"TeExtAdminNum", teAdv.TeExtAdminNum}
    teAdv.EntityData.Leafs["te-sub-tlv-data-present"] = types.YLeaf{"TeSubTlvDataPresent", teAdv.TeSubTlvDataPresent}
    return &(teAdv.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth
// Bandwidth in use in global pool
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (teTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth) GetEntityData() *types.CommonEntityData {
    teTransmittedBandwidth.EntityData.YFilter = teTransmittedBandwidth.YFilter
    teTransmittedBandwidth.EntityData.YangName = "te-transmitted-bandwidth"
    teTransmittedBandwidth.EntityData.BundleName = "cisco_ios_xr"
    teTransmittedBandwidth.EntityData.ParentYangName = "te-adv"
    teTransmittedBandwidth.EntityData.SegmentPath = "te-transmitted-bandwidth"
    teTransmittedBandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teTransmittedBandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teTransmittedBandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teTransmittedBandwidth.EntityData.Children = make(map[string]types.YChild)
    teTransmittedBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    teTransmittedBandwidth.EntityData.Leafs["entry"] = types.YLeaf{"Entry", teTransmittedBandwidth.Entry}
    return &(teTransmittedBandwidth.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth
// Bandwidth in use in subpool
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (teSubpoolTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth) GetEntityData() *types.CommonEntityData {
    teSubpoolTransmittedBandwidth.EntityData.YFilter = teSubpoolTransmittedBandwidth.YFilter
    teSubpoolTransmittedBandwidth.EntityData.YangName = "te-subpool-transmitted-bandwidth"
    teSubpoolTransmittedBandwidth.EntityData.BundleName = "cisco_ios_xr"
    teSubpoolTransmittedBandwidth.EntityData.ParentYangName = "te-adv"
    teSubpoolTransmittedBandwidth.EntityData.SegmentPath = "te-subpool-transmitted-bandwidth"
    teSubpoolTransmittedBandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teSubpoolTransmittedBandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teSubpoolTransmittedBandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teSubpoolTransmittedBandwidth.EntityData.Children = make(map[string]types.YChild)
    teSubpoolTransmittedBandwidth.EntityData.Leafs = make(map[string]types.YLeaf)
    teSubpoolTransmittedBandwidth.EntityData.Leafs["entry"] = types.YLeaf{"Entry", teSubpoolTransmittedBandwidth.Entry}
    return &(teSubpoolTransmittedBandwidth.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub
// TE Extended Admin Group
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (teExtAdminSub *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub) GetEntityData() *types.CommonEntityData {
    teExtAdminSub.EntityData.YFilter = teExtAdminSub.YFilter
    teExtAdminSub.EntityData.YangName = "te-ext-admin-sub"
    teExtAdminSub.EntityData.BundleName = "cisco_ios_xr"
    teExtAdminSub.EntityData.ParentYangName = "te-adv"
    teExtAdminSub.EntityData.SegmentPath = "te-ext-admin-sub"
    teExtAdminSub.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teExtAdminSub.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teExtAdminSub.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teExtAdminSub.EntityData.Children = make(map[string]types.YChild)
    teExtAdminSub.EntityData.Leafs = make(map[string]types.YLeaf)
    teExtAdminSub.EntityData.Leafs["entry"] = types.YLeaf{"Entry", teExtAdminSub.Entry}
    return &(teExtAdminSub.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv
// List of TE sub TLVs
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of sub TLV. The type is interface{} with range: 0..65535.
    TeSubTlvType interface{}

    // Length of sub TLV. The type is interface{} with range: 0..65535.
    TeSubTlvLength interface{}

    // Value of sub TLV. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    TeSubTlvValue interface{}
}

func (teSubTlv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv) GetEntityData() *types.CommonEntityData {
    teSubTlv.EntityData.YFilter = teSubTlv.YFilter
    teSubTlv.EntityData.YangName = "te-sub-tlv"
    teSubTlv.EntityData.BundleName = "cisco_ios_xr"
    teSubTlv.EntityData.ParentYangName = "te-adv"
    teSubTlv.EntityData.SegmentPath = "te-sub-tlv"
    teSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teSubTlv.EntityData.Children = make(map[string]types.YChild)
    teSubTlv.EntityData.Leafs = make(map[string]types.YLeaf)
    teSubTlv.EntityData.Leafs["te-sub-tlv-type"] = types.YLeaf{"TeSubTlvType", teSubTlv.TeSubTlvType}
    teSubTlv.EntityData.Leafs["te-sub-tlv-length"] = types.YLeaf{"TeSubTlvLength", teSubTlv.TeSubTlvLength}
    teSubTlv.EntityData.Leafs["te-sub-tlv-value"] = types.YLeaf{"TeSubTlvValue", teSubTlv.TeSubTlvValue}
    return &(teSubTlv.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog
// TE adjacency-log for a single level and
// topology. Only available within the IPv4
// Unicast topology.
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Log entries. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry.
    LogEntry []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry
}

func (teAdjacencyLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog) GetEntityData() *types.CommonEntityData {
    teAdjacencyLog.EntityData.YFilter = teAdjacencyLog.YFilter
    teAdjacencyLog.EntityData.YangName = "te-adjacency-log"
    teAdjacencyLog.EntityData.BundleName = "cisco_ios_xr"
    teAdjacencyLog.EntityData.ParentYangName = "topology-level"
    teAdjacencyLog.EntityData.SegmentPath = "te-adjacency-log"
    teAdjacencyLog.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teAdjacencyLog.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teAdjacencyLog.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teAdjacencyLog.EntityData.Children = make(map[string]types.YChild)
    teAdjacencyLog.EntityData.Children["log-entry"] = types.YChild{"LogEntry", nil}
    for i := range teAdjacencyLog.LogEntry {
        teAdjacencyLog.EntityData.Children[types.GetSegmentPath(&teAdjacencyLog.LogEntry[i])] = types.YChild{"LogEntry", &teAdjacencyLog.LogEntry[i]}
    }
    teAdjacencyLog.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(teAdjacencyLog.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry
// Log entries
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor ip address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborIpAddress interface{}

    // Up (TRUE) or down. The type is bool.
    Status interface{}

    // Interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    LogInterface interface{}

    // Neighbor system ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    TeLogNeighborSystemId interface{}

    // Generic entry data.
    GenericData Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData
}

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry) GetEntityData() *types.CommonEntityData {
    logEntry.EntityData.YFilter = logEntry.YFilter
    logEntry.EntityData.YangName = "log-entry"
    logEntry.EntityData.BundleName = "cisco_ios_xr"
    logEntry.EntityData.ParentYangName = "te-adjacency-log"
    logEntry.EntityData.SegmentPath = "log-entry"
    logEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    logEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    logEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    logEntry.EntityData.Children = make(map[string]types.YChild)
    logEntry.EntityData.Children["generic-data"] = types.YChild{"GenericData", &logEntry.GenericData}
    logEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    logEntry.EntityData.Leafs["neighbor-ip-address"] = types.YLeaf{"NeighborIpAddress", logEntry.NeighborIpAddress}
    logEntry.EntityData.Leafs["status"] = types.YLeaf{"Status", logEntry.Status}
    logEntry.EntityData.Leafs["log-interface"] = types.YLeaf{"LogInterface", logEntry.LogInterface}
    logEntry.EntityData.Leafs["te-log-neighbor-system-id"] = types.YLeaf{"TeLogNeighborSystemId", logEntry.TeLogNeighborSystemId}
    return &(logEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData
// Generic entry data
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in UTC relative to Jan 1st, 1970.
    Timestamp Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData_Timestamp
}

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData) GetEntityData() *types.CommonEntityData {
    genericData.EntityData.YFilter = genericData.YFilter
    genericData.EntityData.YangName = "generic-data"
    genericData.EntityData.BundleName = "cisco_ios_xr"
    genericData.EntityData.ParentYangName = "log-entry"
    genericData.EntityData.SegmentPath = "generic-data"
    genericData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericData.EntityData.Children = make(map[string]types.YChild)
    genericData.EntityData.Children["timestamp"] = types.YChild{"Timestamp", &genericData.Timestamp}
    genericData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(genericData.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData_Timestamp
// Time in UTC relative to Jan 1st, 1970
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData_Timestamp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData_Timestamp) GetEntityData() *types.CommonEntityData {
    timestamp.EntityData.YFilter = timestamp.YFilter
    timestamp.EntityData.YangName = "timestamp"
    timestamp.EntityData.BundleName = "cisco_ios_xr"
    timestamp.EntityData.ParentYangName = "generic-data"
    timestamp.EntityData.SegmentPath = "timestamp"
    timestamp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timestamp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timestamp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timestamp.EntityData.Children = make(map[string]types.YChild)
    timestamp.EntityData.Leafs = make(map[string]types.YLeaf)
    timestamp.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", timestamp.Seconds}
    timestamp.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", timestamp.NanoSeconds}
    return &(timestamp.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog
// Log of route calculations for a single
// level and topology
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SPF Log entries. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry.
    LogEntry []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry
}

func (spfLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog) GetEntityData() *types.CommonEntityData {
    spfLog.EntityData.YFilter = spfLog.YFilter
    spfLog.EntityData.YangName = "spf-log"
    spfLog.EntityData.BundleName = "cisco_ios_xr"
    spfLog.EntityData.ParentYangName = "topology-level"
    spfLog.EntityData.SegmentPath = "spf-log"
    spfLog.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spfLog.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spfLog.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spfLog.EntityData.Children = make(map[string]types.YChild)
    spfLog.EntityData.Children["log-entry"] = types.YChild{"LogEntry", nil}
    for i := range spfLog.LogEntry {
        spfLog.EntityData.Children[types.GetSegmentPath(&spfLog.LogEntry[i])] = types.YChild{"LogEntry", &spfLog.LogEntry[i]}
    }
    spfLog.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(spfLog.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry
// SPF Log entries
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of calculation. The type is IsisSpfClass.
    Class interface{}

    // Time between the first trigger and the start of the route calculation, in
    // milliseconds. The type is interface{} with range: 0..4294967295. Units are
    // millisecond.
    WaitEnforced interface{}

    // Minimum time from end of this route calculation until the start of the
    // next, in milliseconds. The type is interface{} with range: 0..4294967295.
    // Units are millisecond.
    NextWaitInterval interface{}

    // Number of LSPs which arrived during the route calculation. The type is
    // interface{} with range: 0..4294967295.
    UpdatedLspCount interface{}

    // Generic entry data.
    GenericData Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData

    // Trigger information.
    Triggers Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers

    // Statistics for the SPT calculation phase.
    SptCalculationStatistics Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics

    // Statistics for the route update phase.
    RouteUpdateStatistics Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics
}

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry) GetEntityData() *types.CommonEntityData {
    logEntry.EntityData.YFilter = logEntry.YFilter
    logEntry.EntityData.YangName = "log-entry"
    logEntry.EntityData.BundleName = "cisco_ios_xr"
    logEntry.EntityData.ParentYangName = "spf-log"
    logEntry.EntityData.SegmentPath = "log-entry"
    logEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    logEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    logEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    logEntry.EntityData.Children = make(map[string]types.YChild)
    logEntry.EntityData.Children["generic-data"] = types.YChild{"GenericData", &logEntry.GenericData}
    logEntry.EntityData.Children["triggers"] = types.YChild{"Triggers", &logEntry.Triggers}
    logEntry.EntityData.Children["spt-calculation-statistics"] = types.YChild{"SptCalculationStatistics", &logEntry.SptCalculationStatistics}
    logEntry.EntityData.Children["route-update-statistics"] = types.YChild{"RouteUpdateStatistics", &logEntry.RouteUpdateStatistics}
    logEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    logEntry.EntityData.Leafs["class"] = types.YLeaf{"Class", logEntry.Class}
    logEntry.EntityData.Leafs["wait-enforced"] = types.YLeaf{"WaitEnforced", logEntry.WaitEnforced}
    logEntry.EntityData.Leafs["next-wait-interval"] = types.YLeaf{"NextWaitInterval", logEntry.NextWaitInterval}
    logEntry.EntityData.Leafs["updated-lsp-count"] = types.YLeaf{"UpdatedLspCount", logEntry.UpdatedLspCount}
    return &(logEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData
// Generic entry data.
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in UTC relative to Jan 1st, 1970.
    Timestamp Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData_Timestamp
}

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData) GetEntityData() *types.CommonEntityData {
    genericData.EntityData.YFilter = genericData.YFilter
    genericData.EntityData.YangName = "generic-data"
    genericData.EntityData.BundleName = "cisco_ios_xr"
    genericData.EntityData.ParentYangName = "log-entry"
    genericData.EntityData.SegmentPath = "generic-data"
    genericData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericData.EntityData.Children = make(map[string]types.YChild)
    genericData.EntityData.Children["timestamp"] = types.YChild{"Timestamp", &genericData.Timestamp}
    genericData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(genericData.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData_Timestamp
// Time in UTC relative to Jan 1st, 1970
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData_Timestamp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData_Timestamp) GetEntityData() *types.CommonEntityData {
    timestamp.EntityData.YFilter = timestamp.YFilter
    timestamp.EntityData.YangName = "timestamp"
    timestamp.EntityData.BundleName = "cisco_ios_xr"
    timestamp.EntityData.ParentYangName = "generic-data"
    timestamp.EntityData.SegmentPath = "timestamp"
    timestamp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timestamp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timestamp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timestamp.EntityData.Children = make(map[string]types.YChild)
    timestamp.EntityData.Leafs = make(map[string]types.YLeaf)
    timestamp.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", timestamp.Seconds}
    timestamp.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", timestamp.NanoSeconds}
    return &(timestamp.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers
// Trigger information
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of unique triggers on this run. The type is interface{} with range:
    // 0..4294967295.
    UniqueTriggerCount interface{}

    // ID of the first LSP to trigger the calculation, if any. The type is string
    // with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}\\-[a-fA-F0-9]{2}'.
    FirstTriggerLspId interface{}

    // ID of a changed link in the first trigger LSP, if any. The type is string
    // with pattern: b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}'.
    TriggerLink interface{}

    // ID of a changed next hop, if any. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    TriggerNextHopId interface{}

    // Is this SR micro loop calculation?. The type is bool.
    IsSrUloopCalculation interface{}

    // Is this SR micro loop calculation for link down?. The type is bool.
    IsSrUloopLinkDown interface{}

    // ID of a changed prefix in the first trigger LSP, if any.
    TriggerPrefix Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix

    // Triggers applying to this log entry. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger.
    Trigger []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger
}

func (triggers *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers) GetEntityData() *types.CommonEntityData {
    triggers.EntityData.YFilter = triggers.YFilter
    triggers.EntityData.YangName = "triggers"
    triggers.EntityData.BundleName = "cisco_ios_xr"
    triggers.EntityData.ParentYangName = "log-entry"
    triggers.EntityData.SegmentPath = "triggers"
    triggers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    triggers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    triggers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    triggers.EntityData.Children = make(map[string]types.YChild)
    triggers.EntityData.Children["trigger-prefix"] = types.YChild{"TriggerPrefix", &triggers.TriggerPrefix}
    triggers.EntityData.Children["trigger"] = types.YChild{"Trigger", nil}
    for i := range triggers.Trigger {
        triggers.EntityData.Children[types.GetSegmentPath(&triggers.Trigger[i])] = types.YChild{"Trigger", &triggers.Trigger[i]}
    }
    triggers.EntityData.Leafs = make(map[string]types.YLeaf)
    triggers.EntityData.Leafs["unique-trigger-count"] = types.YLeaf{"UniqueTriggerCount", triggers.UniqueTriggerCount}
    triggers.EntityData.Leafs["first-trigger-lsp-id"] = types.YLeaf{"FirstTriggerLspId", triggers.FirstTriggerLspId}
    triggers.EntityData.Leafs["trigger-link"] = types.YLeaf{"TriggerLink", triggers.TriggerLink}
    triggers.EntityData.Leafs["trigger-next-hop-id"] = types.YLeaf{"TriggerNextHopId", triggers.TriggerNextHopId}
    triggers.EntityData.Leafs["is-sr-uloop-calculation"] = types.YLeaf{"IsSrUloopCalculation", triggers.IsSrUloopCalculation}
    triggers.EntityData.Leafs["is-sr-uloop-link-down"] = types.YLeaf{"IsSrUloopLinkDown", triggers.IsSrUloopLinkDown}
    return &(triggers.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix
// ID of a changed prefix in the first trigger LSP,
// if any
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IsisAfId.
    AfName interface{}

    // ipv4.
    Ipv4 Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv4

    // ipv6.
    Ipv6 Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv6
}

func (triggerPrefix *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix) GetEntityData() *types.CommonEntityData {
    triggerPrefix.EntityData.YFilter = triggerPrefix.YFilter
    triggerPrefix.EntityData.YangName = "trigger-prefix"
    triggerPrefix.EntityData.BundleName = "cisco_ios_xr"
    triggerPrefix.EntityData.ParentYangName = "triggers"
    triggerPrefix.EntityData.SegmentPath = "trigger-prefix"
    triggerPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    triggerPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    triggerPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    triggerPrefix.EntityData.Children = make(map[string]types.YChild)
    triggerPrefix.EntityData.Children["ipv4"] = types.YChild{"Ipv4", &triggerPrefix.Ipv4}
    triggerPrefix.EntityData.Children["ipv6"] = types.YChild{"Ipv6", &triggerPrefix.Ipv6}
    triggerPrefix.EntityData.Leafs = make(map[string]types.YLeaf)
    triggerPrefix.EntityData.Leafs["af-name"] = types.YLeaf{"AfName", triggerPrefix.AfName}
    return &(triggerPrefix.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv4
// ipv4
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv4 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "trigger-prefix"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = make(map[string]types.YChild)
    ipv4.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv4.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", ipv4.Prefix}
    ipv4.EntityData.Leafs["prefix-length"] = types.YLeaf{"PrefixLength", ipv4.PrefixLength}
    return &(ipv4.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv6
// ipv6
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv6 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv6) GetEntityData() *types.CommonEntityData {
    ipv6.EntityData.YFilter = ipv6.YFilter
    ipv6.EntityData.YangName = "ipv6"
    ipv6.EntityData.BundleName = "cisco_ios_xr"
    ipv6.EntityData.ParentYangName = "trigger-prefix"
    ipv6.EntityData.SegmentPath = "ipv6"
    ipv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6.EntityData.Children = make(map[string]types.YChild)
    ipv6.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv6.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", ipv6.Prefix}
    ipv6.EntityData.Leafs["prefix-length"] = types.YLeaf{"PrefixLength", ipv6.PrefixLength}
    return &(ipv6.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger
// Triggers applying to this log entry
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is IsisSpfTrigger.
    Entry interface{}
}

func (trigger *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger) GetEntityData() *types.CommonEntityData {
    trigger.EntityData.YFilter = trigger.YFilter
    trigger.EntityData.YangName = "trigger"
    trigger.EntityData.BundleName = "cisco_ios_xr"
    trigger.EntityData.ParentYangName = "triggers"
    trigger.EntityData.SegmentPath = "trigger"
    trigger.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trigger.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trigger.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trigger.EntityData.Children = make(map[string]types.YChild)
    trigger.EntityData.Leafs = make(map[string]types.YLeaf)
    trigger.EntityData.Leafs["entry"] = types.YLeaf{"Entry", trigger.Entry}
    return &(trigger.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics
// Statistics for the SPT calculation phase
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Duration of the SPT calculation.
    Duration Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_Duration

    // Node counts.
    NodeCounts Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_NodeCounts
}

func (sptCalculationStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics) GetEntityData() *types.CommonEntityData {
    sptCalculationStatistics.EntityData.YFilter = sptCalculationStatistics.YFilter
    sptCalculationStatistics.EntityData.YangName = "spt-calculation-statistics"
    sptCalculationStatistics.EntityData.BundleName = "cisco_ios_xr"
    sptCalculationStatistics.EntityData.ParentYangName = "log-entry"
    sptCalculationStatistics.EntityData.SegmentPath = "spt-calculation-statistics"
    sptCalculationStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sptCalculationStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sptCalculationStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sptCalculationStatistics.EntityData.Children = make(map[string]types.YChild)
    sptCalculationStatistics.EntityData.Children["duration"] = types.YChild{"Duration", &sptCalculationStatistics.Duration}
    sptCalculationStatistics.EntityData.Children["node-counts"] = types.YChild{"NodeCounts", &sptCalculationStatistics.NodeCounts}
    sptCalculationStatistics.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sptCalculationStatistics.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_Duration
// Duration of the SPT calculation
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_Duration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_Duration) GetEntityData() *types.CommonEntityData {
    duration.EntityData.YFilter = duration.YFilter
    duration.EntityData.YangName = "duration"
    duration.EntityData.BundleName = "cisco_ios_xr"
    duration.EntityData.ParentYangName = "spt-calculation-statistics"
    duration.EntityData.SegmentPath = "duration"
    duration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    duration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    duration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    duration.EntityData.Children = make(map[string]types.YChild)
    duration.EntityData.Leafs = make(map[string]types.YLeaf)
    duration.EntityData.Leafs["real-duration"] = types.YLeaf{"RealDuration", duration.RealDuration}
    duration.EntityData.Leafs["cpu-duration"] = types.YLeaf{"CpuDuration", duration.CpuDuration}
    return &(duration.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_NodeCounts
// Node counts
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_NodeCounts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of unreachable nodes in the database. The type is interface{} with
    // range: 0..4294967295.
    Unreachable interface{}

    // Number of reachable nodes in the database. The type is interface{} with
    // range: 0..4294967295.
    Reachable interface{}

    // Number of nodes added to the SPT. The type is interface{} with range:
    // 0..4294967295.
    Added interface{}

    // Number of nodes deleted from the SPT. The type is interface{} with range:
    // 0..4294967295.
    Deleted interface{}

    // Number of modified nodes (first hop and/or metric change). The type is
    // interface{} with range: 0..4294967295.
    Modified interface{}

    // Number of nodes touched whilst calculating the SPT. The type is interface{}
    // with range: 0..4294967295.
    Touched interface{}
}

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_NodeCounts) GetEntityData() *types.CommonEntityData {
    nodeCounts.EntityData.YFilter = nodeCounts.YFilter
    nodeCounts.EntityData.YangName = "node-counts"
    nodeCounts.EntityData.BundleName = "cisco_ios_xr"
    nodeCounts.EntityData.ParentYangName = "spt-calculation-statistics"
    nodeCounts.EntityData.SegmentPath = "node-counts"
    nodeCounts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeCounts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeCounts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeCounts.EntityData.Children = make(map[string]types.YChild)
    nodeCounts.EntityData.Leafs = make(map[string]types.YLeaf)
    nodeCounts.EntityData.Leafs["unreachable"] = types.YLeaf{"Unreachable", nodeCounts.Unreachable}
    nodeCounts.EntityData.Leafs["reachable"] = types.YLeaf{"Reachable", nodeCounts.Reachable}
    nodeCounts.EntityData.Leafs["added"] = types.YLeaf{"Added", nodeCounts.Added}
    nodeCounts.EntityData.Leafs["deleted"] = types.YLeaf{"Deleted", nodeCounts.Deleted}
    nodeCounts.EntityData.Leafs["modified"] = types.YLeaf{"Modified", nodeCounts.Modified}
    nodeCounts.EntityData.Leafs["touched"] = types.YLeaf{"Touched", nodeCounts.Touched}
    return &(nodeCounts.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics
// Statistics for the route update phase
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Duration of the routing table update.
    Duration Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_Duration

    // Breakdown of the time taken by the routing table update.
    DurationBreakdown Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown

    // Node counts.
    NodeCounts Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts

    // Prefix item counts.
    ItemCounts Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts

    // Distinct prefix counts.
    RouteCounts Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts

    // Number of RIB batches sent.
    RibBatchCounts Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RibBatchCounts
}

func (routeUpdateStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics) GetEntityData() *types.CommonEntityData {
    routeUpdateStatistics.EntityData.YFilter = routeUpdateStatistics.YFilter
    routeUpdateStatistics.EntityData.YangName = "route-update-statistics"
    routeUpdateStatistics.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateStatistics.EntityData.ParentYangName = "log-entry"
    routeUpdateStatistics.EntityData.SegmentPath = "route-update-statistics"
    routeUpdateStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateStatistics.EntityData.Children = make(map[string]types.YChild)
    routeUpdateStatistics.EntityData.Children["duration"] = types.YChild{"Duration", &routeUpdateStatistics.Duration}
    routeUpdateStatistics.EntityData.Children["duration-breakdown"] = types.YChild{"DurationBreakdown", &routeUpdateStatistics.DurationBreakdown}
    routeUpdateStatistics.EntityData.Children["node-counts"] = types.YChild{"NodeCounts", &routeUpdateStatistics.NodeCounts}
    routeUpdateStatistics.EntityData.Children["item-counts"] = types.YChild{"ItemCounts", &routeUpdateStatistics.ItemCounts}
    routeUpdateStatistics.EntityData.Children["route-counts"] = types.YChild{"RouteCounts", &routeUpdateStatistics.RouteCounts}
    routeUpdateStatistics.EntityData.Children["rib-batch-counts"] = types.YChild{"RibBatchCounts", &routeUpdateStatistics.RibBatchCounts}
    routeUpdateStatistics.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(routeUpdateStatistics.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_Duration
// Duration of the routing table update
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_Duration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_Duration) GetEntityData() *types.CommonEntityData {
    duration.EntityData.YFilter = duration.YFilter
    duration.EntityData.YangName = "duration"
    duration.EntityData.BundleName = "cisco_ios_xr"
    duration.EntityData.ParentYangName = "route-update-statistics"
    duration.EntityData.SegmentPath = "duration"
    duration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    duration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    duration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    duration.EntityData.Children = make(map[string]types.YChild)
    duration.EntityData.Leafs = make(map[string]types.YLeaf)
    duration.EntityData.Leafs["real-duration"] = types.YLeaf{"RealDuration", duration.RealDuration}
    duration.EntityData.Leafs["cpu-duration"] = types.YLeaf{"CpuDuration", duration.CpuDuration}
    return &(duration.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown
// Breakdown of the time taken by the routing table
// update
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time to update IS-IS's local RIB.
    LocalRibUpdate Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate

    // Time to build the update to send to the global RIB.
    GlobalRibBuild Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild

    // Time to send the update to the global RIB.
    GlobalRibSend Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend
}

func (durationBreakdown *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown) GetEntityData() *types.CommonEntityData {
    durationBreakdown.EntityData.YFilter = durationBreakdown.YFilter
    durationBreakdown.EntityData.YangName = "duration-breakdown"
    durationBreakdown.EntityData.BundleName = "cisco_ios_xr"
    durationBreakdown.EntityData.ParentYangName = "route-update-statistics"
    durationBreakdown.EntityData.SegmentPath = "duration-breakdown"
    durationBreakdown.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    durationBreakdown.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    durationBreakdown.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    durationBreakdown.EntityData.Children = make(map[string]types.YChild)
    durationBreakdown.EntityData.Children["local-rib-update"] = types.YChild{"LocalRibUpdate", &durationBreakdown.LocalRibUpdate}
    durationBreakdown.EntityData.Children["global-rib-build"] = types.YChild{"GlobalRibBuild", &durationBreakdown.GlobalRibBuild}
    durationBreakdown.EntityData.Children["global-rib-send"] = types.YChild{"GlobalRibSend", &durationBreakdown.GlobalRibSend}
    durationBreakdown.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(durationBreakdown.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate
// Time to update IS-IS's local RIB
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority.
    Critical Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Critical

    // High priority.
    High Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_High

    // Medium priority.
    Medium Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Medium

    // Low priority.
    Low Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Low
}

func (localRibUpdate *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate) GetEntityData() *types.CommonEntityData {
    localRibUpdate.EntityData.YFilter = localRibUpdate.YFilter
    localRibUpdate.EntityData.YangName = "local-rib-update"
    localRibUpdate.EntityData.BundleName = "cisco_ios_xr"
    localRibUpdate.EntityData.ParentYangName = "duration-breakdown"
    localRibUpdate.EntityData.SegmentPath = "local-rib-update"
    localRibUpdate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localRibUpdate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localRibUpdate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localRibUpdate.EntityData.Children = make(map[string]types.YChild)
    localRibUpdate.EntityData.Children["critical"] = types.YChild{"Critical", &localRibUpdate.Critical}
    localRibUpdate.EntityData.Children["high"] = types.YChild{"High", &localRibUpdate.High}
    localRibUpdate.EntityData.Children["medium"] = types.YChild{"Medium", &localRibUpdate.Medium}
    localRibUpdate.EntityData.Children["low"] = types.YChild{"Low", &localRibUpdate.Low}
    localRibUpdate.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(localRibUpdate.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Critical
// Critical priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Critical struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Critical) GetEntityData() *types.CommonEntityData {
    critical.EntityData.YFilter = critical.YFilter
    critical.EntityData.YangName = "critical"
    critical.EntityData.BundleName = "cisco_ios_xr"
    critical.EntityData.ParentYangName = "local-rib-update"
    critical.EntityData.SegmentPath = "critical"
    critical.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    critical.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    critical.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    critical.EntityData.Children = make(map[string]types.YChild)
    critical.EntityData.Leafs = make(map[string]types.YLeaf)
    critical.EntityData.Leafs["real-duration"] = types.YLeaf{"RealDuration", critical.RealDuration}
    critical.EntityData.Leafs["cpu-duration"] = types.YLeaf{"CpuDuration", critical.CpuDuration}
    return &(critical.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_High
// High priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_High struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_High) GetEntityData() *types.CommonEntityData {
    high.EntityData.YFilter = high.YFilter
    high.EntityData.YangName = "high"
    high.EntityData.BundleName = "cisco_ios_xr"
    high.EntityData.ParentYangName = "local-rib-update"
    high.EntityData.SegmentPath = "high"
    high.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    high.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    high.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    high.EntityData.Children = make(map[string]types.YChild)
    high.EntityData.Leafs = make(map[string]types.YLeaf)
    high.EntityData.Leafs["real-duration"] = types.YLeaf{"RealDuration", high.RealDuration}
    high.EntityData.Leafs["cpu-duration"] = types.YLeaf{"CpuDuration", high.CpuDuration}
    return &(high.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Medium
// Medium priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Medium struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Medium) GetEntityData() *types.CommonEntityData {
    medium.EntityData.YFilter = medium.YFilter
    medium.EntityData.YangName = "medium"
    medium.EntityData.BundleName = "cisco_ios_xr"
    medium.EntityData.ParentYangName = "local-rib-update"
    medium.EntityData.SegmentPath = "medium"
    medium.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    medium.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    medium.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    medium.EntityData.Children = make(map[string]types.YChild)
    medium.EntityData.Leafs = make(map[string]types.YLeaf)
    medium.EntityData.Leafs["real-duration"] = types.YLeaf{"RealDuration", medium.RealDuration}
    medium.EntityData.Leafs["cpu-duration"] = types.YLeaf{"CpuDuration", medium.CpuDuration}
    return &(medium.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Low
// Low priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Low struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Low) GetEntityData() *types.CommonEntityData {
    low.EntityData.YFilter = low.YFilter
    low.EntityData.YangName = "low"
    low.EntityData.BundleName = "cisco_ios_xr"
    low.EntityData.ParentYangName = "local-rib-update"
    low.EntityData.SegmentPath = "low"
    low.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    low.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    low.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    low.EntityData.Children = make(map[string]types.YChild)
    low.EntityData.Leafs = make(map[string]types.YLeaf)
    low.EntityData.Leafs["real-duration"] = types.YLeaf{"RealDuration", low.RealDuration}
    low.EntityData.Leafs["cpu-duration"] = types.YLeaf{"CpuDuration", low.CpuDuration}
    return &(low.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild
// Time to build the update to send to the global
// RIB
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority.
    Critical Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Critical

    // High priority.
    High Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_High

    // Medium priority.
    Medium Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Medium

    // Low priority.
    Low Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Low
}

func (globalRibBuild *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild) GetEntityData() *types.CommonEntityData {
    globalRibBuild.EntityData.YFilter = globalRibBuild.YFilter
    globalRibBuild.EntityData.YangName = "global-rib-build"
    globalRibBuild.EntityData.BundleName = "cisco_ios_xr"
    globalRibBuild.EntityData.ParentYangName = "duration-breakdown"
    globalRibBuild.EntityData.SegmentPath = "global-rib-build"
    globalRibBuild.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalRibBuild.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalRibBuild.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalRibBuild.EntityData.Children = make(map[string]types.YChild)
    globalRibBuild.EntityData.Children["critical"] = types.YChild{"Critical", &globalRibBuild.Critical}
    globalRibBuild.EntityData.Children["high"] = types.YChild{"High", &globalRibBuild.High}
    globalRibBuild.EntityData.Children["medium"] = types.YChild{"Medium", &globalRibBuild.Medium}
    globalRibBuild.EntityData.Children["low"] = types.YChild{"Low", &globalRibBuild.Low}
    globalRibBuild.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(globalRibBuild.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Critical
// Critical priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Critical struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Critical) GetEntityData() *types.CommonEntityData {
    critical.EntityData.YFilter = critical.YFilter
    critical.EntityData.YangName = "critical"
    critical.EntityData.BundleName = "cisco_ios_xr"
    critical.EntityData.ParentYangName = "global-rib-build"
    critical.EntityData.SegmentPath = "critical"
    critical.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    critical.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    critical.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    critical.EntityData.Children = make(map[string]types.YChild)
    critical.EntityData.Leafs = make(map[string]types.YLeaf)
    critical.EntityData.Leafs["real-duration"] = types.YLeaf{"RealDuration", critical.RealDuration}
    critical.EntityData.Leafs["cpu-duration"] = types.YLeaf{"CpuDuration", critical.CpuDuration}
    return &(critical.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_High
// High priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_High struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_High) GetEntityData() *types.CommonEntityData {
    high.EntityData.YFilter = high.YFilter
    high.EntityData.YangName = "high"
    high.EntityData.BundleName = "cisco_ios_xr"
    high.EntityData.ParentYangName = "global-rib-build"
    high.EntityData.SegmentPath = "high"
    high.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    high.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    high.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    high.EntityData.Children = make(map[string]types.YChild)
    high.EntityData.Leafs = make(map[string]types.YLeaf)
    high.EntityData.Leafs["real-duration"] = types.YLeaf{"RealDuration", high.RealDuration}
    high.EntityData.Leafs["cpu-duration"] = types.YLeaf{"CpuDuration", high.CpuDuration}
    return &(high.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Medium
// Medium priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Medium struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Medium) GetEntityData() *types.CommonEntityData {
    medium.EntityData.YFilter = medium.YFilter
    medium.EntityData.YangName = "medium"
    medium.EntityData.BundleName = "cisco_ios_xr"
    medium.EntityData.ParentYangName = "global-rib-build"
    medium.EntityData.SegmentPath = "medium"
    medium.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    medium.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    medium.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    medium.EntityData.Children = make(map[string]types.YChild)
    medium.EntityData.Leafs = make(map[string]types.YLeaf)
    medium.EntityData.Leafs["real-duration"] = types.YLeaf{"RealDuration", medium.RealDuration}
    medium.EntityData.Leafs["cpu-duration"] = types.YLeaf{"CpuDuration", medium.CpuDuration}
    return &(medium.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Low
// Low priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Low struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Low) GetEntityData() *types.CommonEntityData {
    low.EntityData.YFilter = low.YFilter
    low.EntityData.YangName = "low"
    low.EntityData.BundleName = "cisco_ios_xr"
    low.EntityData.ParentYangName = "global-rib-build"
    low.EntityData.SegmentPath = "low"
    low.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    low.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    low.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    low.EntityData.Children = make(map[string]types.YChild)
    low.EntityData.Leafs = make(map[string]types.YLeaf)
    low.EntityData.Leafs["real-duration"] = types.YLeaf{"RealDuration", low.RealDuration}
    low.EntityData.Leafs["cpu-duration"] = types.YLeaf{"CpuDuration", low.CpuDuration}
    return &(low.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend
// Time to send the update to the global RIB
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority.
    Critical Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Critical

    // High priority.
    High Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_High

    // Medium priority.
    Medium Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Medium

    // Low priority.
    Low Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Low
}

func (globalRibSend *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend) GetEntityData() *types.CommonEntityData {
    globalRibSend.EntityData.YFilter = globalRibSend.YFilter
    globalRibSend.EntityData.YangName = "global-rib-send"
    globalRibSend.EntityData.BundleName = "cisco_ios_xr"
    globalRibSend.EntityData.ParentYangName = "duration-breakdown"
    globalRibSend.EntityData.SegmentPath = "global-rib-send"
    globalRibSend.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalRibSend.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalRibSend.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalRibSend.EntityData.Children = make(map[string]types.YChild)
    globalRibSend.EntityData.Children["critical"] = types.YChild{"Critical", &globalRibSend.Critical}
    globalRibSend.EntityData.Children["high"] = types.YChild{"High", &globalRibSend.High}
    globalRibSend.EntityData.Children["medium"] = types.YChild{"Medium", &globalRibSend.Medium}
    globalRibSend.EntityData.Children["low"] = types.YChild{"Low", &globalRibSend.Low}
    globalRibSend.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(globalRibSend.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Critical
// Critical priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Critical struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Critical) GetEntityData() *types.CommonEntityData {
    critical.EntityData.YFilter = critical.YFilter
    critical.EntityData.YangName = "critical"
    critical.EntityData.BundleName = "cisco_ios_xr"
    critical.EntityData.ParentYangName = "global-rib-send"
    critical.EntityData.SegmentPath = "critical"
    critical.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    critical.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    critical.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    critical.EntityData.Children = make(map[string]types.YChild)
    critical.EntityData.Leafs = make(map[string]types.YLeaf)
    critical.EntityData.Leafs["real-duration"] = types.YLeaf{"RealDuration", critical.RealDuration}
    critical.EntityData.Leafs["cpu-duration"] = types.YLeaf{"CpuDuration", critical.CpuDuration}
    return &(critical.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_High
// High priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_High struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_High) GetEntityData() *types.CommonEntityData {
    high.EntityData.YFilter = high.YFilter
    high.EntityData.YangName = "high"
    high.EntityData.BundleName = "cisco_ios_xr"
    high.EntityData.ParentYangName = "global-rib-send"
    high.EntityData.SegmentPath = "high"
    high.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    high.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    high.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    high.EntityData.Children = make(map[string]types.YChild)
    high.EntityData.Leafs = make(map[string]types.YLeaf)
    high.EntityData.Leafs["real-duration"] = types.YLeaf{"RealDuration", high.RealDuration}
    high.EntityData.Leafs["cpu-duration"] = types.YLeaf{"CpuDuration", high.CpuDuration}
    return &(high.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Medium
// Medium priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Medium struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Medium) GetEntityData() *types.CommonEntityData {
    medium.EntityData.YFilter = medium.YFilter
    medium.EntityData.YangName = "medium"
    medium.EntityData.BundleName = "cisco_ios_xr"
    medium.EntityData.ParentYangName = "global-rib-send"
    medium.EntityData.SegmentPath = "medium"
    medium.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    medium.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    medium.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    medium.EntityData.Children = make(map[string]types.YChild)
    medium.EntityData.Leafs = make(map[string]types.YLeaf)
    medium.EntityData.Leafs["real-duration"] = types.YLeaf{"RealDuration", medium.RealDuration}
    medium.EntityData.Leafs["cpu-duration"] = types.YLeaf{"CpuDuration", medium.CpuDuration}
    return &(medium.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Low
// Low priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Low struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Low) GetEntityData() *types.CommonEntityData {
    low.EntityData.YFilter = low.YFilter
    low.EntityData.YangName = "low"
    low.EntityData.BundleName = "cisco_ios_xr"
    low.EntityData.ParentYangName = "global-rib-send"
    low.EntityData.SegmentPath = "low"
    low.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    low.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    low.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    low.EntityData.Children = make(map[string]types.YChild)
    low.EntityData.Leafs = make(map[string]types.YLeaf)
    low.EntityData.Leafs["real-duration"] = types.YLeaf{"RealDuration", low.RealDuration}
    low.EntityData.Leafs["cpu-duration"] = types.YLeaf{"CpuDuration", low.CpuDuration}
    return &(low.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts
// Node counts
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of nodes considered during route update. The type is
    // interface{} with range: 0..4294967295.
    TotalTouched interface{}

    // Per-priority count of nodes considered during route update.
    PerPriorityTouched Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts_PerPriorityTouched
}

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts) GetEntityData() *types.CommonEntityData {
    nodeCounts.EntityData.YFilter = nodeCounts.YFilter
    nodeCounts.EntityData.YangName = "node-counts"
    nodeCounts.EntityData.BundleName = "cisco_ios_xr"
    nodeCounts.EntityData.ParentYangName = "route-update-statistics"
    nodeCounts.EntityData.SegmentPath = "node-counts"
    nodeCounts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeCounts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeCounts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeCounts.EntityData.Children = make(map[string]types.YChild)
    nodeCounts.EntityData.Children["per-priority-touched"] = types.YChild{"PerPriorityTouched", &nodeCounts.PerPriorityTouched}
    nodeCounts.EntityData.Leafs = make(map[string]types.YLeaf)
    nodeCounts.EntityData.Leafs["total-touched"] = types.YLeaf{"TotalTouched", nodeCounts.TotalTouched}
    return &(nodeCounts.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts_PerPriorityTouched
// Per-priority count of nodes considered during
// route update
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts_PerPriorityTouched struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (perPriorityTouched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts_PerPriorityTouched) GetEntityData() *types.CommonEntityData {
    perPriorityTouched.EntityData.YFilter = perPriorityTouched.YFilter
    perPriorityTouched.EntityData.YangName = "per-priority-touched"
    perPriorityTouched.EntityData.BundleName = "cisco_ios_xr"
    perPriorityTouched.EntityData.ParentYangName = "node-counts"
    perPriorityTouched.EntityData.SegmentPath = "per-priority-touched"
    perPriorityTouched.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perPriorityTouched.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perPriorityTouched.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perPriorityTouched.EntityData.Children = make(map[string]types.YChild)
    perPriorityTouched.EntityData.Leafs = make(map[string]types.YLeaf)
    perPriorityTouched.EntityData.Leafs["critical"] = types.YLeaf{"Critical", perPriorityTouched.Critical}
    perPriorityTouched.EntityData.Leafs["high"] = types.YLeaf{"High", perPriorityTouched.High}
    perPriorityTouched.EntityData.Leafs["medium"] = types.YLeaf{"Medium", perPriorityTouched.Medium}
    perPriorityTouched.EntityData.Leafs["low"] = types.YLeaf{"Low", perPriorityTouched.Low}
    return &(perPriorityTouched.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts
// Prefix item counts
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of unreachable prefixes in the database.
    Unreachable Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Unreachable

    // Number of reachable prefixes in the database.
    Reachable Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Reachable

    // Number of prefixes added during calculation.
    Added Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Added

    // Number of prefixes deleted during calculation.
    Deleted Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Deleted

    // Number of prefixes modified, i.e. a first hop and/or metric change.
    Modified Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Modified

    // Number of prefixes considered whilst updating the routing table.
    Touched Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Touched
}

func (itemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts) GetEntityData() *types.CommonEntityData {
    itemCounts.EntityData.YFilter = itemCounts.YFilter
    itemCounts.EntityData.YangName = "item-counts"
    itemCounts.EntityData.BundleName = "cisco_ios_xr"
    itemCounts.EntityData.ParentYangName = "route-update-statistics"
    itemCounts.EntityData.SegmentPath = "item-counts"
    itemCounts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    itemCounts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    itemCounts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    itemCounts.EntityData.Children = make(map[string]types.YChild)
    itemCounts.EntityData.Children["unreachable"] = types.YChild{"Unreachable", &itemCounts.Unreachable}
    itemCounts.EntityData.Children["reachable"] = types.YChild{"Reachable", &itemCounts.Reachable}
    itemCounts.EntityData.Children["added"] = types.YChild{"Added", &itemCounts.Added}
    itemCounts.EntityData.Children["deleted"] = types.YChild{"Deleted", &itemCounts.Deleted}
    itemCounts.EntityData.Children["modified"] = types.YChild{"Modified", &itemCounts.Modified}
    itemCounts.EntityData.Children["touched"] = types.YChild{"Touched", &itemCounts.Touched}
    itemCounts.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(itemCounts.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Unreachable
// Number of unreachable prefixes in the database
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Unreachable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Unreachable) GetEntityData() *types.CommonEntityData {
    unreachable.EntityData.YFilter = unreachable.YFilter
    unreachable.EntityData.YangName = "unreachable"
    unreachable.EntityData.BundleName = "cisco_ios_xr"
    unreachable.EntityData.ParentYangName = "item-counts"
    unreachable.EntityData.SegmentPath = "unreachable"
    unreachable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unreachable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unreachable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unreachable.EntityData.Children = make(map[string]types.YChild)
    unreachable.EntityData.Leafs = make(map[string]types.YLeaf)
    unreachable.EntityData.Leafs["critical"] = types.YLeaf{"Critical", unreachable.Critical}
    unreachable.EntityData.Leafs["high"] = types.YLeaf{"High", unreachable.High}
    unreachable.EntityData.Leafs["medium"] = types.YLeaf{"Medium", unreachable.Medium}
    unreachable.EntityData.Leafs["low"] = types.YLeaf{"Low", unreachable.Low}
    return &(unreachable.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Reachable
// Number of reachable prefixes in the database
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Reachable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Reachable) GetEntityData() *types.CommonEntityData {
    reachable.EntityData.YFilter = reachable.YFilter
    reachable.EntityData.YangName = "reachable"
    reachable.EntityData.BundleName = "cisco_ios_xr"
    reachable.EntityData.ParentYangName = "item-counts"
    reachable.EntityData.SegmentPath = "reachable"
    reachable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    reachable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    reachable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    reachable.EntityData.Children = make(map[string]types.YChild)
    reachable.EntityData.Leafs = make(map[string]types.YLeaf)
    reachable.EntityData.Leafs["critical"] = types.YLeaf{"Critical", reachable.Critical}
    reachable.EntityData.Leafs["high"] = types.YLeaf{"High", reachable.High}
    reachable.EntityData.Leafs["medium"] = types.YLeaf{"Medium", reachable.Medium}
    reachable.EntityData.Leafs["low"] = types.YLeaf{"Low", reachable.Low}
    return &(reachable.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Added
// Number of prefixes added during calculation
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Added struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Added) GetEntityData() *types.CommonEntityData {
    added.EntityData.YFilter = added.YFilter
    added.EntityData.YangName = "added"
    added.EntityData.BundleName = "cisco_ios_xr"
    added.EntityData.ParentYangName = "item-counts"
    added.EntityData.SegmentPath = "added"
    added.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    added.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    added.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    added.EntityData.Children = make(map[string]types.YChild)
    added.EntityData.Leafs = make(map[string]types.YLeaf)
    added.EntityData.Leafs["critical"] = types.YLeaf{"Critical", added.Critical}
    added.EntityData.Leafs["high"] = types.YLeaf{"High", added.High}
    added.EntityData.Leafs["medium"] = types.YLeaf{"Medium", added.Medium}
    added.EntityData.Leafs["low"] = types.YLeaf{"Low", added.Low}
    return &(added.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Deleted
// Number of prefixes deleted during calculation
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Deleted struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Deleted) GetEntityData() *types.CommonEntityData {
    deleted.EntityData.YFilter = deleted.YFilter
    deleted.EntityData.YangName = "deleted"
    deleted.EntityData.BundleName = "cisco_ios_xr"
    deleted.EntityData.ParentYangName = "item-counts"
    deleted.EntityData.SegmentPath = "deleted"
    deleted.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deleted.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deleted.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deleted.EntityData.Children = make(map[string]types.YChild)
    deleted.EntityData.Leafs = make(map[string]types.YLeaf)
    deleted.EntityData.Leafs["critical"] = types.YLeaf{"Critical", deleted.Critical}
    deleted.EntityData.Leafs["high"] = types.YLeaf{"High", deleted.High}
    deleted.EntityData.Leafs["medium"] = types.YLeaf{"Medium", deleted.Medium}
    deleted.EntityData.Leafs["low"] = types.YLeaf{"Low", deleted.Low}
    return &(deleted.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Modified
// Number of prefixes modified, i.e. a first hop
// and/or metric change
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Modified struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Modified) GetEntityData() *types.CommonEntityData {
    modified.EntityData.YFilter = modified.YFilter
    modified.EntityData.YangName = "modified"
    modified.EntityData.BundleName = "cisco_ios_xr"
    modified.EntityData.ParentYangName = "item-counts"
    modified.EntityData.SegmentPath = "modified"
    modified.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    modified.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    modified.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    modified.EntityData.Children = make(map[string]types.YChild)
    modified.EntityData.Leafs = make(map[string]types.YLeaf)
    modified.EntityData.Leafs["critical"] = types.YLeaf{"Critical", modified.Critical}
    modified.EntityData.Leafs["high"] = types.YLeaf{"High", modified.High}
    modified.EntityData.Leafs["medium"] = types.YLeaf{"Medium", modified.Medium}
    modified.EntityData.Leafs["low"] = types.YLeaf{"Low", modified.Low}
    return &(modified.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Touched
// Number of prefixes considered whilst updating
// the routing table
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Touched struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Touched) GetEntityData() *types.CommonEntityData {
    touched.EntityData.YFilter = touched.YFilter
    touched.EntityData.YangName = "touched"
    touched.EntityData.BundleName = "cisco_ios_xr"
    touched.EntityData.ParentYangName = "item-counts"
    touched.EntityData.SegmentPath = "touched"
    touched.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    touched.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    touched.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    touched.EntityData.Children = make(map[string]types.YChild)
    touched.EntityData.Leafs = make(map[string]types.YLeaf)
    touched.EntityData.Leafs["critical"] = types.YLeaf{"Critical", touched.Critical}
    touched.EntityData.Leafs["high"] = types.YLeaf{"High", touched.High}
    touched.EntityData.Leafs["medium"] = types.YLeaf{"Medium", touched.Medium}
    touched.EntityData.Leafs["low"] = types.YLeaf{"Low", touched.Low}
    return &(touched.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts
// Distinct prefix counts
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of unreachable prefixes in the database.
    Unreachable Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Unreachable

    // Number of reachable prefixes in the database.
    Reachable Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Reachable

    // Number of prefixes added during calculation.
    Added Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Added

    // Number of prefixes deleted during calculation.
    Deleted Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Deleted

    // Number of prefixes modified, i.e. a first hop and/or metric change.
    Modified Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Modified

    // Number of prefixes considered whilst updating the routing table.
    Touched Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Touched
}

func (routeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts) GetEntityData() *types.CommonEntityData {
    routeCounts.EntityData.YFilter = routeCounts.YFilter
    routeCounts.EntityData.YangName = "route-counts"
    routeCounts.EntityData.BundleName = "cisco_ios_xr"
    routeCounts.EntityData.ParentYangName = "route-update-statistics"
    routeCounts.EntityData.SegmentPath = "route-counts"
    routeCounts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeCounts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeCounts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeCounts.EntityData.Children = make(map[string]types.YChild)
    routeCounts.EntityData.Children["unreachable"] = types.YChild{"Unreachable", &routeCounts.Unreachable}
    routeCounts.EntityData.Children["reachable"] = types.YChild{"Reachable", &routeCounts.Reachable}
    routeCounts.EntityData.Children["added"] = types.YChild{"Added", &routeCounts.Added}
    routeCounts.EntityData.Children["deleted"] = types.YChild{"Deleted", &routeCounts.Deleted}
    routeCounts.EntityData.Children["modified"] = types.YChild{"Modified", &routeCounts.Modified}
    routeCounts.EntityData.Children["touched"] = types.YChild{"Touched", &routeCounts.Touched}
    routeCounts.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(routeCounts.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Unreachable
// Number of unreachable prefixes in the database
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Unreachable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Unreachable) GetEntityData() *types.CommonEntityData {
    unreachable.EntityData.YFilter = unreachable.YFilter
    unreachable.EntityData.YangName = "unreachable"
    unreachable.EntityData.BundleName = "cisco_ios_xr"
    unreachable.EntityData.ParentYangName = "route-counts"
    unreachable.EntityData.SegmentPath = "unreachable"
    unreachable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unreachable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unreachable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unreachable.EntityData.Children = make(map[string]types.YChild)
    unreachable.EntityData.Leafs = make(map[string]types.YLeaf)
    unreachable.EntityData.Leafs["critical"] = types.YLeaf{"Critical", unreachable.Critical}
    unreachable.EntityData.Leafs["high"] = types.YLeaf{"High", unreachable.High}
    unreachable.EntityData.Leafs["medium"] = types.YLeaf{"Medium", unreachable.Medium}
    unreachable.EntityData.Leafs["low"] = types.YLeaf{"Low", unreachable.Low}
    return &(unreachable.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Reachable
// Number of reachable prefixes in the database
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Reachable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Reachable) GetEntityData() *types.CommonEntityData {
    reachable.EntityData.YFilter = reachable.YFilter
    reachable.EntityData.YangName = "reachable"
    reachable.EntityData.BundleName = "cisco_ios_xr"
    reachable.EntityData.ParentYangName = "route-counts"
    reachable.EntityData.SegmentPath = "reachable"
    reachable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    reachable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    reachable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    reachable.EntityData.Children = make(map[string]types.YChild)
    reachable.EntityData.Leafs = make(map[string]types.YLeaf)
    reachable.EntityData.Leafs["critical"] = types.YLeaf{"Critical", reachable.Critical}
    reachable.EntityData.Leafs["high"] = types.YLeaf{"High", reachable.High}
    reachable.EntityData.Leafs["medium"] = types.YLeaf{"Medium", reachable.Medium}
    reachable.EntityData.Leafs["low"] = types.YLeaf{"Low", reachable.Low}
    return &(reachable.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Added
// Number of prefixes added during calculation
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Added struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Added) GetEntityData() *types.CommonEntityData {
    added.EntityData.YFilter = added.YFilter
    added.EntityData.YangName = "added"
    added.EntityData.BundleName = "cisco_ios_xr"
    added.EntityData.ParentYangName = "route-counts"
    added.EntityData.SegmentPath = "added"
    added.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    added.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    added.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    added.EntityData.Children = make(map[string]types.YChild)
    added.EntityData.Leafs = make(map[string]types.YLeaf)
    added.EntityData.Leafs["critical"] = types.YLeaf{"Critical", added.Critical}
    added.EntityData.Leafs["high"] = types.YLeaf{"High", added.High}
    added.EntityData.Leafs["medium"] = types.YLeaf{"Medium", added.Medium}
    added.EntityData.Leafs["low"] = types.YLeaf{"Low", added.Low}
    return &(added.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Deleted
// Number of prefixes deleted during calculation
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Deleted struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Deleted) GetEntityData() *types.CommonEntityData {
    deleted.EntityData.YFilter = deleted.YFilter
    deleted.EntityData.YangName = "deleted"
    deleted.EntityData.BundleName = "cisco_ios_xr"
    deleted.EntityData.ParentYangName = "route-counts"
    deleted.EntityData.SegmentPath = "deleted"
    deleted.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deleted.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deleted.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deleted.EntityData.Children = make(map[string]types.YChild)
    deleted.EntityData.Leafs = make(map[string]types.YLeaf)
    deleted.EntityData.Leafs["critical"] = types.YLeaf{"Critical", deleted.Critical}
    deleted.EntityData.Leafs["high"] = types.YLeaf{"High", deleted.High}
    deleted.EntityData.Leafs["medium"] = types.YLeaf{"Medium", deleted.Medium}
    deleted.EntityData.Leafs["low"] = types.YLeaf{"Low", deleted.Low}
    return &(deleted.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Modified
// Number of prefixes modified, i.e. a first hop
// and/or metric change
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Modified struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Modified) GetEntityData() *types.CommonEntityData {
    modified.EntityData.YFilter = modified.YFilter
    modified.EntityData.YangName = "modified"
    modified.EntityData.BundleName = "cisco_ios_xr"
    modified.EntityData.ParentYangName = "route-counts"
    modified.EntityData.SegmentPath = "modified"
    modified.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    modified.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    modified.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    modified.EntityData.Children = make(map[string]types.YChild)
    modified.EntityData.Leafs = make(map[string]types.YLeaf)
    modified.EntityData.Leafs["critical"] = types.YLeaf{"Critical", modified.Critical}
    modified.EntityData.Leafs["high"] = types.YLeaf{"High", modified.High}
    modified.EntityData.Leafs["medium"] = types.YLeaf{"Medium", modified.Medium}
    modified.EntityData.Leafs["low"] = types.YLeaf{"Low", modified.Low}
    return &(modified.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Touched
// Number of prefixes considered whilst updating
// the routing table
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Touched struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Touched) GetEntityData() *types.CommonEntityData {
    touched.EntityData.YFilter = touched.YFilter
    touched.EntityData.YangName = "touched"
    touched.EntityData.BundleName = "cisco_ios_xr"
    touched.EntityData.ParentYangName = "route-counts"
    touched.EntityData.SegmentPath = "touched"
    touched.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    touched.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    touched.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    touched.EntityData.Children = make(map[string]types.YChild)
    touched.EntityData.Leafs = make(map[string]types.YLeaf)
    touched.EntityData.Leafs["critical"] = types.YLeaf{"Critical", touched.Critical}
    touched.EntityData.Leafs["high"] = types.YLeaf{"High", touched.High}
    touched.EntityData.Leafs["medium"] = types.YLeaf{"Medium", touched.Medium}
    touched.EntityData.Leafs["low"] = types.YLeaf{"Low", touched.Low}
    return &(touched.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RibBatchCounts
// Number of RIB batches sent
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RibBatchCounts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (ribBatchCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RibBatchCounts) GetEntityData() *types.CommonEntityData {
    ribBatchCounts.EntityData.YFilter = ribBatchCounts.YFilter
    ribBatchCounts.EntityData.YangName = "rib-batch-counts"
    ribBatchCounts.EntityData.BundleName = "cisco_ios_xr"
    ribBatchCounts.EntityData.ParentYangName = "route-update-statistics"
    ribBatchCounts.EntityData.SegmentPath = "rib-batch-counts"
    ribBatchCounts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ribBatchCounts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ribBatchCounts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ribBatchCounts.EntityData.Children = make(map[string]types.YChild)
    ribBatchCounts.EntityData.Leafs = make(map[string]types.YLeaf)
    ribBatchCounts.EntityData.Leafs["critical"] = types.YLeaf{"Critical", ribBatchCounts.Critical}
    ribBatchCounts.EntityData.Leafs["high"] = types.YLeaf{"High", ribBatchCounts.High}
    ribBatchCounts.EntityData.Leafs["medium"] = types.YLeaf{"Medium", ribBatchCounts.Medium}
    ribBatchCounts.EntityData.Leafs["low"] = types.YLeaf{"Low", ribBatchCounts.Low}
    return &(ribBatchCounts.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels
// TE tunnels table. Only available within
// the IPv4 Unicast topology.
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A single TE tunnel advertized by IS-IS. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel.
    TeTunnel []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel
}

func (teTunnels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels) GetEntityData() *types.CommonEntityData {
    teTunnels.EntityData.YFilter = teTunnels.YFilter
    teTunnels.EntityData.YangName = "te-tunnels"
    teTunnels.EntityData.BundleName = "cisco_ios_xr"
    teTunnels.EntityData.ParentYangName = "topology-level"
    teTunnels.EntityData.SegmentPath = "te-tunnels"
    teTunnels.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teTunnels.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teTunnels.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teTunnels.EntityData.Children = make(map[string]types.YChild)
    teTunnels.EntityData.Children["te-tunnel"] = types.YChild{"TeTunnel", nil}
    for i := range teTunnels.TeTunnel {
        teTunnels.EntityData.Children[types.GetSegmentPath(&teTunnels.TeTunnel[i])] = types.YChild{"TeTunnel", &teTunnels.TeTunnel[i]}
    }
    teTunnels.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(teTunnels.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel
// A single TE tunnel advertized by IS-IS
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // System ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    SystemId interface{}

    // Interface name. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // Destination system ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    TeSystemId interface{}

    // Tunnel interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    TeInterface interface{}

    // Tunnel bandwidth. The type is interface{} with range: 0..4294967295.
    TeBandwidth interface{}

    // Tunnel metric. The type is interface{} with range: -2147483648..2147483647.
    TeigpMetric interface{}

    // Tunnel next-hop IP address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    TeNextHopIpAddress interface{}

    // Tunnel metric mode. The type is IsisMetricMode.
    TeModeType interface{}

    // Indicates whether MPLS TE IPv4 forwarding adjacency is enabled. The type is
    // bool.
    Teipv4FaEnabled interface{}

    // Indicates whether MPLS TE IPv6 forwarding adjacency is enabled. The type is
    // bool.
    Teipv6FaEnabled interface{}

    // Indicates whether MPLS TE IPv4 autoroute announce is enabled. The type is
    // bool.
    Teipv4AaEnabled interface{}

    // Indicates whether MPLS TE IPv6 autoroute announce is enabled. The type is
    // bool.
    Teipv6AaEnabled interface{}

    // Tunnel checkpoint object ID. The type is interface{} with range:
    // 0..4294967295.
    TeCheckpointObjectId interface{}

    // Indicates whether MPLS TE segment routing is enabled. The type is bool.
    TeSegmentRoutingEnabled interface{}

    // Indicates whether MPLS TE segment routing strict SPF is enabled. The type
    // is bool.
    TeSegmentRoutingStrictSpf interface{}

    // Indicates whether Segment routing labeled traffic exclusion is enabled. The
    // type is bool.
    TeSegmentRoutingExclude interface{}
}

func (teTunnel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel) GetEntityData() *types.CommonEntityData {
    teTunnel.EntityData.YFilter = teTunnel.YFilter
    teTunnel.EntityData.YangName = "te-tunnel"
    teTunnel.EntityData.BundleName = "cisco_ios_xr"
    teTunnel.EntityData.ParentYangName = "te-tunnels"
    teTunnel.EntityData.SegmentPath = "te-tunnel"
    teTunnel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teTunnel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teTunnel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teTunnel.EntityData.Children = make(map[string]types.YChild)
    teTunnel.EntityData.Leafs = make(map[string]types.YLeaf)
    teTunnel.EntityData.Leafs["system-id"] = types.YLeaf{"SystemId", teTunnel.SystemId}
    teTunnel.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", teTunnel.InterfaceName}
    teTunnel.EntityData.Leafs["te-system-id"] = types.YLeaf{"TeSystemId", teTunnel.TeSystemId}
    teTunnel.EntityData.Leafs["te-interface"] = types.YLeaf{"TeInterface", teTunnel.TeInterface}
    teTunnel.EntityData.Leafs["te-bandwidth"] = types.YLeaf{"TeBandwidth", teTunnel.TeBandwidth}
    teTunnel.EntityData.Leafs["teigp-metric"] = types.YLeaf{"TeigpMetric", teTunnel.TeigpMetric}
    teTunnel.EntityData.Leafs["te-next-hop-ip-address"] = types.YLeaf{"TeNextHopIpAddress", teTunnel.TeNextHopIpAddress}
    teTunnel.EntityData.Leafs["te-mode-type"] = types.YLeaf{"TeModeType", teTunnel.TeModeType}
    teTunnel.EntityData.Leafs["teipv4fa-enabled"] = types.YLeaf{"Teipv4FaEnabled", teTunnel.Teipv4FaEnabled}
    teTunnel.EntityData.Leafs["teipv6fa-enabled"] = types.YLeaf{"Teipv6FaEnabled", teTunnel.Teipv6FaEnabled}
    teTunnel.EntityData.Leafs["teipv4aa-enabled"] = types.YLeaf{"Teipv4AaEnabled", teTunnel.Teipv4AaEnabled}
    teTunnel.EntityData.Leafs["teipv6aa-enabled"] = types.YLeaf{"Teipv6AaEnabled", teTunnel.Teipv6AaEnabled}
    teTunnel.EntityData.Leafs["te-checkpoint-object-id"] = types.YLeaf{"TeCheckpointObjectId", teTunnel.TeCheckpointObjectId}
    teTunnel.EntityData.Leafs["te-segment-routing-enabled"] = types.YLeaf{"TeSegmentRoutingEnabled", teTunnel.TeSegmentRoutingEnabled}
    teTunnel.EntityData.Leafs["te-segment-routing-strict-spf"] = types.YLeaf{"TeSegmentRoutingStrictSpf", teTunnel.TeSegmentRoutingStrictSpf}
    teTunnel.EntityData.Leafs["te-segment-routing-exclude"] = types.YLeaf{"TeSegmentRoutingExclude", teTunnel.TeSegmentRoutingExclude}
    return &(teTunnel.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies
// IPv4 IS Topology table
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An IS in an IPv4 Link Topology. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology.
    Ipv4LinkTopology []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology
}

func (ipv4LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies) GetEntityData() *types.CommonEntityData {
    ipv4LinkTopologies.EntityData.YFilter = ipv4LinkTopologies.YFilter
    ipv4LinkTopologies.EntityData.YangName = "ipv4-link-topologies"
    ipv4LinkTopologies.EntityData.BundleName = "cisco_ios_xr"
    ipv4LinkTopologies.EntityData.ParentYangName = "topology-level"
    ipv4LinkTopologies.EntityData.SegmentPath = "ipv4-link-topologies"
    ipv4LinkTopologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4LinkTopologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4LinkTopologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4LinkTopologies.EntityData.Children = make(map[string]types.YChild)
    ipv4LinkTopologies.EntityData.Children["ipv4-link-topology"] = types.YChild{"Ipv4LinkTopology", nil}
    for i := range ipv4LinkTopologies.Ipv4LinkTopology {
        ipv4LinkTopologies.EntityData.Children[types.GetSegmentPath(&ipv4LinkTopologies.Ipv4LinkTopology[i])] = types.YChild{"Ipv4LinkTopology", &ipv4LinkTopologies.Ipv4LinkTopology[i]}
    }
    ipv4LinkTopologies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4LinkTopologies.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology
// An IS in an IPv4 Link Topology
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. System ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    SystemId interface{}

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Does the IS participate in the topology?. The type is bool.
    IsParticipant interface{}

    // Is the IS overloaded?. The type is bool.
    IsOverloaded interface{}

    // Is the IS attached?. The type is bool.
    IsAttached interface{}

    // Is the IS reachable, and, if so, its status within the SPT.
    ReachabilityStatus Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus

    // Per-priority counts of prefix items advertised by the IS.
    AdvertisedPrefixItemCounts Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_AdvertisedPrefixItemCounts
}

func (ipv4LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology) GetEntityData() *types.CommonEntityData {
    ipv4LinkTopology.EntityData.YFilter = ipv4LinkTopology.YFilter
    ipv4LinkTopology.EntityData.YangName = "ipv4-link-topology"
    ipv4LinkTopology.EntityData.BundleName = "cisco_ios_xr"
    ipv4LinkTopology.EntityData.ParentYangName = "ipv4-link-topologies"
    ipv4LinkTopology.EntityData.SegmentPath = "ipv4-link-topology" + "[system-id='" + fmt.Sprintf("%v", ipv4LinkTopology.SystemId) + "']"
    ipv4LinkTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4LinkTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4LinkTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4LinkTopology.EntityData.Children = make(map[string]types.YChild)
    ipv4LinkTopology.EntityData.Children["reachability-status"] = types.YChild{"ReachabilityStatus", &ipv4LinkTopology.ReachabilityStatus}
    ipv4LinkTopology.EntityData.Children["advertised-prefix-item-counts"] = types.YChild{"AdvertisedPrefixItemCounts", &ipv4LinkTopology.AdvertisedPrefixItemCounts}
    ipv4LinkTopology.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv4LinkTopology.EntityData.Leafs["system-id"] = types.YLeaf{"SystemId", ipv4LinkTopology.SystemId}
    ipv4LinkTopology.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", ipv4LinkTopology.SourceAddress}
    ipv4LinkTopology.EntityData.Leafs["is-participant"] = types.YLeaf{"IsParticipant", ipv4LinkTopology.IsParticipant}
    ipv4LinkTopology.EntityData.Leafs["is-overloaded"] = types.YLeaf{"IsOverloaded", ipv4LinkTopology.IsOverloaded}
    ipv4LinkTopology.EntityData.Leafs["is-attached"] = types.YLeaf{"IsAttached", ipv4LinkTopology.IsAttached}
    return &(ipv4LinkTopology.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus
// Is the IS reachable, and, if so, its status
// within the SPT
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ReachableStatus. The type is IsisReachable.
    ReachableStatus interface{}

    // Status of the IS within the SPT.
    ReachableDetails Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails
}

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus) GetEntityData() *types.CommonEntityData {
    reachabilityStatus.EntityData.YFilter = reachabilityStatus.YFilter
    reachabilityStatus.EntityData.YangName = "reachability-status"
    reachabilityStatus.EntityData.BundleName = "cisco_ios_xr"
    reachabilityStatus.EntityData.ParentYangName = "ipv4-link-topology"
    reachabilityStatus.EntityData.SegmentPath = "reachability-status"
    reachabilityStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    reachabilityStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    reachabilityStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    reachabilityStatus.EntityData.Children = make(map[string]types.YChild)
    reachabilityStatus.EntityData.Children["reachable-details"] = types.YChild{"ReachableDetails", &reachabilityStatus.ReachableDetails}
    reachabilityStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    reachabilityStatus.EntityData.Leafs["reachable-status"] = types.YLeaf{"ReachableStatus", reachabilityStatus.ReachableStatus}
    return &(reachabilityStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails
// Status of the IS within the SPT
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Distance to the IS. The type is interface{} with range: 0..4294967295.
    RootDistance interface{}

    // Distance to the IS. The type is interface{} with range: 0..4294967295.
    MulticastRootDistance interface{}

    // First hops towards the IS. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths.
    Paths []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths

    // Multicast intact first hops towards the IS. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath.
    MulticastPath []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath

    // Parents of the IS within the SPT. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent.
    Parent []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent

    // Children of the IS within the SPT. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children.
    Children []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children
}

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails) GetEntityData() *types.CommonEntityData {
    reachableDetails.EntityData.YFilter = reachableDetails.YFilter
    reachableDetails.EntityData.YangName = "reachable-details"
    reachableDetails.EntityData.BundleName = "cisco_ios_xr"
    reachableDetails.EntityData.ParentYangName = "reachability-status"
    reachableDetails.EntityData.SegmentPath = "reachable-details"
    reachableDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    reachableDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    reachableDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    reachableDetails.EntityData.Children = make(map[string]types.YChild)
    reachableDetails.EntityData.Children["paths"] = types.YChild{"Paths", nil}
    for i := range reachableDetails.Paths {
        reachableDetails.EntityData.Children[types.GetSegmentPath(&reachableDetails.Paths[i])] = types.YChild{"Paths", &reachableDetails.Paths[i]}
    }
    reachableDetails.EntityData.Children["multicast-path"] = types.YChild{"MulticastPath", nil}
    for i := range reachableDetails.MulticastPath {
        reachableDetails.EntityData.Children[types.GetSegmentPath(&reachableDetails.MulticastPath[i])] = types.YChild{"MulticastPath", &reachableDetails.MulticastPath[i]}
    }
    reachableDetails.EntityData.Children["parent"] = types.YChild{"Parent", nil}
    for i := range reachableDetails.Parent {
        reachableDetails.EntityData.Children[types.GetSegmentPath(&reachableDetails.Parent[i])] = types.YChild{"Parent", &reachableDetails.Parent[i]}
    }
    reachableDetails.EntityData.Children["children"] = types.YChild{"Children", nil}
    for i := range reachableDetails.Children {
        reachableDetails.EntityData.Children[types.GetSegmentPath(&reachableDetails.Children[i])] = types.YChild{"Children", &reachableDetails.Children[i]}
    }
    reachableDetails.EntityData.Leafs = make(map[string]types.YLeaf)
    reachableDetails.EntityData.Leafs["root-distance"] = types.YLeaf{"RootDistance", reachableDetails.RootDistance}
    reachableDetails.EntityData.Leafs["multicast-root-distance"] = types.YLeaf{"MulticastRootDistance", reachableDetails.MulticastRootDistance}
    return &(reachableDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths
// First hops towards the IS
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit
}

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "reachable-details"
    paths.EntityData.SegmentPath = "paths"
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = make(map[string]types.YChild)
    paths.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &paths.FrrBackup}
    paths.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range paths.UloopExplicit {
        paths.EntityData.Children[types.GetSegmentPath(&paths.UloopExplicit[i])] = types.YChild{"UloopExplicit", &paths.UloopExplicit[i]}
    }
    paths.EntityData.Leafs = make(map[string]types.YLeaf)
    paths.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", paths.NeighborId}
    paths.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", paths.EgressInterface}
    paths.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", paths.NeighborAddress}
    paths.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", paths.NeighborSnpa}
    paths.EntityData.Leafs["tag"] = types.YLeaf{"Tag", paths.Tag}
    paths.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", paths.TunnelInterface}
    paths.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", paths.SegmentRoutingSidValue}
    paths.EntityData.Leafs["weight"] = types.YLeaf{"Weight", paths.Weight}
    paths.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", paths.IsTeTunnelInterface}
    paths.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", paths.IsSrExcludeTunnelInterface}
    return &(paths.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "paths"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "paths"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath
// Multicast intact first hops towards the IS
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetEntityData() *types.CommonEntityData {
    multicastPath.EntityData.YFilter = multicastPath.YFilter
    multicastPath.EntityData.YangName = "multicast-path"
    multicastPath.EntityData.BundleName = "cisco_ios_xr"
    multicastPath.EntityData.ParentYangName = "reachable-details"
    multicastPath.EntityData.SegmentPath = "multicast-path"
    multicastPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastPath.EntityData.Children = make(map[string]types.YChild)
    multicastPath.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &multicastPath.FrrBackup}
    multicastPath.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range multicastPath.UloopExplicit {
        multicastPath.EntityData.Children[types.GetSegmentPath(&multicastPath.UloopExplicit[i])] = types.YChild{"UloopExplicit", &multicastPath.UloopExplicit[i]}
    }
    multicastPath.EntityData.Leafs = make(map[string]types.YLeaf)
    multicastPath.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", multicastPath.NeighborId}
    multicastPath.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", multicastPath.EgressInterface}
    multicastPath.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", multicastPath.NeighborAddress}
    multicastPath.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", multicastPath.NeighborSnpa}
    multicastPath.EntityData.Leafs["tag"] = types.YLeaf{"Tag", multicastPath.Tag}
    multicastPath.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", multicastPath.TunnelInterface}
    multicastPath.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", multicastPath.SegmentRoutingSidValue}
    multicastPath.EntityData.Leafs["weight"] = types.YLeaf{"Weight", multicastPath.Weight}
    multicastPath.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", multicastPath.IsTeTunnelInterface}
    multicastPath.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", multicastPath.IsSrExcludeTunnelInterface}
    return &(multicastPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "multicast-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "multicast-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent
// Parents of the IS within the SPT
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Pseudonode between system and its neighbor. The type is string with
    // pattern: b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}'.
    IntermediatePseudonode interface{}
}

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetEntityData() *types.CommonEntityData {
    parent.EntityData.YFilter = parent.YFilter
    parent.EntityData.YangName = "parent"
    parent.EntityData.BundleName = "cisco_ios_xr"
    parent.EntityData.ParentYangName = "reachable-details"
    parent.EntityData.SegmentPath = "parent"
    parent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    parent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    parent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    parent.EntityData.Children = make(map[string]types.YChild)
    parent.EntityData.Leafs = make(map[string]types.YLeaf)
    parent.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", parent.NeighborId}
    parent.EntityData.Leafs["intermediate-pseudonode"] = types.YLeaf{"IntermediatePseudonode", parent.IntermediatePseudonode}
    return &(parent.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children
// Children of the IS within the SPT
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Pseudonode between system and its neighbor. The type is string with
    // pattern: b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}'.
    IntermediatePseudonode interface{}
}

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetEntityData() *types.CommonEntityData {
    children.EntityData.YFilter = children.YFilter
    children.EntityData.YangName = "children"
    children.EntityData.BundleName = "cisco_ios_xr"
    children.EntityData.ParentYangName = "reachable-details"
    children.EntityData.SegmentPath = "children"
    children.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    children.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    children.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    children.EntityData.Children = make(map[string]types.YChild)
    children.EntityData.Leafs = make(map[string]types.YLeaf)
    children.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", children.NeighborId}
    children.EntityData.Leafs["intermediate-pseudonode"] = types.YLeaf{"IntermediatePseudonode", children.IntermediatePseudonode}
    return &(children.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_AdvertisedPrefixItemCounts
// Per-priority counts of prefix items advertised
// by the IS
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_AdvertisedPrefixItemCounts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_AdvertisedPrefixItemCounts) GetEntityData() *types.CommonEntityData {
    advertisedPrefixItemCounts.EntityData.YFilter = advertisedPrefixItemCounts.YFilter
    advertisedPrefixItemCounts.EntityData.YangName = "advertised-prefix-item-counts"
    advertisedPrefixItemCounts.EntityData.BundleName = "cisco_ios_xr"
    advertisedPrefixItemCounts.EntityData.ParentYangName = "ipv4-link-topology"
    advertisedPrefixItemCounts.EntityData.SegmentPath = "advertised-prefix-item-counts"
    advertisedPrefixItemCounts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertisedPrefixItemCounts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertisedPrefixItemCounts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertisedPrefixItemCounts.EntityData.Children = make(map[string]types.YChild)
    advertisedPrefixItemCounts.EntityData.Leafs = make(map[string]types.YLeaf)
    advertisedPrefixItemCounts.EntityData.Leafs["critical"] = types.YLeaf{"Critical", advertisedPrefixItemCounts.Critical}
    advertisedPrefixItemCounts.EntityData.Leafs["high"] = types.YLeaf{"High", advertisedPrefixItemCounts.High}
    advertisedPrefixItemCounts.EntityData.Leafs["medium"] = types.YLeaf{"Medium", advertisedPrefixItemCounts.Medium}
    advertisedPrefixItemCounts.EntityData.Leafs["low"] = types.YLeaf{"Low", advertisedPrefixItemCounts.Low}
    return &(advertisedPrefixItemCounts.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary
// Summary information for a particular IS
// Topology
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Node Counts for System nodes.
    RouterNodeCount Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_RouterNodeCount

    // Node Counts for Pseudonode nodes.
    PseudonodeNodeCount Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_PseudonodeNodeCount
}

func (topologySummary *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary) GetEntityData() *types.CommonEntityData {
    topologySummary.EntityData.YFilter = topologySummary.YFilter
    topologySummary.EntityData.YangName = "topology-summary"
    topologySummary.EntityData.BundleName = "cisco_ios_xr"
    topologySummary.EntityData.ParentYangName = "topology-level"
    topologySummary.EntityData.SegmentPath = "topology-summary"
    topologySummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topologySummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topologySummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topologySummary.EntityData.Children = make(map[string]types.YChild)
    topologySummary.EntityData.Children["router-node-count"] = types.YChild{"RouterNodeCount", &topologySummary.RouterNodeCount}
    topologySummary.EntityData.Children["pseudonode-node-count"] = types.YChild{"PseudonodeNodeCount", &topologySummary.PseudonodeNodeCount}
    topologySummary.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(topologySummary.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_RouterNodeCount
// Node Counts for System nodes
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_RouterNodeCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of nodes reachable in SPT. The type is interface{} with range:
    // 0..4294967295.
    ReachableNodeCount interface{}

    // Number of nodes unreachable in SPT. The type is interface{} with range:
    // 0..4294967295.
    UnreachableNodeCount interface{}

    // Number of participating nodes unreachable in SPT. The type is interface{}
    // with range: 0..4294967295.
    UnreachableParticipantNodeCount interface{}
}

func (routerNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_RouterNodeCount) GetEntityData() *types.CommonEntityData {
    routerNodeCount.EntityData.YFilter = routerNodeCount.YFilter
    routerNodeCount.EntityData.YangName = "router-node-count"
    routerNodeCount.EntityData.BundleName = "cisco_ios_xr"
    routerNodeCount.EntityData.ParentYangName = "topology-summary"
    routerNodeCount.EntityData.SegmentPath = "router-node-count"
    routerNodeCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routerNodeCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routerNodeCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routerNodeCount.EntityData.Children = make(map[string]types.YChild)
    routerNodeCount.EntityData.Leafs = make(map[string]types.YLeaf)
    routerNodeCount.EntityData.Leafs["reachable-node-count"] = types.YLeaf{"ReachableNodeCount", routerNodeCount.ReachableNodeCount}
    routerNodeCount.EntityData.Leafs["unreachable-node-count"] = types.YLeaf{"UnreachableNodeCount", routerNodeCount.UnreachableNodeCount}
    routerNodeCount.EntityData.Leafs["unreachable-participant-node-count"] = types.YLeaf{"UnreachableParticipantNodeCount", routerNodeCount.UnreachableParticipantNodeCount}
    return &(routerNodeCount.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_PseudonodeNodeCount
// Node Counts for Pseudonode nodes
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_PseudonodeNodeCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of nodes reachable in SPT. The type is interface{} with range:
    // 0..4294967295.
    ReachableNodeCount interface{}

    // Number of nodes unreachable in SPT. The type is interface{} with range:
    // 0..4294967295.
    UnreachableNodeCount interface{}

    // Number of participating nodes unreachable in SPT. The type is interface{}
    // with range: 0..4294967295.
    UnreachableParticipantNodeCount interface{}
}

func (pseudonodeNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_PseudonodeNodeCount) GetEntityData() *types.CommonEntityData {
    pseudonodeNodeCount.EntityData.YFilter = pseudonodeNodeCount.YFilter
    pseudonodeNodeCount.EntityData.YangName = "pseudonode-node-count"
    pseudonodeNodeCount.EntityData.BundleName = "cisco_ios_xr"
    pseudonodeNodeCount.EntityData.ParentYangName = "topology-summary"
    pseudonodeNodeCount.EntityData.SegmentPath = "pseudonode-node-count"
    pseudonodeNodeCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudonodeNodeCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudonodeNodeCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudonodeNodeCount.EntityData.Children = make(map[string]types.YChild)
    pseudonodeNodeCount.EntityData.Leafs = make(map[string]types.YLeaf)
    pseudonodeNodeCount.EntityData.Leafs["reachable-node-count"] = types.YLeaf{"ReachableNodeCount", pseudonodeNodeCount.ReachableNodeCount}
    pseudonodeNodeCount.EntityData.Leafs["unreachable-node-count"] = types.YLeaf{"UnreachableNodeCount", pseudonodeNodeCount.UnreachableNodeCount}
    pseudonodeNodeCount.EntityData.Leafs["unreachable-participant-node-count"] = types.YLeaf{"UnreachableParticipantNodeCount", pseudonodeNodeCount.UnreachableParticipantNodeCount}
    return &(pseudonodeNodeCount.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies
// IPv6 IS Topology table
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An IS in an IPv6 Link Topology. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology.
    Ipv6LinkTopology []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology
}

func (ipv6LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies) GetEntityData() *types.CommonEntityData {
    ipv6LinkTopologies.EntityData.YFilter = ipv6LinkTopologies.YFilter
    ipv6LinkTopologies.EntityData.YangName = "ipv6-link-topologies"
    ipv6LinkTopologies.EntityData.BundleName = "cisco_ios_xr"
    ipv6LinkTopologies.EntityData.ParentYangName = "topology-level"
    ipv6LinkTopologies.EntityData.SegmentPath = "ipv6-link-topologies"
    ipv6LinkTopologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6LinkTopologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6LinkTopologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6LinkTopologies.EntityData.Children = make(map[string]types.YChild)
    ipv6LinkTopologies.EntityData.Children["ipv6-link-topology"] = types.YChild{"Ipv6LinkTopology", nil}
    for i := range ipv6LinkTopologies.Ipv6LinkTopology {
        ipv6LinkTopologies.EntityData.Children[types.GetSegmentPath(&ipv6LinkTopologies.Ipv6LinkTopology[i])] = types.YChild{"Ipv6LinkTopology", &ipv6LinkTopologies.Ipv6LinkTopology[i]}
    }
    ipv6LinkTopologies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6LinkTopologies.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology
// An IS in an IPv6 Link Topology
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. System ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    SystemId interface{}

    // Source Address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Does the IS participate in the topology?. The type is bool.
    IsParticipant interface{}

    // Is the IS overloaded?. The type is bool.
    IsOverloaded interface{}

    // Is the IS attached?. The type is bool.
    IsAttached interface{}

    // Is the IS reachable, and, if so, its status within the SPT.
    ReachabilityStatus Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus

    // Per-priority counts of prefix items advertised by the IS.
    AdvertisedPrefixItemCounts Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_AdvertisedPrefixItemCounts
}

func (ipv6LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology) GetEntityData() *types.CommonEntityData {
    ipv6LinkTopology.EntityData.YFilter = ipv6LinkTopology.YFilter
    ipv6LinkTopology.EntityData.YangName = "ipv6-link-topology"
    ipv6LinkTopology.EntityData.BundleName = "cisco_ios_xr"
    ipv6LinkTopology.EntityData.ParentYangName = "ipv6-link-topologies"
    ipv6LinkTopology.EntityData.SegmentPath = "ipv6-link-topology" + "[system-id='" + fmt.Sprintf("%v", ipv6LinkTopology.SystemId) + "']"
    ipv6LinkTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6LinkTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6LinkTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6LinkTopology.EntityData.Children = make(map[string]types.YChild)
    ipv6LinkTopology.EntityData.Children["reachability-status"] = types.YChild{"ReachabilityStatus", &ipv6LinkTopology.ReachabilityStatus}
    ipv6LinkTopology.EntityData.Children["advertised-prefix-item-counts"] = types.YChild{"AdvertisedPrefixItemCounts", &ipv6LinkTopology.AdvertisedPrefixItemCounts}
    ipv6LinkTopology.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv6LinkTopology.EntityData.Leafs["system-id"] = types.YLeaf{"SystemId", ipv6LinkTopology.SystemId}
    ipv6LinkTopology.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", ipv6LinkTopology.SourceAddress}
    ipv6LinkTopology.EntityData.Leafs["is-participant"] = types.YLeaf{"IsParticipant", ipv6LinkTopology.IsParticipant}
    ipv6LinkTopology.EntityData.Leafs["is-overloaded"] = types.YLeaf{"IsOverloaded", ipv6LinkTopology.IsOverloaded}
    ipv6LinkTopology.EntityData.Leafs["is-attached"] = types.YLeaf{"IsAttached", ipv6LinkTopology.IsAttached}
    return &(ipv6LinkTopology.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus
// Is the IS reachable, and, if so, its status
// within the SPT
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ReachableStatus. The type is IsisReachable.
    ReachableStatus interface{}

    // Status of the IS within the SPT.
    ReachableDetails Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails
}

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus) GetEntityData() *types.CommonEntityData {
    reachabilityStatus.EntityData.YFilter = reachabilityStatus.YFilter
    reachabilityStatus.EntityData.YangName = "reachability-status"
    reachabilityStatus.EntityData.BundleName = "cisco_ios_xr"
    reachabilityStatus.EntityData.ParentYangName = "ipv6-link-topology"
    reachabilityStatus.EntityData.SegmentPath = "reachability-status"
    reachabilityStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    reachabilityStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    reachabilityStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    reachabilityStatus.EntityData.Children = make(map[string]types.YChild)
    reachabilityStatus.EntityData.Children["reachable-details"] = types.YChild{"ReachableDetails", &reachabilityStatus.ReachableDetails}
    reachabilityStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    reachabilityStatus.EntityData.Leafs["reachable-status"] = types.YLeaf{"ReachableStatus", reachabilityStatus.ReachableStatus}
    return &(reachabilityStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails
// Status of the IS within the SPT
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Distance to the IS. The type is interface{} with range: 0..4294967295.
    RootDistance interface{}

    // Distance to the IS. The type is interface{} with range: 0..4294967295.
    MulticastRootDistance interface{}

    // First hops towards the IS. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths.
    Paths []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths

    // Multicast intact first hops towards the IS. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath.
    MulticastPath []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath

    // Parents of the IS within the SPT. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent.
    Parent []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent

    // Children of the IS within the SPT. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children.
    Children []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children
}

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails) GetEntityData() *types.CommonEntityData {
    reachableDetails.EntityData.YFilter = reachableDetails.YFilter
    reachableDetails.EntityData.YangName = "reachable-details"
    reachableDetails.EntityData.BundleName = "cisco_ios_xr"
    reachableDetails.EntityData.ParentYangName = "reachability-status"
    reachableDetails.EntityData.SegmentPath = "reachable-details"
    reachableDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    reachableDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    reachableDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    reachableDetails.EntityData.Children = make(map[string]types.YChild)
    reachableDetails.EntityData.Children["paths"] = types.YChild{"Paths", nil}
    for i := range reachableDetails.Paths {
        reachableDetails.EntityData.Children[types.GetSegmentPath(&reachableDetails.Paths[i])] = types.YChild{"Paths", &reachableDetails.Paths[i]}
    }
    reachableDetails.EntityData.Children["multicast-path"] = types.YChild{"MulticastPath", nil}
    for i := range reachableDetails.MulticastPath {
        reachableDetails.EntityData.Children[types.GetSegmentPath(&reachableDetails.MulticastPath[i])] = types.YChild{"MulticastPath", &reachableDetails.MulticastPath[i]}
    }
    reachableDetails.EntityData.Children["parent"] = types.YChild{"Parent", nil}
    for i := range reachableDetails.Parent {
        reachableDetails.EntityData.Children[types.GetSegmentPath(&reachableDetails.Parent[i])] = types.YChild{"Parent", &reachableDetails.Parent[i]}
    }
    reachableDetails.EntityData.Children["children"] = types.YChild{"Children", nil}
    for i := range reachableDetails.Children {
        reachableDetails.EntityData.Children[types.GetSegmentPath(&reachableDetails.Children[i])] = types.YChild{"Children", &reachableDetails.Children[i]}
    }
    reachableDetails.EntityData.Leafs = make(map[string]types.YLeaf)
    reachableDetails.EntityData.Leafs["root-distance"] = types.YLeaf{"RootDistance", reachableDetails.RootDistance}
    reachableDetails.EntityData.Leafs["multicast-root-distance"] = types.YLeaf{"MulticastRootDistance", reachableDetails.MulticastRootDistance}
    return &(reachableDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths
// First hops towards the IS
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit
}

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "reachable-details"
    paths.EntityData.SegmentPath = "paths"
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = make(map[string]types.YChild)
    paths.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &paths.FrrBackup}
    paths.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range paths.UloopExplicit {
        paths.EntityData.Children[types.GetSegmentPath(&paths.UloopExplicit[i])] = types.YChild{"UloopExplicit", &paths.UloopExplicit[i]}
    }
    paths.EntityData.Leafs = make(map[string]types.YLeaf)
    paths.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", paths.NeighborId}
    paths.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", paths.EgressInterface}
    paths.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", paths.NeighborAddress}
    paths.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", paths.NeighborSnpa}
    paths.EntityData.Leafs["tag"] = types.YLeaf{"Tag", paths.Tag}
    paths.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", paths.TunnelInterface}
    paths.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", paths.SegmentRoutingSidValue}
    paths.EntityData.Leafs["weight"] = types.YLeaf{"Weight", paths.Weight}
    paths.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", paths.IsTeTunnelInterface}
    paths.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", paths.IsSrExcludeTunnelInterface}
    return &(paths.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "paths"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "paths"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath
// Multicast intact first hops towards the IS
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetEntityData() *types.CommonEntityData {
    multicastPath.EntityData.YFilter = multicastPath.YFilter
    multicastPath.EntityData.YangName = "multicast-path"
    multicastPath.EntityData.BundleName = "cisco_ios_xr"
    multicastPath.EntityData.ParentYangName = "reachable-details"
    multicastPath.EntityData.SegmentPath = "multicast-path"
    multicastPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastPath.EntityData.Children = make(map[string]types.YChild)
    multicastPath.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &multicastPath.FrrBackup}
    multicastPath.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range multicastPath.UloopExplicit {
        multicastPath.EntityData.Children[types.GetSegmentPath(&multicastPath.UloopExplicit[i])] = types.YChild{"UloopExplicit", &multicastPath.UloopExplicit[i]}
    }
    multicastPath.EntityData.Leafs = make(map[string]types.YLeaf)
    multicastPath.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", multicastPath.NeighborId}
    multicastPath.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", multicastPath.EgressInterface}
    multicastPath.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", multicastPath.NeighborAddress}
    multicastPath.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", multicastPath.NeighborSnpa}
    multicastPath.EntityData.Leafs["tag"] = types.YLeaf{"Tag", multicastPath.Tag}
    multicastPath.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", multicastPath.TunnelInterface}
    multicastPath.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", multicastPath.SegmentRoutingSidValue}
    multicastPath.EntityData.Leafs["weight"] = types.YLeaf{"Weight", multicastPath.Weight}
    multicastPath.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", multicastPath.IsTeTunnelInterface}
    multicastPath.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", multicastPath.IsSrExcludeTunnelInterface}
    return &(multicastPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "multicast-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "multicast-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent
// Parents of the IS within the SPT
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Pseudonode between system and its neighbor. The type is string with
    // pattern: b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}'.
    IntermediatePseudonode interface{}
}

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetEntityData() *types.CommonEntityData {
    parent.EntityData.YFilter = parent.YFilter
    parent.EntityData.YangName = "parent"
    parent.EntityData.BundleName = "cisco_ios_xr"
    parent.EntityData.ParentYangName = "reachable-details"
    parent.EntityData.SegmentPath = "parent"
    parent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    parent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    parent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    parent.EntityData.Children = make(map[string]types.YChild)
    parent.EntityData.Leafs = make(map[string]types.YLeaf)
    parent.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", parent.NeighborId}
    parent.EntityData.Leafs["intermediate-pseudonode"] = types.YLeaf{"IntermediatePseudonode", parent.IntermediatePseudonode}
    return &(parent.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children
// Children of the IS within the SPT
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Pseudonode between system and its neighbor. The type is string with
    // pattern: b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}'.
    IntermediatePseudonode interface{}
}

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetEntityData() *types.CommonEntityData {
    children.EntityData.YFilter = children.YFilter
    children.EntityData.YangName = "children"
    children.EntityData.BundleName = "cisco_ios_xr"
    children.EntityData.ParentYangName = "reachable-details"
    children.EntityData.SegmentPath = "children"
    children.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    children.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    children.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    children.EntityData.Children = make(map[string]types.YChild)
    children.EntityData.Leafs = make(map[string]types.YLeaf)
    children.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", children.NeighborId}
    children.EntityData.Leafs["intermediate-pseudonode"] = types.YLeaf{"IntermediatePseudonode", children.IntermediatePseudonode}
    return &(children.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_AdvertisedPrefixItemCounts
// Per-priority counts of prefix items advertised
// by the IS
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_AdvertisedPrefixItemCounts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_AdvertisedPrefixItemCounts) GetEntityData() *types.CommonEntityData {
    advertisedPrefixItemCounts.EntityData.YFilter = advertisedPrefixItemCounts.YFilter
    advertisedPrefixItemCounts.EntityData.YangName = "advertised-prefix-item-counts"
    advertisedPrefixItemCounts.EntityData.BundleName = "cisco_ios_xr"
    advertisedPrefixItemCounts.EntityData.ParentYangName = "ipv6-link-topology"
    advertisedPrefixItemCounts.EntityData.SegmentPath = "advertised-prefix-item-counts"
    advertisedPrefixItemCounts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertisedPrefixItemCounts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertisedPrefixItemCounts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertisedPrefixItemCounts.EntityData.Children = make(map[string]types.YChild)
    advertisedPrefixItemCounts.EntityData.Leafs = make(map[string]types.YLeaf)
    advertisedPrefixItemCounts.EntityData.Leafs["critical"] = types.YLeaf{"Critical", advertisedPrefixItemCounts.Critical}
    advertisedPrefixItemCounts.EntityData.Leafs["high"] = types.YLeaf{"High", advertisedPrefixItemCounts.High}
    advertisedPrefixItemCounts.EntityData.Leafs["medium"] = types.YLeaf{"Medium", advertisedPrefixItemCounts.Medium}
    advertisedPrefixItemCounts.EntityData.Leafs["low"] = types.YLeaf{"Low", advertisedPrefixItemCounts.Low}
    return &(advertisedPrefixItemCounts.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes
// IPv6 local route
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An IPv6 route known to IS-IS. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route.
    Ipv6Route []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route
}

func (ipv6Routes *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes) GetEntityData() *types.CommonEntityData {
    ipv6Routes.EntityData.YFilter = ipv6Routes.YFilter
    ipv6Routes.EntityData.YangName = "ipv6-routes"
    ipv6Routes.EntityData.BundleName = "cisco_ios_xr"
    ipv6Routes.EntityData.ParentYangName = "topology"
    ipv6Routes.EntityData.SegmentPath = "ipv6-routes"
    ipv6Routes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Routes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Routes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Routes.EntityData.Children = make(map[string]types.YChild)
    ipv6Routes.EntityData.Children["ipv6-route"] = types.YChild{"Ipv6Route", nil}
    for i := range ipv6Routes.Ipv6Route {
        ipv6Routes.EntityData.Children[types.GetSegmentPath(&ipv6Routes.Ipv6Route[i])] = types.YChild{"Ipv6Route", &ipv6Routes.Ipv6Route[i]}
    }
    ipv6Routes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6Routes.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route
// An IPv6 route known to IS-IS
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Status of IS-IS directly connected routes to the prefix.
    ConnectedStatus Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus

    // Status of other protocols' routes redistributed into IS-IS.
    RedistributedStatus Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus

    // Status of native IS-IS routes to the prefix.
    NativeStatus Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus

    // Per level details of how the local system advertises the prefix. The type
    // is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail.
    PerLevelAdvertisingDetail []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail
}

func (ipv6Route *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route) GetEntityData() *types.CommonEntityData {
    ipv6Route.EntityData.YFilter = ipv6Route.YFilter
    ipv6Route.EntityData.YangName = "ipv6-route"
    ipv6Route.EntityData.BundleName = "cisco_ios_xr"
    ipv6Route.EntityData.ParentYangName = "ipv6-routes"
    ipv6Route.EntityData.SegmentPath = "ipv6-route"
    ipv6Route.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Route.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Route.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Route.EntityData.Children = make(map[string]types.YChild)
    ipv6Route.EntityData.Children["connected-status"] = types.YChild{"ConnectedStatus", &ipv6Route.ConnectedStatus}
    ipv6Route.EntityData.Children["redistributed-status"] = types.YChild{"RedistributedStatus", &ipv6Route.RedistributedStatus}
    ipv6Route.EntityData.Children["native-status"] = types.YChild{"NativeStatus", &ipv6Route.NativeStatus}
    ipv6Route.EntityData.Children["per-level-advertising-detail"] = types.YChild{"PerLevelAdvertisingDetail", nil}
    for i := range ipv6Route.PerLevelAdvertisingDetail {
        ipv6Route.EntityData.Children[types.GetSegmentPath(&ipv6Route.PerLevelAdvertisingDetail[i])] = types.YChild{"PerLevelAdvertisingDetail", &ipv6Route.PerLevelAdvertisingDetail[i]}
    }
    ipv6Route.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv6Route.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", ipv6Route.Prefix}
    ipv6Route.EntityData.Leafs["prefix-length"] = types.YLeaf{"PrefixLength", ipv6Route.PrefixLength}
    return &(ipv6Route.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus
// Status of IS-IS directly connected routes to the
// prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the directly connected prefix.
    ConnectedDetails Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus) GetEntityData() *types.CommonEntityData {
    connectedStatus.EntityData.YFilter = connectedStatus.YFilter
    connectedStatus.EntityData.YangName = "connected-status"
    connectedStatus.EntityData.BundleName = "cisco_ios_xr"
    connectedStatus.EntityData.ParentYangName = "ipv6-route"
    connectedStatus.EntityData.SegmentPath = "connected-status"
    connectedStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedStatus.EntityData.Children = make(map[string]types.YChild)
    connectedStatus.EntityData.Children["connected-details"] = types.YChild{"ConnectedDetails", &connectedStatus.ConnectedDetails}
    connectedStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    connectedStatus.EntityData.Leafs["is-valid"] = types.YLeaf{"IsValid", connectedStatus.IsValid}
    return &(connectedStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails
// Details of the directly connected prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interfaces. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface_.
    Interface_ []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails) GetEntityData() *types.CommonEntityData {
    connectedDetails.EntityData.YFilter = connectedDetails.YFilter
    connectedDetails.EntityData.YangName = "connected-details"
    connectedDetails.EntityData.BundleName = "cisco_ios_xr"
    connectedDetails.EntityData.ParentYangName = "connected-status"
    connectedDetails.EntityData.SegmentPath = "connected-details"
    connectedDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedDetails.EntityData.Children = make(map[string]types.YChild)
    connectedDetails.EntityData.Children["interface"] = types.YChild{"Interface_", nil}
    for i := range connectedDetails.Interface_ {
        connectedDetails.EntityData.Children[types.GetSegmentPath(&connectedDetails.Interface_[i])] = types.YChild{"Interface_", &connectedDetails.Interface_[i]}
    }
    connectedDetails.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(connectedDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface
// Interfaces
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    Entry interface{}
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "connected-details"
    self.EntityData.SegmentPath = "interface"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["entry"] = types.YLeaf{"Entry", self.Entry}
    return &(self.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus
// Status of other protocols' routes redistributed
// into IS-IS
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Per level details of the redistributed route.
    RedistributionDetails Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus) GetEntityData() *types.CommonEntityData {
    redistributedStatus.EntityData.YFilter = redistributedStatus.YFilter
    redistributedStatus.EntityData.YangName = "redistributed-status"
    redistributedStatus.EntityData.BundleName = "cisco_ios_xr"
    redistributedStatus.EntityData.ParentYangName = "ipv6-route"
    redistributedStatus.EntityData.SegmentPath = "redistributed-status"
    redistributedStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributedStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributedStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributedStatus.EntityData.Children = make(map[string]types.YChild)
    redistributedStatus.EntityData.Children["redistribution-details"] = types.YChild{"RedistributionDetails", &redistributedStatus.RedistributionDetails}
    redistributedStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    redistributedStatus.EntityData.Leafs["is-valid"] = types.YLeaf{"IsValid", redistributedStatus.IsValid}
    return &(redistributedStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails
// Per level details of the redistributed route
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // isis sh route redist detail. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail.
    IsisShRouteRedistDetail []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails) GetEntityData() *types.CommonEntityData {
    redistributionDetails.EntityData.YFilter = redistributionDetails.YFilter
    redistributionDetails.EntityData.YangName = "redistribution-details"
    redistributionDetails.EntityData.BundleName = "cisco_ios_xr"
    redistributionDetails.EntityData.ParentYangName = "redistributed-status"
    redistributionDetails.EntityData.SegmentPath = "redistribution-details"
    redistributionDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributionDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributionDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributionDetails.EntityData.Children = make(map[string]types.YChild)
    redistributionDetails.EntityData.Children["isis-sh-route-redist-detail"] = types.YChild{"IsisShRouteRedistDetail", nil}
    for i := range redistributionDetails.IsisShRouteRedistDetail {
        redistributionDetails.EntityData.Children[types.GetSegmentPath(&redistributionDetails.IsisShRouteRedistDetail[i])] = types.YChild{"IsisShRouteRedistDetail", &redistributionDetails.IsisShRouteRedistDetail[i]}
    }
    redistributionDetails.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(redistributionDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
// isis sh route redist detail
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Level into which the route is redistributed. The type is IsisLevel.
    Level interface{}

    // Protocol redistributing the route.
    Owner Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetEntityData() *types.CommonEntityData {
    isisShRouteRedistDetail.EntityData.YFilter = isisShRouteRedistDetail.YFilter
    isisShRouteRedistDetail.EntityData.YangName = "isis-sh-route-redist-detail"
    isisShRouteRedistDetail.EntityData.BundleName = "cisco_ios_xr"
    isisShRouteRedistDetail.EntityData.ParentYangName = "redistribution-details"
    isisShRouteRedistDetail.EntityData.SegmentPath = "isis-sh-route-redist-detail"
    isisShRouteRedistDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isisShRouteRedistDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isisShRouteRedistDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isisShRouteRedistDetail.EntityData.Children = make(map[string]types.YChild)
    isisShRouteRedistDetail.EntityData.Children["owner"] = types.YChild{"Owner", &isisShRouteRedistDetail.Owner}
    isisShRouteRedistDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    isisShRouteRedistDetail.EntityData.Leafs["level"] = types.YLeaf{"Level", isisShRouteRedistDetail.Level}
    return &(isisShRouteRedistDetail.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
// Protocol redistributing the route
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol. The type is IsisRedistProto.
    Protocol interface{}

    // IS-IS instance identifier. The type is string.
    IsisInstanceId interface{}

    // OSPF process identifier. The type is string.
    OspfProcessId interface{}

    // OSPFv3 process identifier. The type is string.
    Ospfv3ProcessId interface{}

    // BGP Autonomous System number. The type is string.
    BgpAsNumber interface{}

    // EIGRP Autonomous System number. The type is string.
    EigrpAsNumber interface{}

    // Application Name. The type is string.
    ApplicationName interface{}
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetEntityData() *types.CommonEntityData {
    owner.EntityData.YFilter = owner.YFilter
    owner.EntityData.YangName = "owner"
    owner.EntityData.BundleName = "cisco_ios_xr"
    owner.EntityData.ParentYangName = "isis-sh-route-redist-detail"
    owner.EntityData.SegmentPath = "owner"
    owner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    owner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    owner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    owner.EntityData.Children = make(map[string]types.YChild)
    owner.EntityData.Leafs = make(map[string]types.YLeaf)
    owner.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", owner.Protocol}
    owner.EntityData.Leafs["isis-instance-id"] = types.YLeaf{"IsisInstanceId", owner.IsisInstanceId}
    owner.EntityData.Leafs["ospf-process-id"] = types.YLeaf{"OspfProcessId", owner.OspfProcessId}
    owner.EntityData.Leafs["ospfv3-process-id"] = types.YLeaf{"Ospfv3ProcessId", owner.Ospfv3ProcessId}
    owner.EntityData.Leafs["bgp-as-number"] = types.YLeaf{"BgpAsNumber", owner.BgpAsNumber}
    owner.EntityData.Leafs["eigrp-as-number"] = types.YLeaf{"EigrpAsNumber", owner.EigrpAsNumber}
    owner.EntityData.Leafs["application-name"] = types.YLeaf{"ApplicationName", owner.ApplicationName}
    return &(owner.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus
// Status of native IS-IS routes to the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the native route.
    NativeDetails Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus) GetEntityData() *types.CommonEntityData {
    nativeStatus.EntityData.YFilter = nativeStatus.YFilter
    nativeStatus.EntityData.YangName = "native-status"
    nativeStatus.EntityData.BundleName = "cisco_ios_xr"
    nativeStatus.EntityData.ParentYangName = "ipv6-route"
    nativeStatus.EntityData.SegmentPath = "native-status"
    nativeStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nativeStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nativeStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nativeStatus.EntityData.Children = make(map[string]types.YChild)
    nativeStatus.EntityData.Children["native-details"] = types.YChild{"NativeDetails", &nativeStatus.NativeDetails}
    nativeStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    nativeStatus.EntityData.Leafs["is-valid"] = types.YLeaf{"IsValid", nativeStatus.IsValid}
    return &(nativeStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails
// Details of the native route
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Relative importance of the prefix. The type is IsisPrefixPriority.
    Priority interface{}

    // Primary paths to prefix.
    Primary Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary

    // Backup paths to prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup.
    Backup []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails) GetEntityData() *types.CommonEntityData {
    nativeDetails.EntityData.YFilter = nativeDetails.YFilter
    nativeDetails.EntityData.YangName = "native-details"
    nativeDetails.EntityData.BundleName = "cisco_ios_xr"
    nativeDetails.EntityData.ParentYangName = "native-status"
    nativeDetails.EntityData.SegmentPath = "native-details"
    nativeDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nativeDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nativeDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nativeDetails.EntityData.Children = make(map[string]types.YChild)
    nativeDetails.EntityData.Children["primary"] = types.YChild{"Primary", &nativeDetails.Primary}
    nativeDetails.EntityData.Children["backup"] = types.YChild{"Backup", nil}
    for i := range nativeDetails.Backup {
        nativeDetails.EntityData.Children[types.GetSegmentPath(&nativeDetails.Backup[i])] = types.YChild{"Backup", &nativeDetails.Backup[i]}
    }
    nativeDetails.EntityData.Leafs = make(map[string]types.YLeaf)
    nativeDetails.EntityData.Leafs["priority"] = types.YLeaf{"Priority", nativeDetails.Priority}
    return &(nativeDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary
// Primary paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths.
    Paths []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop.
    UcmpNextHop []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath.
    MulticastPath []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath.
    SrtePath []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath.
    ExplicitPath []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source.
    Source []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource.
    MulticastSource []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary) GetEntityData() *types.CommonEntityData {
    primary.EntityData.YFilter = primary.YFilter
    primary.EntityData.YangName = "primary"
    primary.EntityData.BundleName = "cisco_ios_xr"
    primary.EntityData.ParentYangName = "native-details"
    primary.EntityData.SegmentPath = "primary"
    primary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    primary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    primary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    primary.EntityData.Children = make(map[string]types.YChild)
    primary.EntityData.Children["paths"] = types.YChild{"Paths", nil}
    for i := range primary.Paths {
        primary.EntityData.Children[types.GetSegmentPath(&primary.Paths[i])] = types.YChild{"Paths", &primary.Paths[i]}
    }
    primary.EntityData.Children["ucmp-next-hop"] = types.YChild{"UcmpNextHop", nil}
    for i := range primary.UcmpNextHop {
        primary.EntityData.Children[types.GetSegmentPath(&primary.UcmpNextHop[i])] = types.YChild{"UcmpNextHop", &primary.UcmpNextHop[i]}
    }
    primary.EntityData.Children["multicast-path"] = types.YChild{"MulticastPath", nil}
    for i := range primary.MulticastPath {
        primary.EntityData.Children[types.GetSegmentPath(&primary.MulticastPath[i])] = types.YChild{"MulticastPath", &primary.MulticastPath[i]}
    }
    primary.EntityData.Children["srte-path"] = types.YChild{"SrtePath", nil}
    for i := range primary.SrtePath {
        primary.EntityData.Children[types.GetSegmentPath(&primary.SrtePath[i])] = types.YChild{"SrtePath", &primary.SrtePath[i]}
    }
    primary.EntityData.Children["explicit-path"] = types.YChild{"ExplicitPath", nil}
    for i := range primary.ExplicitPath {
        primary.EntityData.Children[types.GetSegmentPath(&primary.ExplicitPath[i])] = types.YChild{"ExplicitPath", &primary.ExplicitPath[i]}
    }
    primary.EntityData.Children["source"] = types.YChild{"Source", nil}
    for i := range primary.Source {
        primary.EntityData.Children[types.GetSegmentPath(&primary.Source[i])] = types.YChild{"Source", &primary.Source[i]}
    }
    primary.EntityData.Children["multicast-source"] = types.YChild{"MulticastSource", nil}
    for i := range primary.MulticastSource {
        primary.EntityData.Children[types.GetSegmentPath(&primary.MulticastSource[i])] = types.YChild{"MulticastSource", &primary.MulticastSource[i]}
    }
    primary.EntityData.Leafs = make(map[string]types.YLeaf)
    primary.EntityData.Leafs["origin"] = types.YLeaf{"Origin", primary.Origin}
    primary.EntityData.Leafs["metric"] = types.YLeaf{"Metric", primary.Metric}
    primary.EntityData.Leafs["multicast-metric"] = types.YLeaf{"MulticastMetric", primary.MulticastMetric}
    primary.EntityData.Leafs["is-external-metric"] = types.YLeaf{"IsExternalMetric", primary.IsExternalMetric}
    primary.EntityData.Leafs["administrative-distance"] = types.YLeaf{"AdministrativeDistance", primary.AdministrativeDistance}
    return &(primary.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "primary"
    paths.EntityData.SegmentPath = "paths"
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = make(map[string]types.YChild)
    paths.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &paths.FrrBackup}
    paths.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range paths.UloopExplicit {
        paths.EntityData.Children[types.GetSegmentPath(&paths.UloopExplicit[i])] = types.YChild{"UloopExplicit", &paths.UloopExplicit[i]}
    }
    paths.EntityData.Leafs = make(map[string]types.YLeaf)
    paths.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", paths.NeighborId}
    paths.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", paths.EgressInterface}
    paths.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", paths.NeighborAddress}
    paths.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", paths.NeighborSnpa}
    paths.EntityData.Leafs["tag"] = types.YLeaf{"Tag", paths.Tag}
    paths.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", paths.TunnelInterface}
    paths.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", paths.SegmentRoutingSidValue}
    paths.EntityData.Leafs["weight"] = types.YLeaf{"Weight", paths.Weight}
    paths.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", paths.IsTeTunnelInterface}
    paths.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", paths.IsSrExcludeTunnelInterface}
    return &(paths.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "paths"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "paths"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetEntityData() *types.CommonEntityData {
    ucmpNextHop.EntityData.YFilter = ucmpNextHop.YFilter
    ucmpNextHop.EntityData.YangName = "ucmp-next-hop"
    ucmpNextHop.EntityData.BundleName = "cisco_ios_xr"
    ucmpNextHop.EntityData.ParentYangName = "primary"
    ucmpNextHop.EntityData.SegmentPath = "ucmp-next-hop"
    ucmpNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ucmpNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ucmpNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ucmpNextHop.EntityData.Children = make(map[string]types.YChild)
    ucmpNextHop.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &ucmpNextHop.FrrBackup}
    ucmpNextHop.EntityData.Leafs = make(map[string]types.YLeaf)
    ucmpNextHop.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", ucmpNextHop.NeighborId}
    ucmpNextHop.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", ucmpNextHop.EgressInterface}
    ucmpNextHop.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", ucmpNextHop.NeighborAddress}
    ucmpNextHop.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", ucmpNextHop.NeighborSnpa}
    ucmpNextHop.EntityData.Leafs["tag"] = types.YLeaf{"Tag", ucmpNextHop.Tag}
    ucmpNextHop.EntityData.Leafs["total-ucmp-distance"] = types.YLeaf{"TotalUcmpDistance", ucmpNextHop.TotalUcmpDistance}
    ucmpNextHop.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", ucmpNextHop.SegmentRoutingSidValue}
    ucmpNextHop.EntityData.Leafs["weight"] = types.YLeaf{"Weight", ucmpNextHop.Weight}
    ucmpNextHop.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", ucmpNextHop.IsTeTunnelInterface}
    ucmpNextHop.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", ucmpNextHop.IsSrExcludeTunnelInterface}
    return &(ucmpNextHop.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "ucmp-next-hop"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetEntityData() *types.CommonEntityData {
    multicastPath.EntityData.YFilter = multicastPath.YFilter
    multicastPath.EntityData.YangName = "multicast-path"
    multicastPath.EntityData.BundleName = "cisco_ios_xr"
    multicastPath.EntityData.ParentYangName = "primary"
    multicastPath.EntityData.SegmentPath = "multicast-path"
    multicastPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastPath.EntityData.Children = make(map[string]types.YChild)
    multicastPath.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &multicastPath.FrrBackup}
    multicastPath.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range multicastPath.UloopExplicit {
        multicastPath.EntityData.Children[types.GetSegmentPath(&multicastPath.UloopExplicit[i])] = types.YChild{"UloopExplicit", &multicastPath.UloopExplicit[i]}
    }
    multicastPath.EntityData.Leafs = make(map[string]types.YLeaf)
    multicastPath.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", multicastPath.NeighborId}
    multicastPath.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", multicastPath.EgressInterface}
    multicastPath.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", multicastPath.NeighborAddress}
    multicastPath.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", multicastPath.NeighborSnpa}
    multicastPath.EntityData.Leafs["tag"] = types.YLeaf{"Tag", multicastPath.Tag}
    multicastPath.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", multicastPath.TunnelInterface}
    multicastPath.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", multicastPath.SegmentRoutingSidValue}
    multicastPath.EntityData.Leafs["weight"] = types.YLeaf{"Weight", multicastPath.Weight}
    multicastPath.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", multicastPath.IsTeTunnelInterface}
    multicastPath.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", multicastPath.IsSrExcludeTunnelInterface}
    return &(multicastPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "multicast-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "multicast-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath) GetEntityData() *types.CommonEntityData {
    srtePath.EntityData.YFilter = srtePath.YFilter
    srtePath.EntityData.YangName = "srte-path"
    srtePath.EntityData.BundleName = "cisco_ios_xr"
    srtePath.EntityData.ParentYangName = "primary"
    srtePath.EntityData.SegmentPath = "srte-path"
    srtePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srtePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srtePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srtePath.EntityData.Children = make(map[string]types.YChild)
    srtePath.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &srtePath.FrrBackup}
    srtePath.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range srtePath.UloopExplicit {
        srtePath.EntityData.Children[types.GetSegmentPath(&srtePath.UloopExplicit[i])] = types.YChild{"UloopExplicit", &srtePath.UloopExplicit[i]}
    }
    srtePath.EntityData.Leafs = make(map[string]types.YLeaf)
    srtePath.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", srtePath.NeighborId}
    srtePath.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", srtePath.EgressInterface}
    srtePath.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", srtePath.NeighborAddress}
    srtePath.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", srtePath.NeighborSnpa}
    srtePath.EntityData.Leafs["tag"] = types.YLeaf{"Tag", srtePath.Tag}
    srtePath.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", srtePath.TunnelInterface}
    srtePath.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", srtePath.SegmentRoutingSidValue}
    srtePath.EntityData.Leafs["weight"] = types.YLeaf{"Weight", srtePath.Weight}
    srtePath.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", srtePath.IsTeTunnelInterface}
    srtePath.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", srtePath.IsSrExcludeTunnelInterface}
    return &(srtePath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "srte-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "srte-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetEntityData() *types.CommonEntityData {
    explicitPath.EntityData.YFilter = explicitPath.YFilter
    explicitPath.EntityData.YangName = "explicit-path"
    explicitPath.EntityData.BundleName = "cisco_ios_xr"
    explicitPath.EntityData.ParentYangName = "primary"
    explicitPath.EntityData.SegmentPath = "explicit-path"
    explicitPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitPath.EntityData.Children = make(map[string]types.YChild)
    explicitPath.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &explicitPath.FrrBackup}
    explicitPath.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range explicitPath.UloopExplicit {
        explicitPath.EntityData.Children[types.GetSegmentPath(&explicitPath.UloopExplicit[i])] = types.YChild{"UloopExplicit", &explicitPath.UloopExplicit[i]}
    }
    explicitPath.EntityData.Leafs = make(map[string]types.YLeaf)
    explicitPath.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", explicitPath.NeighborId}
    explicitPath.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", explicitPath.EgressInterface}
    explicitPath.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", explicitPath.NeighborAddress}
    explicitPath.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", explicitPath.NeighborSnpa}
    explicitPath.EntityData.Leafs["tag"] = types.YLeaf{"Tag", explicitPath.Tag}
    explicitPath.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", explicitPath.TunnelInterface}
    explicitPath.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", explicitPath.SegmentRoutingSidValue}
    explicitPath.EntityData.Leafs["weight"] = types.YLeaf{"Weight", explicitPath.Weight}
    explicitPath.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", explicitPath.IsTeTunnelInterface}
    explicitPath.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", explicitPath.IsSrExcludeTunnelInterface}
    return &(explicitPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "explicit-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "explicit-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}\\-[a-fA-F0-9]{2}'.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "primary"
    source.EntityData.SegmentPath = "source"
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = make(map[string]types.YChild)
    source.EntityData.Children["tags"] = types.YChild{"Tags", nil}
    for i := range source.Tags {
        source.EntityData.Children[types.GetSegmentPath(&source.Tags[i])] = types.YChild{"Tags", &source.Tags[i]}
    }
    source.EntityData.Children["nodal-sid"] = types.YChild{"NodalSid", nil}
    for i := range source.NodalSid {
        source.EntityData.Children[types.GetSegmentPath(&source.NodalSid[i])] = types.YChild{"NodalSid", &source.NodalSid[i]}
    }
    source.EntityData.Leafs = make(map[string]types.YLeaf)
    source.EntityData.Leafs["source-lsp-id"] = types.YLeaf{"SourceLspId", source.SourceLspId}
    source.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", source.SourceAddress}
    return &(source.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "source"
    tags.EntityData.SegmentPath = "tags"
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = make(map[string]types.YChild)
    tags.EntityData.Leafs = make(map[string]types.YLeaf)
    tags.EntityData.Leafs["entry"] = types.YLeaf{"Entry", tags.Entry}
    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "source"
    nodalSid.EntityData.SegmentPath = "nodal-sid"
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = make(map[string]types.YChild)
    nodalSid.EntityData.Leafs = make(map[string]types.YLeaf)
    nodalSid.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", nodalSid.SidValue}
    nodalSid.EntityData.Leafs["rflag"] = types.YLeaf{"Rflag", nodalSid.Rflag}
    nodalSid.EntityData.Leafs["nflag"] = types.YLeaf{"Nflag", nodalSid.Nflag}
    nodalSid.EntityData.Leafs["pflag"] = types.YLeaf{"Pflag", nodalSid.Pflag}
    nodalSid.EntityData.Leafs["eflag"] = types.YLeaf{"Eflag", nodalSid.Eflag}
    nodalSid.EntityData.Leafs["vflag"] = types.YLeaf{"Vflag", nodalSid.Vflag}
    nodalSid.EntityData.Leafs["lflag"] = types.YLeaf{"Lflag", nodalSid.Lflag}
    nodalSid.EntityData.Leafs["algorithm"] = types.YLeaf{"Algorithm", nodalSid.Algorithm}
    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}\\-[a-fA-F0-9]{2}'.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetEntityData() *types.CommonEntityData {
    multicastSource.EntityData.YFilter = multicastSource.YFilter
    multicastSource.EntityData.YangName = "multicast-source"
    multicastSource.EntityData.BundleName = "cisco_ios_xr"
    multicastSource.EntityData.ParentYangName = "primary"
    multicastSource.EntityData.SegmentPath = "multicast-source"
    multicastSource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastSource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastSource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastSource.EntityData.Children = make(map[string]types.YChild)
    multicastSource.EntityData.Children["tags"] = types.YChild{"Tags", nil}
    for i := range multicastSource.Tags {
        multicastSource.EntityData.Children[types.GetSegmentPath(&multicastSource.Tags[i])] = types.YChild{"Tags", &multicastSource.Tags[i]}
    }
    multicastSource.EntityData.Children["nodal-sid"] = types.YChild{"NodalSid", nil}
    for i := range multicastSource.NodalSid {
        multicastSource.EntityData.Children[types.GetSegmentPath(&multicastSource.NodalSid[i])] = types.YChild{"NodalSid", &multicastSource.NodalSid[i]}
    }
    multicastSource.EntityData.Leafs = make(map[string]types.YLeaf)
    multicastSource.EntityData.Leafs["source-lsp-id"] = types.YLeaf{"SourceLspId", multicastSource.SourceLspId}
    multicastSource.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", multicastSource.SourceAddress}
    return &(multicastSource.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "multicast-source"
    tags.EntityData.SegmentPath = "tags"
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = make(map[string]types.YChild)
    tags.EntityData.Leafs = make(map[string]types.YLeaf)
    tags.EntityData.Leafs["entry"] = types.YLeaf{"Entry", tags.Entry}
    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "multicast-source"
    nodalSid.EntityData.SegmentPath = "nodal-sid"
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = make(map[string]types.YChild)
    nodalSid.EntityData.Leafs = make(map[string]types.YLeaf)
    nodalSid.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", nodalSid.SidValue}
    nodalSid.EntityData.Leafs["rflag"] = types.YLeaf{"Rflag", nodalSid.Rflag}
    nodalSid.EntityData.Leafs["nflag"] = types.YLeaf{"Nflag", nodalSid.Nflag}
    nodalSid.EntityData.Leafs["pflag"] = types.YLeaf{"Pflag", nodalSid.Pflag}
    nodalSid.EntityData.Leafs["eflag"] = types.YLeaf{"Eflag", nodalSid.Eflag}
    nodalSid.EntityData.Leafs["vflag"] = types.YLeaf{"Vflag", nodalSid.Vflag}
    nodalSid.EntityData.Leafs["lflag"] = types.YLeaf{"Lflag", nodalSid.Lflag}
    nodalSid.EntityData.Leafs["algorithm"] = types.YLeaf{"Algorithm", nodalSid.Algorithm}
    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup
// Backup paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths.
    Paths []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop.
    UcmpNextHop []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath.
    MulticastPath []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath.
    SrtePath []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath.
    ExplicitPath []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source.
    Source []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource.
    MulticastSource []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup) GetEntityData() *types.CommonEntityData {
    backup.EntityData.YFilter = backup.YFilter
    backup.EntityData.YangName = "backup"
    backup.EntityData.BundleName = "cisco_ios_xr"
    backup.EntityData.ParentYangName = "native-details"
    backup.EntityData.SegmentPath = "backup"
    backup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backup.EntityData.Children = make(map[string]types.YChild)
    backup.EntityData.Children["paths"] = types.YChild{"Paths", nil}
    for i := range backup.Paths {
        backup.EntityData.Children[types.GetSegmentPath(&backup.Paths[i])] = types.YChild{"Paths", &backup.Paths[i]}
    }
    backup.EntityData.Children["ucmp-next-hop"] = types.YChild{"UcmpNextHop", nil}
    for i := range backup.UcmpNextHop {
        backup.EntityData.Children[types.GetSegmentPath(&backup.UcmpNextHop[i])] = types.YChild{"UcmpNextHop", &backup.UcmpNextHop[i]}
    }
    backup.EntityData.Children["multicast-path"] = types.YChild{"MulticastPath", nil}
    for i := range backup.MulticastPath {
        backup.EntityData.Children[types.GetSegmentPath(&backup.MulticastPath[i])] = types.YChild{"MulticastPath", &backup.MulticastPath[i]}
    }
    backup.EntityData.Children["srte-path"] = types.YChild{"SrtePath", nil}
    for i := range backup.SrtePath {
        backup.EntityData.Children[types.GetSegmentPath(&backup.SrtePath[i])] = types.YChild{"SrtePath", &backup.SrtePath[i]}
    }
    backup.EntityData.Children["explicit-path"] = types.YChild{"ExplicitPath", nil}
    for i := range backup.ExplicitPath {
        backup.EntityData.Children[types.GetSegmentPath(&backup.ExplicitPath[i])] = types.YChild{"ExplicitPath", &backup.ExplicitPath[i]}
    }
    backup.EntityData.Children["source"] = types.YChild{"Source", nil}
    for i := range backup.Source {
        backup.EntityData.Children[types.GetSegmentPath(&backup.Source[i])] = types.YChild{"Source", &backup.Source[i]}
    }
    backup.EntityData.Children["multicast-source"] = types.YChild{"MulticastSource", nil}
    for i := range backup.MulticastSource {
        backup.EntityData.Children[types.GetSegmentPath(&backup.MulticastSource[i])] = types.YChild{"MulticastSource", &backup.MulticastSource[i]}
    }
    backup.EntityData.Leafs = make(map[string]types.YLeaf)
    backup.EntityData.Leafs["origin"] = types.YLeaf{"Origin", backup.Origin}
    backup.EntityData.Leafs["metric"] = types.YLeaf{"Metric", backup.Metric}
    backup.EntityData.Leafs["multicast-metric"] = types.YLeaf{"MulticastMetric", backup.MulticastMetric}
    backup.EntityData.Leafs["is-external-metric"] = types.YLeaf{"IsExternalMetric", backup.IsExternalMetric}
    backup.EntityData.Leafs["administrative-distance"] = types.YLeaf{"AdministrativeDistance", backup.AdministrativeDistance}
    return &(backup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "backup"
    paths.EntityData.SegmentPath = "paths"
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = make(map[string]types.YChild)
    paths.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &paths.FrrBackup}
    paths.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range paths.UloopExplicit {
        paths.EntityData.Children[types.GetSegmentPath(&paths.UloopExplicit[i])] = types.YChild{"UloopExplicit", &paths.UloopExplicit[i]}
    }
    paths.EntityData.Leafs = make(map[string]types.YLeaf)
    paths.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", paths.NeighborId}
    paths.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", paths.EgressInterface}
    paths.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", paths.NeighborAddress}
    paths.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", paths.NeighborSnpa}
    paths.EntityData.Leafs["tag"] = types.YLeaf{"Tag", paths.Tag}
    paths.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", paths.TunnelInterface}
    paths.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", paths.SegmentRoutingSidValue}
    paths.EntityData.Leafs["weight"] = types.YLeaf{"Weight", paths.Weight}
    paths.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", paths.IsTeTunnelInterface}
    paths.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", paths.IsSrExcludeTunnelInterface}
    return &(paths.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "paths"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "paths"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetEntityData() *types.CommonEntityData {
    ucmpNextHop.EntityData.YFilter = ucmpNextHop.YFilter
    ucmpNextHop.EntityData.YangName = "ucmp-next-hop"
    ucmpNextHop.EntityData.BundleName = "cisco_ios_xr"
    ucmpNextHop.EntityData.ParentYangName = "backup"
    ucmpNextHop.EntityData.SegmentPath = "ucmp-next-hop"
    ucmpNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ucmpNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ucmpNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ucmpNextHop.EntityData.Children = make(map[string]types.YChild)
    ucmpNextHop.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &ucmpNextHop.FrrBackup}
    ucmpNextHop.EntityData.Leafs = make(map[string]types.YLeaf)
    ucmpNextHop.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", ucmpNextHop.NeighborId}
    ucmpNextHop.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", ucmpNextHop.EgressInterface}
    ucmpNextHop.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", ucmpNextHop.NeighborAddress}
    ucmpNextHop.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", ucmpNextHop.NeighborSnpa}
    ucmpNextHop.EntityData.Leafs["tag"] = types.YLeaf{"Tag", ucmpNextHop.Tag}
    ucmpNextHop.EntityData.Leafs["total-ucmp-distance"] = types.YLeaf{"TotalUcmpDistance", ucmpNextHop.TotalUcmpDistance}
    ucmpNextHop.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", ucmpNextHop.SegmentRoutingSidValue}
    ucmpNextHop.EntityData.Leafs["weight"] = types.YLeaf{"Weight", ucmpNextHop.Weight}
    ucmpNextHop.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", ucmpNextHop.IsTeTunnelInterface}
    ucmpNextHop.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", ucmpNextHop.IsSrExcludeTunnelInterface}
    return &(ucmpNextHop.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "ucmp-next-hop"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetEntityData() *types.CommonEntityData {
    multicastPath.EntityData.YFilter = multicastPath.YFilter
    multicastPath.EntityData.YangName = "multicast-path"
    multicastPath.EntityData.BundleName = "cisco_ios_xr"
    multicastPath.EntityData.ParentYangName = "backup"
    multicastPath.EntityData.SegmentPath = "multicast-path"
    multicastPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastPath.EntityData.Children = make(map[string]types.YChild)
    multicastPath.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &multicastPath.FrrBackup}
    multicastPath.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range multicastPath.UloopExplicit {
        multicastPath.EntityData.Children[types.GetSegmentPath(&multicastPath.UloopExplicit[i])] = types.YChild{"UloopExplicit", &multicastPath.UloopExplicit[i]}
    }
    multicastPath.EntityData.Leafs = make(map[string]types.YLeaf)
    multicastPath.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", multicastPath.NeighborId}
    multicastPath.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", multicastPath.EgressInterface}
    multicastPath.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", multicastPath.NeighborAddress}
    multicastPath.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", multicastPath.NeighborSnpa}
    multicastPath.EntityData.Leafs["tag"] = types.YLeaf{"Tag", multicastPath.Tag}
    multicastPath.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", multicastPath.TunnelInterface}
    multicastPath.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", multicastPath.SegmentRoutingSidValue}
    multicastPath.EntityData.Leafs["weight"] = types.YLeaf{"Weight", multicastPath.Weight}
    multicastPath.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", multicastPath.IsTeTunnelInterface}
    multicastPath.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", multicastPath.IsSrExcludeTunnelInterface}
    return &(multicastPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "multicast-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "multicast-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath) GetEntityData() *types.CommonEntityData {
    srtePath.EntityData.YFilter = srtePath.YFilter
    srtePath.EntityData.YangName = "srte-path"
    srtePath.EntityData.BundleName = "cisco_ios_xr"
    srtePath.EntityData.ParentYangName = "backup"
    srtePath.EntityData.SegmentPath = "srte-path"
    srtePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srtePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srtePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srtePath.EntityData.Children = make(map[string]types.YChild)
    srtePath.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &srtePath.FrrBackup}
    srtePath.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range srtePath.UloopExplicit {
        srtePath.EntityData.Children[types.GetSegmentPath(&srtePath.UloopExplicit[i])] = types.YChild{"UloopExplicit", &srtePath.UloopExplicit[i]}
    }
    srtePath.EntityData.Leafs = make(map[string]types.YLeaf)
    srtePath.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", srtePath.NeighborId}
    srtePath.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", srtePath.EgressInterface}
    srtePath.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", srtePath.NeighborAddress}
    srtePath.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", srtePath.NeighborSnpa}
    srtePath.EntityData.Leafs["tag"] = types.YLeaf{"Tag", srtePath.Tag}
    srtePath.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", srtePath.TunnelInterface}
    srtePath.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", srtePath.SegmentRoutingSidValue}
    srtePath.EntityData.Leafs["weight"] = types.YLeaf{"Weight", srtePath.Weight}
    srtePath.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", srtePath.IsTeTunnelInterface}
    srtePath.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", srtePath.IsSrExcludeTunnelInterface}
    return &(srtePath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "srte-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "srte-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetEntityData() *types.CommonEntityData {
    explicitPath.EntityData.YFilter = explicitPath.YFilter
    explicitPath.EntityData.YangName = "explicit-path"
    explicitPath.EntityData.BundleName = "cisco_ios_xr"
    explicitPath.EntityData.ParentYangName = "backup"
    explicitPath.EntityData.SegmentPath = "explicit-path"
    explicitPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitPath.EntityData.Children = make(map[string]types.YChild)
    explicitPath.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &explicitPath.FrrBackup}
    explicitPath.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range explicitPath.UloopExplicit {
        explicitPath.EntityData.Children[types.GetSegmentPath(&explicitPath.UloopExplicit[i])] = types.YChild{"UloopExplicit", &explicitPath.UloopExplicit[i]}
    }
    explicitPath.EntityData.Leafs = make(map[string]types.YLeaf)
    explicitPath.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", explicitPath.NeighborId}
    explicitPath.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", explicitPath.EgressInterface}
    explicitPath.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", explicitPath.NeighborAddress}
    explicitPath.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", explicitPath.NeighborSnpa}
    explicitPath.EntityData.Leafs["tag"] = types.YLeaf{"Tag", explicitPath.Tag}
    explicitPath.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", explicitPath.TunnelInterface}
    explicitPath.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", explicitPath.SegmentRoutingSidValue}
    explicitPath.EntityData.Leafs["weight"] = types.YLeaf{"Weight", explicitPath.Weight}
    explicitPath.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", explicitPath.IsTeTunnelInterface}
    explicitPath.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", explicitPath.IsSrExcludeTunnelInterface}
    return &(explicitPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "explicit-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "explicit-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}\\-[a-fA-F0-9]{2}'.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "backup"
    source.EntityData.SegmentPath = "source"
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = make(map[string]types.YChild)
    source.EntityData.Children["tags"] = types.YChild{"Tags", nil}
    for i := range source.Tags {
        source.EntityData.Children[types.GetSegmentPath(&source.Tags[i])] = types.YChild{"Tags", &source.Tags[i]}
    }
    source.EntityData.Children["nodal-sid"] = types.YChild{"NodalSid", nil}
    for i := range source.NodalSid {
        source.EntityData.Children[types.GetSegmentPath(&source.NodalSid[i])] = types.YChild{"NodalSid", &source.NodalSid[i]}
    }
    source.EntityData.Leafs = make(map[string]types.YLeaf)
    source.EntityData.Leafs["source-lsp-id"] = types.YLeaf{"SourceLspId", source.SourceLspId}
    source.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", source.SourceAddress}
    return &(source.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "source"
    tags.EntityData.SegmentPath = "tags"
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = make(map[string]types.YChild)
    tags.EntityData.Leafs = make(map[string]types.YLeaf)
    tags.EntityData.Leafs["entry"] = types.YLeaf{"Entry", tags.Entry}
    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "source"
    nodalSid.EntityData.SegmentPath = "nodal-sid"
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = make(map[string]types.YChild)
    nodalSid.EntityData.Leafs = make(map[string]types.YLeaf)
    nodalSid.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", nodalSid.SidValue}
    nodalSid.EntityData.Leafs["rflag"] = types.YLeaf{"Rflag", nodalSid.Rflag}
    nodalSid.EntityData.Leafs["nflag"] = types.YLeaf{"Nflag", nodalSid.Nflag}
    nodalSid.EntityData.Leafs["pflag"] = types.YLeaf{"Pflag", nodalSid.Pflag}
    nodalSid.EntityData.Leafs["eflag"] = types.YLeaf{"Eflag", nodalSid.Eflag}
    nodalSid.EntityData.Leafs["vflag"] = types.YLeaf{"Vflag", nodalSid.Vflag}
    nodalSid.EntityData.Leafs["lflag"] = types.YLeaf{"Lflag", nodalSid.Lflag}
    nodalSid.EntityData.Leafs["algorithm"] = types.YLeaf{"Algorithm", nodalSid.Algorithm}
    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}\\-[a-fA-F0-9]{2}'.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetEntityData() *types.CommonEntityData {
    multicastSource.EntityData.YFilter = multicastSource.YFilter
    multicastSource.EntityData.YangName = "multicast-source"
    multicastSource.EntityData.BundleName = "cisco_ios_xr"
    multicastSource.EntityData.ParentYangName = "backup"
    multicastSource.EntityData.SegmentPath = "multicast-source"
    multicastSource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastSource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastSource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastSource.EntityData.Children = make(map[string]types.YChild)
    multicastSource.EntityData.Children["tags"] = types.YChild{"Tags", nil}
    for i := range multicastSource.Tags {
        multicastSource.EntityData.Children[types.GetSegmentPath(&multicastSource.Tags[i])] = types.YChild{"Tags", &multicastSource.Tags[i]}
    }
    multicastSource.EntityData.Children["nodal-sid"] = types.YChild{"NodalSid", nil}
    for i := range multicastSource.NodalSid {
        multicastSource.EntityData.Children[types.GetSegmentPath(&multicastSource.NodalSid[i])] = types.YChild{"NodalSid", &multicastSource.NodalSid[i]}
    }
    multicastSource.EntityData.Leafs = make(map[string]types.YLeaf)
    multicastSource.EntityData.Leafs["source-lsp-id"] = types.YLeaf{"SourceLspId", multicastSource.SourceLspId}
    multicastSource.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", multicastSource.SourceAddress}
    return &(multicastSource.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "multicast-source"
    tags.EntityData.SegmentPath = "tags"
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = make(map[string]types.YChild)
    tags.EntityData.Leafs = make(map[string]types.YLeaf)
    tags.EntityData.Leafs["entry"] = types.YLeaf{"Entry", tags.Entry}
    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "multicast-source"
    nodalSid.EntityData.SegmentPath = "nodal-sid"
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = make(map[string]types.YChild)
    nodalSid.EntityData.Leafs = make(map[string]types.YLeaf)
    nodalSid.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", nodalSid.SidValue}
    nodalSid.EntityData.Leafs["rflag"] = types.YLeaf{"Rflag", nodalSid.Rflag}
    nodalSid.EntityData.Leafs["nflag"] = types.YLeaf{"Nflag", nodalSid.Nflag}
    nodalSid.EntityData.Leafs["pflag"] = types.YLeaf{"Pflag", nodalSid.Pflag}
    nodalSid.EntityData.Leafs["eflag"] = types.YLeaf{"Eflag", nodalSid.Eflag}
    nodalSid.EntityData.Leafs["vflag"] = types.YLeaf{"Vflag", nodalSid.Vflag}
    nodalSid.EntityData.Leafs["lflag"] = types.YLeaf{"Lflag", nodalSid.Lflag}
    nodalSid.EntityData.Leafs["algorithm"] = types.YLeaf{"Algorithm", nodalSid.Algorithm}
    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail
// Per level details of how the local system
// advertises the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Level in which the prefix is advertised. The type is IsisLevel.
    Level interface{}

    // The origin of the advertisement. The type is IsisShRouteAdvOrigin.
    AdvertisingOrigin interface{}

    // Metric with which the prefix is advertised. The type is interface{} with
    // range: 0..4294967295.
    Metric interface{}

    // Has the prefix been propagated from another level?. The type is bool.
    IsPropagated interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Is the prefix external to the IS-IS domain?. The type is bool.
    IsExternalReachability interface{}

    // Is the up/down bit set?. The type is bool.
    IsInterarea interface{}

    // Status of summarization for the prefix.
    SummarizationStatus Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus

    // Tags associated with the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail) GetEntityData() *types.CommonEntityData {
    perLevelAdvertisingDetail.EntityData.YFilter = perLevelAdvertisingDetail.YFilter
    perLevelAdvertisingDetail.EntityData.YangName = "per-level-advertising-detail"
    perLevelAdvertisingDetail.EntityData.BundleName = "cisco_ios_xr"
    perLevelAdvertisingDetail.EntityData.ParentYangName = "ipv6-route"
    perLevelAdvertisingDetail.EntityData.SegmentPath = "per-level-advertising-detail"
    perLevelAdvertisingDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perLevelAdvertisingDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perLevelAdvertisingDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perLevelAdvertisingDetail.EntityData.Children = make(map[string]types.YChild)
    perLevelAdvertisingDetail.EntityData.Children["summarization-status"] = types.YChild{"SummarizationStatus", &perLevelAdvertisingDetail.SummarizationStatus}
    perLevelAdvertisingDetail.EntityData.Children["tags"] = types.YChild{"Tags", nil}
    for i := range perLevelAdvertisingDetail.Tags {
        perLevelAdvertisingDetail.EntityData.Children[types.GetSegmentPath(&perLevelAdvertisingDetail.Tags[i])] = types.YChild{"Tags", &perLevelAdvertisingDetail.Tags[i]}
    }
    perLevelAdvertisingDetail.EntityData.Children["nodal-sid"] = types.YChild{"NodalSid", nil}
    for i := range perLevelAdvertisingDetail.NodalSid {
        perLevelAdvertisingDetail.EntityData.Children[types.GetSegmentPath(&perLevelAdvertisingDetail.NodalSid[i])] = types.YChild{"NodalSid", &perLevelAdvertisingDetail.NodalSid[i]}
    }
    perLevelAdvertisingDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    perLevelAdvertisingDetail.EntityData.Leafs["level"] = types.YLeaf{"Level", perLevelAdvertisingDetail.Level}
    perLevelAdvertisingDetail.EntityData.Leafs["advertising-origin"] = types.YLeaf{"AdvertisingOrigin", perLevelAdvertisingDetail.AdvertisingOrigin}
    perLevelAdvertisingDetail.EntityData.Leafs["metric"] = types.YLeaf{"Metric", perLevelAdvertisingDetail.Metric}
    perLevelAdvertisingDetail.EntityData.Leafs["is-propagated"] = types.YLeaf{"IsPropagated", perLevelAdvertisingDetail.IsPropagated}
    perLevelAdvertisingDetail.EntityData.Leafs["is-external-metric"] = types.YLeaf{"IsExternalMetric", perLevelAdvertisingDetail.IsExternalMetric}
    perLevelAdvertisingDetail.EntityData.Leafs["is-external-reachability"] = types.YLeaf{"IsExternalReachability", perLevelAdvertisingDetail.IsExternalReachability}
    perLevelAdvertisingDetail.EntityData.Leafs["is-interarea"] = types.YLeaf{"IsInterarea", perLevelAdvertisingDetail.IsInterarea}
    return &(perLevelAdvertisingDetail.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus
// Status of summarization for the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Summarizing Prefix.
    SummaryPrefix Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus) GetEntityData() *types.CommonEntityData {
    summarizationStatus.EntityData.YFilter = summarizationStatus.YFilter
    summarizationStatus.EntityData.YangName = "summarization-status"
    summarizationStatus.EntityData.BundleName = "cisco_ios_xr"
    summarizationStatus.EntityData.ParentYangName = "per-level-advertising-detail"
    summarizationStatus.EntityData.SegmentPath = "summarization-status"
    summarizationStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summarizationStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summarizationStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summarizationStatus.EntityData.Children = make(map[string]types.YChild)
    summarizationStatus.EntityData.Children["summary-prefix"] = types.YChild{"SummaryPrefix", &summarizationStatus.SummaryPrefix}
    summarizationStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    summarizationStatus.EntityData.Leafs["is-valid"] = types.YLeaf{"IsValid", summarizationStatus.IsValid}
    return &(summarizationStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
// Summarizing Prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetEntityData() *types.CommonEntityData {
    summaryPrefix.EntityData.YFilter = summaryPrefix.YFilter
    summaryPrefix.EntityData.YangName = "summary-prefix"
    summaryPrefix.EntityData.BundleName = "cisco_ios_xr"
    summaryPrefix.EntityData.ParentYangName = "summarization-status"
    summaryPrefix.EntityData.SegmentPath = "summary-prefix"
    summaryPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryPrefix.EntityData.Children = make(map[string]types.YChild)
    summaryPrefix.EntityData.Leafs = make(map[string]types.YLeaf)
    summaryPrefix.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", summaryPrefix.Prefix}
    summaryPrefix.EntityData.Leafs["prefix-length"] = types.YLeaf{"PrefixLength", summaryPrefix.PrefixLength}
    return &(summaryPrefix.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags
// Tags associated with the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "per-level-advertising-detail"
    tags.EntityData.SegmentPath = "tags"
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = make(map[string]types.YChild)
    tags.EntityData.Leafs = make(map[string]types.YLeaf)
    tags.EntityData.Leafs["entry"] = types.YLeaf{"Entry", tags.Entry}
    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "per-level-advertising-detail"
    nodalSid.EntityData.SegmentPath = "nodal-sid"
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = make(map[string]types.YChild)
    nodalSid.EntityData.Leafs = make(map[string]types.YLeaf)
    nodalSid.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", nodalSid.SidValue}
    nodalSid.EntityData.Leafs["rflag"] = types.YLeaf{"Rflag", nodalSid.Rflag}
    nodalSid.EntityData.Leafs["nflag"] = types.YLeaf{"Nflag", nodalSid.Nflag}
    nodalSid.EntityData.Leafs["pflag"] = types.YLeaf{"Pflag", nodalSid.Pflag}
    nodalSid.EntityData.Leafs["eflag"] = types.YLeaf{"Eflag", nodalSid.Eflag}
    nodalSid.EntityData.Leafs["vflag"] = types.YLeaf{"Vflag", nodalSid.Vflag}
    nodalSid.EntityData.Leafs["lflag"] = types.YLeaf{"Lflag", nodalSid.Lflag}
    nodalSid.EntityData.Leafs["algorithm"] = types.YLeaf{"Algorithm", nodalSid.Algorithm}
    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups
// IPv6 FRR table
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FRR backup for an IPv6 network. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup.
    Ipv6FrrBackup []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup
}

func (ipv6FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups) GetEntityData() *types.CommonEntityData {
    ipv6FrrBackups.EntityData.YFilter = ipv6FrrBackups.YFilter
    ipv6FrrBackups.EntityData.YangName = "ipv6frr-backups"
    ipv6FrrBackups.EntityData.BundleName = "cisco_ios_xr"
    ipv6FrrBackups.EntityData.ParentYangName = "topology"
    ipv6FrrBackups.EntityData.SegmentPath = "ipv6frr-backups"
    ipv6FrrBackups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6FrrBackups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6FrrBackups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6FrrBackups.EntityData.Children = make(map[string]types.YChild)
    ipv6FrrBackups.EntityData.Children["ipv6frr-backup"] = types.YChild{"Ipv6FrrBackup", nil}
    for i := range ipv6FrrBackups.Ipv6FrrBackup {
        ipv6FrrBackups.EntityData.Children[types.GetSegmentPath(&ipv6FrrBackups.Ipv6FrrBackup[i])] = types.YChild{"Ipv6FrrBackup", &ipv6FrrBackups.Ipv6FrrBackup[i]}
    }
    ipv6FrrBackups.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv6FrrBackups.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup
// FRR backup for an IPv6 network
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Status of IS-IS directly connected routes to the prefix.
    ConnectedStatus Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus

    // Status of other protocols' routes redistributed into IS-IS.
    RedistributedStatus Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus

    // Status of native IS-IS routes to the prefix.
    NativeStatus Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus

    // Per level details of how the local system advertises the prefix. The type
    // is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail.
    PerLevelAdvertisingDetail []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail
}

func (ipv6FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup) GetEntityData() *types.CommonEntityData {
    ipv6FrrBackup.EntityData.YFilter = ipv6FrrBackup.YFilter
    ipv6FrrBackup.EntityData.YangName = "ipv6frr-backup"
    ipv6FrrBackup.EntityData.BundleName = "cisco_ios_xr"
    ipv6FrrBackup.EntityData.ParentYangName = "ipv6frr-backups"
    ipv6FrrBackup.EntityData.SegmentPath = "ipv6frr-backup"
    ipv6FrrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6FrrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6FrrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6FrrBackup.EntityData.Children = make(map[string]types.YChild)
    ipv6FrrBackup.EntityData.Children["connected-status"] = types.YChild{"ConnectedStatus", &ipv6FrrBackup.ConnectedStatus}
    ipv6FrrBackup.EntityData.Children["redistributed-status"] = types.YChild{"RedistributedStatus", &ipv6FrrBackup.RedistributedStatus}
    ipv6FrrBackup.EntityData.Children["native-status"] = types.YChild{"NativeStatus", &ipv6FrrBackup.NativeStatus}
    ipv6FrrBackup.EntityData.Children["per-level-advertising-detail"] = types.YChild{"PerLevelAdvertisingDetail", nil}
    for i := range ipv6FrrBackup.PerLevelAdvertisingDetail {
        ipv6FrrBackup.EntityData.Children[types.GetSegmentPath(&ipv6FrrBackup.PerLevelAdvertisingDetail[i])] = types.YChild{"PerLevelAdvertisingDetail", &ipv6FrrBackup.PerLevelAdvertisingDetail[i]}
    }
    ipv6FrrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv6FrrBackup.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", ipv6FrrBackup.Prefix}
    ipv6FrrBackup.EntityData.Leafs["prefix-length"] = types.YLeaf{"PrefixLength", ipv6FrrBackup.PrefixLength}
    return &(ipv6FrrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus
// Status of IS-IS directly connected routes to the
// prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the directly connected prefix.
    ConnectedDetails Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus) GetEntityData() *types.CommonEntityData {
    connectedStatus.EntityData.YFilter = connectedStatus.YFilter
    connectedStatus.EntityData.YangName = "connected-status"
    connectedStatus.EntityData.BundleName = "cisco_ios_xr"
    connectedStatus.EntityData.ParentYangName = "ipv6frr-backup"
    connectedStatus.EntityData.SegmentPath = "connected-status"
    connectedStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedStatus.EntityData.Children = make(map[string]types.YChild)
    connectedStatus.EntityData.Children["connected-details"] = types.YChild{"ConnectedDetails", &connectedStatus.ConnectedDetails}
    connectedStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    connectedStatus.EntityData.Leafs["is-valid"] = types.YLeaf{"IsValid", connectedStatus.IsValid}
    return &(connectedStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails
// Details of the directly connected prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interfaces. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails_Interface_.
    Interface_ []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails_Interface
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails) GetEntityData() *types.CommonEntityData {
    connectedDetails.EntityData.YFilter = connectedDetails.YFilter
    connectedDetails.EntityData.YangName = "connected-details"
    connectedDetails.EntityData.BundleName = "cisco_ios_xr"
    connectedDetails.EntityData.ParentYangName = "connected-status"
    connectedDetails.EntityData.SegmentPath = "connected-details"
    connectedDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedDetails.EntityData.Children = make(map[string]types.YChild)
    connectedDetails.EntityData.Children["interface"] = types.YChild{"Interface_", nil}
    for i := range connectedDetails.Interface_ {
        connectedDetails.EntityData.Children[types.GetSegmentPath(&connectedDetails.Interface_[i])] = types.YChild{"Interface_", &connectedDetails.Interface_[i]}
    }
    connectedDetails.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(connectedDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails_Interface
// Interfaces
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    Entry interface{}
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "connected-details"
    self.EntityData.SegmentPath = "interface"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["entry"] = types.YLeaf{"Entry", self.Entry}
    return &(self.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus
// Status of other protocols' routes redistributed
// into IS-IS
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Per level details of the redistributed route.
    RedistributionDetails Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus) GetEntityData() *types.CommonEntityData {
    redistributedStatus.EntityData.YFilter = redistributedStatus.YFilter
    redistributedStatus.EntityData.YangName = "redistributed-status"
    redistributedStatus.EntityData.BundleName = "cisco_ios_xr"
    redistributedStatus.EntityData.ParentYangName = "ipv6frr-backup"
    redistributedStatus.EntityData.SegmentPath = "redistributed-status"
    redistributedStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributedStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributedStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributedStatus.EntityData.Children = make(map[string]types.YChild)
    redistributedStatus.EntityData.Children["redistribution-details"] = types.YChild{"RedistributionDetails", &redistributedStatus.RedistributionDetails}
    redistributedStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    redistributedStatus.EntityData.Leafs["is-valid"] = types.YLeaf{"IsValid", redistributedStatus.IsValid}
    return &(redistributedStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails
// Per level details of the redistributed route
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // isis sh route redist detail. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail.
    IsisShRouteRedistDetail []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails) GetEntityData() *types.CommonEntityData {
    redistributionDetails.EntityData.YFilter = redistributionDetails.YFilter
    redistributionDetails.EntityData.YangName = "redistribution-details"
    redistributionDetails.EntityData.BundleName = "cisco_ios_xr"
    redistributionDetails.EntityData.ParentYangName = "redistributed-status"
    redistributionDetails.EntityData.SegmentPath = "redistribution-details"
    redistributionDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributionDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributionDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributionDetails.EntityData.Children = make(map[string]types.YChild)
    redistributionDetails.EntityData.Children["isis-sh-route-redist-detail"] = types.YChild{"IsisShRouteRedistDetail", nil}
    for i := range redistributionDetails.IsisShRouteRedistDetail {
        redistributionDetails.EntityData.Children[types.GetSegmentPath(&redistributionDetails.IsisShRouteRedistDetail[i])] = types.YChild{"IsisShRouteRedistDetail", &redistributionDetails.IsisShRouteRedistDetail[i]}
    }
    redistributionDetails.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(redistributionDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
// isis sh route redist detail
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Level into which the route is redistributed. The type is IsisLevel.
    Level interface{}

    // Protocol redistributing the route.
    Owner Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetEntityData() *types.CommonEntityData {
    isisShRouteRedistDetail.EntityData.YFilter = isisShRouteRedistDetail.YFilter
    isisShRouteRedistDetail.EntityData.YangName = "isis-sh-route-redist-detail"
    isisShRouteRedistDetail.EntityData.BundleName = "cisco_ios_xr"
    isisShRouteRedistDetail.EntityData.ParentYangName = "redistribution-details"
    isisShRouteRedistDetail.EntityData.SegmentPath = "isis-sh-route-redist-detail"
    isisShRouteRedistDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isisShRouteRedistDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isisShRouteRedistDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isisShRouteRedistDetail.EntityData.Children = make(map[string]types.YChild)
    isisShRouteRedistDetail.EntityData.Children["owner"] = types.YChild{"Owner", &isisShRouteRedistDetail.Owner}
    isisShRouteRedistDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    isisShRouteRedistDetail.EntityData.Leafs["level"] = types.YLeaf{"Level", isisShRouteRedistDetail.Level}
    return &(isisShRouteRedistDetail.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
// Protocol redistributing the route
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol. The type is IsisRedistProto.
    Protocol interface{}

    // IS-IS instance identifier. The type is string.
    IsisInstanceId interface{}

    // OSPF process identifier. The type is string.
    OspfProcessId interface{}

    // OSPFv3 process identifier. The type is string.
    Ospfv3ProcessId interface{}

    // BGP Autonomous System number. The type is string.
    BgpAsNumber interface{}

    // EIGRP Autonomous System number. The type is string.
    EigrpAsNumber interface{}

    // Application Name. The type is string.
    ApplicationName interface{}
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetEntityData() *types.CommonEntityData {
    owner.EntityData.YFilter = owner.YFilter
    owner.EntityData.YangName = "owner"
    owner.EntityData.BundleName = "cisco_ios_xr"
    owner.EntityData.ParentYangName = "isis-sh-route-redist-detail"
    owner.EntityData.SegmentPath = "owner"
    owner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    owner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    owner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    owner.EntityData.Children = make(map[string]types.YChild)
    owner.EntityData.Leafs = make(map[string]types.YLeaf)
    owner.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", owner.Protocol}
    owner.EntityData.Leafs["isis-instance-id"] = types.YLeaf{"IsisInstanceId", owner.IsisInstanceId}
    owner.EntityData.Leafs["ospf-process-id"] = types.YLeaf{"OspfProcessId", owner.OspfProcessId}
    owner.EntityData.Leafs["ospfv3-process-id"] = types.YLeaf{"Ospfv3ProcessId", owner.Ospfv3ProcessId}
    owner.EntityData.Leafs["bgp-as-number"] = types.YLeaf{"BgpAsNumber", owner.BgpAsNumber}
    owner.EntityData.Leafs["eigrp-as-number"] = types.YLeaf{"EigrpAsNumber", owner.EigrpAsNumber}
    owner.EntityData.Leafs["application-name"] = types.YLeaf{"ApplicationName", owner.ApplicationName}
    return &(owner.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus
// Status of native IS-IS routes to the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the native route.
    NativeDetails Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus) GetEntityData() *types.CommonEntityData {
    nativeStatus.EntityData.YFilter = nativeStatus.YFilter
    nativeStatus.EntityData.YangName = "native-status"
    nativeStatus.EntityData.BundleName = "cisco_ios_xr"
    nativeStatus.EntityData.ParentYangName = "ipv6frr-backup"
    nativeStatus.EntityData.SegmentPath = "native-status"
    nativeStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nativeStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nativeStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nativeStatus.EntityData.Children = make(map[string]types.YChild)
    nativeStatus.EntityData.Children["native-details"] = types.YChild{"NativeDetails", &nativeStatus.NativeDetails}
    nativeStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    nativeStatus.EntityData.Leafs["is-valid"] = types.YLeaf{"IsValid", nativeStatus.IsValid}
    return &(nativeStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails
// Details of the native route
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Relative importance of the prefix. The type is IsisPrefixPriority.
    Priority interface{}

    // Primary paths to prefix.
    Primary Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary

    // Backup paths to prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup.
    Backup []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails) GetEntityData() *types.CommonEntityData {
    nativeDetails.EntityData.YFilter = nativeDetails.YFilter
    nativeDetails.EntityData.YangName = "native-details"
    nativeDetails.EntityData.BundleName = "cisco_ios_xr"
    nativeDetails.EntityData.ParentYangName = "native-status"
    nativeDetails.EntityData.SegmentPath = "native-details"
    nativeDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nativeDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nativeDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nativeDetails.EntityData.Children = make(map[string]types.YChild)
    nativeDetails.EntityData.Children["primary"] = types.YChild{"Primary", &nativeDetails.Primary}
    nativeDetails.EntityData.Children["backup"] = types.YChild{"Backup", nil}
    for i := range nativeDetails.Backup {
        nativeDetails.EntityData.Children[types.GetSegmentPath(&nativeDetails.Backup[i])] = types.YChild{"Backup", &nativeDetails.Backup[i]}
    }
    nativeDetails.EntityData.Leafs = make(map[string]types.YLeaf)
    nativeDetails.EntityData.Leafs["priority"] = types.YLeaf{"Priority", nativeDetails.Priority}
    return &(nativeDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary
// Primary paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths.
    Paths []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop.
    UcmpNextHop []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath.
    MulticastPath []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath.
    SrtePath []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath.
    ExplicitPath []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source.
    Source []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource.
    MulticastSource []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary) GetEntityData() *types.CommonEntityData {
    primary.EntityData.YFilter = primary.YFilter
    primary.EntityData.YangName = "primary"
    primary.EntityData.BundleName = "cisco_ios_xr"
    primary.EntityData.ParentYangName = "native-details"
    primary.EntityData.SegmentPath = "primary"
    primary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    primary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    primary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    primary.EntityData.Children = make(map[string]types.YChild)
    primary.EntityData.Children["paths"] = types.YChild{"Paths", nil}
    for i := range primary.Paths {
        primary.EntityData.Children[types.GetSegmentPath(&primary.Paths[i])] = types.YChild{"Paths", &primary.Paths[i]}
    }
    primary.EntityData.Children["ucmp-next-hop"] = types.YChild{"UcmpNextHop", nil}
    for i := range primary.UcmpNextHop {
        primary.EntityData.Children[types.GetSegmentPath(&primary.UcmpNextHop[i])] = types.YChild{"UcmpNextHop", &primary.UcmpNextHop[i]}
    }
    primary.EntityData.Children["multicast-path"] = types.YChild{"MulticastPath", nil}
    for i := range primary.MulticastPath {
        primary.EntityData.Children[types.GetSegmentPath(&primary.MulticastPath[i])] = types.YChild{"MulticastPath", &primary.MulticastPath[i]}
    }
    primary.EntityData.Children["srte-path"] = types.YChild{"SrtePath", nil}
    for i := range primary.SrtePath {
        primary.EntityData.Children[types.GetSegmentPath(&primary.SrtePath[i])] = types.YChild{"SrtePath", &primary.SrtePath[i]}
    }
    primary.EntityData.Children["explicit-path"] = types.YChild{"ExplicitPath", nil}
    for i := range primary.ExplicitPath {
        primary.EntityData.Children[types.GetSegmentPath(&primary.ExplicitPath[i])] = types.YChild{"ExplicitPath", &primary.ExplicitPath[i]}
    }
    primary.EntityData.Children["source"] = types.YChild{"Source", nil}
    for i := range primary.Source {
        primary.EntityData.Children[types.GetSegmentPath(&primary.Source[i])] = types.YChild{"Source", &primary.Source[i]}
    }
    primary.EntityData.Children["multicast-source"] = types.YChild{"MulticastSource", nil}
    for i := range primary.MulticastSource {
        primary.EntityData.Children[types.GetSegmentPath(&primary.MulticastSource[i])] = types.YChild{"MulticastSource", &primary.MulticastSource[i]}
    }
    primary.EntityData.Leafs = make(map[string]types.YLeaf)
    primary.EntityData.Leafs["origin"] = types.YLeaf{"Origin", primary.Origin}
    primary.EntityData.Leafs["metric"] = types.YLeaf{"Metric", primary.Metric}
    primary.EntityData.Leafs["multicast-metric"] = types.YLeaf{"MulticastMetric", primary.MulticastMetric}
    primary.EntityData.Leafs["is-external-metric"] = types.YLeaf{"IsExternalMetric", primary.IsExternalMetric}
    primary.EntityData.Leafs["administrative-distance"] = types.YLeaf{"AdministrativeDistance", primary.AdministrativeDistance}
    return &(primary.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "primary"
    paths.EntityData.SegmentPath = "paths"
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = make(map[string]types.YChild)
    paths.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &paths.FrrBackup}
    paths.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range paths.UloopExplicit {
        paths.EntityData.Children[types.GetSegmentPath(&paths.UloopExplicit[i])] = types.YChild{"UloopExplicit", &paths.UloopExplicit[i]}
    }
    paths.EntityData.Leafs = make(map[string]types.YLeaf)
    paths.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", paths.NeighborId}
    paths.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", paths.EgressInterface}
    paths.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", paths.NeighborAddress}
    paths.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", paths.NeighborSnpa}
    paths.EntityData.Leafs["tag"] = types.YLeaf{"Tag", paths.Tag}
    paths.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", paths.TunnelInterface}
    paths.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", paths.SegmentRoutingSidValue}
    paths.EntityData.Leafs["weight"] = types.YLeaf{"Weight", paths.Weight}
    paths.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", paths.IsTeTunnelInterface}
    paths.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", paths.IsSrExcludeTunnelInterface}
    return &(paths.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "paths"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "paths"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetEntityData() *types.CommonEntityData {
    ucmpNextHop.EntityData.YFilter = ucmpNextHop.YFilter
    ucmpNextHop.EntityData.YangName = "ucmp-next-hop"
    ucmpNextHop.EntityData.BundleName = "cisco_ios_xr"
    ucmpNextHop.EntityData.ParentYangName = "primary"
    ucmpNextHop.EntityData.SegmentPath = "ucmp-next-hop"
    ucmpNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ucmpNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ucmpNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ucmpNextHop.EntityData.Children = make(map[string]types.YChild)
    ucmpNextHop.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &ucmpNextHop.FrrBackup}
    ucmpNextHop.EntityData.Leafs = make(map[string]types.YLeaf)
    ucmpNextHop.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", ucmpNextHop.NeighborId}
    ucmpNextHop.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", ucmpNextHop.EgressInterface}
    ucmpNextHop.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", ucmpNextHop.NeighborAddress}
    ucmpNextHop.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", ucmpNextHop.NeighborSnpa}
    ucmpNextHop.EntityData.Leafs["tag"] = types.YLeaf{"Tag", ucmpNextHop.Tag}
    ucmpNextHop.EntityData.Leafs["total-ucmp-distance"] = types.YLeaf{"TotalUcmpDistance", ucmpNextHop.TotalUcmpDistance}
    ucmpNextHop.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", ucmpNextHop.SegmentRoutingSidValue}
    ucmpNextHop.EntityData.Leafs["weight"] = types.YLeaf{"Weight", ucmpNextHop.Weight}
    ucmpNextHop.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", ucmpNextHop.IsTeTunnelInterface}
    ucmpNextHop.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", ucmpNextHop.IsSrExcludeTunnelInterface}
    return &(ucmpNextHop.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "ucmp-next-hop"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetEntityData() *types.CommonEntityData {
    multicastPath.EntityData.YFilter = multicastPath.YFilter
    multicastPath.EntityData.YangName = "multicast-path"
    multicastPath.EntityData.BundleName = "cisco_ios_xr"
    multicastPath.EntityData.ParentYangName = "primary"
    multicastPath.EntityData.SegmentPath = "multicast-path"
    multicastPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastPath.EntityData.Children = make(map[string]types.YChild)
    multicastPath.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &multicastPath.FrrBackup}
    multicastPath.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range multicastPath.UloopExplicit {
        multicastPath.EntityData.Children[types.GetSegmentPath(&multicastPath.UloopExplicit[i])] = types.YChild{"UloopExplicit", &multicastPath.UloopExplicit[i]}
    }
    multicastPath.EntityData.Leafs = make(map[string]types.YLeaf)
    multicastPath.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", multicastPath.NeighborId}
    multicastPath.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", multicastPath.EgressInterface}
    multicastPath.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", multicastPath.NeighborAddress}
    multicastPath.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", multicastPath.NeighborSnpa}
    multicastPath.EntityData.Leafs["tag"] = types.YLeaf{"Tag", multicastPath.Tag}
    multicastPath.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", multicastPath.TunnelInterface}
    multicastPath.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", multicastPath.SegmentRoutingSidValue}
    multicastPath.EntityData.Leafs["weight"] = types.YLeaf{"Weight", multicastPath.Weight}
    multicastPath.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", multicastPath.IsTeTunnelInterface}
    multicastPath.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", multicastPath.IsSrExcludeTunnelInterface}
    return &(multicastPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "multicast-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "multicast-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetEntityData() *types.CommonEntityData {
    srtePath.EntityData.YFilter = srtePath.YFilter
    srtePath.EntityData.YangName = "srte-path"
    srtePath.EntityData.BundleName = "cisco_ios_xr"
    srtePath.EntityData.ParentYangName = "primary"
    srtePath.EntityData.SegmentPath = "srte-path"
    srtePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srtePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srtePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srtePath.EntityData.Children = make(map[string]types.YChild)
    srtePath.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &srtePath.FrrBackup}
    srtePath.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range srtePath.UloopExplicit {
        srtePath.EntityData.Children[types.GetSegmentPath(&srtePath.UloopExplicit[i])] = types.YChild{"UloopExplicit", &srtePath.UloopExplicit[i]}
    }
    srtePath.EntityData.Leafs = make(map[string]types.YLeaf)
    srtePath.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", srtePath.NeighborId}
    srtePath.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", srtePath.EgressInterface}
    srtePath.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", srtePath.NeighborAddress}
    srtePath.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", srtePath.NeighborSnpa}
    srtePath.EntityData.Leafs["tag"] = types.YLeaf{"Tag", srtePath.Tag}
    srtePath.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", srtePath.TunnelInterface}
    srtePath.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", srtePath.SegmentRoutingSidValue}
    srtePath.EntityData.Leafs["weight"] = types.YLeaf{"Weight", srtePath.Weight}
    srtePath.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", srtePath.IsTeTunnelInterface}
    srtePath.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", srtePath.IsSrExcludeTunnelInterface}
    return &(srtePath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "srte-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "srte-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetEntityData() *types.CommonEntityData {
    explicitPath.EntityData.YFilter = explicitPath.YFilter
    explicitPath.EntityData.YangName = "explicit-path"
    explicitPath.EntityData.BundleName = "cisco_ios_xr"
    explicitPath.EntityData.ParentYangName = "primary"
    explicitPath.EntityData.SegmentPath = "explicit-path"
    explicitPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitPath.EntityData.Children = make(map[string]types.YChild)
    explicitPath.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &explicitPath.FrrBackup}
    explicitPath.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range explicitPath.UloopExplicit {
        explicitPath.EntityData.Children[types.GetSegmentPath(&explicitPath.UloopExplicit[i])] = types.YChild{"UloopExplicit", &explicitPath.UloopExplicit[i]}
    }
    explicitPath.EntityData.Leafs = make(map[string]types.YLeaf)
    explicitPath.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", explicitPath.NeighborId}
    explicitPath.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", explicitPath.EgressInterface}
    explicitPath.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", explicitPath.NeighborAddress}
    explicitPath.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", explicitPath.NeighborSnpa}
    explicitPath.EntityData.Leafs["tag"] = types.YLeaf{"Tag", explicitPath.Tag}
    explicitPath.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", explicitPath.TunnelInterface}
    explicitPath.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", explicitPath.SegmentRoutingSidValue}
    explicitPath.EntityData.Leafs["weight"] = types.YLeaf{"Weight", explicitPath.Weight}
    explicitPath.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", explicitPath.IsTeTunnelInterface}
    explicitPath.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", explicitPath.IsSrExcludeTunnelInterface}
    return &(explicitPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "explicit-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "explicit-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}\\-[a-fA-F0-9]{2}'.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "primary"
    source.EntityData.SegmentPath = "source"
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = make(map[string]types.YChild)
    source.EntityData.Children["tags"] = types.YChild{"Tags", nil}
    for i := range source.Tags {
        source.EntityData.Children[types.GetSegmentPath(&source.Tags[i])] = types.YChild{"Tags", &source.Tags[i]}
    }
    source.EntityData.Children["nodal-sid"] = types.YChild{"NodalSid", nil}
    for i := range source.NodalSid {
        source.EntityData.Children[types.GetSegmentPath(&source.NodalSid[i])] = types.YChild{"NodalSid", &source.NodalSid[i]}
    }
    source.EntityData.Leafs = make(map[string]types.YLeaf)
    source.EntityData.Leafs["source-lsp-id"] = types.YLeaf{"SourceLspId", source.SourceLspId}
    source.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", source.SourceAddress}
    return &(source.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "source"
    tags.EntityData.SegmentPath = "tags"
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = make(map[string]types.YChild)
    tags.EntityData.Leafs = make(map[string]types.YLeaf)
    tags.EntityData.Leafs["entry"] = types.YLeaf{"Entry", tags.Entry}
    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "source"
    nodalSid.EntityData.SegmentPath = "nodal-sid"
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = make(map[string]types.YChild)
    nodalSid.EntityData.Leafs = make(map[string]types.YLeaf)
    nodalSid.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", nodalSid.SidValue}
    nodalSid.EntityData.Leafs["rflag"] = types.YLeaf{"Rflag", nodalSid.Rflag}
    nodalSid.EntityData.Leafs["nflag"] = types.YLeaf{"Nflag", nodalSid.Nflag}
    nodalSid.EntityData.Leafs["pflag"] = types.YLeaf{"Pflag", nodalSid.Pflag}
    nodalSid.EntityData.Leafs["eflag"] = types.YLeaf{"Eflag", nodalSid.Eflag}
    nodalSid.EntityData.Leafs["vflag"] = types.YLeaf{"Vflag", nodalSid.Vflag}
    nodalSid.EntityData.Leafs["lflag"] = types.YLeaf{"Lflag", nodalSid.Lflag}
    nodalSid.EntityData.Leafs["algorithm"] = types.YLeaf{"Algorithm", nodalSid.Algorithm}
    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}\\-[a-fA-F0-9]{2}'.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetEntityData() *types.CommonEntityData {
    multicastSource.EntityData.YFilter = multicastSource.YFilter
    multicastSource.EntityData.YangName = "multicast-source"
    multicastSource.EntityData.BundleName = "cisco_ios_xr"
    multicastSource.EntityData.ParentYangName = "primary"
    multicastSource.EntityData.SegmentPath = "multicast-source"
    multicastSource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastSource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastSource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastSource.EntityData.Children = make(map[string]types.YChild)
    multicastSource.EntityData.Children["tags"] = types.YChild{"Tags", nil}
    for i := range multicastSource.Tags {
        multicastSource.EntityData.Children[types.GetSegmentPath(&multicastSource.Tags[i])] = types.YChild{"Tags", &multicastSource.Tags[i]}
    }
    multicastSource.EntityData.Children["nodal-sid"] = types.YChild{"NodalSid", nil}
    for i := range multicastSource.NodalSid {
        multicastSource.EntityData.Children[types.GetSegmentPath(&multicastSource.NodalSid[i])] = types.YChild{"NodalSid", &multicastSource.NodalSid[i]}
    }
    multicastSource.EntityData.Leafs = make(map[string]types.YLeaf)
    multicastSource.EntityData.Leafs["source-lsp-id"] = types.YLeaf{"SourceLspId", multicastSource.SourceLspId}
    multicastSource.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", multicastSource.SourceAddress}
    return &(multicastSource.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "multicast-source"
    tags.EntityData.SegmentPath = "tags"
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = make(map[string]types.YChild)
    tags.EntityData.Leafs = make(map[string]types.YLeaf)
    tags.EntityData.Leafs["entry"] = types.YLeaf{"Entry", tags.Entry}
    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "multicast-source"
    nodalSid.EntityData.SegmentPath = "nodal-sid"
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = make(map[string]types.YChild)
    nodalSid.EntityData.Leafs = make(map[string]types.YLeaf)
    nodalSid.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", nodalSid.SidValue}
    nodalSid.EntityData.Leafs["rflag"] = types.YLeaf{"Rflag", nodalSid.Rflag}
    nodalSid.EntityData.Leafs["nflag"] = types.YLeaf{"Nflag", nodalSid.Nflag}
    nodalSid.EntityData.Leafs["pflag"] = types.YLeaf{"Pflag", nodalSid.Pflag}
    nodalSid.EntityData.Leafs["eflag"] = types.YLeaf{"Eflag", nodalSid.Eflag}
    nodalSid.EntityData.Leafs["vflag"] = types.YLeaf{"Vflag", nodalSid.Vflag}
    nodalSid.EntityData.Leafs["lflag"] = types.YLeaf{"Lflag", nodalSid.Lflag}
    nodalSid.EntityData.Leafs["algorithm"] = types.YLeaf{"Algorithm", nodalSid.Algorithm}
    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup
// Backup paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths.
    Paths []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop.
    UcmpNextHop []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath.
    MulticastPath []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath.
    SrtePath []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath.
    ExplicitPath []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source.
    Source []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource.
    MulticastSource []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup) GetEntityData() *types.CommonEntityData {
    backup.EntityData.YFilter = backup.YFilter
    backup.EntityData.YangName = "backup"
    backup.EntityData.BundleName = "cisco_ios_xr"
    backup.EntityData.ParentYangName = "native-details"
    backup.EntityData.SegmentPath = "backup"
    backup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backup.EntityData.Children = make(map[string]types.YChild)
    backup.EntityData.Children["paths"] = types.YChild{"Paths", nil}
    for i := range backup.Paths {
        backup.EntityData.Children[types.GetSegmentPath(&backup.Paths[i])] = types.YChild{"Paths", &backup.Paths[i]}
    }
    backup.EntityData.Children["ucmp-next-hop"] = types.YChild{"UcmpNextHop", nil}
    for i := range backup.UcmpNextHop {
        backup.EntityData.Children[types.GetSegmentPath(&backup.UcmpNextHop[i])] = types.YChild{"UcmpNextHop", &backup.UcmpNextHop[i]}
    }
    backup.EntityData.Children["multicast-path"] = types.YChild{"MulticastPath", nil}
    for i := range backup.MulticastPath {
        backup.EntityData.Children[types.GetSegmentPath(&backup.MulticastPath[i])] = types.YChild{"MulticastPath", &backup.MulticastPath[i]}
    }
    backup.EntityData.Children["srte-path"] = types.YChild{"SrtePath", nil}
    for i := range backup.SrtePath {
        backup.EntityData.Children[types.GetSegmentPath(&backup.SrtePath[i])] = types.YChild{"SrtePath", &backup.SrtePath[i]}
    }
    backup.EntityData.Children["explicit-path"] = types.YChild{"ExplicitPath", nil}
    for i := range backup.ExplicitPath {
        backup.EntityData.Children[types.GetSegmentPath(&backup.ExplicitPath[i])] = types.YChild{"ExplicitPath", &backup.ExplicitPath[i]}
    }
    backup.EntityData.Children["source"] = types.YChild{"Source", nil}
    for i := range backup.Source {
        backup.EntityData.Children[types.GetSegmentPath(&backup.Source[i])] = types.YChild{"Source", &backup.Source[i]}
    }
    backup.EntityData.Children["multicast-source"] = types.YChild{"MulticastSource", nil}
    for i := range backup.MulticastSource {
        backup.EntityData.Children[types.GetSegmentPath(&backup.MulticastSource[i])] = types.YChild{"MulticastSource", &backup.MulticastSource[i]}
    }
    backup.EntityData.Leafs = make(map[string]types.YLeaf)
    backup.EntityData.Leafs["origin"] = types.YLeaf{"Origin", backup.Origin}
    backup.EntityData.Leafs["metric"] = types.YLeaf{"Metric", backup.Metric}
    backup.EntityData.Leafs["multicast-metric"] = types.YLeaf{"MulticastMetric", backup.MulticastMetric}
    backup.EntityData.Leafs["is-external-metric"] = types.YLeaf{"IsExternalMetric", backup.IsExternalMetric}
    backup.EntityData.Leafs["administrative-distance"] = types.YLeaf{"AdministrativeDistance", backup.AdministrativeDistance}
    return &(backup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "backup"
    paths.EntityData.SegmentPath = "paths"
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = make(map[string]types.YChild)
    paths.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &paths.FrrBackup}
    paths.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range paths.UloopExplicit {
        paths.EntityData.Children[types.GetSegmentPath(&paths.UloopExplicit[i])] = types.YChild{"UloopExplicit", &paths.UloopExplicit[i]}
    }
    paths.EntityData.Leafs = make(map[string]types.YLeaf)
    paths.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", paths.NeighborId}
    paths.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", paths.EgressInterface}
    paths.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", paths.NeighborAddress}
    paths.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", paths.NeighborSnpa}
    paths.EntityData.Leafs["tag"] = types.YLeaf{"Tag", paths.Tag}
    paths.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", paths.TunnelInterface}
    paths.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", paths.SegmentRoutingSidValue}
    paths.EntityData.Leafs["weight"] = types.YLeaf{"Weight", paths.Weight}
    paths.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", paths.IsTeTunnelInterface}
    paths.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", paths.IsSrExcludeTunnelInterface}
    return &(paths.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "paths"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "paths"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetEntityData() *types.CommonEntityData {
    ucmpNextHop.EntityData.YFilter = ucmpNextHop.YFilter
    ucmpNextHop.EntityData.YangName = "ucmp-next-hop"
    ucmpNextHop.EntityData.BundleName = "cisco_ios_xr"
    ucmpNextHop.EntityData.ParentYangName = "backup"
    ucmpNextHop.EntityData.SegmentPath = "ucmp-next-hop"
    ucmpNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ucmpNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ucmpNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ucmpNextHop.EntityData.Children = make(map[string]types.YChild)
    ucmpNextHop.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &ucmpNextHop.FrrBackup}
    ucmpNextHop.EntityData.Leafs = make(map[string]types.YLeaf)
    ucmpNextHop.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", ucmpNextHop.NeighborId}
    ucmpNextHop.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", ucmpNextHop.EgressInterface}
    ucmpNextHop.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", ucmpNextHop.NeighborAddress}
    ucmpNextHop.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", ucmpNextHop.NeighborSnpa}
    ucmpNextHop.EntityData.Leafs["tag"] = types.YLeaf{"Tag", ucmpNextHop.Tag}
    ucmpNextHop.EntityData.Leafs["total-ucmp-distance"] = types.YLeaf{"TotalUcmpDistance", ucmpNextHop.TotalUcmpDistance}
    ucmpNextHop.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", ucmpNextHop.SegmentRoutingSidValue}
    ucmpNextHop.EntityData.Leafs["weight"] = types.YLeaf{"Weight", ucmpNextHop.Weight}
    ucmpNextHop.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", ucmpNextHop.IsTeTunnelInterface}
    ucmpNextHop.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", ucmpNextHop.IsSrExcludeTunnelInterface}
    return &(ucmpNextHop.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "ucmp-next-hop"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetEntityData() *types.CommonEntityData {
    multicastPath.EntityData.YFilter = multicastPath.YFilter
    multicastPath.EntityData.YangName = "multicast-path"
    multicastPath.EntityData.BundleName = "cisco_ios_xr"
    multicastPath.EntityData.ParentYangName = "backup"
    multicastPath.EntityData.SegmentPath = "multicast-path"
    multicastPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastPath.EntityData.Children = make(map[string]types.YChild)
    multicastPath.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &multicastPath.FrrBackup}
    multicastPath.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range multicastPath.UloopExplicit {
        multicastPath.EntityData.Children[types.GetSegmentPath(&multicastPath.UloopExplicit[i])] = types.YChild{"UloopExplicit", &multicastPath.UloopExplicit[i]}
    }
    multicastPath.EntityData.Leafs = make(map[string]types.YLeaf)
    multicastPath.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", multicastPath.NeighborId}
    multicastPath.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", multicastPath.EgressInterface}
    multicastPath.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", multicastPath.NeighborAddress}
    multicastPath.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", multicastPath.NeighborSnpa}
    multicastPath.EntityData.Leafs["tag"] = types.YLeaf{"Tag", multicastPath.Tag}
    multicastPath.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", multicastPath.TunnelInterface}
    multicastPath.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", multicastPath.SegmentRoutingSidValue}
    multicastPath.EntityData.Leafs["weight"] = types.YLeaf{"Weight", multicastPath.Weight}
    multicastPath.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", multicastPath.IsTeTunnelInterface}
    multicastPath.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", multicastPath.IsSrExcludeTunnelInterface}
    return &(multicastPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "multicast-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "multicast-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetEntityData() *types.CommonEntityData {
    srtePath.EntityData.YFilter = srtePath.YFilter
    srtePath.EntityData.YangName = "srte-path"
    srtePath.EntityData.BundleName = "cisco_ios_xr"
    srtePath.EntityData.ParentYangName = "backup"
    srtePath.EntityData.SegmentPath = "srte-path"
    srtePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srtePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srtePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srtePath.EntityData.Children = make(map[string]types.YChild)
    srtePath.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &srtePath.FrrBackup}
    srtePath.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range srtePath.UloopExplicit {
        srtePath.EntityData.Children[types.GetSegmentPath(&srtePath.UloopExplicit[i])] = types.YChild{"UloopExplicit", &srtePath.UloopExplicit[i]}
    }
    srtePath.EntityData.Leafs = make(map[string]types.YLeaf)
    srtePath.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", srtePath.NeighborId}
    srtePath.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", srtePath.EgressInterface}
    srtePath.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", srtePath.NeighborAddress}
    srtePath.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", srtePath.NeighborSnpa}
    srtePath.EntityData.Leafs["tag"] = types.YLeaf{"Tag", srtePath.Tag}
    srtePath.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", srtePath.TunnelInterface}
    srtePath.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", srtePath.SegmentRoutingSidValue}
    srtePath.EntityData.Leafs["weight"] = types.YLeaf{"Weight", srtePath.Weight}
    srtePath.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", srtePath.IsTeTunnelInterface}
    srtePath.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", srtePath.IsSrExcludeTunnelInterface}
    return &(srtePath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "srte-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "srte-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetEntityData() *types.CommonEntityData {
    explicitPath.EntityData.YFilter = explicitPath.YFilter
    explicitPath.EntityData.YangName = "explicit-path"
    explicitPath.EntityData.BundleName = "cisco_ios_xr"
    explicitPath.EntityData.ParentYangName = "backup"
    explicitPath.EntityData.SegmentPath = "explicit-path"
    explicitPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitPath.EntityData.Children = make(map[string]types.YChild)
    explicitPath.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &explicitPath.FrrBackup}
    explicitPath.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range explicitPath.UloopExplicit {
        explicitPath.EntityData.Children[types.GetSegmentPath(&explicitPath.UloopExplicit[i])] = types.YChild{"UloopExplicit", &explicitPath.UloopExplicit[i]}
    }
    explicitPath.EntityData.Leafs = make(map[string]types.YLeaf)
    explicitPath.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", explicitPath.NeighborId}
    explicitPath.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", explicitPath.EgressInterface}
    explicitPath.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", explicitPath.NeighborAddress}
    explicitPath.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", explicitPath.NeighborSnpa}
    explicitPath.EntityData.Leafs["tag"] = types.YLeaf{"Tag", explicitPath.Tag}
    explicitPath.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", explicitPath.TunnelInterface}
    explicitPath.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", explicitPath.SegmentRoutingSidValue}
    explicitPath.EntityData.Leafs["weight"] = types.YLeaf{"Weight", explicitPath.Weight}
    explicitPath.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", explicitPath.IsTeTunnelInterface}
    explicitPath.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", explicitPath.IsSrExcludeTunnelInterface}
    return &(explicitPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "explicit-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "explicit-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}\\-[a-fA-F0-9]{2}'.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "backup"
    source.EntityData.SegmentPath = "source"
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = make(map[string]types.YChild)
    source.EntityData.Children["tags"] = types.YChild{"Tags", nil}
    for i := range source.Tags {
        source.EntityData.Children[types.GetSegmentPath(&source.Tags[i])] = types.YChild{"Tags", &source.Tags[i]}
    }
    source.EntityData.Children["nodal-sid"] = types.YChild{"NodalSid", nil}
    for i := range source.NodalSid {
        source.EntityData.Children[types.GetSegmentPath(&source.NodalSid[i])] = types.YChild{"NodalSid", &source.NodalSid[i]}
    }
    source.EntityData.Leafs = make(map[string]types.YLeaf)
    source.EntityData.Leafs["source-lsp-id"] = types.YLeaf{"SourceLspId", source.SourceLspId}
    source.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", source.SourceAddress}
    return &(source.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "source"
    tags.EntityData.SegmentPath = "tags"
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = make(map[string]types.YChild)
    tags.EntityData.Leafs = make(map[string]types.YLeaf)
    tags.EntityData.Leafs["entry"] = types.YLeaf{"Entry", tags.Entry}
    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "source"
    nodalSid.EntityData.SegmentPath = "nodal-sid"
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = make(map[string]types.YChild)
    nodalSid.EntityData.Leafs = make(map[string]types.YLeaf)
    nodalSid.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", nodalSid.SidValue}
    nodalSid.EntityData.Leafs["rflag"] = types.YLeaf{"Rflag", nodalSid.Rflag}
    nodalSid.EntityData.Leafs["nflag"] = types.YLeaf{"Nflag", nodalSid.Nflag}
    nodalSid.EntityData.Leafs["pflag"] = types.YLeaf{"Pflag", nodalSid.Pflag}
    nodalSid.EntityData.Leafs["eflag"] = types.YLeaf{"Eflag", nodalSid.Eflag}
    nodalSid.EntityData.Leafs["vflag"] = types.YLeaf{"Vflag", nodalSid.Vflag}
    nodalSid.EntityData.Leafs["lflag"] = types.YLeaf{"Lflag", nodalSid.Lflag}
    nodalSid.EntityData.Leafs["algorithm"] = types.YLeaf{"Algorithm", nodalSid.Algorithm}
    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}\\-[a-fA-F0-9]{2}'.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetEntityData() *types.CommonEntityData {
    multicastSource.EntityData.YFilter = multicastSource.YFilter
    multicastSource.EntityData.YangName = "multicast-source"
    multicastSource.EntityData.BundleName = "cisco_ios_xr"
    multicastSource.EntityData.ParentYangName = "backup"
    multicastSource.EntityData.SegmentPath = "multicast-source"
    multicastSource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastSource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastSource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastSource.EntityData.Children = make(map[string]types.YChild)
    multicastSource.EntityData.Children["tags"] = types.YChild{"Tags", nil}
    for i := range multicastSource.Tags {
        multicastSource.EntityData.Children[types.GetSegmentPath(&multicastSource.Tags[i])] = types.YChild{"Tags", &multicastSource.Tags[i]}
    }
    multicastSource.EntityData.Children["nodal-sid"] = types.YChild{"NodalSid", nil}
    for i := range multicastSource.NodalSid {
        multicastSource.EntityData.Children[types.GetSegmentPath(&multicastSource.NodalSid[i])] = types.YChild{"NodalSid", &multicastSource.NodalSid[i]}
    }
    multicastSource.EntityData.Leafs = make(map[string]types.YLeaf)
    multicastSource.EntityData.Leafs["source-lsp-id"] = types.YLeaf{"SourceLspId", multicastSource.SourceLspId}
    multicastSource.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", multicastSource.SourceAddress}
    return &(multicastSource.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "multicast-source"
    tags.EntityData.SegmentPath = "tags"
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = make(map[string]types.YChild)
    tags.EntityData.Leafs = make(map[string]types.YLeaf)
    tags.EntityData.Leafs["entry"] = types.YLeaf{"Entry", tags.Entry}
    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "multicast-source"
    nodalSid.EntityData.SegmentPath = "nodal-sid"
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = make(map[string]types.YChild)
    nodalSid.EntityData.Leafs = make(map[string]types.YLeaf)
    nodalSid.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", nodalSid.SidValue}
    nodalSid.EntityData.Leafs["rflag"] = types.YLeaf{"Rflag", nodalSid.Rflag}
    nodalSid.EntityData.Leafs["nflag"] = types.YLeaf{"Nflag", nodalSid.Nflag}
    nodalSid.EntityData.Leafs["pflag"] = types.YLeaf{"Pflag", nodalSid.Pflag}
    nodalSid.EntityData.Leafs["eflag"] = types.YLeaf{"Eflag", nodalSid.Eflag}
    nodalSid.EntityData.Leafs["vflag"] = types.YLeaf{"Vflag", nodalSid.Vflag}
    nodalSid.EntityData.Leafs["lflag"] = types.YLeaf{"Lflag", nodalSid.Lflag}
    nodalSid.EntityData.Leafs["algorithm"] = types.YLeaf{"Algorithm", nodalSid.Algorithm}
    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail
// Per level details of how the local system
// advertises the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Level in which the prefix is advertised. The type is IsisLevel.
    Level interface{}

    // The origin of the advertisement. The type is IsisShRouteAdvOrigin.
    AdvertisingOrigin interface{}

    // Metric with which the prefix is advertised. The type is interface{} with
    // range: 0..4294967295.
    Metric interface{}

    // Has the prefix been propagated from another level?. The type is bool.
    IsPropagated interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Is the prefix external to the IS-IS domain?. The type is bool.
    IsExternalReachability interface{}

    // Is the up/down bit set?. The type is bool.
    IsInterarea interface{}

    // Status of summarization for the prefix.
    SummarizationStatus Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus

    // Tags associated with the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_NodalSid
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail) GetEntityData() *types.CommonEntityData {
    perLevelAdvertisingDetail.EntityData.YFilter = perLevelAdvertisingDetail.YFilter
    perLevelAdvertisingDetail.EntityData.YangName = "per-level-advertising-detail"
    perLevelAdvertisingDetail.EntityData.BundleName = "cisco_ios_xr"
    perLevelAdvertisingDetail.EntityData.ParentYangName = "ipv6frr-backup"
    perLevelAdvertisingDetail.EntityData.SegmentPath = "per-level-advertising-detail"
    perLevelAdvertisingDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perLevelAdvertisingDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perLevelAdvertisingDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perLevelAdvertisingDetail.EntityData.Children = make(map[string]types.YChild)
    perLevelAdvertisingDetail.EntityData.Children["summarization-status"] = types.YChild{"SummarizationStatus", &perLevelAdvertisingDetail.SummarizationStatus}
    perLevelAdvertisingDetail.EntityData.Children["tags"] = types.YChild{"Tags", nil}
    for i := range perLevelAdvertisingDetail.Tags {
        perLevelAdvertisingDetail.EntityData.Children[types.GetSegmentPath(&perLevelAdvertisingDetail.Tags[i])] = types.YChild{"Tags", &perLevelAdvertisingDetail.Tags[i]}
    }
    perLevelAdvertisingDetail.EntityData.Children["nodal-sid"] = types.YChild{"NodalSid", nil}
    for i := range perLevelAdvertisingDetail.NodalSid {
        perLevelAdvertisingDetail.EntityData.Children[types.GetSegmentPath(&perLevelAdvertisingDetail.NodalSid[i])] = types.YChild{"NodalSid", &perLevelAdvertisingDetail.NodalSid[i]}
    }
    perLevelAdvertisingDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    perLevelAdvertisingDetail.EntityData.Leafs["level"] = types.YLeaf{"Level", perLevelAdvertisingDetail.Level}
    perLevelAdvertisingDetail.EntityData.Leafs["advertising-origin"] = types.YLeaf{"AdvertisingOrigin", perLevelAdvertisingDetail.AdvertisingOrigin}
    perLevelAdvertisingDetail.EntityData.Leafs["metric"] = types.YLeaf{"Metric", perLevelAdvertisingDetail.Metric}
    perLevelAdvertisingDetail.EntityData.Leafs["is-propagated"] = types.YLeaf{"IsPropagated", perLevelAdvertisingDetail.IsPropagated}
    perLevelAdvertisingDetail.EntityData.Leafs["is-external-metric"] = types.YLeaf{"IsExternalMetric", perLevelAdvertisingDetail.IsExternalMetric}
    perLevelAdvertisingDetail.EntityData.Leafs["is-external-reachability"] = types.YLeaf{"IsExternalReachability", perLevelAdvertisingDetail.IsExternalReachability}
    perLevelAdvertisingDetail.EntityData.Leafs["is-interarea"] = types.YLeaf{"IsInterarea", perLevelAdvertisingDetail.IsInterarea}
    return &(perLevelAdvertisingDetail.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus
// Status of summarization for the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Summarizing Prefix.
    SummaryPrefix Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetEntityData() *types.CommonEntityData {
    summarizationStatus.EntityData.YFilter = summarizationStatus.YFilter
    summarizationStatus.EntityData.YangName = "summarization-status"
    summarizationStatus.EntityData.BundleName = "cisco_ios_xr"
    summarizationStatus.EntityData.ParentYangName = "per-level-advertising-detail"
    summarizationStatus.EntityData.SegmentPath = "summarization-status"
    summarizationStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summarizationStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summarizationStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summarizationStatus.EntityData.Children = make(map[string]types.YChild)
    summarizationStatus.EntityData.Children["summary-prefix"] = types.YChild{"SummaryPrefix", &summarizationStatus.SummaryPrefix}
    summarizationStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    summarizationStatus.EntityData.Leafs["is-valid"] = types.YLeaf{"IsValid", summarizationStatus.IsValid}
    return &(summarizationStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
// Summarizing Prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetEntityData() *types.CommonEntityData {
    summaryPrefix.EntityData.YFilter = summaryPrefix.YFilter
    summaryPrefix.EntityData.YangName = "summary-prefix"
    summaryPrefix.EntityData.BundleName = "cisco_ios_xr"
    summaryPrefix.EntityData.ParentYangName = "summarization-status"
    summaryPrefix.EntityData.SegmentPath = "summary-prefix"
    summaryPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryPrefix.EntityData.Children = make(map[string]types.YChild)
    summaryPrefix.EntityData.Leafs = make(map[string]types.YLeaf)
    summaryPrefix.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", summaryPrefix.Prefix}
    summaryPrefix.EntityData.Leafs["prefix-length"] = types.YLeaf{"PrefixLength", summaryPrefix.PrefixLength}
    return &(summaryPrefix.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_Tags
// Tags associated with the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "per-level-advertising-detail"
    tags.EntityData.SegmentPath = "tags"
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = make(map[string]types.YChild)
    tags.EntityData.Leafs = make(map[string]types.YLeaf)
    tags.EntityData.Leafs["entry"] = types.YLeaf{"Entry", tags.Entry}
    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FrrBackups_Ipv6FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "per-level-advertising-detail"
    nodalSid.EntityData.SegmentPath = "nodal-sid"
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = make(map[string]types.YChild)
    nodalSid.EntityData.Leafs = make(map[string]types.YLeaf)
    nodalSid.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", nodalSid.SidValue}
    nodalSid.EntityData.Leafs["rflag"] = types.YLeaf{"Rflag", nodalSid.Rflag}
    nodalSid.EntityData.Leafs["nflag"] = types.YLeaf{"Nflag", nodalSid.Nflag}
    nodalSid.EntityData.Leafs["pflag"] = types.YLeaf{"Pflag", nodalSid.Pflag}
    nodalSid.EntityData.Leafs["eflag"] = types.YLeaf{"Eflag", nodalSid.Eflag}
    nodalSid.EntityData.Leafs["vflag"] = types.YLeaf{"Vflag", nodalSid.Vflag}
    nodalSid.EntityData.Leafs["lflag"] = types.YLeaf{"Lflag", nodalSid.Lflag}
    nodalSid.EntityData.Leafs["algorithm"] = types.YLeaf{"Algorithm", nodalSid.Algorithm}
    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups
// IPv4 FRR table
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FRR backup for an IPv4 network. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup.
    Ipv4FrrBackup []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup
}

func (ipv4FrrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups) GetEntityData() *types.CommonEntityData {
    ipv4FrrBackups.EntityData.YFilter = ipv4FrrBackups.YFilter
    ipv4FrrBackups.EntityData.YangName = "ipv4frr-backups"
    ipv4FrrBackups.EntityData.BundleName = "cisco_ios_xr"
    ipv4FrrBackups.EntityData.ParentYangName = "topology"
    ipv4FrrBackups.EntityData.SegmentPath = "ipv4frr-backups"
    ipv4FrrBackups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4FrrBackups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4FrrBackups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4FrrBackups.EntityData.Children = make(map[string]types.YChild)
    ipv4FrrBackups.EntityData.Children["ipv4frr-backup"] = types.YChild{"Ipv4FrrBackup", nil}
    for i := range ipv4FrrBackups.Ipv4FrrBackup {
        ipv4FrrBackups.EntityData.Children[types.GetSegmentPath(&ipv4FrrBackups.Ipv4FrrBackup[i])] = types.YChild{"Ipv4FrrBackup", &ipv4FrrBackups.Ipv4FrrBackup[i]}
    }
    ipv4FrrBackups.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4FrrBackups.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup
// FRR backup for an IPv4 network
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Status of IS-IS directly connected routes to the prefix.
    ConnectedStatus Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus

    // Status of other protocols' routes redistributed into IS-IS.
    RedistributedStatus Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus

    // Status of native IS-IS routes to the prefix.
    NativeStatus Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus

    // Per level details of how the local system advertises the prefix. The type
    // is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail.
    PerLevelAdvertisingDetail []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail
}

func (ipv4FrrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup) GetEntityData() *types.CommonEntityData {
    ipv4FrrBackup.EntityData.YFilter = ipv4FrrBackup.YFilter
    ipv4FrrBackup.EntityData.YangName = "ipv4frr-backup"
    ipv4FrrBackup.EntityData.BundleName = "cisco_ios_xr"
    ipv4FrrBackup.EntityData.ParentYangName = "ipv4frr-backups"
    ipv4FrrBackup.EntityData.SegmentPath = "ipv4frr-backup"
    ipv4FrrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4FrrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4FrrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4FrrBackup.EntityData.Children = make(map[string]types.YChild)
    ipv4FrrBackup.EntityData.Children["connected-status"] = types.YChild{"ConnectedStatus", &ipv4FrrBackup.ConnectedStatus}
    ipv4FrrBackup.EntityData.Children["redistributed-status"] = types.YChild{"RedistributedStatus", &ipv4FrrBackup.RedistributedStatus}
    ipv4FrrBackup.EntityData.Children["native-status"] = types.YChild{"NativeStatus", &ipv4FrrBackup.NativeStatus}
    ipv4FrrBackup.EntityData.Children["per-level-advertising-detail"] = types.YChild{"PerLevelAdvertisingDetail", nil}
    for i := range ipv4FrrBackup.PerLevelAdvertisingDetail {
        ipv4FrrBackup.EntityData.Children[types.GetSegmentPath(&ipv4FrrBackup.PerLevelAdvertisingDetail[i])] = types.YChild{"PerLevelAdvertisingDetail", &ipv4FrrBackup.PerLevelAdvertisingDetail[i]}
    }
    ipv4FrrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv4FrrBackup.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", ipv4FrrBackup.Prefix}
    ipv4FrrBackup.EntityData.Leafs["prefix-length"] = types.YLeaf{"PrefixLength", ipv4FrrBackup.PrefixLength}
    return &(ipv4FrrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus
// Status of IS-IS directly connected routes to the
// prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the directly connected prefix.
    ConnectedDetails Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus) GetEntityData() *types.CommonEntityData {
    connectedStatus.EntityData.YFilter = connectedStatus.YFilter
    connectedStatus.EntityData.YangName = "connected-status"
    connectedStatus.EntityData.BundleName = "cisco_ios_xr"
    connectedStatus.EntityData.ParentYangName = "ipv4frr-backup"
    connectedStatus.EntityData.SegmentPath = "connected-status"
    connectedStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedStatus.EntityData.Children = make(map[string]types.YChild)
    connectedStatus.EntityData.Children["connected-details"] = types.YChild{"ConnectedDetails", &connectedStatus.ConnectedDetails}
    connectedStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    connectedStatus.EntityData.Leafs["is-valid"] = types.YLeaf{"IsValid", connectedStatus.IsValid}
    return &(connectedStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails
// Details of the directly connected prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interfaces. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails_Interface_.
    Interface_ []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails_Interface
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails) GetEntityData() *types.CommonEntityData {
    connectedDetails.EntityData.YFilter = connectedDetails.YFilter
    connectedDetails.EntityData.YangName = "connected-details"
    connectedDetails.EntityData.BundleName = "cisco_ios_xr"
    connectedDetails.EntityData.ParentYangName = "connected-status"
    connectedDetails.EntityData.SegmentPath = "connected-details"
    connectedDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedDetails.EntityData.Children = make(map[string]types.YChild)
    connectedDetails.EntityData.Children["interface"] = types.YChild{"Interface_", nil}
    for i := range connectedDetails.Interface_ {
        connectedDetails.EntityData.Children[types.GetSegmentPath(&connectedDetails.Interface_[i])] = types.YChild{"Interface_", &connectedDetails.Interface_[i]}
    }
    connectedDetails.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(connectedDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails_Interface
// Interfaces
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    Entry interface{}
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_ConnectedStatus_ConnectedDetails_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "connected-details"
    self.EntityData.SegmentPath = "interface"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["entry"] = types.YLeaf{"Entry", self.Entry}
    return &(self.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus
// Status of other protocols' routes redistributed
// into IS-IS
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Per level details of the redistributed route.
    RedistributionDetails Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus) GetEntityData() *types.CommonEntityData {
    redistributedStatus.EntityData.YFilter = redistributedStatus.YFilter
    redistributedStatus.EntityData.YangName = "redistributed-status"
    redistributedStatus.EntityData.BundleName = "cisco_ios_xr"
    redistributedStatus.EntityData.ParentYangName = "ipv4frr-backup"
    redistributedStatus.EntityData.SegmentPath = "redistributed-status"
    redistributedStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributedStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributedStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributedStatus.EntityData.Children = make(map[string]types.YChild)
    redistributedStatus.EntityData.Children["redistribution-details"] = types.YChild{"RedistributionDetails", &redistributedStatus.RedistributionDetails}
    redistributedStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    redistributedStatus.EntityData.Leafs["is-valid"] = types.YLeaf{"IsValid", redistributedStatus.IsValid}
    return &(redistributedStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails
// Per level details of the redistributed route
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // isis sh route redist detail. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail.
    IsisShRouteRedistDetail []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails) GetEntityData() *types.CommonEntityData {
    redistributionDetails.EntityData.YFilter = redistributionDetails.YFilter
    redistributionDetails.EntityData.YangName = "redistribution-details"
    redistributionDetails.EntityData.BundleName = "cisco_ios_xr"
    redistributionDetails.EntityData.ParentYangName = "redistributed-status"
    redistributionDetails.EntityData.SegmentPath = "redistribution-details"
    redistributionDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributionDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributionDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributionDetails.EntityData.Children = make(map[string]types.YChild)
    redistributionDetails.EntityData.Children["isis-sh-route-redist-detail"] = types.YChild{"IsisShRouteRedistDetail", nil}
    for i := range redistributionDetails.IsisShRouteRedistDetail {
        redistributionDetails.EntityData.Children[types.GetSegmentPath(&redistributionDetails.IsisShRouteRedistDetail[i])] = types.YChild{"IsisShRouteRedistDetail", &redistributionDetails.IsisShRouteRedistDetail[i]}
    }
    redistributionDetails.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(redistributionDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
// isis sh route redist detail
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Level into which the route is redistributed. The type is IsisLevel.
    Level interface{}

    // Protocol redistributing the route.
    Owner Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetEntityData() *types.CommonEntityData {
    isisShRouteRedistDetail.EntityData.YFilter = isisShRouteRedistDetail.YFilter
    isisShRouteRedistDetail.EntityData.YangName = "isis-sh-route-redist-detail"
    isisShRouteRedistDetail.EntityData.BundleName = "cisco_ios_xr"
    isisShRouteRedistDetail.EntityData.ParentYangName = "redistribution-details"
    isisShRouteRedistDetail.EntityData.SegmentPath = "isis-sh-route-redist-detail"
    isisShRouteRedistDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isisShRouteRedistDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isisShRouteRedistDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isisShRouteRedistDetail.EntityData.Children = make(map[string]types.YChild)
    isisShRouteRedistDetail.EntityData.Children["owner"] = types.YChild{"Owner", &isisShRouteRedistDetail.Owner}
    isisShRouteRedistDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    isisShRouteRedistDetail.EntityData.Leafs["level"] = types.YLeaf{"Level", isisShRouteRedistDetail.Level}
    return &(isisShRouteRedistDetail.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
// Protocol redistributing the route
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol. The type is IsisRedistProto.
    Protocol interface{}

    // IS-IS instance identifier. The type is string.
    IsisInstanceId interface{}

    // OSPF process identifier. The type is string.
    OspfProcessId interface{}

    // OSPFv3 process identifier. The type is string.
    Ospfv3ProcessId interface{}

    // BGP Autonomous System number. The type is string.
    BgpAsNumber interface{}

    // EIGRP Autonomous System number. The type is string.
    EigrpAsNumber interface{}

    // Application Name. The type is string.
    ApplicationName interface{}
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetEntityData() *types.CommonEntityData {
    owner.EntityData.YFilter = owner.YFilter
    owner.EntityData.YangName = "owner"
    owner.EntityData.BundleName = "cisco_ios_xr"
    owner.EntityData.ParentYangName = "isis-sh-route-redist-detail"
    owner.EntityData.SegmentPath = "owner"
    owner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    owner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    owner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    owner.EntityData.Children = make(map[string]types.YChild)
    owner.EntityData.Leafs = make(map[string]types.YLeaf)
    owner.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", owner.Protocol}
    owner.EntityData.Leafs["isis-instance-id"] = types.YLeaf{"IsisInstanceId", owner.IsisInstanceId}
    owner.EntityData.Leafs["ospf-process-id"] = types.YLeaf{"OspfProcessId", owner.OspfProcessId}
    owner.EntityData.Leafs["ospfv3-process-id"] = types.YLeaf{"Ospfv3ProcessId", owner.Ospfv3ProcessId}
    owner.EntityData.Leafs["bgp-as-number"] = types.YLeaf{"BgpAsNumber", owner.BgpAsNumber}
    owner.EntityData.Leafs["eigrp-as-number"] = types.YLeaf{"EigrpAsNumber", owner.EigrpAsNumber}
    owner.EntityData.Leafs["application-name"] = types.YLeaf{"ApplicationName", owner.ApplicationName}
    return &(owner.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus
// Status of native IS-IS routes to the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the native route.
    NativeDetails Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus) GetEntityData() *types.CommonEntityData {
    nativeStatus.EntityData.YFilter = nativeStatus.YFilter
    nativeStatus.EntityData.YangName = "native-status"
    nativeStatus.EntityData.BundleName = "cisco_ios_xr"
    nativeStatus.EntityData.ParentYangName = "ipv4frr-backup"
    nativeStatus.EntityData.SegmentPath = "native-status"
    nativeStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nativeStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nativeStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nativeStatus.EntityData.Children = make(map[string]types.YChild)
    nativeStatus.EntityData.Children["native-details"] = types.YChild{"NativeDetails", &nativeStatus.NativeDetails}
    nativeStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    nativeStatus.EntityData.Leafs["is-valid"] = types.YLeaf{"IsValid", nativeStatus.IsValid}
    return &(nativeStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails
// Details of the native route
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Relative importance of the prefix. The type is IsisPrefixPriority.
    Priority interface{}

    // Primary paths to prefix.
    Primary Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary

    // Backup paths to prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup.
    Backup []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails) GetEntityData() *types.CommonEntityData {
    nativeDetails.EntityData.YFilter = nativeDetails.YFilter
    nativeDetails.EntityData.YangName = "native-details"
    nativeDetails.EntityData.BundleName = "cisco_ios_xr"
    nativeDetails.EntityData.ParentYangName = "native-status"
    nativeDetails.EntityData.SegmentPath = "native-details"
    nativeDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nativeDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nativeDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nativeDetails.EntityData.Children = make(map[string]types.YChild)
    nativeDetails.EntityData.Children["primary"] = types.YChild{"Primary", &nativeDetails.Primary}
    nativeDetails.EntityData.Children["backup"] = types.YChild{"Backup", nil}
    for i := range nativeDetails.Backup {
        nativeDetails.EntityData.Children[types.GetSegmentPath(&nativeDetails.Backup[i])] = types.YChild{"Backup", &nativeDetails.Backup[i]}
    }
    nativeDetails.EntityData.Leafs = make(map[string]types.YLeaf)
    nativeDetails.EntityData.Leafs["priority"] = types.YLeaf{"Priority", nativeDetails.Priority}
    return &(nativeDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary
// Primary paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths.
    Paths []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop.
    UcmpNextHop []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath.
    MulticastPath []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath.
    SrtePath []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath.
    ExplicitPath []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source.
    Source []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource.
    MulticastSource []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary) GetEntityData() *types.CommonEntityData {
    primary.EntityData.YFilter = primary.YFilter
    primary.EntityData.YangName = "primary"
    primary.EntityData.BundleName = "cisco_ios_xr"
    primary.EntityData.ParentYangName = "native-details"
    primary.EntityData.SegmentPath = "primary"
    primary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    primary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    primary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    primary.EntityData.Children = make(map[string]types.YChild)
    primary.EntityData.Children["paths"] = types.YChild{"Paths", nil}
    for i := range primary.Paths {
        primary.EntityData.Children[types.GetSegmentPath(&primary.Paths[i])] = types.YChild{"Paths", &primary.Paths[i]}
    }
    primary.EntityData.Children["ucmp-next-hop"] = types.YChild{"UcmpNextHop", nil}
    for i := range primary.UcmpNextHop {
        primary.EntityData.Children[types.GetSegmentPath(&primary.UcmpNextHop[i])] = types.YChild{"UcmpNextHop", &primary.UcmpNextHop[i]}
    }
    primary.EntityData.Children["multicast-path"] = types.YChild{"MulticastPath", nil}
    for i := range primary.MulticastPath {
        primary.EntityData.Children[types.GetSegmentPath(&primary.MulticastPath[i])] = types.YChild{"MulticastPath", &primary.MulticastPath[i]}
    }
    primary.EntityData.Children["srte-path"] = types.YChild{"SrtePath", nil}
    for i := range primary.SrtePath {
        primary.EntityData.Children[types.GetSegmentPath(&primary.SrtePath[i])] = types.YChild{"SrtePath", &primary.SrtePath[i]}
    }
    primary.EntityData.Children["explicit-path"] = types.YChild{"ExplicitPath", nil}
    for i := range primary.ExplicitPath {
        primary.EntityData.Children[types.GetSegmentPath(&primary.ExplicitPath[i])] = types.YChild{"ExplicitPath", &primary.ExplicitPath[i]}
    }
    primary.EntityData.Children["source"] = types.YChild{"Source", nil}
    for i := range primary.Source {
        primary.EntityData.Children[types.GetSegmentPath(&primary.Source[i])] = types.YChild{"Source", &primary.Source[i]}
    }
    primary.EntityData.Children["multicast-source"] = types.YChild{"MulticastSource", nil}
    for i := range primary.MulticastSource {
        primary.EntityData.Children[types.GetSegmentPath(&primary.MulticastSource[i])] = types.YChild{"MulticastSource", &primary.MulticastSource[i]}
    }
    primary.EntityData.Leafs = make(map[string]types.YLeaf)
    primary.EntityData.Leafs["origin"] = types.YLeaf{"Origin", primary.Origin}
    primary.EntityData.Leafs["metric"] = types.YLeaf{"Metric", primary.Metric}
    primary.EntityData.Leafs["multicast-metric"] = types.YLeaf{"MulticastMetric", primary.MulticastMetric}
    primary.EntityData.Leafs["is-external-metric"] = types.YLeaf{"IsExternalMetric", primary.IsExternalMetric}
    primary.EntityData.Leafs["administrative-distance"] = types.YLeaf{"AdministrativeDistance", primary.AdministrativeDistance}
    return &(primary.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "primary"
    paths.EntityData.SegmentPath = "paths"
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = make(map[string]types.YChild)
    paths.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &paths.FrrBackup}
    paths.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range paths.UloopExplicit {
        paths.EntityData.Children[types.GetSegmentPath(&paths.UloopExplicit[i])] = types.YChild{"UloopExplicit", &paths.UloopExplicit[i]}
    }
    paths.EntityData.Leafs = make(map[string]types.YLeaf)
    paths.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", paths.NeighborId}
    paths.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", paths.EgressInterface}
    paths.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", paths.NeighborAddress}
    paths.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", paths.NeighborSnpa}
    paths.EntityData.Leafs["tag"] = types.YLeaf{"Tag", paths.Tag}
    paths.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", paths.TunnelInterface}
    paths.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", paths.SegmentRoutingSidValue}
    paths.EntityData.Leafs["weight"] = types.YLeaf{"Weight", paths.Weight}
    paths.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", paths.IsTeTunnelInterface}
    paths.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", paths.IsSrExcludeTunnelInterface}
    return &(paths.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "paths"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "paths"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetEntityData() *types.CommonEntityData {
    ucmpNextHop.EntityData.YFilter = ucmpNextHop.YFilter
    ucmpNextHop.EntityData.YangName = "ucmp-next-hop"
    ucmpNextHop.EntityData.BundleName = "cisco_ios_xr"
    ucmpNextHop.EntityData.ParentYangName = "primary"
    ucmpNextHop.EntityData.SegmentPath = "ucmp-next-hop"
    ucmpNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ucmpNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ucmpNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ucmpNextHop.EntityData.Children = make(map[string]types.YChild)
    ucmpNextHop.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &ucmpNextHop.FrrBackup}
    ucmpNextHop.EntityData.Leafs = make(map[string]types.YLeaf)
    ucmpNextHop.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", ucmpNextHop.NeighborId}
    ucmpNextHop.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", ucmpNextHop.EgressInterface}
    ucmpNextHop.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", ucmpNextHop.NeighborAddress}
    ucmpNextHop.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", ucmpNextHop.NeighborSnpa}
    ucmpNextHop.EntityData.Leafs["tag"] = types.YLeaf{"Tag", ucmpNextHop.Tag}
    ucmpNextHop.EntityData.Leafs["total-ucmp-distance"] = types.YLeaf{"TotalUcmpDistance", ucmpNextHop.TotalUcmpDistance}
    ucmpNextHop.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", ucmpNextHop.SegmentRoutingSidValue}
    ucmpNextHop.EntityData.Leafs["weight"] = types.YLeaf{"Weight", ucmpNextHop.Weight}
    ucmpNextHop.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", ucmpNextHop.IsTeTunnelInterface}
    ucmpNextHop.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", ucmpNextHop.IsSrExcludeTunnelInterface}
    return &(ucmpNextHop.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "ucmp-next-hop"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetEntityData() *types.CommonEntityData {
    multicastPath.EntityData.YFilter = multicastPath.YFilter
    multicastPath.EntityData.YangName = "multicast-path"
    multicastPath.EntityData.BundleName = "cisco_ios_xr"
    multicastPath.EntityData.ParentYangName = "primary"
    multicastPath.EntityData.SegmentPath = "multicast-path"
    multicastPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastPath.EntityData.Children = make(map[string]types.YChild)
    multicastPath.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &multicastPath.FrrBackup}
    multicastPath.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range multicastPath.UloopExplicit {
        multicastPath.EntityData.Children[types.GetSegmentPath(&multicastPath.UloopExplicit[i])] = types.YChild{"UloopExplicit", &multicastPath.UloopExplicit[i]}
    }
    multicastPath.EntityData.Leafs = make(map[string]types.YLeaf)
    multicastPath.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", multicastPath.NeighborId}
    multicastPath.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", multicastPath.EgressInterface}
    multicastPath.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", multicastPath.NeighborAddress}
    multicastPath.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", multicastPath.NeighborSnpa}
    multicastPath.EntityData.Leafs["tag"] = types.YLeaf{"Tag", multicastPath.Tag}
    multicastPath.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", multicastPath.TunnelInterface}
    multicastPath.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", multicastPath.SegmentRoutingSidValue}
    multicastPath.EntityData.Leafs["weight"] = types.YLeaf{"Weight", multicastPath.Weight}
    multicastPath.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", multicastPath.IsTeTunnelInterface}
    multicastPath.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", multicastPath.IsSrExcludeTunnelInterface}
    return &(multicastPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "multicast-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "multicast-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetEntityData() *types.CommonEntityData {
    srtePath.EntityData.YFilter = srtePath.YFilter
    srtePath.EntityData.YangName = "srte-path"
    srtePath.EntityData.BundleName = "cisco_ios_xr"
    srtePath.EntityData.ParentYangName = "primary"
    srtePath.EntityData.SegmentPath = "srte-path"
    srtePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srtePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srtePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srtePath.EntityData.Children = make(map[string]types.YChild)
    srtePath.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &srtePath.FrrBackup}
    srtePath.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range srtePath.UloopExplicit {
        srtePath.EntityData.Children[types.GetSegmentPath(&srtePath.UloopExplicit[i])] = types.YChild{"UloopExplicit", &srtePath.UloopExplicit[i]}
    }
    srtePath.EntityData.Leafs = make(map[string]types.YLeaf)
    srtePath.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", srtePath.NeighborId}
    srtePath.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", srtePath.EgressInterface}
    srtePath.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", srtePath.NeighborAddress}
    srtePath.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", srtePath.NeighborSnpa}
    srtePath.EntityData.Leafs["tag"] = types.YLeaf{"Tag", srtePath.Tag}
    srtePath.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", srtePath.TunnelInterface}
    srtePath.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", srtePath.SegmentRoutingSidValue}
    srtePath.EntityData.Leafs["weight"] = types.YLeaf{"Weight", srtePath.Weight}
    srtePath.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", srtePath.IsTeTunnelInterface}
    srtePath.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", srtePath.IsSrExcludeTunnelInterface}
    return &(srtePath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "srte-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "srte-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetEntityData() *types.CommonEntityData {
    explicitPath.EntityData.YFilter = explicitPath.YFilter
    explicitPath.EntityData.YangName = "explicit-path"
    explicitPath.EntityData.BundleName = "cisco_ios_xr"
    explicitPath.EntityData.ParentYangName = "primary"
    explicitPath.EntityData.SegmentPath = "explicit-path"
    explicitPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitPath.EntityData.Children = make(map[string]types.YChild)
    explicitPath.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &explicitPath.FrrBackup}
    explicitPath.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range explicitPath.UloopExplicit {
        explicitPath.EntityData.Children[types.GetSegmentPath(&explicitPath.UloopExplicit[i])] = types.YChild{"UloopExplicit", &explicitPath.UloopExplicit[i]}
    }
    explicitPath.EntityData.Leafs = make(map[string]types.YLeaf)
    explicitPath.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", explicitPath.NeighborId}
    explicitPath.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", explicitPath.EgressInterface}
    explicitPath.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", explicitPath.NeighborAddress}
    explicitPath.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", explicitPath.NeighborSnpa}
    explicitPath.EntityData.Leafs["tag"] = types.YLeaf{"Tag", explicitPath.Tag}
    explicitPath.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", explicitPath.TunnelInterface}
    explicitPath.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", explicitPath.SegmentRoutingSidValue}
    explicitPath.EntityData.Leafs["weight"] = types.YLeaf{"Weight", explicitPath.Weight}
    explicitPath.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", explicitPath.IsTeTunnelInterface}
    explicitPath.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", explicitPath.IsSrExcludeTunnelInterface}
    return &(explicitPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "explicit-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "explicit-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}\\-[a-fA-F0-9]{2}'.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "primary"
    source.EntityData.SegmentPath = "source"
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = make(map[string]types.YChild)
    source.EntityData.Children["tags"] = types.YChild{"Tags", nil}
    for i := range source.Tags {
        source.EntityData.Children[types.GetSegmentPath(&source.Tags[i])] = types.YChild{"Tags", &source.Tags[i]}
    }
    source.EntityData.Children["nodal-sid"] = types.YChild{"NodalSid", nil}
    for i := range source.NodalSid {
        source.EntityData.Children[types.GetSegmentPath(&source.NodalSid[i])] = types.YChild{"NodalSid", &source.NodalSid[i]}
    }
    source.EntityData.Leafs = make(map[string]types.YLeaf)
    source.EntityData.Leafs["source-lsp-id"] = types.YLeaf{"SourceLspId", source.SourceLspId}
    source.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", source.SourceAddress}
    return &(source.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "source"
    tags.EntityData.SegmentPath = "tags"
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = make(map[string]types.YChild)
    tags.EntityData.Leafs = make(map[string]types.YLeaf)
    tags.EntityData.Leafs["entry"] = types.YLeaf{"Entry", tags.Entry}
    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "source"
    nodalSid.EntityData.SegmentPath = "nodal-sid"
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = make(map[string]types.YChild)
    nodalSid.EntityData.Leafs = make(map[string]types.YLeaf)
    nodalSid.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", nodalSid.SidValue}
    nodalSid.EntityData.Leafs["rflag"] = types.YLeaf{"Rflag", nodalSid.Rflag}
    nodalSid.EntityData.Leafs["nflag"] = types.YLeaf{"Nflag", nodalSid.Nflag}
    nodalSid.EntityData.Leafs["pflag"] = types.YLeaf{"Pflag", nodalSid.Pflag}
    nodalSid.EntityData.Leafs["eflag"] = types.YLeaf{"Eflag", nodalSid.Eflag}
    nodalSid.EntityData.Leafs["vflag"] = types.YLeaf{"Vflag", nodalSid.Vflag}
    nodalSid.EntityData.Leafs["lflag"] = types.YLeaf{"Lflag", nodalSid.Lflag}
    nodalSid.EntityData.Leafs["algorithm"] = types.YLeaf{"Algorithm", nodalSid.Algorithm}
    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}\\-[a-fA-F0-9]{2}'.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetEntityData() *types.CommonEntityData {
    multicastSource.EntityData.YFilter = multicastSource.YFilter
    multicastSource.EntityData.YangName = "multicast-source"
    multicastSource.EntityData.BundleName = "cisco_ios_xr"
    multicastSource.EntityData.ParentYangName = "primary"
    multicastSource.EntityData.SegmentPath = "multicast-source"
    multicastSource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastSource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastSource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastSource.EntityData.Children = make(map[string]types.YChild)
    multicastSource.EntityData.Children["tags"] = types.YChild{"Tags", nil}
    for i := range multicastSource.Tags {
        multicastSource.EntityData.Children[types.GetSegmentPath(&multicastSource.Tags[i])] = types.YChild{"Tags", &multicastSource.Tags[i]}
    }
    multicastSource.EntityData.Children["nodal-sid"] = types.YChild{"NodalSid", nil}
    for i := range multicastSource.NodalSid {
        multicastSource.EntityData.Children[types.GetSegmentPath(&multicastSource.NodalSid[i])] = types.YChild{"NodalSid", &multicastSource.NodalSid[i]}
    }
    multicastSource.EntityData.Leafs = make(map[string]types.YLeaf)
    multicastSource.EntityData.Leafs["source-lsp-id"] = types.YLeaf{"SourceLspId", multicastSource.SourceLspId}
    multicastSource.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", multicastSource.SourceAddress}
    return &(multicastSource.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "multicast-source"
    tags.EntityData.SegmentPath = "tags"
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = make(map[string]types.YChild)
    tags.EntityData.Leafs = make(map[string]types.YLeaf)
    tags.EntityData.Leafs["entry"] = types.YLeaf{"Entry", tags.Entry}
    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "multicast-source"
    nodalSid.EntityData.SegmentPath = "nodal-sid"
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = make(map[string]types.YChild)
    nodalSid.EntityData.Leafs = make(map[string]types.YLeaf)
    nodalSid.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", nodalSid.SidValue}
    nodalSid.EntityData.Leafs["rflag"] = types.YLeaf{"Rflag", nodalSid.Rflag}
    nodalSid.EntityData.Leafs["nflag"] = types.YLeaf{"Nflag", nodalSid.Nflag}
    nodalSid.EntityData.Leafs["pflag"] = types.YLeaf{"Pflag", nodalSid.Pflag}
    nodalSid.EntityData.Leafs["eflag"] = types.YLeaf{"Eflag", nodalSid.Eflag}
    nodalSid.EntityData.Leafs["vflag"] = types.YLeaf{"Vflag", nodalSid.Vflag}
    nodalSid.EntityData.Leafs["lflag"] = types.YLeaf{"Lflag", nodalSid.Lflag}
    nodalSid.EntityData.Leafs["algorithm"] = types.YLeaf{"Algorithm", nodalSid.Algorithm}
    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup
// Backup paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths.
    Paths []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop.
    UcmpNextHop []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath.
    MulticastPath []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath.
    SrtePath []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath.
    ExplicitPath []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source.
    Source []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource.
    MulticastSource []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup) GetEntityData() *types.CommonEntityData {
    backup.EntityData.YFilter = backup.YFilter
    backup.EntityData.YangName = "backup"
    backup.EntityData.BundleName = "cisco_ios_xr"
    backup.EntityData.ParentYangName = "native-details"
    backup.EntityData.SegmentPath = "backup"
    backup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backup.EntityData.Children = make(map[string]types.YChild)
    backup.EntityData.Children["paths"] = types.YChild{"Paths", nil}
    for i := range backup.Paths {
        backup.EntityData.Children[types.GetSegmentPath(&backup.Paths[i])] = types.YChild{"Paths", &backup.Paths[i]}
    }
    backup.EntityData.Children["ucmp-next-hop"] = types.YChild{"UcmpNextHop", nil}
    for i := range backup.UcmpNextHop {
        backup.EntityData.Children[types.GetSegmentPath(&backup.UcmpNextHop[i])] = types.YChild{"UcmpNextHop", &backup.UcmpNextHop[i]}
    }
    backup.EntityData.Children["multicast-path"] = types.YChild{"MulticastPath", nil}
    for i := range backup.MulticastPath {
        backup.EntityData.Children[types.GetSegmentPath(&backup.MulticastPath[i])] = types.YChild{"MulticastPath", &backup.MulticastPath[i]}
    }
    backup.EntityData.Children["srte-path"] = types.YChild{"SrtePath", nil}
    for i := range backup.SrtePath {
        backup.EntityData.Children[types.GetSegmentPath(&backup.SrtePath[i])] = types.YChild{"SrtePath", &backup.SrtePath[i]}
    }
    backup.EntityData.Children["explicit-path"] = types.YChild{"ExplicitPath", nil}
    for i := range backup.ExplicitPath {
        backup.EntityData.Children[types.GetSegmentPath(&backup.ExplicitPath[i])] = types.YChild{"ExplicitPath", &backup.ExplicitPath[i]}
    }
    backup.EntityData.Children["source"] = types.YChild{"Source", nil}
    for i := range backup.Source {
        backup.EntityData.Children[types.GetSegmentPath(&backup.Source[i])] = types.YChild{"Source", &backup.Source[i]}
    }
    backup.EntityData.Children["multicast-source"] = types.YChild{"MulticastSource", nil}
    for i := range backup.MulticastSource {
        backup.EntityData.Children[types.GetSegmentPath(&backup.MulticastSource[i])] = types.YChild{"MulticastSource", &backup.MulticastSource[i]}
    }
    backup.EntityData.Leafs = make(map[string]types.YLeaf)
    backup.EntityData.Leafs["origin"] = types.YLeaf{"Origin", backup.Origin}
    backup.EntityData.Leafs["metric"] = types.YLeaf{"Metric", backup.Metric}
    backup.EntityData.Leafs["multicast-metric"] = types.YLeaf{"MulticastMetric", backup.MulticastMetric}
    backup.EntityData.Leafs["is-external-metric"] = types.YLeaf{"IsExternalMetric", backup.IsExternalMetric}
    backup.EntityData.Leafs["administrative-distance"] = types.YLeaf{"AdministrativeDistance", backup.AdministrativeDistance}
    return &(backup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "backup"
    paths.EntityData.SegmentPath = "paths"
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = make(map[string]types.YChild)
    paths.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &paths.FrrBackup}
    paths.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range paths.UloopExplicit {
        paths.EntityData.Children[types.GetSegmentPath(&paths.UloopExplicit[i])] = types.YChild{"UloopExplicit", &paths.UloopExplicit[i]}
    }
    paths.EntityData.Leafs = make(map[string]types.YLeaf)
    paths.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", paths.NeighborId}
    paths.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", paths.EgressInterface}
    paths.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", paths.NeighborAddress}
    paths.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", paths.NeighborSnpa}
    paths.EntityData.Leafs["tag"] = types.YLeaf{"Tag", paths.Tag}
    paths.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", paths.TunnelInterface}
    paths.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", paths.SegmentRoutingSidValue}
    paths.EntityData.Leafs["weight"] = types.YLeaf{"Weight", paths.Weight}
    paths.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", paths.IsTeTunnelInterface}
    paths.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", paths.IsSrExcludeTunnelInterface}
    return &(paths.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "paths"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "paths"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetEntityData() *types.CommonEntityData {
    ucmpNextHop.EntityData.YFilter = ucmpNextHop.YFilter
    ucmpNextHop.EntityData.YangName = "ucmp-next-hop"
    ucmpNextHop.EntityData.BundleName = "cisco_ios_xr"
    ucmpNextHop.EntityData.ParentYangName = "backup"
    ucmpNextHop.EntityData.SegmentPath = "ucmp-next-hop"
    ucmpNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ucmpNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ucmpNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ucmpNextHop.EntityData.Children = make(map[string]types.YChild)
    ucmpNextHop.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &ucmpNextHop.FrrBackup}
    ucmpNextHop.EntityData.Leafs = make(map[string]types.YLeaf)
    ucmpNextHop.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", ucmpNextHop.NeighborId}
    ucmpNextHop.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", ucmpNextHop.EgressInterface}
    ucmpNextHop.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", ucmpNextHop.NeighborAddress}
    ucmpNextHop.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", ucmpNextHop.NeighborSnpa}
    ucmpNextHop.EntityData.Leafs["tag"] = types.YLeaf{"Tag", ucmpNextHop.Tag}
    ucmpNextHop.EntityData.Leafs["total-ucmp-distance"] = types.YLeaf{"TotalUcmpDistance", ucmpNextHop.TotalUcmpDistance}
    ucmpNextHop.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", ucmpNextHop.SegmentRoutingSidValue}
    ucmpNextHop.EntityData.Leafs["weight"] = types.YLeaf{"Weight", ucmpNextHop.Weight}
    ucmpNextHop.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", ucmpNextHop.IsTeTunnelInterface}
    ucmpNextHop.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", ucmpNextHop.IsSrExcludeTunnelInterface}
    return &(ucmpNextHop.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "ucmp-next-hop"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetEntityData() *types.CommonEntityData {
    multicastPath.EntityData.YFilter = multicastPath.YFilter
    multicastPath.EntityData.YangName = "multicast-path"
    multicastPath.EntityData.BundleName = "cisco_ios_xr"
    multicastPath.EntityData.ParentYangName = "backup"
    multicastPath.EntityData.SegmentPath = "multicast-path"
    multicastPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastPath.EntityData.Children = make(map[string]types.YChild)
    multicastPath.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &multicastPath.FrrBackup}
    multicastPath.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range multicastPath.UloopExplicit {
        multicastPath.EntityData.Children[types.GetSegmentPath(&multicastPath.UloopExplicit[i])] = types.YChild{"UloopExplicit", &multicastPath.UloopExplicit[i]}
    }
    multicastPath.EntityData.Leafs = make(map[string]types.YLeaf)
    multicastPath.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", multicastPath.NeighborId}
    multicastPath.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", multicastPath.EgressInterface}
    multicastPath.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", multicastPath.NeighborAddress}
    multicastPath.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", multicastPath.NeighborSnpa}
    multicastPath.EntityData.Leafs["tag"] = types.YLeaf{"Tag", multicastPath.Tag}
    multicastPath.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", multicastPath.TunnelInterface}
    multicastPath.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", multicastPath.SegmentRoutingSidValue}
    multicastPath.EntityData.Leafs["weight"] = types.YLeaf{"Weight", multicastPath.Weight}
    multicastPath.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", multicastPath.IsTeTunnelInterface}
    multicastPath.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", multicastPath.IsSrExcludeTunnelInterface}
    return &(multicastPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "multicast-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "multicast-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetEntityData() *types.CommonEntityData {
    srtePath.EntityData.YFilter = srtePath.YFilter
    srtePath.EntityData.YangName = "srte-path"
    srtePath.EntityData.BundleName = "cisco_ios_xr"
    srtePath.EntityData.ParentYangName = "backup"
    srtePath.EntityData.SegmentPath = "srte-path"
    srtePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srtePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srtePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srtePath.EntityData.Children = make(map[string]types.YChild)
    srtePath.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &srtePath.FrrBackup}
    srtePath.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range srtePath.UloopExplicit {
        srtePath.EntityData.Children[types.GetSegmentPath(&srtePath.UloopExplicit[i])] = types.YChild{"UloopExplicit", &srtePath.UloopExplicit[i]}
    }
    srtePath.EntityData.Leafs = make(map[string]types.YLeaf)
    srtePath.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", srtePath.NeighborId}
    srtePath.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", srtePath.EgressInterface}
    srtePath.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", srtePath.NeighborAddress}
    srtePath.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", srtePath.NeighborSnpa}
    srtePath.EntityData.Leafs["tag"] = types.YLeaf{"Tag", srtePath.Tag}
    srtePath.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", srtePath.TunnelInterface}
    srtePath.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", srtePath.SegmentRoutingSidValue}
    srtePath.EntityData.Leafs["weight"] = types.YLeaf{"Weight", srtePath.Weight}
    srtePath.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", srtePath.IsTeTunnelInterface}
    srtePath.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", srtePath.IsSrExcludeTunnelInterface}
    return &(srtePath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "srte-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "srte-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetEntityData() *types.CommonEntityData {
    explicitPath.EntityData.YFilter = explicitPath.YFilter
    explicitPath.EntityData.YangName = "explicit-path"
    explicitPath.EntityData.BundleName = "cisco_ios_xr"
    explicitPath.EntityData.ParentYangName = "backup"
    explicitPath.EntityData.SegmentPath = "explicit-path"
    explicitPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitPath.EntityData.Children = make(map[string]types.YChild)
    explicitPath.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &explicitPath.FrrBackup}
    explicitPath.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range explicitPath.UloopExplicit {
        explicitPath.EntityData.Children[types.GetSegmentPath(&explicitPath.UloopExplicit[i])] = types.YChild{"UloopExplicit", &explicitPath.UloopExplicit[i]}
    }
    explicitPath.EntityData.Leafs = make(map[string]types.YLeaf)
    explicitPath.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", explicitPath.NeighborId}
    explicitPath.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", explicitPath.EgressInterface}
    explicitPath.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", explicitPath.NeighborAddress}
    explicitPath.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", explicitPath.NeighborSnpa}
    explicitPath.EntityData.Leafs["tag"] = types.YLeaf{"Tag", explicitPath.Tag}
    explicitPath.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", explicitPath.TunnelInterface}
    explicitPath.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", explicitPath.SegmentRoutingSidValue}
    explicitPath.EntityData.Leafs["weight"] = types.YLeaf{"Weight", explicitPath.Weight}
    explicitPath.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", explicitPath.IsTeTunnelInterface}
    explicitPath.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", explicitPath.IsSrExcludeTunnelInterface}
    return &(explicitPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "explicit-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "explicit-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}\\-[a-fA-F0-9]{2}'.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "backup"
    source.EntityData.SegmentPath = "source"
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = make(map[string]types.YChild)
    source.EntityData.Children["tags"] = types.YChild{"Tags", nil}
    for i := range source.Tags {
        source.EntityData.Children[types.GetSegmentPath(&source.Tags[i])] = types.YChild{"Tags", &source.Tags[i]}
    }
    source.EntityData.Children["nodal-sid"] = types.YChild{"NodalSid", nil}
    for i := range source.NodalSid {
        source.EntityData.Children[types.GetSegmentPath(&source.NodalSid[i])] = types.YChild{"NodalSid", &source.NodalSid[i]}
    }
    source.EntityData.Leafs = make(map[string]types.YLeaf)
    source.EntityData.Leafs["source-lsp-id"] = types.YLeaf{"SourceLspId", source.SourceLspId}
    source.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", source.SourceAddress}
    return &(source.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "source"
    tags.EntityData.SegmentPath = "tags"
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = make(map[string]types.YChild)
    tags.EntityData.Leafs = make(map[string]types.YLeaf)
    tags.EntityData.Leafs["entry"] = types.YLeaf{"Entry", tags.Entry}
    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "source"
    nodalSid.EntityData.SegmentPath = "nodal-sid"
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = make(map[string]types.YChild)
    nodalSid.EntityData.Leafs = make(map[string]types.YLeaf)
    nodalSid.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", nodalSid.SidValue}
    nodalSid.EntityData.Leafs["rflag"] = types.YLeaf{"Rflag", nodalSid.Rflag}
    nodalSid.EntityData.Leafs["nflag"] = types.YLeaf{"Nflag", nodalSid.Nflag}
    nodalSid.EntityData.Leafs["pflag"] = types.YLeaf{"Pflag", nodalSid.Pflag}
    nodalSid.EntityData.Leafs["eflag"] = types.YLeaf{"Eflag", nodalSid.Eflag}
    nodalSid.EntityData.Leafs["vflag"] = types.YLeaf{"Vflag", nodalSid.Vflag}
    nodalSid.EntityData.Leafs["lflag"] = types.YLeaf{"Lflag", nodalSid.Lflag}
    nodalSid.EntityData.Leafs["algorithm"] = types.YLeaf{"Algorithm", nodalSid.Algorithm}
    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}\\-[a-fA-F0-9]{2}'.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetEntityData() *types.CommonEntityData {
    multicastSource.EntityData.YFilter = multicastSource.YFilter
    multicastSource.EntityData.YangName = "multicast-source"
    multicastSource.EntityData.BundleName = "cisco_ios_xr"
    multicastSource.EntityData.ParentYangName = "backup"
    multicastSource.EntityData.SegmentPath = "multicast-source"
    multicastSource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastSource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastSource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastSource.EntityData.Children = make(map[string]types.YChild)
    multicastSource.EntityData.Children["tags"] = types.YChild{"Tags", nil}
    for i := range multicastSource.Tags {
        multicastSource.EntityData.Children[types.GetSegmentPath(&multicastSource.Tags[i])] = types.YChild{"Tags", &multicastSource.Tags[i]}
    }
    multicastSource.EntityData.Children["nodal-sid"] = types.YChild{"NodalSid", nil}
    for i := range multicastSource.NodalSid {
        multicastSource.EntityData.Children[types.GetSegmentPath(&multicastSource.NodalSid[i])] = types.YChild{"NodalSid", &multicastSource.NodalSid[i]}
    }
    multicastSource.EntityData.Leafs = make(map[string]types.YLeaf)
    multicastSource.EntityData.Leafs["source-lsp-id"] = types.YLeaf{"SourceLspId", multicastSource.SourceLspId}
    multicastSource.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", multicastSource.SourceAddress}
    return &(multicastSource.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "multicast-source"
    tags.EntityData.SegmentPath = "tags"
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = make(map[string]types.YChild)
    tags.EntityData.Leafs = make(map[string]types.YLeaf)
    tags.EntityData.Leafs["entry"] = types.YLeaf{"Entry", tags.Entry}
    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "multicast-source"
    nodalSid.EntityData.SegmentPath = "nodal-sid"
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = make(map[string]types.YChild)
    nodalSid.EntityData.Leafs = make(map[string]types.YLeaf)
    nodalSid.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", nodalSid.SidValue}
    nodalSid.EntityData.Leafs["rflag"] = types.YLeaf{"Rflag", nodalSid.Rflag}
    nodalSid.EntityData.Leafs["nflag"] = types.YLeaf{"Nflag", nodalSid.Nflag}
    nodalSid.EntityData.Leafs["pflag"] = types.YLeaf{"Pflag", nodalSid.Pflag}
    nodalSid.EntityData.Leafs["eflag"] = types.YLeaf{"Eflag", nodalSid.Eflag}
    nodalSid.EntityData.Leafs["vflag"] = types.YLeaf{"Vflag", nodalSid.Vflag}
    nodalSid.EntityData.Leafs["lflag"] = types.YLeaf{"Lflag", nodalSid.Lflag}
    nodalSid.EntityData.Leafs["algorithm"] = types.YLeaf{"Algorithm", nodalSid.Algorithm}
    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail
// Per level details of how the local system
// advertises the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Level in which the prefix is advertised. The type is IsisLevel.
    Level interface{}

    // The origin of the advertisement. The type is IsisShRouteAdvOrigin.
    AdvertisingOrigin interface{}

    // Metric with which the prefix is advertised. The type is interface{} with
    // range: 0..4294967295.
    Metric interface{}

    // Has the prefix been propagated from another level?. The type is bool.
    IsPropagated interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Is the prefix external to the IS-IS domain?. The type is bool.
    IsExternalReachability interface{}

    // Is the up/down bit set?. The type is bool.
    IsInterarea interface{}

    // Status of summarization for the prefix.
    SummarizationStatus Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus

    // Tags associated with the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_NodalSid
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail) GetEntityData() *types.CommonEntityData {
    perLevelAdvertisingDetail.EntityData.YFilter = perLevelAdvertisingDetail.YFilter
    perLevelAdvertisingDetail.EntityData.YangName = "per-level-advertising-detail"
    perLevelAdvertisingDetail.EntityData.BundleName = "cisco_ios_xr"
    perLevelAdvertisingDetail.EntityData.ParentYangName = "ipv4frr-backup"
    perLevelAdvertisingDetail.EntityData.SegmentPath = "per-level-advertising-detail"
    perLevelAdvertisingDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perLevelAdvertisingDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perLevelAdvertisingDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perLevelAdvertisingDetail.EntityData.Children = make(map[string]types.YChild)
    perLevelAdvertisingDetail.EntityData.Children["summarization-status"] = types.YChild{"SummarizationStatus", &perLevelAdvertisingDetail.SummarizationStatus}
    perLevelAdvertisingDetail.EntityData.Children["tags"] = types.YChild{"Tags", nil}
    for i := range perLevelAdvertisingDetail.Tags {
        perLevelAdvertisingDetail.EntityData.Children[types.GetSegmentPath(&perLevelAdvertisingDetail.Tags[i])] = types.YChild{"Tags", &perLevelAdvertisingDetail.Tags[i]}
    }
    perLevelAdvertisingDetail.EntityData.Children["nodal-sid"] = types.YChild{"NodalSid", nil}
    for i := range perLevelAdvertisingDetail.NodalSid {
        perLevelAdvertisingDetail.EntityData.Children[types.GetSegmentPath(&perLevelAdvertisingDetail.NodalSid[i])] = types.YChild{"NodalSid", &perLevelAdvertisingDetail.NodalSid[i]}
    }
    perLevelAdvertisingDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    perLevelAdvertisingDetail.EntityData.Leafs["level"] = types.YLeaf{"Level", perLevelAdvertisingDetail.Level}
    perLevelAdvertisingDetail.EntityData.Leafs["advertising-origin"] = types.YLeaf{"AdvertisingOrigin", perLevelAdvertisingDetail.AdvertisingOrigin}
    perLevelAdvertisingDetail.EntityData.Leafs["metric"] = types.YLeaf{"Metric", perLevelAdvertisingDetail.Metric}
    perLevelAdvertisingDetail.EntityData.Leafs["is-propagated"] = types.YLeaf{"IsPropagated", perLevelAdvertisingDetail.IsPropagated}
    perLevelAdvertisingDetail.EntityData.Leafs["is-external-metric"] = types.YLeaf{"IsExternalMetric", perLevelAdvertisingDetail.IsExternalMetric}
    perLevelAdvertisingDetail.EntityData.Leafs["is-external-reachability"] = types.YLeaf{"IsExternalReachability", perLevelAdvertisingDetail.IsExternalReachability}
    perLevelAdvertisingDetail.EntityData.Leafs["is-interarea"] = types.YLeaf{"IsInterarea", perLevelAdvertisingDetail.IsInterarea}
    return &(perLevelAdvertisingDetail.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus
// Status of summarization for the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Summarizing Prefix.
    SummaryPrefix Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetEntityData() *types.CommonEntityData {
    summarizationStatus.EntityData.YFilter = summarizationStatus.YFilter
    summarizationStatus.EntityData.YangName = "summarization-status"
    summarizationStatus.EntityData.BundleName = "cisco_ios_xr"
    summarizationStatus.EntityData.ParentYangName = "per-level-advertising-detail"
    summarizationStatus.EntityData.SegmentPath = "summarization-status"
    summarizationStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summarizationStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summarizationStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summarizationStatus.EntityData.Children = make(map[string]types.YChild)
    summarizationStatus.EntityData.Children["summary-prefix"] = types.YChild{"SummaryPrefix", &summarizationStatus.SummaryPrefix}
    summarizationStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    summarizationStatus.EntityData.Leafs["is-valid"] = types.YLeaf{"IsValid", summarizationStatus.IsValid}
    return &(summarizationStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
// Summarizing Prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetEntityData() *types.CommonEntityData {
    summaryPrefix.EntityData.YFilter = summaryPrefix.YFilter
    summaryPrefix.EntityData.YangName = "summary-prefix"
    summaryPrefix.EntityData.BundleName = "cisco_ios_xr"
    summaryPrefix.EntityData.ParentYangName = "summarization-status"
    summaryPrefix.EntityData.SegmentPath = "summary-prefix"
    summaryPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryPrefix.EntityData.Children = make(map[string]types.YChild)
    summaryPrefix.EntityData.Leafs = make(map[string]types.YLeaf)
    summaryPrefix.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", summaryPrefix.Prefix}
    summaryPrefix.EntityData.Leafs["prefix-length"] = types.YLeaf{"PrefixLength", summaryPrefix.PrefixLength}
    return &(summaryPrefix.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_Tags
// Tags associated with the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "per-level-advertising-detail"
    tags.EntityData.SegmentPath = "tags"
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = make(map[string]types.YChild)
    tags.EntityData.Leafs = make(map[string]types.YLeaf)
    tags.EntityData.Leafs["entry"] = types.YLeaf{"Entry", tags.Entry}
    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FrrBackups_Ipv4FrrBackup_PerLevelAdvertisingDetail_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "per-level-advertising-detail"
    nodalSid.EntityData.SegmentPath = "nodal-sid"
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = make(map[string]types.YChild)
    nodalSid.EntityData.Leafs = make(map[string]types.YLeaf)
    nodalSid.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", nodalSid.SidValue}
    nodalSid.EntityData.Leafs["rflag"] = types.YLeaf{"Rflag", nodalSid.Rflag}
    nodalSid.EntityData.Leafs["nflag"] = types.YLeaf{"Nflag", nodalSid.Nflag}
    nodalSid.EntityData.Leafs["pflag"] = types.YLeaf{"Pflag", nodalSid.Pflag}
    nodalSid.EntityData.Leafs["eflag"] = types.YLeaf{"Eflag", nodalSid.Eflag}
    nodalSid.EntityData.Leafs["vflag"] = types.YLeaf{"Vflag", nodalSid.Vflag}
    nodalSid.EntityData.Leafs["lflag"] = types.YLeaf{"Lflag", nodalSid.Lflag}
    nodalSid.EntityData.Leafs["algorithm"] = types.YLeaf{"Algorithm", nodalSid.Algorithm}
    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes
// IPv4 local route table
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An IPv4 route known to IS-IS. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route.
    Ipv4Route []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route
}

func (ipv4Routes *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes) GetEntityData() *types.CommonEntityData {
    ipv4Routes.EntityData.YFilter = ipv4Routes.YFilter
    ipv4Routes.EntityData.YangName = "ipv4-routes"
    ipv4Routes.EntityData.BundleName = "cisco_ios_xr"
    ipv4Routes.EntityData.ParentYangName = "topology"
    ipv4Routes.EntityData.SegmentPath = "ipv4-routes"
    ipv4Routes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Routes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Routes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Routes.EntityData.Children = make(map[string]types.YChild)
    ipv4Routes.EntityData.Children["ipv4-route"] = types.YChild{"Ipv4Route", nil}
    for i := range ipv4Routes.Ipv4Route {
        ipv4Routes.EntityData.Children[types.GetSegmentPath(&ipv4Routes.Ipv4Route[i])] = types.YChild{"Ipv4Route", &ipv4Routes.Ipv4Route[i]}
    }
    ipv4Routes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipv4Routes.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route
// An IPv4 route known to IS-IS
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Status of IS-IS directly connected routes to the prefix.
    ConnectedStatus Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus

    // Status of other protocols' routes redistributed into IS-IS.
    RedistributedStatus Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus

    // Status of native IS-IS routes to the prefix.
    NativeStatus Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus

    // Per level details of how the local system advertises the prefix. The type
    // is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail.
    PerLevelAdvertisingDetail []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail
}

func (ipv4Route *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route) GetEntityData() *types.CommonEntityData {
    ipv4Route.EntityData.YFilter = ipv4Route.YFilter
    ipv4Route.EntityData.YangName = "ipv4-route"
    ipv4Route.EntityData.BundleName = "cisco_ios_xr"
    ipv4Route.EntityData.ParentYangName = "ipv4-routes"
    ipv4Route.EntityData.SegmentPath = "ipv4-route"
    ipv4Route.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Route.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Route.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Route.EntityData.Children = make(map[string]types.YChild)
    ipv4Route.EntityData.Children["connected-status"] = types.YChild{"ConnectedStatus", &ipv4Route.ConnectedStatus}
    ipv4Route.EntityData.Children["redistributed-status"] = types.YChild{"RedistributedStatus", &ipv4Route.RedistributedStatus}
    ipv4Route.EntityData.Children["native-status"] = types.YChild{"NativeStatus", &ipv4Route.NativeStatus}
    ipv4Route.EntityData.Children["per-level-advertising-detail"] = types.YChild{"PerLevelAdvertisingDetail", nil}
    for i := range ipv4Route.PerLevelAdvertisingDetail {
        ipv4Route.EntityData.Children[types.GetSegmentPath(&ipv4Route.PerLevelAdvertisingDetail[i])] = types.YChild{"PerLevelAdvertisingDetail", &ipv4Route.PerLevelAdvertisingDetail[i]}
    }
    ipv4Route.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv4Route.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", ipv4Route.Prefix}
    ipv4Route.EntityData.Leafs["prefix-length"] = types.YLeaf{"PrefixLength", ipv4Route.PrefixLength}
    return &(ipv4Route.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus
// Status of IS-IS directly connected routes to the
// prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the directly connected prefix.
    ConnectedDetails Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus) GetEntityData() *types.CommonEntityData {
    connectedStatus.EntityData.YFilter = connectedStatus.YFilter
    connectedStatus.EntityData.YangName = "connected-status"
    connectedStatus.EntityData.BundleName = "cisco_ios_xr"
    connectedStatus.EntityData.ParentYangName = "ipv4-route"
    connectedStatus.EntityData.SegmentPath = "connected-status"
    connectedStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedStatus.EntityData.Children = make(map[string]types.YChild)
    connectedStatus.EntityData.Children["connected-details"] = types.YChild{"ConnectedDetails", &connectedStatus.ConnectedDetails}
    connectedStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    connectedStatus.EntityData.Leafs["is-valid"] = types.YLeaf{"IsValid", connectedStatus.IsValid}
    return &(connectedStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails
// Details of the directly connected prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interfaces. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface_.
    Interface_ []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails) GetEntityData() *types.CommonEntityData {
    connectedDetails.EntityData.YFilter = connectedDetails.YFilter
    connectedDetails.EntityData.YangName = "connected-details"
    connectedDetails.EntityData.BundleName = "cisco_ios_xr"
    connectedDetails.EntityData.ParentYangName = "connected-status"
    connectedDetails.EntityData.SegmentPath = "connected-details"
    connectedDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedDetails.EntityData.Children = make(map[string]types.YChild)
    connectedDetails.EntityData.Children["interface"] = types.YChild{"Interface_", nil}
    for i := range connectedDetails.Interface_ {
        connectedDetails.EntityData.Children[types.GetSegmentPath(&connectedDetails.Interface_[i])] = types.YChild{"Interface_", &connectedDetails.Interface_[i]}
    }
    connectedDetails.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(connectedDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface
// Interfaces
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    Entry interface{}
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "connected-details"
    self.EntityData.SegmentPath = "interface"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["entry"] = types.YLeaf{"Entry", self.Entry}
    return &(self.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus
// Status of other protocols' routes redistributed
// into IS-IS
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Per level details of the redistributed route.
    RedistributionDetails Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus) GetEntityData() *types.CommonEntityData {
    redistributedStatus.EntityData.YFilter = redistributedStatus.YFilter
    redistributedStatus.EntityData.YangName = "redistributed-status"
    redistributedStatus.EntityData.BundleName = "cisco_ios_xr"
    redistributedStatus.EntityData.ParentYangName = "ipv4-route"
    redistributedStatus.EntityData.SegmentPath = "redistributed-status"
    redistributedStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributedStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributedStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributedStatus.EntityData.Children = make(map[string]types.YChild)
    redistributedStatus.EntityData.Children["redistribution-details"] = types.YChild{"RedistributionDetails", &redistributedStatus.RedistributionDetails}
    redistributedStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    redistributedStatus.EntityData.Leafs["is-valid"] = types.YLeaf{"IsValid", redistributedStatus.IsValid}
    return &(redistributedStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails
// Per level details of the redistributed route
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // isis sh route redist detail. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail.
    IsisShRouteRedistDetail []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails) GetEntityData() *types.CommonEntityData {
    redistributionDetails.EntityData.YFilter = redistributionDetails.YFilter
    redistributionDetails.EntityData.YangName = "redistribution-details"
    redistributionDetails.EntityData.BundleName = "cisco_ios_xr"
    redistributionDetails.EntityData.ParentYangName = "redistributed-status"
    redistributionDetails.EntityData.SegmentPath = "redistribution-details"
    redistributionDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributionDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributionDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributionDetails.EntityData.Children = make(map[string]types.YChild)
    redistributionDetails.EntityData.Children["isis-sh-route-redist-detail"] = types.YChild{"IsisShRouteRedistDetail", nil}
    for i := range redistributionDetails.IsisShRouteRedistDetail {
        redistributionDetails.EntityData.Children[types.GetSegmentPath(&redistributionDetails.IsisShRouteRedistDetail[i])] = types.YChild{"IsisShRouteRedistDetail", &redistributionDetails.IsisShRouteRedistDetail[i]}
    }
    redistributionDetails.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(redistributionDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
// isis sh route redist detail
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Level into which the route is redistributed. The type is IsisLevel.
    Level interface{}

    // Protocol redistributing the route.
    Owner Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetEntityData() *types.CommonEntityData {
    isisShRouteRedistDetail.EntityData.YFilter = isisShRouteRedistDetail.YFilter
    isisShRouteRedistDetail.EntityData.YangName = "isis-sh-route-redist-detail"
    isisShRouteRedistDetail.EntityData.BundleName = "cisco_ios_xr"
    isisShRouteRedistDetail.EntityData.ParentYangName = "redistribution-details"
    isisShRouteRedistDetail.EntityData.SegmentPath = "isis-sh-route-redist-detail"
    isisShRouteRedistDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isisShRouteRedistDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isisShRouteRedistDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isisShRouteRedistDetail.EntityData.Children = make(map[string]types.YChild)
    isisShRouteRedistDetail.EntityData.Children["owner"] = types.YChild{"Owner", &isisShRouteRedistDetail.Owner}
    isisShRouteRedistDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    isisShRouteRedistDetail.EntityData.Leafs["level"] = types.YLeaf{"Level", isisShRouteRedistDetail.Level}
    return &(isisShRouteRedistDetail.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
// Protocol redistributing the route
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol. The type is IsisRedistProto.
    Protocol interface{}

    // IS-IS instance identifier. The type is string.
    IsisInstanceId interface{}

    // OSPF process identifier. The type is string.
    OspfProcessId interface{}

    // OSPFv3 process identifier. The type is string.
    Ospfv3ProcessId interface{}

    // BGP Autonomous System number. The type is string.
    BgpAsNumber interface{}

    // EIGRP Autonomous System number. The type is string.
    EigrpAsNumber interface{}

    // Application Name. The type is string.
    ApplicationName interface{}
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetEntityData() *types.CommonEntityData {
    owner.EntityData.YFilter = owner.YFilter
    owner.EntityData.YangName = "owner"
    owner.EntityData.BundleName = "cisco_ios_xr"
    owner.EntityData.ParentYangName = "isis-sh-route-redist-detail"
    owner.EntityData.SegmentPath = "owner"
    owner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    owner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    owner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    owner.EntityData.Children = make(map[string]types.YChild)
    owner.EntityData.Leafs = make(map[string]types.YLeaf)
    owner.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", owner.Protocol}
    owner.EntityData.Leafs["isis-instance-id"] = types.YLeaf{"IsisInstanceId", owner.IsisInstanceId}
    owner.EntityData.Leafs["ospf-process-id"] = types.YLeaf{"OspfProcessId", owner.OspfProcessId}
    owner.EntityData.Leafs["ospfv3-process-id"] = types.YLeaf{"Ospfv3ProcessId", owner.Ospfv3ProcessId}
    owner.EntityData.Leafs["bgp-as-number"] = types.YLeaf{"BgpAsNumber", owner.BgpAsNumber}
    owner.EntityData.Leafs["eigrp-as-number"] = types.YLeaf{"EigrpAsNumber", owner.EigrpAsNumber}
    owner.EntityData.Leafs["application-name"] = types.YLeaf{"ApplicationName", owner.ApplicationName}
    return &(owner.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus
// Status of native IS-IS routes to the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the native route.
    NativeDetails Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus) GetEntityData() *types.CommonEntityData {
    nativeStatus.EntityData.YFilter = nativeStatus.YFilter
    nativeStatus.EntityData.YangName = "native-status"
    nativeStatus.EntityData.BundleName = "cisco_ios_xr"
    nativeStatus.EntityData.ParentYangName = "ipv4-route"
    nativeStatus.EntityData.SegmentPath = "native-status"
    nativeStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nativeStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nativeStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nativeStatus.EntityData.Children = make(map[string]types.YChild)
    nativeStatus.EntityData.Children["native-details"] = types.YChild{"NativeDetails", &nativeStatus.NativeDetails}
    nativeStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    nativeStatus.EntityData.Leafs["is-valid"] = types.YLeaf{"IsValid", nativeStatus.IsValid}
    return &(nativeStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails
// Details of the native route
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Relative importance of the prefix. The type is IsisPrefixPriority.
    Priority interface{}

    // Primary paths to prefix.
    Primary Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary

    // Backup paths to prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup.
    Backup []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails) GetEntityData() *types.CommonEntityData {
    nativeDetails.EntityData.YFilter = nativeDetails.YFilter
    nativeDetails.EntityData.YangName = "native-details"
    nativeDetails.EntityData.BundleName = "cisco_ios_xr"
    nativeDetails.EntityData.ParentYangName = "native-status"
    nativeDetails.EntityData.SegmentPath = "native-details"
    nativeDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nativeDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nativeDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nativeDetails.EntityData.Children = make(map[string]types.YChild)
    nativeDetails.EntityData.Children["primary"] = types.YChild{"Primary", &nativeDetails.Primary}
    nativeDetails.EntityData.Children["backup"] = types.YChild{"Backup", nil}
    for i := range nativeDetails.Backup {
        nativeDetails.EntityData.Children[types.GetSegmentPath(&nativeDetails.Backup[i])] = types.YChild{"Backup", &nativeDetails.Backup[i]}
    }
    nativeDetails.EntityData.Leafs = make(map[string]types.YLeaf)
    nativeDetails.EntityData.Leafs["priority"] = types.YLeaf{"Priority", nativeDetails.Priority}
    return &(nativeDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary
// Primary paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths.
    Paths []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop.
    UcmpNextHop []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath.
    MulticastPath []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath.
    SrtePath []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath.
    ExplicitPath []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source.
    Source []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource.
    MulticastSource []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary) GetEntityData() *types.CommonEntityData {
    primary.EntityData.YFilter = primary.YFilter
    primary.EntityData.YangName = "primary"
    primary.EntityData.BundleName = "cisco_ios_xr"
    primary.EntityData.ParentYangName = "native-details"
    primary.EntityData.SegmentPath = "primary"
    primary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    primary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    primary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    primary.EntityData.Children = make(map[string]types.YChild)
    primary.EntityData.Children["paths"] = types.YChild{"Paths", nil}
    for i := range primary.Paths {
        primary.EntityData.Children[types.GetSegmentPath(&primary.Paths[i])] = types.YChild{"Paths", &primary.Paths[i]}
    }
    primary.EntityData.Children["ucmp-next-hop"] = types.YChild{"UcmpNextHop", nil}
    for i := range primary.UcmpNextHop {
        primary.EntityData.Children[types.GetSegmentPath(&primary.UcmpNextHop[i])] = types.YChild{"UcmpNextHop", &primary.UcmpNextHop[i]}
    }
    primary.EntityData.Children["multicast-path"] = types.YChild{"MulticastPath", nil}
    for i := range primary.MulticastPath {
        primary.EntityData.Children[types.GetSegmentPath(&primary.MulticastPath[i])] = types.YChild{"MulticastPath", &primary.MulticastPath[i]}
    }
    primary.EntityData.Children["srte-path"] = types.YChild{"SrtePath", nil}
    for i := range primary.SrtePath {
        primary.EntityData.Children[types.GetSegmentPath(&primary.SrtePath[i])] = types.YChild{"SrtePath", &primary.SrtePath[i]}
    }
    primary.EntityData.Children["explicit-path"] = types.YChild{"ExplicitPath", nil}
    for i := range primary.ExplicitPath {
        primary.EntityData.Children[types.GetSegmentPath(&primary.ExplicitPath[i])] = types.YChild{"ExplicitPath", &primary.ExplicitPath[i]}
    }
    primary.EntityData.Children["source"] = types.YChild{"Source", nil}
    for i := range primary.Source {
        primary.EntityData.Children[types.GetSegmentPath(&primary.Source[i])] = types.YChild{"Source", &primary.Source[i]}
    }
    primary.EntityData.Children["multicast-source"] = types.YChild{"MulticastSource", nil}
    for i := range primary.MulticastSource {
        primary.EntityData.Children[types.GetSegmentPath(&primary.MulticastSource[i])] = types.YChild{"MulticastSource", &primary.MulticastSource[i]}
    }
    primary.EntityData.Leafs = make(map[string]types.YLeaf)
    primary.EntityData.Leafs["origin"] = types.YLeaf{"Origin", primary.Origin}
    primary.EntityData.Leafs["metric"] = types.YLeaf{"Metric", primary.Metric}
    primary.EntityData.Leafs["multicast-metric"] = types.YLeaf{"MulticastMetric", primary.MulticastMetric}
    primary.EntityData.Leafs["is-external-metric"] = types.YLeaf{"IsExternalMetric", primary.IsExternalMetric}
    primary.EntityData.Leafs["administrative-distance"] = types.YLeaf{"AdministrativeDistance", primary.AdministrativeDistance}
    return &(primary.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "primary"
    paths.EntityData.SegmentPath = "paths"
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = make(map[string]types.YChild)
    paths.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &paths.FrrBackup}
    paths.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range paths.UloopExplicit {
        paths.EntityData.Children[types.GetSegmentPath(&paths.UloopExplicit[i])] = types.YChild{"UloopExplicit", &paths.UloopExplicit[i]}
    }
    paths.EntityData.Leafs = make(map[string]types.YLeaf)
    paths.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", paths.NeighborId}
    paths.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", paths.EgressInterface}
    paths.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", paths.NeighborAddress}
    paths.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", paths.NeighborSnpa}
    paths.EntityData.Leafs["tag"] = types.YLeaf{"Tag", paths.Tag}
    paths.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", paths.TunnelInterface}
    paths.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", paths.SegmentRoutingSidValue}
    paths.EntityData.Leafs["weight"] = types.YLeaf{"Weight", paths.Weight}
    paths.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", paths.IsTeTunnelInterface}
    paths.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", paths.IsSrExcludeTunnelInterface}
    return &(paths.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "paths"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "paths"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetEntityData() *types.CommonEntityData {
    ucmpNextHop.EntityData.YFilter = ucmpNextHop.YFilter
    ucmpNextHop.EntityData.YangName = "ucmp-next-hop"
    ucmpNextHop.EntityData.BundleName = "cisco_ios_xr"
    ucmpNextHop.EntityData.ParentYangName = "primary"
    ucmpNextHop.EntityData.SegmentPath = "ucmp-next-hop"
    ucmpNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ucmpNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ucmpNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ucmpNextHop.EntityData.Children = make(map[string]types.YChild)
    ucmpNextHop.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &ucmpNextHop.FrrBackup}
    ucmpNextHop.EntityData.Leafs = make(map[string]types.YLeaf)
    ucmpNextHop.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", ucmpNextHop.NeighborId}
    ucmpNextHop.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", ucmpNextHop.EgressInterface}
    ucmpNextHop.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", ucmpNextHop.NeighborAddress}
    ucmpNextHop.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", ucmpNextHop.NeighborSnpa}
    ucmpNextHop.EntityData.Leafs["tag"] = types.YLeaf{"Tag", ucmpNextHop.Tag}
    ucmpNextHop.EntityData.Leafs["total-ucmp-distance"] = types.YLeaf{"TotalUcmpDistance", ucmpNextHop.TotalUcmpDistance}
    ucmpNextHop.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", ucmpNextHop.SegmentRoutingSidValue}
    ucmpNextHop.EntityData.Leafs["weight"] = types.YLeaf{"Weight", ucmpNextHop.Weight}
    ucmpNextHop.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", ucmpNextHop.IsTeTunnelInterface}
    ucmpNextHop.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", ucmpNextHop.IsSrExcludeTunnelInterface}
    return &(ucmpNextHop.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "ucmp-next-hop"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetEntityData() *types.CommonEntityData {
    multicastPath.EntityData.YFilter = multicastPath.YFilter
    multicastPath.EntityData.YangName = "multicast-path"
    multicastPath.EntityData.BundleName = "cisco_ios_xr"
    multicastPath.EntityData.ParentYangName = "primary"
    multicastPath.EntityData.SegmentPath = "multicast-path"
    multicastPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastPath.EntityData.Children = make(map[string]types.YChild)
    multicastPath.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &multicastPath.FrrBackup}
    multicastPath.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range multicastPath.UloopExplicit {
        multicastPath.EntityData.Children[types.GetSegmentPath(&multicastPath.UloopExplicit[i])] = types.YChild{"UloopExplicit", &multicastPath.UloopExplicit[i]}
    }
    multicastPath.EntityData.Leafs = make(map[string]types.YLeaf)
    multicastPath.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", multicastPath.NeighborId}
    multicastPath.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", multicastPath.EgressInterface}
    multicastPath.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", multicastPath.NeighborAddress}
    multicastPath.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", multicastPath.NeighborSnpa}
    multicastPath.EntityData.Leafs["tag"] = types.YLeaf{"Tag", multicastPath.Tag}
    multicastPath.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", multicastPath.TunnelInterface}
    multicastPath.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", multicastPath.SegmentRoutingSidValue}
    multicastPath.EntityData.Leafs["weight"] = types.YLeaf{"Weight", multicastPath.Weight}
    multicastPath.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", multicastPath.IsTeTunnelInterface}
    multicastPath.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", multicastPath.IsSrExcludeTunnelInterface}
    return &(multicastPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "multicast-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "multicast-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath) GetEntityData() *types.CommonEntityData {
    srtePath.EntityData.YFilter = srtePath.YFilter
    srtePath.EntityData.YangName = "srte-path"
    srtePath.EntityData.BundleName = "cisco_ios_xr"
    srtePath.EntityData.ParentYangName = "primary"
    srtePath.EntityData.SegmentPath = "srte-path"
    srtePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srtePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srtePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srtePath.EntityData.Children = make(map[string]types.YChild)
    srtePath.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &srtePath.FrrBackup}
    srtePath.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range srtePath.UloopExplicit {
        srtePath.EntityData.Children[types.GetSegmentPath(&srtePath.UloopExplicit[i])] = types.YChild{"UloopExplicit", &srtePath.UloopExplicit[i]}
    }
    srtePath.EntityData.Leafs = make(map[string]types.YLeaf)
    srtePath.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", srtePath.NeighborId}
    srtePath.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", srtePath.EgressInterface}
    srtePath.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", srtePath.NeighborAddress}
    srtePath.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", srtePath.NeighborSnpa}
    srtePath.EntityData.Leafs["tag"] = types.YLeaf{"Tag", srtePath.Tag}
    srtePath.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", srtePath.TunnelInterface}
    srtePath.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", srtePath.SegmentRoutingSidValue}
    srtePath.EntityData.Leafs["weight"] = types.YLeaf{"Weight", srtePath.Weight}
    srtePath.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", srtePath.IsTeTunnelInterface}
    srtePath.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", srtePath.IsSrExcludeTunnelInterface}
    return &(srtePath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "srte-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "srte-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetEntityData() *types.CommonEntityData {
    explicitPath.EntityData.YFilter = explicitPath.YFilter
    explicitPath.EntityData.YangName = "explicit-path"
    explicitPath.EntityData.BundleName = "cisco_ios_xr"
    explicitPath.EntityData.ParentYangName = "primary"
    explicitPath.EntityData.SegmentPath = "explicit-path"
    explicitPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitPath.EntityData.Children = make(map[string]types.YChild)
    explicitPath.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &explicitPath.FrrBackup}
    explicitPath.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range explicitPath.UloopExplicit {
        explicitPath.EntityData.Children[types.GetSegmentPath(&explicitPath.UloopExplicit[i])] = types.YChild{"UloopExplicit", &explicitPath.UloopExplicit[i]}
    }
    explicitPath.EntityData.Leafs = make(map[string]types.YLeaf)
    explicitPath.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", explicitPath.NeighborId}
    explicitPath.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", explicitPath.EgressInterface}
    explicitPath.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", explicitPath.NeighborAddress}
    explicitPath.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", explicitPath.NeighborSnpa}
    explicitPath.EntityData.Leafs["tag"] = types.YLeaf{"Tag", explicitPath.Tag}
    explicitPath.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", explicitPath.TunnelInterface}
    explicitPath.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", explicitPath.SegmentRoutingSidValue}
    explicitPath.EntityData.Leafs["weight"] = types.YLeaf{"Weight", explicitPath.Weight}
    explicitPath.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", explicitPath.IsTeTunnelInterface}
    explicitPath.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", explicitPath.IsSrExcludeTunnelInterface}
    return &(explicitPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "explicit-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "explicit-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}\\-[a-fA-F0-9]{2}'.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "primary"
    source.EntityData.SegmentPath = "source"
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = make(map[string]types.YChild)
    source.EntityData.Children["tags"] = types.YChild{"Tags", nil}
    for i := range source.Tags {
        source.EntityData.Children[types.GetSegmentPath(&source.Tags[i])] = types.YChild{"Tags", &source.Tags[i]}
    }
    source.EntityData.Children["nodal-sid"] = types.YChild{"NodalSid", nil}
    for i := range source.NodalSid {
        source.EntityData.Children[types.GetSegmentPath(&source.NodalSid[i])] = types.YChild{"NodalSid", &source.NodalSid[i]}
    }
    source.EntityData.Leafs = make(map[string]types.YLeaf)
    source.EntityData.Leafs["source-lsp-id"] = types.YLeaf{"SourceLspId", source.SourceLspId}
    source.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", source.SourceAddress}
    return &(source.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "source"
    tags.EntityData.SegmentPath = "tags"
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = make(map[string]types.YChild)
    tags.EntityData.Leafs = make(map[string]types.YLeaf)
    tags.EntityData.Leafs["entry"] = types.YLeaf{"Entry", tags.Entry}
    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "source"
    nodalSid.EntityData.SegmentPath = "nodal-sid"
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = make(map[string]types.YChild)
    nodalSid.EntityData.Leafs = make(map[string]types.YLeaf)
    nodalSid.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", nodalSid.SidValue}
    nodalSid.EntityData.Leafs["rflag"] = types.YLeaf{"Rflag", nodalSid.Rflag}
    nodalSid.EntityData.Leafs["nflag"] = types.YLeaf{"Nflag", nodalSid.Nflag}
    nodalSid.EntityData.Leafs["pflag"] = types.YLeaf{"Pflag", nodalSid.Pflag}
    nodalSid.EntityData.Leafs["eflag"] = types.YLeaf{"Eflag", nodalSid.Eflag}
    nodalSid.EntityData.Leafs["vflag"] = types.YLeaf{"Vflag", nodalSid.Vflag}
    nodalSid.EntityData.Leafs["lflag"] = types.YLeaf{"Lflag", nodalSid.Lflag}
    nodalSid.EntityData.Leafs["algorithm"] = types.YLeaf{"Algorithm", nodalSid.Algorithm}
    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}\\-[a-fA-F0-9]{2}'.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetEntityData() *types.CommonEntityData {
    multicastSource.EntityData.YFilter = multicastSource.YFilter
    multicastSource.EntityData.YangName = "multicast-source"
    multicastSource.EntityData.BundleName = "cisco_ios_xr"
    multicastSource.EntityData.ParentYangName = "primary"
    multicastSource.EntityData.SegmentPath = "multicast-source"
    multicastSource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastSource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastSource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastSource.EntityData.Children = make(map[string]types.YChild)
    multicastSource.EntityData.Children["tags"] = types.YChild{"Tags", nil}
    for i := range multicastSource.Tags {
        multicastSource.EntityData.Children[types.GetSegmentPath(&multicastSource.Tags[i])] = types.YChild{"Tags", &multicastSource.Tags[i]}
    }
    multicastSource.EntityData.Children["nodal-sid"] = types.YChild{"NodalSid", nil}
    for i := range multicastSource.NodalSid {
        multicastSource.EntityData.Children[types.GetSegmentPath(&multicastSource.NodalSid[i])] = types.YChild{"NodalSid", &multicastSource.NodalSid[i]}
    }
    multicastSource.EntityData.Leafs = make(map[string]types.YLeaf)
    multicastSource.EntityData.Leafs["source-lsp-id"] = types.YLeaf{"SourceLspId", multicastSource.SourceLspId}
    multicastSource.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", multicastSource.SourceAddress}
    return &(multicastSource.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "multicast-source"
    tags.EntityData.SegmentPath = "tags"
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = make(map[string]types.YChild)
    tags.EntityData.Leafs = make(map[string]types.YLeaf)
    tags.EntityData.Leafs["entry"] = types.YLeaf{"Entry", tags.Entry}
    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "multicast-source"
    nodalSid.EntityData.SegmentPath = "nodal-sid"
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = make(map[string]types.YChild)
    nodalSid.EntityData.Leafs = make(map[string]types.YLeaf)
    nodalSid.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", nodalSid.SidValue}
    nodalSid.EntityData.Leafs["rflag"] = types.YLeaf{"Rflag", nodalSid.Rflag}
    nodalSid.EntityData.Leafs["nflag"] = types.YLeaf{"Nflag", nodalSid.Nflag}
    nodalSid.EntityData.Leafs["pflag"] = types.YLeaf{"Pflag", nodalSid.Pflag}
    nodalSid.EntityData.Leafs["eflag"] = types.YLeaf{"Eflag", nodalSid.Eflag}
    nodalSid.EntityData.Leafs["vflag"] = types.YLeaf{"Vflag", nodalSid.Vflag}
    nodalSid.EntityData.Leafs["lflag"] = types.YLeaf{"Lflag", nodalSid.Lflag}
    nodalSid.EntityData.Leafs["algorithm"] = types.YLeaf{"Algorithm", nodalSid.Algorithm}
    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup
// Backup paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths.
    Paths []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop.
    UcmpNextHop []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath.
    MulticastPath []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath.
    SrtePath []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath.
    ExplicitPath []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source.
    Source []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource.
    MulticastSource []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup) GetEntityData() *types.CommonEntityData {
    backup.EntityData.YFilter = backup.YFilter
    backup.EntityData.YangName = "backup"
    backup.EntityData.BundleName = "cisco_ios_xr"
    backup.EntityData.ParentYangName = "native-details"
    backup.EntityData.SegmentPath = "backup"
    backup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backup.EntityData.Children = make(map[string]types.YChild)
    backup.EntityData.Children["paths"] = types.YChild{"Paths", nil}
    for i := range backup.Paths {
        backup.EntityData.Children[types.GetSegmentPath(&backup.Paths[i])] = types.YChild{"Paths", &backup.Paths[i]}
    }
    backup.EntityData.Children["ucmp-next-hop"] = types.YChild{"UcmpNextHop", nil}
    for i := range backup.UcmpNextHop {
        backup.EntityData.Children[types.GetSegmentPath(&backup.UcmpNextHop[i])] = types.YChild{"UcmpNextHop", &backup.UcmpNextHop[i]}
    }
    backup.EntityData.Children["multicast-path"] = types.YChild{"MulticastPath", nil}
    for i := range backup.MulticastPath {
        backup.EntityData.Children[types.GetSegmentPath(&backup.MulticastPath[i])] = types.YChild{"MulticastPath", &backup.MulticastPath[i]}
    }
    backup.EntityData.Children["srte-path"] = types.YChild{"SrtePath", nil}
    for i := range backup.SrtePath {
        backup.EntityData.Children[types.GetSegmentPath(&backup.SrtePath[i])] = types.YChild{"SrtePath", &backup.SrtePath[i]}
    }
    backup.EntityData.Children["explicit-path"] = types.YChild{"ExplicitPath", nil}
    for i := range backup.ExplicitPath {
        backup.EntityData.Children[types.GetSegmentPath(&backup.ExplicitPath[i])] = types.YChild{"ExplicitPath", &backup.ExplicitPath[i]}
    }
    backup.EntityData.Children["source"] = types.YChild{"Source", nil}
    for i := range backup.Source {
        backup.EntityData.Children[types.GetSegmentPath(&backup.Source[i])] = types.YChild{"Source", &backup.Source[i]}
    }
    backup.EntityData.Children["multicast-source"] = types.YChild{"MulticastSource", nil}
    for i := range backup.MulticastSource {
        backup.EntityData.Children[types.GetSegmentPath(&backup.MulticastSource[i])] = types.YChild{"MulticastSource", &backup.MulticastSource[i]}
    }
    backup.EntityData.Leafs = make(map[string]types.YLeaf)
    backup.EntityData.Leafs["origin"] = types.YLeaf{"Origin", backup.Origin}
    backup.EntityData.Leafs["metric"] = types.YLeaf{"Metric", backup.Metric}
    backup.EntityData.Leafs["multicast-metric"] = types.YLeaf{"MulticastMetric", backup.MulticastMetric}
    backup.EntityData.Leafs["is-external-metric"] = types.YLeaf{"IsExternalMetric", backup.IsExternalMetric}
    backup.EntityData.Leafs["administrative-distance"] = types.YLeaf{"AdministrativeDistance", backup.AdministrativeDistance}
    return &(backup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "backup"
    paths.EntityData.SegmentPath = "paths"
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = make(map[string]types.YChild)
    paths.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &paths.FrrBackup}
    paths.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range paths.UloopExplicit {
        paths.EntityData.Children[types.GetSegmentPath(&paths.UloopExplicit[i])] = types.YChild{"UloopExplicit", &paths.UloopExplicit[i]}
    }
    paths.EntityData.Leafs = make(map[string]types.YLeaf)
    paths.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", paths.NeighborId}
    paths.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", paths.EgressInterface}
    paths.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", paths.NeighborAddress}
    paths.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", paths.NeighborSnpa}
    paths.EntityData.Leafs["tag"] = types.YLeaf{"Tag", paths.Tag}
    paths.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", paths.TunnelInterface}
    paths.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", paths.SegmentRoutingSidValue}
    paths.EntityData.Leafs["weight"] = types.YLeaf{"Weight", paths.Weight}
    paths.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", paths.IsTeTunnelInterface}
    paths.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", paths.IsSrExcludeTunnelInterface}
    return &(paths.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "paths"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "paths"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetEntityData() *types.CommonEntityData {
    ucmpNextHop.EntityData.YFilter = ucmpNextHop.YFilter
    ucmpNextHop.EntityData.YangName = "ucmp-next-hop"
    ucmpNextHop.EntityData.BundleName = "cisco_ios_xr"
    ucmpNextHop.EntityData.ParentYangName = "backup"
    ucmpNextHop.EntityData.SegmentPath = "ucmp-next-hop"
    ucmpNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ucmpNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ucmpNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ucmpNextHop.EntityData.Children = make(map[string]types.YChild)
    ucmpNextHop.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &ucmpNextHop.FrrBackup}
    ucmpNextHop.EntityData.Leafs = make(map[string]types.YLeaf)
    ucmpNextHop.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", ucmpNextHop.NeighborId}
    ucmpNextHop.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", ucmpNextHop.EgressInterface}
    ucmpNextHop.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", ucmpNextHop.NeighborAddress}
    ucmpNextHop.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", ucmpNextHop.NeighborSnpa}
    ucmpNextHop.EntityData.Leafs["tag"] = types.YLeaf{"Tag", ucmpNextHop.Tag}
    ucmpNextHop.EntityData.Leafs["total-ucmp-distance"] = types.YLeaf{"TotalUcmpDistance", ucmpNextHop.TotalUcmpDistance}
    ucmpNextHop.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", ucmpNextHop.SegmentRoutingSidValue}
    ucmpNextHop.EntityData.Leafs["weight"] = types.YLeaf{"Weight", ucmpNextHop.Weight}
    ucmpNextHop.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", ucmpNextHop.IsTeTunnelInterface}
    ucmpNextHop.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", ucmpNextHop.IsSrExcludeTunnelInterface}
    return &(ucmpNextHop.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "ucmp-next-hop"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetEntityData() *types.CommonEntityData {
    multicastPath.EntityData.YFilter = multicastPath.YFilter
    multicastPath.EntityData.YangName = "multicast-path"
    multicastPath.EntityData.BundleName = "cisco_ios_xr"
    multicastPath.EntityData.ParentYangName = "backup"
    multicastPath.EntityData.SegmentPath = "multicast-path"
    multicastPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastPath.EntityData.Children = make(map[string]types.YChild)
    multicastPath.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &multicastPath.FrrBackup}
    multicastPath.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range multicastPath.UloopExplicit {
        multicastPath.EntityData.Children[types.GetSegmentPath(&multicastPath.UloopExplicit[i])] = types.YChild{"UloopExplicit", &multicastPath.UloopExplicit[i]}
    }
    multicastPath.EntityData.Leafs = make(map[string]types.YLeaf)
    multicastPath.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", multicastPath.NeighborId}
    multicastPath.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", multicastPath.EgressInterface}
    multicastPath.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", multicastPath.NeighborAddress}
    multicastPath.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", multicastPath.NeighborSnpa}
    multicastPath.EntityData.Leafs["tag"] = types.YLeaf{"Tag", multicastPath.Tag}
    multicastPath.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", multicastPath.TunnelInterface}
    multicastPath.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", multicastPath.SegmentRoutingSidValue}
    multicastPath.EntityData.Leafs["weight"] = types.YLeaf{"Weight", multicastPath.Weight}
    multicastPath.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", multicastPath.IsTeTunnelInterface}
    multicastPath.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", multicastPath.IsSrExcludeTunnelInterface}
    return &(multicastPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "multicast-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "multicast-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath) GetEntityData() *types.CommonEntityData {
    srtePath.EntityData.YFilter = srtePath.YFilter
    srtePath.EntityData.YangName = "srte-path"
    srtePath.EntityData.BundleName = "cisco_ios_xr"
    srtePath.EntityData.ParentYangName = "backup"
    srtePath.EntityData.SegmentPath = "srte-path"
    srtePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srtePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srtePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srtePath.EntityData.Children = make(map[string]types.YChild)
    srtePath.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &srtePath.FrrBackup}
    srtePath.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range srtePath.UloopExplicit {
        srtePath.EntityData.Children[types.GetSegmentPath(&srtePath.UloopExplicit[i])] = types.YChild{"UloopExplicit", &srtePath.UloopExplicit[i]}
    }
    srtePath.EntityData.Leafs = make(map[string]types.YLeaf)
    srtePath.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", srtePath.NeighborId}
    srtePath.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", srtePath.EgressInterface}
    srtePath.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", srtePath.NeighborAddress}
    srtePath.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", srtePath.NeighborSnpa}
    srtePath.EntityData.Leafs["tag"] = types.YLeaf{"Tag", srtePath.Tag}
    srtePath.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", srtePath.TunnelInterface}
    srtePath.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", srtePath.SegmentRoutingSidValue}
    srtePath.EntityData.Leafs["weight"] = types.YLeaf{"Weight", srtePath.Weight}
    srtePath.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", srtePath.IsTeTunnelInterface}
    srtePath.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", srtePath.IsSrExcludeTunnelInterface}
    return &(srtePath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "srte-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "srte-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit.
    UloopExplicit []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetEntityData() *types.CommonEntityData {
    explicitPath.EntityData.YFilter = explicitPath.YFilter
    explicitPath.EntityData.YangName = "explicit-path"
    explicitPath.EntityData.BundleName = "cisco_ios_xr"
    explicitPath.EntityData.ParentYangName = "backup"
    explicitPath.EntityData.SegmentPath = "explicit-path"
    explicitPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitPath.EntityData.Children = make(map[string]types.YChild)
    explicitPath.EntityData.Children["frr-backup"] = types.YChild{"FrrBackup", &explicitPath.FrrBackup}
    explicitPath.EntityData.Children["uloop-explicit"] = types.YChild{"UloopExplicit", nil}
    for i := range explicitPath.UloopExplicit {
        explicitPath.EntityData.Children[types.GetSegmentPath(&explicitPath.UloopExplicit[i])] = types.YChild{"UloopExplicit", &explicitPath.UloopExplicit[i]}
    }
    explicitPath.EntityData.Leafs = make(map[string]types.YLeaf)
    explicitPath.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", explicitPath.NeighborId}
    explicitPath.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", explicitPath.EgressInterface}
    explicitPath.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", explicitPath.NeighborAddress}
    explicitPath.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", explicitPath.NeighborSnpa}
    explicitPath.EntityData.Leafs["tag"] = types.YLeaf{"Tag", explicitPath.Tag}
    explicitPath.EntityData.Leafs["tunnel-interface"] = types.YLeaf{"TunnelInterface", explicitPath.TunnelInterface}
    explicitPath.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", explicitPath.SegmentRoutingSidValue}
    explicitPath.EntityData.Leafs["weight"] = types.YLeaf{"Weight", explicitPath.Weight}
    explicitPath.EntityData.Leafs["is-te-tunnel-interface"] = types.YLeaf{"IsTeTunnelInterface", explicitPath.IsTeTunnelInterface}
    explicitPath.EntityData.Leafs["is-sr-exclude-tunnel-interface"] = types.YLeaf{"IsSrExcludeTunnelInterface", explicitPath.IsSrExcludeTunnelInterface}
    return &(explicitPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "explicit-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = make(map[string]types.YChild)
    frrBackup.EntityData.Children["segment-routing-sid-value-entry"] = types.YChild{"SegmentRoutingSidValueEntry", nil}
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.SegmentRoutingSidValueEntry[i])] = types.YChild{"SegmentRoutingSidValueEntry", &frrBackup.SegmentRoutingSidValueEntry[i]}
    }
    frrBackup.EntityData.Children["backup-repair"] = types.YChild{"BackupRepair", nil}
    for i := range frrBackup.BackupRepair {
        frrBackup.EntityData.Children[types.GetSegmentPath(&frrBackup.BackupRepair[i])] = types.YChild{"BackupRepair", &frrBackup.BackupRepair[i]}
    }
    frrBackup.EntityData.Leafs = make(map[string]types.YLeaf)
    frrBackup.EntityData.Leafs["neighbor-id"] = types.YLeaf{"NeighborId", frrBackup.NeighborId}
    frrBackup.EntityData.Leafs["egress-interface"] = types.YLeaf{"EgressInterface", frrBackup.EgressInterface}
    frrBackup.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress}
    frrBackup.EntityData.Leafs["tunnel-egress-interface"] = types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface}
    frrBackup.EntityData.Leafs["neighbor-snpa"] = types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa}
    frrBackup.EntityData.Leafs["remote-lfa-system-id"] = types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId}
    frrBackup.EntityData.Leafs["remote-lfa-router-id"] = types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId}
    frrBackup.EntityData.Leafs["remote-lfa-system-pid"] = types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid}
    frrBackup.EntityData.Leafs["remote-lfa-router-pid"] = types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid}
    frrBackup.EntityData.Leafs["total-backup-distance"] = types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance}
    frrBackup.EntityData.Leafs["segment-routing-sid-value"] = types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue}
    frrBackup.EntityData.Leafs["num-sid"] = types.YLeaf{"NumSid", frrBackup.NumSid}
    frrBackup.EntityData.Leafs["backup-repair-list-size"] = types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize}
    frrBackup.EntityData.Leafs["tilfa-computation"] = types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation}
    frrBackup.EntityData.Leafs["prefix-source-node-id"] = types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId}
    frrBackup.EntityData.Leafs["is-downstream"] = types.YLeaf{"IsDownstream", frrBackup.IsDownstream}
    frrBackup.EntityData.Leafs["is-lc-disjoint"] = types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint}
    frrBackup.EntityData.Leafs["is-node-protecting"] = types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting}
    frrBackup.EntityData.Leafs["is-primary-path"] = types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath}
    frrBackup.EntityData.Leafs["is-srlg-disjoint"] = types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint}
    frrBackup.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa}
    frrBackup.EntityData.Leafs["is-epcfrr-lfa"] = types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa}
    frrBackup.EntityData.Leafs["is-strict-spflfa"] = types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa}
    frrBackup.EntityData.Leafs["is-tunnel-requested"] = types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested}
    frrBackup.EntityData.Leafs["weight"] = types.YLeaf{"Weight", frrBackup.Weight}
    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = make(map[string]types.YChild)
    segmentRoutingSidValueEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRoutingSidValueEntry.EntityData.Leafs["entry"] = types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry}
    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair"
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = make(map[string]types.YChild)
    backupRepair.EntityData.Leafs = make(map[string]types.YLeaf)
    backupRepair.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId}
    backupRepair.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr}
    backupRepair.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr}
    backupRepair.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", backupRepair.RepairLabel}
    backupRepair.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", backupRepair.RepairElementType}
    backupRepair.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel}
    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "explicit-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit"
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = make(map[string]types.YChild)
    uloopExplicit.EntityData.Leafs = make(map[string]types.YLeaf)
    uloopExplicit.EntityData.Leafs["repair-element-node-id"] = types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId}
    uloopExplicit.EntityData.Leafs["repair-ipv4-addr"] = types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr}
    uloopExplicit.EntityData.Leafs["repair-ipv6-addr"] = types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr}
    uloopExplicit.EntityData.Leafs["repair-label"] = types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel}
    uloopExplicit.EntityData.Leafs["repair-element-type"] = types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType}
    uloopExplicit.EntityData.Leafs["repair-strict-spf-label"] = types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel}
    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}\\-[a-fA-F0-9]{2}'.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "backup"
    source.EntityData.SegmentPath = "source"
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = make(map[string]types.YChild)
    source.EntityData.Children["tags"] = types.YChild{"Tags", nil}
    for i := range source.Tags {
        source.EntityData.Children[types.GetSegmentPath(&source.Tags[i])] = types.YChild{"Tags", &source.Tags[i]}
    }
    source.EntityData.Children["nodal-sid"] = types.YChild{"NodalSid", nil}
    for i := range source.NodalSid {
        source.EntityData.Children[types.GetSegmentPath(&source.NodalSid[i])] = types.YChild{"NodalSid", &source.NodalSid[i]}
    }
    source.EntityData.Leafs = make(map[string]types.YLeaf)
    source.EntityData.Leafs["source-lsp-id"] = types.YLeaf{"SourceLspId", source.SourceLspId}
    source.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", source.SourceAddress}
    return &(source.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "source"
    tags.EntityData.SegmentPath = "tags"
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = make(map[string]types.YChild)
    tags.EntityData.Leafs = make(map[string]types.YLeaf)
    tags.EntityData.Leafs["entry"] = types.YLeaf{"Entry", tags.Entry}
    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "source"
    nodalSid.EntityData.SegmentPath = "nodal-sid"
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = make(map[string]types.YChild)
    nodalSid.EntityData.Leafs = make(map[string]types.YLeaf)
    nodalSid.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", nodalSid.SidValue}
    nodalSid.EntityData.Leafs["rflag"] = types.YLeaf{"Rflag", nodalSid.Rflag}
    nodalSid.EntityData.Leafs["nflag"] = types.YLeaf{"Nflag", nodalSid.Nflag}
    nodalSid.EntityData.Leafs["pflag"] = types.YLeaf{"Pflag", nodalSid.Pflag}
    nodalSid.EntityData.Leafs["eflag"] = types.YLeaf{"Eflag", nodalSid.Eflag}
    nodalSid.EntityData.Leafs["vflag"] = types.YLeaf{"Vflag", nodalSid.Vflag}
    nodalSid.EntityData.Leafs["lflag"] = types.YLeaf{"Lflag", nodalSid.Lflag}
    nodalSid.EntityData.Leafs["algorithm"] = types.YLeaf{"Algorithm", nodalSid.Algorithm}
    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}\\-[a-fA-F0-9]{2}'.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetEntityData() *types.CommonEntityData {
    multicastSource.EntityData.YFilter = multicastSource.YFilter
    multicastSource.EntityData.YangName = "multicast-source"
    multicastSource.EntityData.BundleName = "cisco_ios_xr"
    multicastSource.EntityData.ParentYangName = "backup"
    multicastSource.EntityData.SegmentPath = "multicast-source"
    multicastSource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastSource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastSource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastSource.EntityData.Children = make(map[string]types.YChild)
    multicastSource.EntityData.Children["tags"] = types.YChild{"Tags", nil}
    for i := range multicastSource.Tags {
        multicastSource.EntityData.Children[types.GetSegmentPath(&multicastSource.Tags[i])] = types.YChild{"Tags", &multicastSource.Tags[i]}
    }
    multicastSource.EntityData.Children["nodal-sid"] = types.YChild{"NodalSid", nil}
    for i := range multicastSource.NodalSid {
        multicastSource.EntityData.Children[types.GetSegmentPath(&multicastSource.NodalSid[i])] = types.YChild{"NodalSid", &multicastSource.NodalSid[i]}
    }
    multicastSource.EntityData.Leafs = make(map[string]types.YLeaf)
    multicastSource.EntityData.Leafs["source-lsp-id"] = types.YLeaf{"SourceLspId", multicastSource.SourceLspId}
    multicastSource.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", multicastSource.SourceAddress}
    return &(multicastSource.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "multicast-source"
    tags.EntityData.SegmentPath = "tags"
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = make(map[string]types.YChild)
    tags.EntityData.Leafs = make(map[string]types.YLeaf)
    tags.EntityData.Leafs["entry"] = types.YLeaf{"Entry", tags.Entry}
    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "multicast-source"
    nodalSid.EntityData.SegmentPath = "nodal-sid"
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = make(map[string]types.YChild)
    nodalSid.EntityData.Leafs = make(map[string]types.YLeaf)
    nodalSid.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", nodalSid.SidValue}
    nodalSid.EntityData.Leafs["rflag"] = types.YLeaf{"Rflag", nodalSid.Rflag}
    nodalSid.EntityData.Leafs["nflag"] = types.YLeaf{"Nflag", nodalSid.Nflag}
    nodalSid.EntityData.Leafs["pflag"] = types.YLeaf{"Pflag", nodalSid.Pflag}
    nodalSid.EntityData.Leafs["eflag"] = types.YLeaf{"Eflag", nodalSid.Eflag}
    nodalSid.EntityData.Leafs["vflag"] = types.YLeaf{"Vflag", nodalSid.Vflag}
    nodalSid.EntityData.Leafs["lflag"] = types.YLeaf{"Lflag", nodalSid.Lflag}
    nodalSid.EntityData.Leafs["algorithm"] = types.YLeaf{"Algorithm", nodalSid.Algorithm}
    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail
// Per level details of how the local system
// advertises the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Level in which the prefix is advertised. The type is IsisLevel.
    Level interface{}

    // The origin of the advertisement. The type is IsisShRouteAdvOrigin.
    AdvertisingOrigin interface{}

    // Metric with which the prefix is advertised. The type is interface{} with
    // range: 0..4294967295.
    Metric interface{}

    // Has the prefix been propagated from another level?. The type is bool.
    IsPropagated interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Is the prefix external to the IS-IS domain?. The type is bool.
    IsExternalReachability interface{}

    // Is the up/down bit set?. The type is bool.
    IsInterarea interface{}

    // Status of summarization for the prefix.
    SummarizationStatus Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus

    // Tags associated with the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags.
    Tags []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid.
    NodalSid []Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail) GetEntityData() *types.CommonEntityData {
    perLevelAdvertisingDetail.EntityData.YFilter = perLevelAdvertisingDetail.YFilter
    perLevelAdvertisingDetail.EntityData.YangName = "per-level-advertising-detail"
    perLevelAdvertisingDetail.EntityData.BundleName = "cisco_ios_xr"
    perLevelAdvertisingDetail.EntityData.ParentYangName = "ipv4-route"
    perLevelAdvertisingDetail.EntityData.SegmentPath = "per-level-advertising-detail"
    perLevelAdvertisingDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perLevelAdvertisingDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perLevelAdvertisingDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perLevelAdvertisingDetail.EntityData.Children = make(map[string]types.YChild)
    perLevelAdvertisingDetail.EntityData.Children["summarization-status"] = types.YChild{"SummarizationStatus", &perLevelAdvertisingDetail.SummarizationStatus}
    perLevelAdvertisingDetail.EntityData.Children["tags"] = types.YChild{"Tags", nil}
    for i := range perLevelAdvertisingDetail.Tags {
        perLevelAdvertisingDetail.EntityData.Children[types.GetSegmentPath(&perLevelAdvertisingDetail.Tags[i])] = types.YChild{"Tags", &perLevelAdvertisingDetail.Tags[i]}
    }
    perLevelAdvertisingDetail.EntityData.Children["nodal-sid"] = types.YChild{"NodalSid", nil}
    for i := range perLevelAdvertisingDetail.NodalSid {
        perLevelAdvertisingDetail.EntityData.Children[types.GetSegmentPath(&perLevelAdvertisingDetail.NodalSid[i])] = types.YChild{"NodalSid", &perLevelAdvertisingDetail.NodalSid[i]}
    }
    perLevelAdvertisingDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    perLevelAdvertisingDetail.EntityData.Leafs["level"] = types.YLeaf{"Level", perLevelAdvertisingDetail.Level}
    perLevelAdvertisingDetail.EntityData.Leafs["advertising-origin"] = types.YLeaf{"AdvertisingOrigin", perLevelAdvertisingDetail.AdvertisingOrigin}
    perLevelAdvertisingDetail.EntityData.Leafs["metric"] = types.YLeaf{"Metric", perLevelAdvertisingDetail.Metric}
    perLevelAdvertisingDetail.EntityData.Leafs["is-propagated"] = types.YLeaf{"IsPropagated", perLevelAdvertisingDetail.IsPropagated}
    perLevelAdvertisingDetail.EntityData.Leafs["is-external-metric"] = types.YLeaf{"IsExternalMetric", perLevelAdvertisingDetail.IsExternalMetric}
    perLevelAdvertisingDetail.EntityData.Leafs["is-external-reachability"] = types.YLeaf{"IsExternalReachability", perLevelAdvertisingDetail.IsExternalReachability}
    perLevelAdvertisingDetail.EntityData.Leafs["is-interarea"] = types.YLeaf{"IsInterarea", perLevelAdvertisingDetail.IsInterarea}
    return &(perLevelAdvertisingDetail.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus
// Status of summarization for the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Summarizing Prefix.
    SummaryPrefix Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus) GetEntityData() *types.CommonEntityData {
    summarizationStatus.EntityData.YFilter = summarizationStatus.YFilter
    summarizationStatus.EntityData.YangName = "summarization-status"
    summarizationStatus.EntityData.BundleName = "cisco_ios_xr"
    summarizationStatus.EntityData.ParentYangName = "per-level-advertising-detail"
    summarizationStatus.EntityData.SegmentPath = "summarization-status"
    summarizationStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summarizationStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summarizationStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summarizationStatus.EntityData.Children = make(map[string]types.YChild)
    summarizationStatus.EntityData.Children["summary-prefix"] = types.YChild{"SummaryPrefix", &summarizationStatus.SummaryPrefix}
    summarizationStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    summarizationStatus.EntityData.Leafs["is-valid"] = types.YLeaf{"IsValid", summarizationStatus.IsValid}
    return &(summarizationStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
// Summarizing Prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetEntityData() *types.CommonEntityData {
    summaryPrefix.EntityData.YFilter = summaryPrefix.YFilter
    summaryPrefix.EntityData.YangName = "summary-prefix"
    summaryPrefix.EntityData.BundleName = "cisco_ios_xr"
    summaryPrefix.EntityData.ParentYangName = "summarization-status"
    summaryPrefix.EntityData.SegmentPath = "summary-prefix"
    summaryPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryPrefix.EntityData.Children = make(map[string]types.YChild)
    summaryPrefix.EntityData.Leafs = make(map[string]types.YLeaf)
    summaryPrefix.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", summaryPrefix.Prefix}
    summaryPrefix.EntityData.Leafs["prefix-length"] = types.YLeaf{"PrefixLength", summaryPrefix.PrefixLength}
    return &(summaryPrefix.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags
// Tags associated with the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "per-level-advertising-detail"
    tags.EntityData.SegmentPath = "tags"
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = make(map[string]types.YChild)
    tags.EntityData.Leafs = make(map[string]types.YLeaf)
    tags.EntityData.Leafs["entry"] = types.YLeaf{"Entry", tags.Entry}
    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "per-level-advertising-detail"
    nodalSid.EntityData.SegmentPath = "nodal-sid"
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = make(map[string]types.YChild)
    nodalSid.EntityData.Leafs = make(map[string]types.YLeaf)
    nodalSid.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", nodalSid.SidValue}
    nodalSid.EntityData.Leafs["rflag"] = types.YLeaf{"Rflag", nodalSid.Rflag}
    nodalSid.EntityData.Leafs["nflag"] = types.YLeaf{"Nflag", nodalSid.Nflag}
    nodalSid.EntityData.Leafs["pflag"] = types.YLeaf{"Pflag", nodalSid.Pflag}
    nodalSid.EntityData.Leafs["eflag"] = types.YLeaf{"Eflag", nodalSid.Eflag}
    nodalSid.EntityData.Leafs["vflag"] = types.YLeaf{"Vflag", nodalSid.Vflag}
    nodalSid.EntityData.Leafs["lflag"] = types.YLeaf{"Lflag", nodalSid.Lflag}
    nodalSid.EntityData.Leafs["algorithm"] = types.YLeaf{"Algorithm", nodalSid.Algorithm}
    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_NsrStatus
// NSR Status information
type Isis_Instances_Instance_NsrStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS VM STATE. The type is interface{} with range: 0..65535.
    IsisVmState interface{}

    // ISIS NSR PEER STATUS.
    IsisNsrPeer Isis_Instances_Instance_NsrStatus_IsisNsrPeer

    // ISIS NSR Infra.
    IsisNsrInfra Isis_Instances_Instance_NsrStatus_IsisNsrInfra
}

func (nsrStatus *Isis_Instances_Instance_NsrStatus) GetEntityData() *types.CommonEntityData {
    nsrStatus.EntityData.YFilter = nsrStatus.YFilter
    nsrStatus.EntityData.YangName = "nsr-status"
    nsrStatus.EntityData.BundleName = "cisco_ios_xr"
    nsrStatus.EntityData.ParentYangName = "instance"
    nsrStatus.EntityData.SegmentPath = "nsr-status"
    nsrStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrStatus.EntityData.Children = make(map[string]types.YChild)
    nsrStatus.EntityData.Children["isis-nsr-peer"] = types.YChild{"IsisNsrPeer", &nsrStatus.IsisNsrPeer}
    nsrStatus.EntityData.Children["isis-nsr-infra"] = types.YChild{"IsisNsrInfra", &nsrStatus.IsisNsrInfra}
    nsrStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    nsrStatus.EntityData.Leafs["isis-vm-state"] = types.YLeaf{"IsisVmState", nsrStatus.IsisVmState}
    return &(nsrStatus.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrPeer
// ISIS NSR PEER STATUS
type Isis_Instances_Instance_NsrStatus_IsisNsrPeer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // full sync achieved. The type is slice of
    // Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved.
    FullSyncAchieved []Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved

    // man sync count. The type is slice of
    // Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount.
    ManSyncCount []Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount

    // nsr chg count. The type is slice of
    // Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount.
    NsrChgCount []Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount

    // uptime. The type is slice of
    // Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime.
    Uptime []Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime

    // uptime valid. The type is slice of
    // Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid.
    UptimeValid []Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid
}

func (isisNsrPeer *Isis_Instances_Instance_NsrStatus_IsisNsrPeer) GetEntityData() *types.CommonEntityData {
    isisNsrPeer.EntityData.YFilter = isisNsrPeer.YFilter
    isisNsrPeer.EntityData.YangName = "isis-nsr-peer"
    isisNsrPeer.EntityData.BundleName = "cisco_ios_xr"
    isisNsrPeer.EntityData.ParentYangName = "nsr-status"
    isisNsrPeer.EntityData.SegmentPath = "isis-nsr-peer"
    isisNsrPeer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isisNsrPeer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isisNsrPeer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isisNsrPeer.EntityData.Children = make(map[string]types.YChild)
    isisNsrPeer.EntityData.Children["full-sync-achieved"] = types.YChild{"FullSyncAchieved", nil}
    for i := range isisNsrPeer.FullSyncAchieved {
        isisNsrPeer.EntityData.Children[types.GetSegmentPath(&isisNsrPeer.FullSyncAchieved[i])] = types.YChild{"FullSyncAchieved", &isisNsrPeer.FullSyncAchieved[i]}
    }
    isisNsrPeer.EntityData.Children["man-sync-count"] = types.YChild{"ManSyncCount", nil}
    for i := range isisNsrPeer.ManSyncCount {
        isisNsrPeer.EntityData.Children[types.GetSegmentPath(&isisNsrPeer.ManSyncCount[i])] = types.YChild{"ManSyncCount", &isisNsrPeer.ManSyncCount[i]}
    }
    isisNsrPeer.EntityData.Children["nsr-chg-count"] = types.YChild{"NsrChgCount", nil}
    for i := range isisNsrPeer.NsrChgCount {
        isisNsrPeer.EntityData.Children[types.GetSegmentPath(&isisNsrPeer.NsrChgCount[i])] = types.YChild{"NsrChgCount", &isisNsrPeer.NsrChgCount[i]}
    }
    isisNsrPeer.EntityData.Children["uptime"] = types.YChild{"Uptime", nil}
    for i := range isisNsrPeer.Uptime {
        isisNsrPeer.EntityData.Children[types.GetSegmentPath(&isisNsrPeer.Uptime[i])] = types.YChild{"Uptime", &isisNsrPeer.Uptime[i]}
    }
    isisNsrPeer.EntityData.Children["uptime-valid"] = types.YChild{"UptimeValid", nil}
    for i := range isisNsrPeer.UptimeValid {
        isisNsrPeer.EntityData.Children[types.GetSegmentPath(&isisNsrPeer.UptimeValid[i])] = types.YChild{"UptimeValid", &isisNsrPeer.UptimeValid[i]}
    }
    isisNsrPeer.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(isisNsrPeer.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved
// full sync achieved
type Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (fullSyncAchieved *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved) GetEntityData() *types.CommonEntityData {
    fullSyncAchieved.EntityData.YFilter = fullSyncAchieved.YFilter
    fullSyncAchieved.EntityData.YangName = "full-sync-achieved"
    fullSyncAchieved.EntityData.BundleName = "cisco_ios_xr"
    fullSyncAchieved.EntityData.ParentYangName = "isis-nsr-peer"
    fullSyncAchieved.EntityData.SegmentPath = "full-sync-achieved"
    fullSyncAchieved.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fullSyncAchieved.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fullSyncAchieved.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fullSyncAchieved.EntityData.Children = make(map[string]types.YChild)
    fullSyncAchieved.EntityData.Leafs = make(map[string]types.YLeaf)
    fullSyncAchieved.EntityData.Leafs["entry"] = types.YLeaf{"Entry", fullSyncAchieved.Entry}
    return &(fullSyncAchieved.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount
// man sync count
type Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (manSyncCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount) GetEntityData() *types.CommonEntityData {
    manSyncCount.EntityData.YFilter = manSyncCount.YFilter
    manSyncCount.EntityData.YangName = "man-sync-count"
    manSyncCount.EntityData.BundleName = "cisco_ios_xr"
    manSyncCount.EntityData.ParentYangName = "isis-nsr-peer"
    manSyncCount.EntityData.SegmentPath = "man-sync-count"
    manSyncCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    manSyncCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    manSyncCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    manSyncCount.EntityData.Children = make(map[string]types.YChild)
    manSyncCount.EntityData.Leafs = make(map[string]types.YLeaf)
    manSyncCount.EntityData.Leafs["entry"] = types.YLeaf{"Entry", manSyncCount.Entry}
    return &(manSyncCount.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount
// nsr chg count
type Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (nsrChgCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount) GetEntityData() *types.CommonEntityData {
    nsrChgCount.EntityData.YFilter = nsrChgCount.YFilter
    nsrChgCount.EntityData.YangName = "nsr-chg-count"
    nsrChgCount.EntityData.BundleName = "cisco_ios_xr"
    nsrChgCount.EntityData.ParentYangName = "isis-nsr-peer"
    nsrChgCount.EntityData.SegmentPath = "nsr-chg-count"
    nsrChgCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrChgCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrChgCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrChgCount.EntityData.Children = make(map[string]types.YChild)
    nsrChgCount.EntityData.Leafs = make(map[string]types.YLeaf)
    nsrChgCount.EntityData.Leafs["entry"] = types.YLeaf{"Entry", nsrChgCount.Entry}
    return &(nsrChgCount.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime
// uptime
type Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (uptime *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime) GetEntityData() *types.CommonEntityData {
    uptime.EntityData.YFilter = uptime.YFilter
    uptime.EntityData.YangName = "uptime"
    uptime.EntityData.BundleName = "cisco_ios_xr"
    uptime.EntityData.ParentYangName = "isis-nsr-peer"
    uptime.EntityData.SegmentPath = "uptime"
    uptime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uptime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uptime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uptime.EntityData.Children = make(map[string]types.YChild)
    uptime.EntityData.Leafs = make(map[string]types.YLeaf)
    uptime.EntityData.Leafs["entry"] = types.YLeaf{"Entry", uptime.Entry}
    return &(uptime.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid
// uptime valid
type Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array entry. The type is bool.
    Entry interface{}
}

func (uptimeValid *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid) GetEntityData() *types.CommonEntityData {
    uptimeValid.EntityData.YFilter = uptimeValid.YFilter
    uptimeValid.EntityData.YangName = "uptime-valid"
    uptimeValid.EntityData.BundleName = "cisco_ios_xr"
    uptimeValid.EntityData.ParentYangName = "isis-nsr-peer"
    uptimeValid.EntityData.SegmentPath = "uptime-valid"
    uptimeValid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uptimeValid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uptimeValid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uptimeValid.EntityData.Children = make(map[string]types.YChild)
    uptimeValid.EntityData.Leafs = make(map[string]types.YLeaf)
    uptimeValid.EntityData.Leafs["entry"] = types.YLeaf{"Entry", uptimeValid.Entry}
    return &(uptimeValid.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra
// ISIS NSR Infra
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // gen.
    Gen Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Gen

    // pm.
    Pm Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Pm

    // ds.
    Ds Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds

    // te.
    Te Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Te

    // ncd. The type is slice of
    // Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd.
    Ncd []Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd

    // nii idb. The type is slice of
    // Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb.
    NiiIdb []Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb
}

func (isisNsrInfra *Isis_Instances_Instance_NsrStatus_IsisNsrInfra) GetEntityData() *types.CommonEntityData {
    isisNsrInfra.EntityData.YFilter = isisNsrInfra.YFilter
    isisNsrInfra.EntityData.YangName = "isis-nsr-infra"
    isisNsrInfra.EntityData.BundleName = "cisco_ios_xr"
    isisNsrInfra.EntityData.ParentYangName = "nsr-status"
    isisNsrInfra.EntityData.SegmentPath = "isis-nsr-infra"
    isisNsrInfra.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isisNsrInfra.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isisNsrInfra.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isisNsrInfra.EntityData.Children = make(map[string]types.YChild)
    isisNsrInfra.EntityData.Children["gen"] = types.YChild{"Gen", &isisNsrInfra.Gen}
    isisNsrInfra.EntityData.Children["pm"] = types.YChild{"Pm", &isisNsrInfra.Pm}
    isisNsrInfra.EntityData.Children["ds"] = types.YChild{"Ds", &isisNsrInfra.Ds}
    isisNsrInfra.EntityData.Children["te"] = types.YChild{"Te", &isisNsrInfra.Te}
    isisNsrInfra.EntityData.Children["ncd"] = types.YChild{"Ncd", nil}
    for i := range isisNsrInfra.Ncd {
        isisNsrInfra.EntityData.Children[types.GetSegmentPath(&isisNsrInfra.Ncd[i])] = types.YChild{"Ncd", &isisNsrInfra.Ncd[i]}
    }
    isisNsrInfra.EntityData.Children["nii-idb"] = types.YChild{"NiiIdb", nil}
    for i := range isisNsrInfra.NiiIdb {
        isisNsrInfra.EntityData.Children[types.GetSegmentPath(&isisNsrInfra.NiiIdb[i])] = types.YChild{"NiiIdb", &isisNsrInfra.NiiIdb[i]}
    }
    isisNsrInfra.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(isisNsrInfra.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Gen
// gen
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Gen struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // my nodeid. The type is interface{} with range: 0..4294967295.
    MyNodeid interface{}

    // my process id. The type is interface{} with range: 0..4294967295.
    MyProcessId interface{}

    // pm issu role. The type is interface{} with range: 0..255.
    PmIssuRole interface{}

    // pm ha role. The type is interface{} with range: 0..255.
    PmHaRole interface{}

    // sysmgr ha role. The type is interface{} with range: 0..255.
    SysmgrHaRole interface{}

    // nsr send ready. The type is interface{} with range: 0..255.
    NsrSendReady interface{}

    // nsr send unready. The type is interface{} with range: 0..255.
    NsrSendUnready interface{}

    // nsr send err. The type is interface{} with range: 0..4294967295.
    NsrSendErr interface{}

    // nsr recv err. The type is interface{} with range: 0..4294967295.
    NsrRecvErr interface{}

    // retry flag. The type is interface{} with range: 0..4294967295.
    RetryFlag interface{}

    // nsr enabled. The type is bool.
    NsrEnabled interface{}

    // nsr configured. The type is bool.
    NsrConfigured interface{}

    // nsf configured. The type is bool.
    NsfConfigured interface{}

    // failover. The type is bool.
    Failover interface{}

    // lanid req needed. The type is bool.
    LanidReqNeeded interface{}
}

func (gen *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Gen) GetEntityData() *types.CommonEntityData {
    gen.EntityData.YFilter = gen.YFilter
    gen.EntityData.YangName = "gen"
    gen.EntityData.BundleName = "cisco_ios_xr"
    gen.EntityData.ParentYangName = "isis-nsr-infra"
    gen.EntityData.SegmentPath = "gen"
    gen.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gen.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gen.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gen.EntityData.Children = make(map[string]types.YChild)
    gen.EntityData.Leafs = make(map[string]types.YLeaf)
    gen.EntityData.Leafs["my-nodeid"] = types.YLeaf{"MyNodeid", gen.MyNodeid}
    gen.EntityData.Leafs["my-process-id"] = types.YLeaf{"MyProcessId", gen.MyProcessId}
    gen.EntityData.Leafs["pm-issu-role"] = types.YLeaf{"PmIssuRole", gen.PmIssuRole}
    gen.EntityData.Leafs["pm-ha-role"] = types.YLeaf{"PmHaRole", gen.PmHaRole}
    gen.EntityData.Leafs["sysmgr-ha-role"] = types.YLeaf{"SysmgrHaRole", gen.SysmgrHaRole}
    gen.EntityData.Leafs["nsr-send-ready"] = types.YLeaf{"NsrSendReady", gen.NsrSendReady}
    gen.EntityData.Leafs["nsr-send-unready"] = types.YLeaf{"NsrSendUnready", gen.NsrSendUnready}
    gen.EntityData.Leafs["nsr-send-err"] = types.YLeaf{"NsrSendErr", gen.NsrSendErr}
    gen.EntityData.Leafs["nsr-recv-err"] = types.YLeaf{"NsrRecvErr", gen.NsrRecvErr}
    gen.EntityData.Leafs["retry-flag"] = types.YLeaf{"RetryFlag", gen.RetryFlag}
    gen.EntityData.Leafs["nsr-enabled"] = types.YLeaf{"NsrEnabled", gen.NsrEnabled}
    gen.EntityData.Leafs["nsr-configured"] = types.YLeaf{"NsrConfigured", gen.NsrConfigured}
    gen.EntityData.Leafs["nsf-configured"] = types.YLeaf{"NsfConfigured", gen.NsfConfigured}
    gen.EntityData.Leafs["failover"] = types.YLeaf{"Failover", gen.Failover}
    gen.EntityData.Leafs["lanid-req-needed"] = types.YLeaf{"LanidReqNeeded", gen.LanidReqNeeded}
    return &(gen.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Pm
// pm
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Pm struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // reg. The type is interface{} with range: 0..255.
    Reg interface{}

    // conn cb. The type is interface{} with range: 0..255.
    ConnCb interface{}

    // disconn cb. The type is interface{} with range: 0..255.
    DisconnCb interface{}

    // conn status. The type is bool.
    ConnStatus interface{}
}

func (pm *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Pm) GetEntityData() *types.CommonEntityData {
    pm.EntityData.YFilter = pm.YFilter
    pm.EntityData.YangName = "pm"
    pm.EntityData.BundleName = "cisco_ios_xr"
    pm.EntityData.ParentYangName = "isis-nsr-infra"
    pm.EntityData.SegmentPath = "pm"
    pm.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pm.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pm.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pm.EntityData.Children = make(map[string]types.YChild)
    pm.EntityData.Leafs = make(map[string]types.YLeaf)
    pm.EntityData.Leafs["reg"] = types.YLeaf{"Reg", pm.Reg}
    pm.EntityData.Leafs["conn-cb"] = types.YLeaf{"ConnCb", pm.ConnCb}
    pm.EntityData.Leafs["disconn-cb"] = types.YLeaf{"DisconnCb", pm.DisconnCb}
    pm.EntityData.Leafs["conn-status"] = types.YLeaf{"ConnStatus", pm.ConnStatus}
    return &(pm.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds
// ds
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // conn. The type is interface{} with range: 0..255.
    Conn interface{}

    // conn cb. The type is interface{} with range: 0..255.
    ConnCb interface{}

    // pub. The type is interface{} with range: 0..255.
    Pub interface{}

    // pub cb. The type is interface{} with range: 0..255.
    PubCb interface{}

    // reg. The type is interface{} with range: 0..255.
    Reg interface{}

    // reg cb. The type is interface{} with range: 0..255.
    RegCb interface{}

    // unreg. The type is interface{} with range: 0..255.
    Unreg interface{}

    // unreg cb. The type is interface{} with range: 0..255.
    UnregCb interface{}

    // disconn cb. The type is interface{} with range: 0..255.
    DisconnCb interface{}

    // notify cb. The type is interface{} with range: 0..255.
    NotifyCb interface{}

    // notify peer xr. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    NotifyPeerXr interface{}

    // del cb. The type is interface{} with range: 0..255.
    DelCb interface{}

    // remove srv. The type is interface{} with range: 0..255.
    RemoveSrv interface{}

    // conn status. The type is bool.
    ConnStatus interface{}

    // conn ts.
    ConnTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnTs

    // conn cb ts.
    ConnCbTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnCbTs

    // pub ts.
    PubTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubTs

    // pub cb ts.
    PubCbTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubCbTs

    // reg ts.
    RegTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegTs

    // reg cb ts.
    RegCbTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegCbTs

    // unreg ts.
    UnregTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregTs

    // unreg cb ts.
    UnregCbTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregCbTs

    // disconn cb ts.
    DisconnCbTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DisconnCbTs

    // notify cb ts.
    NotifyCbTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyCbTs

    // del cb ts.
    DelCbTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DelCbTs

    // remove srv ts.
    RemoveSrvTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RemoveSrvTs

    // conn status ts.
    ConnStatusTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnStatusTs

    // notify peer. The type is slice of
    // Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer.
    NotifyPeer []Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer
}

func (ds *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds) GetEntityData() *types.CommonEntityData {
    ds.EntityData.YFilter = ds.YFilter
    ds.EntityData.YangName = "ds"
    ds.EntityData.BundleName = "cisco_ios_xr"
    ds.EntityData.ParentYangName = "isis-nsr-infra"
    ds.EntityData.SegmentPath = "ds"
    ds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ds.EntityData.Children = make(map[string]types.YChild)
    ds.EntityData.Children["conn-ts"] = types.YChild{"ConnTs", &ds.ConnTs}
    ds.EntityData.Children["conn-cb-ts"] = types.YChild{"ConnCbTs", &ds.ConnCbTs}
    ds.EntityData.Children["pub-ts"] = types.YChild{"PubTs", &ds.PubTs}
    ds.EntityData.Children["pub-cb-ts"] = types.YChild{"PubCbTs", &ds.PubCbTs}
    ds.EntityData.Children["reg-ts"] = types.YChild{"RegTs", &ds.RegTs}
    ds.EntityData.Children["reg-cb-ts"] = types.YChild{"RegCbTs", &ds.RegCbTs}
    ds.EntityData.Children["unreg-ts"] = types.YChild{"UnregTs", &ds.UnregTs}
    ds.EntityData.Children["unreg-cb-ts"] = types.YChild{"UnregCbTs", &ds.UnregCbTs}
    ds.EntityData.Children["disconn-cb-ts"] = types.YChild{"DisconnCbTs", &ds.DisconnCbTs}
    ds.EntityData.Children["notify-cb-ts"] = types.YChild{"NotifyCbTs", &ds.NotifyCbTs}
    ds.EntityData.Children["del-cb-ts"] = types.YChild{"DelCbTs", &ds.DelCbTs}
    ds.EntityData.Children["remove-srv-ts"] = types.YChild{"RemoveSrvTs", &ds.RemoveSrvTs}
    ds.EntityData.Children["conn-status-ts"] = types.YChild{"ConnStatusTs", &ds.ConnStatusTs}
    ds.EntityData.Children["notify-peer"] = types.YChild{"NotifyPeer", nil}
    for i := range ds.NotifyPeer {
        ds.EntityData.Children[types.GetSegmentPath(&ds.NotifyPeer[i])] = types.YChild{"NotifyPeer", &ds.NotifyPeer[i]}
    }
    ds.EntityData.Leafs = make(map[string]types.YLeaf)
    ds.EntityData.Leafs["conn"] = types.YLeaf{"Conn", ds.Conn}
    ds.EntityData.Leafs["conn-cb"] = types.YLeaf{"ConnCb", ds.ConnCb}
    ds.EntityData.Leafs["pub"] = types.YLeaf{"Pub", ds.Pub}
    ds.EntityData.Leafs["pub-cb"] = types.YLeaf{"PubCb", ds.PubCb}
    ds.EntityData.Leafs["reg"] = types.YLeaf{"Reg", ds.Reg}
    ds.EntityData.Leafs["reg-cb"] = types.YLeaf{"RegCb", ds.RegCb}
    ds.EntityData.Leafs["unreg"] = types.YLeaf{"Unreg", ds.Unreg}
    ds.EntityData.Leafs["unreg-cb"] = types.YLeaf{"UnregCb", ds.UnregCb}
    ds.EntityData.Leafs["disconn-cb"] = types.YLeaf{"DisconnCb", ds.DisconnCb}
    ds.EntityData.Leafs["notify-cb"] = types.YLeaf{"NotifyCb", ds.NotifyCb}
    ds.EntityData.Leafs["notify-peer-xr"] = types.YLeaf{"NotifyPeerXr", ds.NotifyPeerXr}
    ds.EntityData.Leafs["del-cb"] = types.YLeaf{"DelCb", ds.DelCb}
    ds.EntityData.Leafs["remove-srv"] = types.YLeaf{"RemoveSrv", ds.RemoveSrv}
    ds.EntityData.Leafs["conn-status"] = types.YLeaf{"ConnStatus", ds.ConnStatus}
    return &(ds.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnTs
// conn ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnTs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (connTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnTs) GetEntityData() *types.CommonEntityData {
    connTs.EntityData.YFilter = connTs.YFilter
    connTs.EntityData.YangName = "conn-ts"
    connTs.EntityData.BundleName = "cisco_ios_xr"
    connTs.EntityData.ParentYangName = "ds"
    connTs.EntityData.SegmentPath = "conn-ts"
    connTs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connTs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connTs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connTs.EntityData.Children = make(map[string]types.YChild)
    connTs.EntityData.Leafs = make(map[string]types.YLeaf)
    connTs.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", connTs.Seconds}
    connTs.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", connTs.NanoSeconds}
    return &(connTs.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnCbTs
// conn cb ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnCbTs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (connCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnCbTs) GetEntityData() *types.CommonEntityData {
    connCbTs.EntityData.YFilter = connCbTs.YFilter
    connCbTs.EntityData.YangName = "conn-cb-ts"
    connCbTs.EntityData.BundleName = "cisco_ios_xr"
    connCbTs.EntityData.ParentYangName = "ds"
    connCbTs.EntityData.SegmentPath = "conn-cb-ts"
    connCbTs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connCbTs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connCbTs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connCbTs.EntityData.Children = make(map[string]types.YChild)
    connCbTs.EntityData.Leafs = make(map[string]types.YLeaf)
    connCbTs.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", connCbTs.Seconds}
    connCbTs.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", connCbTs.NanoSeconds}
    return &(connCbTs.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubTs
// pub ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubTs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (pubTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubTs) GetEntityData() *types.CommonEntityData {
    pubTs.EntityData.YFilter = pubTs.YFilter
    pubTs.EntityData.YangName = "pub-ts"
    pubTs.EntityData.BundleName = "cisco_ios_xr"
    pubTs.EntityData.ParentYangName = "ds"
    pubTs.EntityData.SegmentPath = "pub-ts"
    pubTs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pubTs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pubTs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pubTs.EntityData.Children = make(map[string]types.YChild)
    pubTs.EntityData.Leafs = make(map[string]types.YLeaf)
    pubTs.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", pubTs.Seconds}
    pubTs.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", pubTs.NanoSeconds}
    return &(pubTs.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubCbTs
// pub cb ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubCbTs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (pubCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubCbTs) GetEntityData() *types.CommonEntityData {
    pubCbTs.EntityData.YFilter = pubCbTs.YFilter
    pubCbTs.EntityData.YangName = "pub-cb-ts"
    pubCbTs.EntityData.BundleName = "cisco_ios_xr"
    pubCbTs.EntityData.ParentYangName = "ds"
    pubCbTs.EntityData.SegmentPath = "pub-cb-ts"
    pubCbTs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pubCbTs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pubCbTs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pubCbTs.EntityData.Children = make(map[string]types.YChild)
    pubCbTs.EntityData.Leafs = make(map[string]types.YLeaf)
    pubCbTs.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", pubCbTs.Seconds}
    pubCbTs.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", pubCbTs.NanoSeconds}
    return &(pubCbTs.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegTs
// reg ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegTs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (regTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegTs) GetEntityData() *types.CommonEntityData {
    regTs.EntityData.YFilter = regTs.YFilter
    regTs.EntityData.YangName = "reg-ts"
    regTs.EntityData.BundleName = "cisco_ios_xr"
    regTs.EntityData.ParentYangName = "ds"
    regTs.EntityData.SegmentPath = "reg-ts"
    regTs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    regTs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    regTs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    regTs.EntityData.Children = make(map[string]types.YChild)
    regTs.EntityData.Leafs = make(map[string]types.YLeaf)
    regTs.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", regTs.Seconds}
    regTs.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", regTs.NanoSeconds}
    return &(regTs.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegCbTs
// reg cb ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegCbTs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (regCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegCbTs) GetEntityData() *types.CommonEntityData {
    regCbTs.EntityData.YFilter = regCbTs.YFilter
    regCbTs.EntityData.YangName = "reg-cb-ts"
    regCbTs.EntityData.BundleName = "cisco_ios_xr"
    regCbTs.EntityData.ParentYangName = "ds"
    regCbTs.EntityData.SegmentPath = "reg-cb-ts"
    regCbTs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    regCbTs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    regCbTs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    regCbTs.EntityData.Children = make(map[string]types.YChild)
    regCbTs.EntityData.Leafs = make(map[string]types.YLeaf)
    regCbTs.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", regCbTs.Seconds}
    regCbTs.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", regCbTs.NanoSeconds}
    return &(regCbTs.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregTs
// unreg ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregTs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (unregTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregTs) GetEntityData() *types.CommonEntityData {
    unregTs.EntityData.YFilter = unregTs.YFilter
    unregTs.EntityData.YangName = "unreg-ts"
    unregTs.EntityData.BundleName = "cisco_ios_xr"
    unregTs.EntityData.ParentYangName = "ds"
    unregTs.EntityData.SegmentPath = "unreg-ts"
    unregTs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unregTs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unregTs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unregTs.EntityData.Children = make(map[string]types.YChild)
    unregTs.EntityData.Leafs = make(map[string]types.YLeaf)
    unregTs.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", unregTs.Seconds}
    unregTs.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", unregTs.NanoSeconds}
    return &(unregTs.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregCbTs
// unreg cb ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregCbTs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (unregCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregCbTs) GetEntityData() *types.CommonEntityData {
    unregCbTs.EntityData.YFilter = unregCbTs.YFilter
    unregCbTs.EntityData.YangName = "unreg-cb-ts"
    unregCbTs.EntityData.BundleName = "cisco_ios_xr"
    unregCbTs.EntityData.ParentYangName = "ds"
    unregCbTs.EntityData.SegmentPath = "unreg-cb-ts"
    unregCbTs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unregCbTs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unregCbTs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unregCbTs.EntityData.Children = make(map[string]types.YChild)
    unregCbTs.EntityData.Leafs = make(map[string]types.YLeaf)
    unregCbTs.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", unregCbTs.Seconds}
    unregCbTs.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", unregCbTs.NanoSeconds}
    return &(unregCbTs.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DisconnCbTs
// disconn cb ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DisconnCbTs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (disconnCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DisconnCbTs) GetEntityData() *types.CommonEntityData {
    disconnCbTs.EntityData.YFilter = disconnCbTs.YFilter
    disconnCbTs.EntityData.YangName = "disconn-cb-ts"
    disconnCbTs.EntityData.BundleName = "cisco_ios_xr"
    disconnCbTs.EntityData.ParentYangName = "ds"
    disconnCbTs.EntityData.SegmentPath = "disconn-cb-ts"
    disconnCbTs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    disconnCbTs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    disconnCbTs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    disconnCbTs.EntityData.Children = make(map[string]types.YChild)
    disconnCbTs.EntityData.Leafs = make(map[string]types.YLeaf)
    disconnCbTs.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", disconnCbTs.Seconds}
    disconnCbTs.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", disconnCbTs.NanoSeconds}
    return &(disconnCbTs.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyCbTs
// notify cb ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyCbTs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (notifyCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyCbTs) GetEntityData() *types.CommonEntityData {
    notifyCbTs.EntityData.YFilter = notifyCbTs.YFilter
    notifyCbTs.EntityData.YangName = "notify-cb-ts"
    notifyCbTs.EntityData.BundleName = "cisco_ios_xr"
    notifyCbTs.EntityData.ParentYangName = "ds"
    notifyCbTs.EntityData.SegmentPath = "notify-cb-ts"
    notifyCbTs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    notifyCbTs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    notifyCbTs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    notifyCbTs.EntityData.Children = make(map[string]types.YChild)
    notifyCbTs.EntityData.Leafs = make(map[string]types.YLeaf)
    notifyCbTs.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", notifyCbTs.Seconds}
    notifyCbTs.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", notifyCbTs.NanoSeconds}
    return &(notifyCbTs.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DelCbTs
// del cb ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DelCbTs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (delCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DelCbTs) GetEntityData() *types.CommonEntityData {
    delCbTs.EntityData.YFilter = delCbTs.YFilter
    delCbTs.EntityData.YangName = "del-cb-ts"
    delCbTs.EntityData.BundleName = "cisco_ios_xr"
    delCbTs.EntityData.ParentYangName = "ds"
    delCbTs.EntityData.SegmentPath = "del-cb-ts"
    delCbTs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    delCbTs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    delCbTs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    delCbTs.EntityData.Children = make(map[string]types.YChild)
    delCbTs.EntityData.Leafs = make(map[string]types.YLeaf)
    delCbTs.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", delCbTs.Seconds}
    delCbTs.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", delCbTs.NanoSeconds}
    return &(delCbTs.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RemoveSrvTs
// remove srv ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RemoveSrvTs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (removeSrvTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RemoveSrvTs) GetEntityData() *types.CommonEntityData {
    removeSrvTs.EntityData.YFilter = removeSrvTs.YFilter
    removeSrvTs.EntityData.YangName = "remove-srv-ts"
    removeSrvTs.EntityData.BundleName = "cisco_ios_xr"
    removeSrvTs.EntityData.ParentYangName = "ds"
    removeSrvTs.EntityData.SegmentPath = "remove-srv-ts"
    removeSrvTs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    removeSrvTs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    removeSrvTs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    removeSrvTs.EntityData.Children = make(map[string]types.YChild)
    removeSrvTs.EntityData.Leafs = make(map[string]types.YLeaf)
    removeSrvTs.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", removeSrvTs.Seconds}
    removeSrvTs.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", removeSrvTs.NanoSeconds}
    return &(removeSrvTs.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnStatusTs
// conn status ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnStatusTs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (connStatusTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnStatusTs) GetEntityData() *types.CommonEntityData {
    connStatusTs.EntityData.YFilter = connStatusTs.YFilter
    connStatusTs.EntityData.YangName = "conn-status-ts"
    connStatusTs.EntityData.BundleName = "cisco_ios_xr"
    connStatusTs.EntityData.ParentYangName = "ds"
    connStatusTs.EntityData.SegmentPath = "conn-status-ts"
    connStatusTs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connStatusTs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connStatusTs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connStatusTs.EntityData.Children = make(map[string]types.YChild)
    connStatusTs.EntityData.Leafs = make(map[string]types.YLeaf)
    connStatusTs.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", connStatusTs.Seconds}
    connStatusTs.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", connStatusTs.NanoSeconds}
    return &(connStatusTs.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer
// notify peer
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (notifyPeer *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer) GetEntityData() *types.CommonEntityData {
    notifyPeer.EntityData.YFilter = notifyPeer.YFilter
    notifyPeer.EntityData.YangName = "notify-peer"
    notifyPeer.EntityData.BundleName = "cisco_ios_xr"
    notifyPeer.EntityData.ParentYangName = "ds"
    notifyPeer.EntityData.SegmentPath = "notify-peer"
    notifyPeer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    notifyPeer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    notifyPeer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    notifyPeer.EntityData.Children = make(map[string]types.YChild)
    notifyPeer.EntityData.Leafs = make(map[string]types.YLeaf)
    notifyPeer.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", notifyPeer.Seconds}
    notifyPeer.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", notifyPeer.NanoSeconds}
    return &(notifyPeer.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Te
// te
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Te struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // enabled. The type is interface{} with range: 0..255.
    Enabled interface{}

    // conn up. The type is interface{} with range: 0..255.
    ConnUp interface{}

    // te link cb. The type is interface{} with range: 0..255.
    TeLinkCb interface{}

    // te tunnel cb. The type is interface{} with range: 0..255.
    TeTunnelCb interface{}

    // adv sync data. The type is interface{} with range: 0..255.
    AdvSyncData interface{}

    // link purge time on. The type is interface{} with range: 0..255.
    LinkPurgeTimeOn interface{}

    // tunnel purge time on. The type is interface{} with range: 0..255.
    TunnelPurgeTimeOn interface{}

    // has info from te. The type is interface{} with range: 0..255.
    HasInfoFromTe interface{}
}

func (te *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Te) GetEntityData() *types.CommonEntityData {
    te.EntityData.YFilter = te.YFilter
    te.EntityData.YangName = "te"
    te.EntityData.BundleName = "cisco_ios_xr"
    te.EntityData.ParentYangName = "isis-nsr-infra"
    te.EntityData.SegmentPath = "te"
    te.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    te.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    te.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    te.EntityData.Children = make(map[string]types.YChild)
    te.EntityData.Leafs = make(map[string]types.YLeaf)
    te.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", te.Enabled}
    te.EntityData.Leafs["conn-up"] = types.YLeaf{"ConnUp", te.ConnUp}
    te.EntityData.Leafs["te-link-cb"] = types.YLeaf{"TeLinkCb", te.TeLinkCb}
    te.EntityData.Leafs["te-tunnel-cb"] = types.YLeaf{"TeTunnelCb", te.TeTunnelCb}
    te.EntityData.Leafs["adv-sync-data"] = types.YLeaf{"AdvSyncData", te.AdvSyncData}
    te.EntityData.Leafs["link-purge-time-on"] = types.YLeaf{"LinkPurgeTimeOn", te.LinkPurgeTimeOn}
    te.EntityData.Leafs["tunnel-purge-time-on"] = types.YLeaf{"TunnelPurgeTimeOn", te.TunnelPurgeTimeOn}
    te.EntityData.Leafs["has-info-from-te"] = types.YLeaf{"HasInfoFromTe", te.HasInfoFromTe}
    return &(te.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd
// ncd
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // vm idx. The type is interface{} with range: 0..255.
    VmIdx interface{}

    // conn up. The type is bool.
    ConnUp interface{}

    // endp hdl. The type is interface{} with range: 0..255.
    EndpHdl interface{}

    // chksum. The type is interface{} with range: 0..65535.
    Chksum interface{}

    // send seqnum. The type is interface{} with range: 0..4294967295.
    SendSeqnum interface{}

    // recv cnt. The type is interface{} with range: 0..4294967295.
    RecvCnt interface{}
}

func (ncd *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd) GetEntityData() *types.CommonEntityData {
    ncd.EntityData.YFilter = ncd.YFilter
    ncd.EntityData.YangName = "ncd"
    ncd.EntityData.BundleName = "cisco_ios_xr"
    ncd.EntityData.ParentYangName = "isis-nsr-infra"
    ncd.EntityData.SegmentPath = "ncd"
    ncd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ncd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ncd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ncd.EntityData.Children = make(map[string]types.YChild)
    ncd.EntityData.Leafs = make(map[string]types.YLeaf)
    ncd.EntityData.Leafs["vm-idx"] = types.YLeaf{"VmIdx", ncd.VmIdx}
    ncd.EntityData.Leafs["conn-up"] = types.YLeaf{"ConnUp", ncd.ConnUp}
    ncd.EntityData.Leafs["endp-hdl"] = types.YLeaf{"EndpHdl", ncd.EndpHdl}
    ncd.EntityData.Leafs["chksum"] = types.YLeaf{"Chksum", ncd.Chksum}
    ncd.EntityData.Leafs["send-seqnum"] = types.YLeaf{"SendSeqnum", ncd.SendSeqnum}
    ncd.EntityData.Leafs["recv-cnt"] = types.YLeaf{"RecvCnt", ncd.RecvCnt}
    return &(ncd.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb
// nii idb
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // exist. The type is bool.
    Exist interface{}

    // brought up. The type is bool.
    BroughtUp interface{}

    // retry timer. The type is bool.
    RetryTimer interface{}

    // running. The type is bool.
    Running interface{}

    // has adj. The type is bool.
    HasAdj interface{}
}

func (niiIdb *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb) GetEntityData() *types.CommonEntityData {
    niiIdb.EntityData.YFilter = niiIdb.YFilter
    niiIdb.EntityData.YangName = "nii-idb"
    niiIdb.EntityData.BundleName = "cisco_ios_xr"
    niiIdb.EntityData.ParentYangName = "isis-nsr-infra"
    niiIdb.EntityData.SegmentPath = "nii-idb"
    niiIdb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    niiIdb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    niiIdb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    niiIdb.EntityData.Children = make(map[string]types.YChild)
    niiIdb.EntityData.Leafs = make(map[string]types.YLeaf)
    niiIdb.EntityData.Leafs["exist"] = types.YLeaf{"Exist", niiIdb.Exist}
    niiIdb.EntityData.Leafs["brought-up"] = types.YLeaf{"BroughtUp", niiIdb.BroughtUp}
    niiIdb.EntityData.Leafs["retry-timer"] = types.YLeaf{"RetryTimer", niiIdb.RetryTimer}
    niiIdb.EntityData.Leafs["running"] = types.YLeaf{"Running", niiIdb.Running}
    niiIdb.EntityData.Leafs["has-adj"] = types.YLeaf{"HasAdj", niiIdb.HasAdj}
    return &(niiIdb.EntityData)
}

// Isis_Instances_Instance_Interfaces
// Interface table
type Isis_Instances_Instance_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information about one IS-IS interface. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_.
    Interface_ []Isis_Instances_Instance_Interfaces_Interface
}

func (interfaces *Isis_Instances_Instance_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "cisco_ios_xr"
    interfaces.EntityData.ParentYangName = "instance"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaces.EntityData.Children = make(map[string]types.YChild)
    interfaces.EntityData.Children["interface"] = types.YChild{"Interface_", nil}
    for i := range interfaces.Interface_ {
        interfaces.EntityData.Children[types.GetSegmentPath(&interfaces.Interface_[i])] = types.YChild{"Interface_", &interfaces.Interface_[i]}
    }
    interfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(interfaces.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface
// Information about one IS-IS interface
type Isis_Instances_Instance_Interfaces_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // Configured circuit type for the interface. The type is IsisLevels.
    ConfiguredCircuitType interface{}

    // Interface mesh group. The type is interface{} with range: 0..4294967295.
    MeshGroup interface{}

    // IS-type of the router. The type is IsisLevels.
    IsType interface{}

    // ISIS NSR Interface. The type is bool.
    NsrIntf interface{}

    // Configured interface status.
    ConfiguredStatus Isis_Instances_Instance_Interfaces_Interface_ConfiguredStatus

    // Information about the interface status and its data.
    InterfaceStatusAndData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData
}

func (self *Isis_Instances_Instance_Interfaces_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interfaces"
    self.EntityData.SegmentPath = "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Children["configured-status"] = types.YChild{"ConfiguredStatus", &self.ConfiguredStatus}
    self.EntityData.Children["interface-status-and-data"] = types.YChild{"InterfaceStatusAndData", &self.InterfaceStatusAndData}
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", self.InterfaceName}
    self.EntityData.Leafs["configured-circuit-type"] = types.YLeaf{"ConfiguredCircuitType", self.ConfiguredCircuitType}
    self.EntityData.Leafs["mesh-group"] = types.YLeaf{"MeshGroup", self.MeshGroup}
    self.EntityData.Leafs["is-type"] = types.YLeaf{"IsType", self.IsType}
    self.EntityData.Leafs["nsr-intf"] = types.YLeaf{"NsrIntf", self.NsrIntf}
    return &(self.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_ConfiguredStatus
// Configured interface status
type Isis_Instances_Instance_Interfaces_Interface_ConfiguredStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configured adjacency formation status. The type is bool.
    AdjacencyFormStatus interface{}

    // Configured prefix advertisement status. The type is bool.
    AdvPrefixStatus interface{}
}

func (configuredStatus *Isis_Instances_Instance_Interfaces_Interface_ConfiguredStatus) GetEntityData() *types.CommonEntityData {
    configuredStatus.EntityData.YFilter = configuredStatus.YFilter
    configuredStatus.EntityData.YangName = "configured-status"
    configuredStatus.EntityData.BundleName = "cisco_ios_xr"
    configuredStatus.EntityData.ParentYangName = "interface"
    configuredStatus.EntityData.SegmentPath = "configured-status"
    configuredStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    configuredStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    configuredStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    configuredStatus.EntityData.Children = make(map[string]types.YChild)
    configuredStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    configuredStatus.EntityData.Leafs["adjacency-form-status"] = types.YLeaf{"AdjacencyFormStatus", configuredStatus.AdjacencyFormStatus}
    configuredStatus.EntityData.Leafs["adv-prefix-status"] = types.YLeaf{"AdvPrefixStatus", configuredStatus.AdvPrefixStatus}
    return &(configuredStatus.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData
// Information about the interface status and its
// data
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisEnabled.
    Status interface{}

    // The interface state if disabled.
    Disabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Disabled

    // The interface state if enabled.
    Enabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled
}

func (interfaceStatusAndData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData) GetEntityData() *types.CommonEntityData {
    interfaceStatusAndData.EntityData.YFilter = interfaceStatusAndData.YFilter
    interfaceStatusAndData.EntityData.YangName = "interface-status-and-data"
    interfaceStatusAndData.EntityData.BundleName = "cisco_ios_xr"
    interfaceStatusAndData.EntityData.ParentYangName = "interface"
    interfaceStatusAndData.EntityData.SegmentPath = "interface-status-and-data"
    interfaceStatusAndData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStatusAndData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStatusAndData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStatusAndData.EntityData.Children = make(map[string]types.YChild)
    interfaceStatusAndData.EntityData.Children["disabled"] = types.YChild{"Disabled", &interfaceStatusAndData.Disabled}
    interfaceStatusAndData.EntityData.Children["enabled"] = types.YChild{"Enabled", &interfaceStatusAndData.Enabled}
    interfaceStatusAndData.EntityData.Leafs = make(map[string]types.YLeaf)
    interfaceStatusAndData.EntityData.Leafs["status"] = types.YLeaf{"Status", interfaceStatusAndData.Status}
    return &(interfaceStatusAndData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Disabled
// The interface state if disabled
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Disabled struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the interface is disabled. The type is IsisIfDisabledReason.
    ReasonCode interface{}
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Disabled) GetEntityData() *types.CommonEntityData {
    disabled.EntityData.YFilter = disabled.YFilter
    disabled.EntityData.YangName = "disabled"
    disabled.EntityData.BundleName = "cisco_ios_xr"
    disabled.EntityData.ParentYangName = "interface-status-and-data"
    disabled.EntityData.SegmentPath = "disabled"
    disabled.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    disabled.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    disabled.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    disabled.EntityData.Children = make(map[string]types.YChild)
    disabled.EntityData.Leafs = make(map[string]types.YLeaf)
    disabled.EntityData.Leafs["reason-code"] = types.YLeaf{"ReasonCode", disabled.ReasonCode}
    return &(disabled.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled
// The interface state if enabled
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Media type of the interface. The type is IsisMediaClass.
    InterfaceMediaType interface{}

    // Enabled Circuit type of the interface. The type is IsisLevels.
    EnabledCircuitType interface{}

    // Local Circuit Number of the interface. The type is interface{} with range:
    // 0..255.
    LocalCircuitNumber interface{}

    // Rsi Srlg Registered. The type is bool.
    RsiSrlgRegistered interface{}

    // Bandwidth of the interface. The type is interface{} with range:
    // 0..4294967295.
    Bandwidth interface{}

    // Interface's Adjacency Formation status.
    AdjacencyFormStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus

    // Interface's Prefix Advertisement status.
    AdvPrefixStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus

    // Data for an active P2P interface, NULL if not active or P2P.
    P2PData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_P2PData

    // The BFD data for the given interface.
    BfdData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_BfdData

    // Interface data specific to CLNS I/O services.
    ClnsData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData

    // Underlying interface list for bundle interfaces. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface.
    UnderlyingInterface []Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface

    // Array of area information for an active interface. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData.
    PerAreaData []Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData

    // Array of topology information. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData.
    PerTopologyData []Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData

    // Array of address family information. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData.
    PerAddressFamilyData []Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData
}

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled) GetEntityData() *types.CommonEntityData {
    enabled.EntityData.YFilter = enabled.YFilter
    enabled.EntityData.YangName = "enabled"
    enabled.EntityData.BundleName = "cisco_ios_xr"
    enabled.EntityData.ParentYangName = "interface-status-and-data"
    enabled.EntityData.SegmentPath = "enabled"
    enabled.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    enabled.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    enabled.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    enabled.EntityData.Children = make(map[string]types.YChild)
    enabled.EntityData.Children["adjacency-form-status"] = types.YChild{"AdjacencyFormStatus", &enabled.AdjacencyFormStatus}
    enabled.EntityData.Children["adv-prefix-status"] = types.YChild{"AdvPrefixStatus", &enabled.AdvPrefixStatus}
    enabled.EntityData.Children["p2p-data"] = types.YChild{"P2PData", &enabled.P2PData}
    enabled.EntityData.Children["bfd-data"] = types.YChild{"BfdData", &enabled.BfdData}
    enabled.EntityData.Children["clns-data"] = types.YChild{"ClnsData", &enabled.ClnsData}
    enabled.EntityData.Children["underlying-interface"] = types.YChild{"UnderlyingInterface", nil}
    for i := range enabled.UnderlyingInterface {
        enabled.EntityData.Children[types.GetSegmentPath(&enabled.UnderlyingInterface[i])] = types.YChild{"UnderlyingInterface", &enabled.UnderlyingInterface[i]}
    }
    enabled.EntityData.Children["per-area-data"] = types.YChild{"PerAreaData", nil}
    for i := range enabled.PerAreaData {
        enabled.EntityData.Children[types.GetSegmentPath(&enabled.PerAreaData[i])] = types.YChild{"PerAreaData", &enabled.PerAreaData[i]}
    }
    enabled.EntityData.Children["per-topology-data"] = types.YChild{"PerTopologyData", nil}
    for i := range enabled.PerTopologyData {
        enabled.EntityData.Children[types.GetSegmentPath(&enabled.PerTopologyData[i])] = types.YChild{"PerTopologyData", &enabled.PerTopologyData[i]}
    }
    enabled.EntityData.Children["per-address-family-data"] = types.YChild{"PerAddressFamilyData", nil}
    for i := range enabled.PerAddressFamilyData {
        enabled.EntityData.Children[types.GetSegmentPath(&enabled.PerAddressFamilyData[i])] = types.YChild{"PerAddressFamilyData", &enabled.PerAddressFamilyData[i]}
    }
    enabled.EntityData.Leafs = make(map[string]types.YLeaf)
    enabled.EntityData.Leafs["interface-media-type"] = types.YLeaf{"InterfaceMediaType", enabled.InterfaceMediaType}
    enabled.EntityData.Leafs["enabled-circuit-type"] = types.YLeaf{"EnabledCircuitType", enabled.EnabledCircuitType}
    enabled.EntityData.Leafs["local-circuit-number"] = types.YLeaf{"LocalCircuitNumber", enabled.LocalCircuitNumber}
    enabled.EntityData.Leafs["rsi-srlg-registered"] = types.YLeaf{"RsiSrlgRegistered", enabled.RsiSrlgRegistered}
    enabled.EntityData.Leafs["bandwidth"] = types.YLeaf{"Bandwidth", enabled.Bandwidth}
    return &(enabled.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus
// Interface's Adjacency Formation status
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisEnabled.
    Status interface{}

    // Disabled info for the adjacency formation status.
    Disabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus_Disabled
}

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus) GetEntityData() *types.CommonEntityData {
    adjacencyFormStatus.EntityData.YFilter = adjacencyFormStatus.YFilter
    adjacencyFormStatus.EntityData.YangName = "adjacency-form-status"
    adjacencyFormStatus.EntityData.BundleName = "cisco_ios_xr"
    adjacencyFormStatus.EntityData.ParentYangName = "enabled"
    adjacencyFormStatus.EntityData.SegmentPath = "adjacency-form-status"
    adjacencyFormStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyFormStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyFormStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyFormStatus.EntityData.Children = make(map[string]types.YChild)
    adjacencyFormStatus.EntityData.Children["disabled"] = types.YChild{"Disabled", &adjacencyFormStatus.Disabled}
    adjacencyFormStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencyFormStatus.EntityData.Leafs["status"] = types.YLeaf{"Status", adjacencyFormStatus.Status}
    return &(adjacencyFormStatus.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus_Disabled
// Disabled info for the adjacency formation status
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus_Disabled struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the interface is not able to form adjacencies. The type is
    // IsisIfAdjFormDisabledReason.
    ReasonCode interface{}
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus_Disabled) GetEntityData() *types.CommonEntityData {
    disabled.EntityData.YFilter = disabled.YFilter
    disabled.EntityData.YangName = "disabled"
    disabled.EntityData.BundleName = "cisco_ios_xr"
    disabled.EntityData.ParentYangName = "adjacency-form-status"
    disabled.EntityData.SegmentPath = "disabled"
    disabled.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    disabled.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    disabled.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    disabled.EntityData.Children = make(map[string]types.YChild)
    disabled.EntityData.Leafs = make(map[string]types.YLeaf)
    disabled.EntityData.Leafs["reason-code"] = types.YLeaf{"ReasonCode", disabled.ReasonCode}
    return &(disabled.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus
// Interface's Prefix Advertisement status
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisEnabled.
    Status interface{}

    // Disabled info for the prefix advertisement status.
    Disabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus_Disabled
}

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus) GetEntityData() *types.CommonEntityData {
    advPrefixStatus.EntityData.YFilter = advPrefixStatus.YFilter
    advPrefixStatus.EntityData.YangName = "adv-prefix-status"
    advPrefixStatus.EntityData.BundleName = "cisco_ios_xr"
    advPrefixStatus.EntityData.ParentYangName = "enabled"
    advPrefixStatus.EntityData.SegmentPath = "adv-prefix-status"
    advPrefixStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advPrefixStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advPrefixStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advPrefixStatus.EntityData.Children = make(map[string]types.YChild)
    advPrefixStatus.EntityData.Children["disabled"] = types.YChild{"Disabled", &advPrefixStatus.Disabled}
    advPrefixStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    advPrefixStatus.EntityData.Leafs["status"] = types.YLeaf{"Status", advPrefixStatus.Status}
    return &(advPrefixStatus.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus_Disabled
// Disabled info for the prefix advertisement
// status
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus_Disabled struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the interface is not able to advertise prefixes. The type is
    // IsisIfAdvPrefixDisabledReason.
    ReasonCode interface{}
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus_Disabled) GetEntityData() *types.CommonEntityData {
    disabled.EntityData.YFilter = disabled.YFilter
    disabled.EntityData.YangName = "disabled"
    disabled.EntityData.BundleName = "cisco_ios_xr"
    disabled.EntityData.ParentYangName = "adv-prefix-status"
    disabled.EntityData.SegmentPath = "disabled"
    disabled.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    disabled.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    disabled.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    disabled.EntityData.Children = make(map[string]types.YChild)
    disabled.EntityData.Leafs = make(map[string]types.YLeaf)
    disabled.EntityData.Leafs["reason-code"] = types.YLeaf{"ReasonCode", disabled.ReasonCode}
    return &(disabled.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_P2PData
// Data for an active P2P interface, NULL if not
// active or P2P
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_P2PData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in ms before the next IIH can be sent. The type is interface{} with
    // range: 0..4294967295.
    TimeUntilNextIih interface{}

    // No. of LSPs queued to be retransmitted. The type is interface{} with range:
    // 0..4294967295.
    RetransmitLspQueueSize interface{}

    // Time in ms until the next scheduled LSP is retransmitted. The type is
    // interface{} with range: 0..4294967295.
    RetransmitLspInterval interface{}

    // Extended Circuit Number valid for a P2P interface. The type is interface{}
    // with range: 0..4294967295.
    ExtendedCircuitNumber interface{}
}

func (p2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_P2PData) GetEntityData() *types.CommonEntityData {
    p2PData.EntityData.YFilter = p2PData.YFilter
    p2PData.EntityData.YangName = "p2p-data"
    p2PData.EntityData.BundleName = "cisco_ios_xr"
    p2PData.EntityData.ParentYangName = "enabled"
    p2PData.EntityData.SegmentPath = "p2p-data"
    p2PData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    p2PData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    p2PData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    p2PData.EntityData.Children = make(map[string]types.YChild)
    p2PData.EntityData.Leafs = make(map[string]types.YLeaf)
    p2PData.EntityData.Leafs["time-until-next-iih"] = types.YLeaf{"TimeUntilNextIih", p2PData.TimeUntilNextIih}
    p2PData.EntityData.Leafs["retransmit-lsp-queue-size"] = types.YLeaf{"RetransmitLspQueueSize", p2PData.RetransmitLspQueueSize}
    p2PData.EntityData.Leafs["retransmit-lsp-interval"] = types.YLeaf{"RetransmitLspInterval", p2PData.RetransmitLspInterval}
    p2PData.EntityData.Leafs["extended-circuit-number"] = types.YLeaf{"ExtendedCircuitNumber", p2PData.ExtendedCircuitNumber}
    return &(p2PData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_BfdData
// The BFD data for the given interface
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_BfdData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 BFD enabled status. The type is bool.
    Enabled interface{}

    // IPv6 BFD enabled status. The type is bool.
    Ipv6Enabled interface{}

    // BFD hello minimum interval in milliseconds. The type is interface{} with
    // range: 0..4294967295. Units are millisecond.
    Interval interface{}

    // BFD hello multiplier. The type is interface{} with range: 0..4294967295.
    Multiplier interface{}
}

func (bfdData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_BfdData) GetEntityData() *types.CommonEntityData {
    bfdData.EntityData.YFilter = bfdData.YFilter
    bfdData.EntityData.YangName = "bfd-data"
    bfdData.EntityData.BundleName = "cisco_ios_xr"
    bfdData.EntityData.ParentYangName = "enabled"
    bfdData.EntityData.SegmentPath = "bfd-data"
    bfdData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfdData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfdData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfdData.EntityData.Children = make(map[string]types.YChild)
    bfdData.EntityData.Leafs = make(map[string]types.YLeaf)
    bfdData.EntityData.Leafs["enabled"] = types.YLeaf{"Enabled", bfdData.Enabled}
    bfdData.EntityData.Leafs["ipv6-enabled"] = types.YLeaf{"Ipv6Enabled", bfdData.Ipv6Enabled}
    bfdData.EntityData.Leafs["interval"] = types.YLeaf{"Interval", bfdData.Interval}
    bfdData.EntityData.Leafs["multiplier"] = types.YLeaf{"Multiplier", bfdData.Multiplier}
    return &(bfdData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData
// Interface data specific to CLNS I/O services
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time until next LSP may be sent (ms). The type is interface{} with range:
    // 0..4294967295.
    TimeUntilNextLsp interface{}

    // TRUE if an LSP transmission has been requested. The type is bool.
    LspTransmitRequestedFlag interface{}

    // TRUE if an LSP transmission has been sent, indicates
    // LastLSPLevelTransmitted and LastLSP_IDTransmitted valid. The type is bool.
    LspTransmittedFlag interface{}

    // Number of LSPs that can be sent back to back in the current window without
    // exceeding the pacing limit. The type is interface{} with range:
    // 0..4294967295.
    LspTxmitdB2BLimit interface{}

    // Time im msecs indicating the end of the window in which the 'back to back
    // lsps to be sent' counter applies. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    LspTxmtB2BMsecs interface{}

    // Level of the Last LSP Transmitted. The type is IsisLevel.
    LastLspLevelTransmitted interface{}

    // Last LSP ID Transmitted. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}\\-[a-fA-F0-9]{2}'.
    LastLspIdTransmitted interface{}

    // Is CLNS protcol up or if not, the reason why it is not up.
    ClnsStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus

    // A valid MTU or the reason for the MTU being invalid.
    MtuInfo Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo

    // SNPA state.
    SnpaState Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState

    // Media Specific CLNS state.
    MediaSpecificState Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState
}

func (clnsData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData) GetEntityData() *types.CommonEntityData {
    clnsData.EntityData.YFilter = clnsData.YFilter
    clnsData.EntityData.YangName = "clns-data"
    clnsData.EntityData.BundleName = "cisco_ios_xr"
    clnsData.EntityData.ParentYangName = "enabled"
    clnsData.EntityData.SegmentPath = "clns-data"
    clnsData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clnsData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clnsData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clnsData.EntityData.Children = make(map[string]types.YChild)
    clnsData.EntityData.Children["clns-status"] = types.YChild{"ClnsStatus", &clnsData.ClnsStatus}
    clnsData.EntityData.Children["mtu-info"] = types.YChild{"MtuInfo", &clnsData.MtuInfo}
    clnsData.EntityData.Children["snpa-state"] = types.YChild{"SnpaState", &clnsData.SnpaState}
    clnsData.EntityData.Children["media-specific-state"] = types.YChild{"MediaSpecificState", &clnsData.MediaSpecificState}
    clnsData.EntityData.Leafs = make(map[string]types.YLeaf)
    clnsData.EntityData.Leafs["time-until-next-lsp"] = types.YLeaf{"TimeUntilNextLsp", clnsData.TimeUntilNextLsp}
    clnsData.EntityData.Leafs["lsp-transmit-requested-flag"] = types.YLeaf{"LspTransmitRequestedFlag", clnsData.LspTransmitRequestedFlag}
    clnsData.EntityData.Leafs["lsp-transmitted-flag"] = types.YLeaf{"LspTransmittedFlag", clnsData.LspTransmittedFlag}
    clnsData.EntityData.Leafs["lsp-txmitd-b2b-limit"] = types.YLeaf{"LspTxmitdB2BLimit", clnsData.LspTxmitdB2BLimit}
    clnsData.EntityData.Leafs["lsp-txmt-b2b-msecs"] = types.YLeaf{"LspTxmtB2BMsecs", clnsData.LspTxmtB2BMsecs}
    clnsData.EntityData.Leafs["last-lsp-level-transmitted"] = types.YLeaf{"LastLspLevelTransmitted", clnsData.LastLspLevelTransmitted}
    clnsData.EntityData.Leafs["last-lsp-id-transmitted"] = types.YLeaf{"LastLspIdTransmitted", clnsData.LastLspIdTransmitted}
    return &(clnsData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus
// Is CLNS protcol up or if not, the reason why it
// is not up
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisUp.
    Status interface{}

    // State describing why CLNS is down.
    ClnsDownInfo Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus_ClnsDownInfo
}

func (clnsStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus) GetEntityData() *types.CommonEntityData {
    clnsStatus.EntityData.YFilter = clnsStatus.YFilter
    clnsStatus.EntityData.YangName = "clns-status"
    clnsStatus.EntityData.BundleName = "cisco_ios_xr"
    clnsStatus.EntityData.ParentYangName = "clns-data"
    clnsStatus.EntityData.SegmentPath = "clns-status"
    clnsStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clnsStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clnsStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clnsStatus.EntityData.Children = make(map[string]types.YChild)
    clnsStatus.EntityData.Children["clns-down-info"] = types.YChild{"ClnsDownInfo", &clnsStatus.ClnsDownInfo}
    clnsStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    clnsStatus.EntityData.Leafs["status"] = types.YLeaf{"Status", clnsStatus.Status}
    return &(clnsStatus.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus_ClnsDownInfo
// State describing why CLNS is down
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus_ClnsDownInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why CLNS is down. The type is IsisIfClnsProtoDownReason.
    ReasonCode interface{}
}

func (clnsDownInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus_ClnsDownInfo) GetEntityData() *types.CommonEntityData {
    clnsDownInfo.EntityData.YFilter = clnsDownInfo.YFilter
    clnsDownInfo.EntityData.YangName = "clns-down-info"
    clnsDownInfo.EntityData.BundleName = "cisco_ios_xr"
    clnsDownInfo.EntityData.ParentYangName = "clns-status"
    clnsDownInfo.EntityData.SegmentPath = "clns-down-info"
    clnsDownInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clnsDownInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clnsDownInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clnsDownInfo.EntityData.Children = make(map[string]types.YChild)
    clnsDownInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    clnsDownInfo.EntityData.Leafs["reason-code"] = types.YLeaf{"ReasonCode", clnsDownInfo.ReasonCode}
    return &(clnsDownInfo.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo
// A valid MTU or the reason for the MTU being
// invalid
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisValid.
    Status interface{}

    // Valid MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Information pertaining to the invalid CLNS MTU.
    Invalid Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo_Invalid
}

func (mtuInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo) GetEntityData() *types.CommonEntityData {
    mtuInfo.EntityData.YFilter = mtuInfo.YFilter
    mtuInfo.EntityData.YangName = "mtu-info"
    mtuInfo.EntityData.BundleName = "cisco_ios_xr"
    mtuInfo.EntityData.ParentYangName = "clns-data"
    mtuInfo.EntityData.SegmentPath = "mtu-info"
    mtuInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtuInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtuInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtuInfo.EntityData.Children = make(map[string]types.YChild)
    mtuInfo.EntityData.Children["invalid"] = types.YChild{"Invalid", &mtuInfo.Invalid}
    mtuInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    mtuInfo.EntityData.Leafs["status"] = types.YLeaf{"Status", mtuInfo.Status}
    mtuInfo.EntityData.Leafs["mtu"] = types.YLeaf{"Mtu", mtuInfo.Mtu}
    return &(mtuInfo.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo_Invalid
// Information pertaining to the invalid CLNS MTU
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo_Invalid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the MTU is invalid. The type is IsisIfClnsMtuInvalidReason.
    ReasonCode interface{}
}

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo_Invalid) GetEntityData() *types.CommonEntityData {
    invalid.EntityData.YFilter = invalid.YFilter
    invalid.EntityData.YangName = "invalid"
    invalid.EntityData.BundleName = "cisco_ios_xr"
    invalid.EntityData.ParentYangName = "mtu-info"
    invalid.EntityData.SegmentPath = "invalid"
    invalid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invalid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invalid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invalid.EntityData.Children = make(map[string]types.YChild)
    invalid.EntityData.Leafs = make(map[string]types.YLeaf)
    invalid.EntityData.Leafs["reason-code"] = types.YLeaf{"ReasonCode", invalid.ReasonCode}
    return &(invalid.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState
// SNPA state
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisKnown.
    Status interface{}

    // Information pertaining to the unknown SNPA state.
    Unknown Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Unknown

    // Information pertaining to the known SNPA state.
    Known Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Known
}

func (snpaState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState) GetEntityData() *types.CommonEntityData {
    snpaState.EntityData.YFilter = snpaState.YFilter
    snpaState.EntityData.YangName = "snpa-state"
    snpaState.EntityData.BundleName = "cisco_ios_xr"
    snpaState.EntityData.ParentYangName = "clns-data"
    snpaState.EntityData.SegmentPath = "snpa-state"
    snpaState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snpaState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snpaState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snpaState.EntityData.Children = make(map[string]types.YChild)
    snpaState.EntityData.Children["unknown"] = types.YChild{"Unknown", &snpaState.Unknown}
    snpaState.EntityData.Children["known"] = types.YChild{"Known", &snpaState.Known}
    snpaState.EntityData.Leafs = make(map[string]types.YLeaf)
    snpaState.EntityData.Leafs["status"] = types.YLeaf{"Status", snpaState.Status}
    return &(snpaState.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Unknown
// Information pertaining to the unknown SNPA state
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Unknown struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the SNPA is unknown. The type is IsisIfClnsSnpaUnknownReason.
    ReasonCode interface{}
}

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Unknown) GetEntityData() *types.CommonEntityData {
    unknown.EntityData.YFilter = unknown.YFilter
    unknown.EntityData.YangName = "unknown"
    unknown.EntityData.BundleName = "cisco_ios_xr"
    unknown.EntityData.ParentYangName = "snpa-state"
    unknown.EntityData.SegmentPath = "unknown"
    unknown.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknown.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknown.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknown.EntityData.Children = make(map[string]types.YChild)
    unknown.EntityData.Leafs = make(map[string]types.YLeaf)
    unknown.EntityData.Leafs["reason-code"] = types.YLeaf{"ReasonCode", unknown.ReasonCode}
    return &(unknown.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Known
// Information pertaining to the known SNPA state
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Known struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Valid SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    Snpa interface{}
}

func (known *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Known) GetEntityData() *types.CommonEntityData {
    known.EntityData.YFilter = known.YFilter
    known.EntityData.YangName = "known"
    known.EntityData.BundleName = "cisco_ios_xr"
    known.EntityData.ParentYangName = "snpa-state"
    known.EntityData.SegmentPath = "known"
    known.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    known.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    known.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    known.EntityData.Children = make(map[string]types.YChild)
    known.EntityData.Leafs = make(map[string]types.YLeaf)
    known.EntityData.Leafs["snpa"] = types.YLeaf{"Snpa", known.Snpa}
    return &(known.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState
// Media Specific CLNS state
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // CLNSMediaType. The type is IsisMediaClass.
    ClnsMediaType interface{}

    // LAN state.
    ClnsLanData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData

    // Point-to-point state.
    ClnsP2PData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData
}

func (mediaSpecificState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState) GetEntityData() *types.CommonEntityData {
    mediaSpecificState.EntityData.YFilter = mediaSpecificState.YFilter
    mediaSpecificState.EntityData.YangName = "media-specific-state"
    mediaSpecificState.EntityData.BundleName = "cisco_ios_xr"
    mediaSpecificState.EntityData.ParentYangName = "clns-data"
    mediaSpecificState.EntityData.SegmentPath = "media-specific-state"
    mediaSpecificState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mediaSpecificState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mediaSpecificState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mediaSpecificState.EntityData.Children = make(map[string]types.YChild)
    mediaSpecificState.EntityData.Children["clns-lan-data"] = types.YChild{"ClnsLanData", &mediaSpecificState.ClnsLanData}
    mediaSpecificState.EntityData.Children["clns-p2p-data"] = types.YChild{"ClnsP2PData", &mediaSpecificState.ClnsP2PData}
    mediaSpecificState.EntityData.Leafs = make(map[string]types.YLeaf)
    mediaSpecificState.EntityData.Leafs["clns-media-type"] = types.YLeaf{"ClnsMediaType", mediaSpecificState.ClnsMediaType}
    return &(mediaSpecificState.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData
// LAN state
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of per area CLNS data. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData.
    PerAreaData []Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData
}

func (clnsLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData) GetEntityData() *types.CommonEntityData {
    clnsLanData.EntityData.YFilter = clnsLanData.YFilter
    clnsLanData.EntityData.YangName = "clns-lan-data"
    clnsLanData.EntityData.BundleName = "cisco_ios_xr"
    clnsLanData.EntityData.ParentYangName = "media-specific-state"
    clnsLanData.EntityData.SegmentPath = "clns-lan-data"
    clnsLanData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clnsLanData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clnsLanData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clnsLanData.EntityData.Children = make(map[string]types.YChild)
    clnsLanData.EntityData.Children["per-area-data"] = types.YChild{"PerAreaData", nil}
    for i := range clnsLanData.PerAreaData {
        clnsLanData.EntityData.Children[types.GetSegmentPath(&clnsLanData.PerAreaData[i])] = types.YChild{"PerAreaData", &clnsLanData.PerAreaData[i]}
    }
    clnsLanData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(clnsLanData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData
// Array of per area CLNS data
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Level of the area. The type is IsisLevel.
    Level interface{}

    // Multicast group membership status.
    MulticastStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus
}

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData) GetEntityData() *types.CommonEntityData {
    perAreaData.EntityData.YFilter = perAreaData.YFilter
    perAreaData.EntityData.YangName = "per-area-data"
    perAreaData.EntityData.BundleName = "cisco_ios_xr"
    perAreaData.EntityData.ParentYangName = "clns-lan-data"
    perAreaData.EntityData.SegmentPath = "per-area-data"
    perAreaData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perAreaData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perAreaData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perAreaData.EntityData.Children = make(map[string]types.YChild)
    perAreaData.EntityData.Children["multicast-status"] = types.YChild{"MulticastStatus", &perAreaData.MulticastStatus}
    perAreaData.EntityData.Leafs = make(map[string]types.YLeaf)
    perAreaData.EntityData.Leafs["level"] = types.YLeaf{"Level", perAreaData.Level}
    return &(perAreaData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus
// Multicast group membership status
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisValid.
    Status interface{}

    // Information pertaining to the invalid multicast status.
    Invalid Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus_Invalid
}

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus) GetEntityData() *types.CommonEntityData {
    multicastStatus.EntityData.YFilter = multicastStatus.YFilter
    multicastStatus.EntityData.YangName = "multicast-status"
    multicastStatus.EntityData.BundleName = "cisco_ios_xr"
    multicastStatus.EntityData.ParentYangName = "per-area-data"
    multicastStatus.EntityData.SegmentPath = "multicast-status"
    multicastStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastStatus.EntityData.Children = make(map[string]types.YChild)
    multicastStatus.EntityData.Children["invalid"] = types.YChild{"Invalid", &multicastStatus.Invalid}
    multicastStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    multicastStatus.EntityData.Leafs["status"] = types.YLeaf{"Status", multicastStatus.Status}
    return &(multicastStatus.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus_Invalid
// Information pertaining to the invalid multicast
// status
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus_Invalid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the multicast status is invalid. The type is
    // IsisIfMcastInvalidReason.
    ReasonCode interface{}
}

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus_Invalid) GetEntityData() *types.CommonEntityData {
    invalid.EntityData.YFilter = invalid.YFilter
    invalid.EntityData.YangName = "invalid"
    invalid.EntityData.BundleName = "cisco_ios_xr"
    invalid.EntityData.ParentYangName = "multicast-status"
    invalid.EntityData.SegmentPath = "invalid"
    invalid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invalid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invalid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invalid.EntityData.Children = make(map[string]types.YChild)
    invalid.EntityData.Leafs = make(map[string]types.YLeaf)
    invalid.EntityData.Leafs["reason-code"] = types.YLeaf{"ReasonCode", invalid.ReasonCode}
    return &(invalid.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData
// Point-to-point state
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Point-to-point over LAN data.
    P2POverLanData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData
}

func (clnsP2PData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData) GetEntityData() *types.CommonEntityData {
    clnsP2PData.EntityData.YFilter = clnsP2PData.YFilter
    clnsP2PData.EntityData.YangName = "clns-p2p-data"
    clnsP2PData.EntityData.BundleName = "cisco_ios_xr"
    clnsP2PData.EntityData.ParentYangName = "media-specific-state"
    clnsP2PData.EntityData.SegmentPath = "clns-p2p-data"
    clnsP2PData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clnsP2PData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clnsP2PData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clnsP2PData.EntityData.Children = make(map[string]types.YChild)
    clnsP2PData.EntityData.Children["p2p-over-lan-data"] = types.YChild{"P2POverLanData", &clnsP2PData.P2POverLanData}
    clnsP2PData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(clnsP2PData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData
// Point-to-point over LAN data
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Multicast group membership status.
    MulticastStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus
}

func (p2POverLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData) GetEntityData() *types.CommonEntityData {
    p2POverLanData.EntityData.YFilter = p2POverLanData.YFilter
    p2POverLanData.EntityData.YangName = "p2p-over-lan-data"
    p2POverLanData.EntityData.BundleName = "cisco_ios_xr"
    p2POverLanData.EntityData.ParentYangName = "clns-p2p-data"
    p2POverLanData.EntityData.SegmentPath = "p2p-over-lan-data"
    p2POverLanData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    p2POverLanData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    p2POverLanData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    p2POverLanData.EntityData.Children = make(map[string]types.YChild)
    p2POverLanData.EntityData.Children["multicast-status"] = types.YChild{"MulticastStatus", &p2POverLanData.MulticastStatus}
    p2POverLanData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(p2POverLanData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus
// Multicast group membership status
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisValid.
    Status interface{}

    // Information pertaining to the invalid multicast status.
    Invalid Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus_Invalid
}

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus) GetEntityData() *types.CommonEntityData {
    multicastStatus.EntityData.YFilter = multicastStatus.YFilter
    multicastStatus.EntityData.YangName = "multicast-status"
    multicastStatus.EntityData.BundleName = "cisco_ios_xr"
    multicastStatus.EntityData.ParentYangName = "p2p-over-lan-data"
    multicastStatus.EntityData.SegmentPath = "multicast-status"
    multicastStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastStatus.EntityData.Children = make(map[string]types.YChild)
    multicastStatus.EntityData.Children["invalid"] = types.YChild{"Invalid", &multicastStatus.Invalid}
    multicastStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    multicastStatus.EntityData.Leafs["status"] = types.YLeaf{"Status", multicastStatus.Status}
    return &(multicastStatus.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus_Invalid
// Information pertaining to the invalid multicast
// status
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus_Invalid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the multicast status is invalid. The type is
    // IsisIfMcastInvalidReason.
    ReasonCode interface{}
}

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2PData_P2POverLanData_MulticastStatus_Invalid) GetEntityData() *types.CommonEntityData {
    invalid.EntityData.YFilter = invalid.YFilter
    invalid.EntityData.YangName = "invalid"
    invalid.EntityData.BundleName = "cisco_ios_xr"
    invalid.EntityData.ParentYangName = "multicast-status"
    invalid.EntityData.SegmentPath = "invalid"
    invalid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invalid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invalid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invalid.EntityData.Children = make(map[string]types.YChild)
    invalid.EntityData.Leafs = make(map[string]types.YLeaf)
    invalid.EntityData.Leafs["reason-code"] = types.YLeaf{"ReasonCode", invalid.ReasonCode}
    return &(invalid.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface
// Underlying interface list for bundle interfaces
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local interface handle. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceHandle interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (underlyingInterface *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface) GetEntityData() *types.CommonEntityData {
    underlyingInterface.EntityData.YFilter = underlyingInterface.YFilter
    underlyingInterface.EntityData.YangName = "underlying-interface"
    underlyingInterface.EntityData.BundleName = "cisco_ios_xr"
    underlyingInterface.EntityData.ParentYangName = "enabled"
    underlyingInterface.EntityData.SegmentPath = "underlying-interface"
    underlyingInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    underlyingInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    underlyingInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    underlyingInterface.EntityData.Children = make(map[string]types.YChild)
    underlyingInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    underlyingInterface.EntityData.Leafs["interface-handle"] = types.YLeaf{"InterfaceHandle", underlyingInterface.InterfaceHandle}
    underlyingInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", underlyingInterface.InterfaceName}
    return &(underlyingInterface.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData
// Array of area information for an active
// interface
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Level of the area. The type is IsisLevel.
    Level interface{}

    // Number of adjacencies. The type is interface{} with range: 0..4294967295.
    AdjacencyCount interface{}

    // LSP pacing time period (ms). The type is interface{} with range:
    // 0..4294967295.
    LspPacingInterval interface{}

    // No. of SNP entries queued to be transmitted. The type is interface{} with
    // range: 0..4294967295.
    PsnpTransmitQueueSize interface{}

    // Hello interval. The type is interface{} with range: 0..4294967295.
    HelloInterval interface{}

    // Hello Multiplier. The type is interface{} with range: 0..4294967295.
    HelloMultiplier interface{}

    // LAN data, NULL iff interface has non-LAN media type.
    LanData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData_LanData
}

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData) GetEntityData() *types.CommonEntityData {
    perAreaData.EntityData.YFilter = perAreaData.YFilter
    perAreaData.EntityData.YangName = "per-area-data"
    perAreaData.EntityData.BundleName = "cisco_ios_xr"
    perAreaData.EntityData.ParentYangName = "enabled"
    perAreaData.EntityData.SegmentPath = "per-area-data"
    perAreaData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perAreaData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perAreaData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perAreaData.EntityData.Children = make(map[string]types.YChild)
    perAreaData.EntityData.Children["lan-data"] = types.YChild{"LanData", &perAreaData.LanData}
    perAreaData.EntityData.Leafs = make(map[string]types.YLeaf)
    perAreaData.EntityData.Leafs["level"] = types.YLeaf{"Level", perAreaData.Level}
    perAreaData.EntityData.Leafs["adjacency-count"] = types.YLeaf{"AdjacencyCount", perAreaData.AdjacencyCount}
    perAreaData.EntityData.Leafs["lsp-pacing-interval"] = types.YLeaf{"LspPacingInterval", perAreaData.LspPacingInterval}
    perAreaData.EntityData.Leafs["psnp-transmit-queue-size"] = types.YLeaf{"PsnpTransmitQueueSize", perAreaData.PsnpTransmitQueueSize}
    perAreaData.EntityData.Leafs["hello-interval"] = types.YLeaf{"HelloInterval", perAreaData.HelloInterval}
    perAreaData.EntityData.Leafs["hello-multiplier"] = types.YLeaf{"HelloMultiplier", perAreaData.HelloMultiplier}
    return &(perAreaData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData_LanData
// LAN data, NULL iff interface has non-LAN media
// type
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData_LanData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Circuit LAN ID. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    CircuitLanId interface{}

    // Time (ms) until next IIH. The type is interface{} with range:
    // 0..4294967295.
    TimeUntilNextIih interface{}

    // Interface's DIS-election priority. The type is interface{} with range:
    // 0..255.
    InterfacePriority interface{}

    // Priority of current DIS on this LAN. The type is interface{} with range:
    // 0..255.
    Dispriority interface{}

    // Flag indicating if this LAN circuit is the DIS. The type is bool.
    AreWeDis interface{}
}

func (lanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData_LanData) GetEntityData() *types.CommonEntityData {
    lanData.EntityData.YFilter = lanData.YFilter
    lanData.EntityData.YangName = "lan-data"
    lanData.EntityData.BundleName = "cisco_ios_xr"
    lanData.EntityData.ParentYangName = "per-area-data"
    lanData.EntityData.SegmentPath = "lan-data"
    lanData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lanData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lanData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lanData.EntityData.Children = make(map[string]types.YChild)
    lanData.EntityData.Leafs = make(map[string]types.YLeaf)
    lanData.EntityData.Leafs["circuit-lan-id"] = types.YLeaf{"CircuitLanId", lanData.CircuitLanId}
    lanData.EntityData.Leafs["time-until-next-iih"] = types.YLeaf{"TimeUntilNextIih", lanData.TimeUntilNextIih}
    lanData.EntityData.Leafs["interface-priority"] = types.YLeaf{"InterfacePriority", lanData.InterfacePriority}
    lanData.EntityData.Leafs["dispriority"] = types.YLeaf{"Dispriority", lanData.Dispriority}
    lanData.EntityData.Leafs["are-we-dis"] = types.YLeaf{"AreWeDis", lanData.AreWeDis}
    return &(lanData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData
// Array of topology information
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology identifier.
    TopologyId Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_TopologyId

    // Status of the topology.
    Status Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status
}

func (perTopologyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData) GetEntityData() *types.CommonEntityData {
    perTopologyData.EntityData.YFilter = perTopologyData.YFilter
    perTopologyData.EntityData.YangName = "per-topology-data"
    perTopologyData.EntityData.BundleName = "cisco_ios_xr"
    perTopologyData.EntityData.ParentYangName = "enabled"
    perTopologyData.EntityData.SegmentPath = "per-topology-data"
    perTopologyData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perTopologyData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perTopologyData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perTopologyData.EntityData.Children = make(map[string]types.YChild)
    perTopologyData.EntityData.Children["topology-id"] = types.YChild{"TopologyId", &perTopologyData.TopologyId}
    perTopologyData.EntityData.Children["status"] = types.YChild{"Status", &perTopologyData.Status}
    perTopologyData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(perTopologyData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_TopologyId
// Topology identifier
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_TopologyId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF name. The type is IsisAfId.
    AfName interface{}

    // Sub-AF name. The type is IsisSubAfId.
    SafName interface{}

    // VRF Name. The type is string.
    VrfName interface{}

    // Topology Name. The type is string.
    TopologyName interface{}
}

func (topologyId *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_TopologyId) GetEntityData() *types.CommonEntityData {
    topologyId.EntityData.YFilter = topologyId.YFilter
    topologyId.EntityData.YangName = "topology-id"
    topologyId.EntityData.BundleName = "cisco_ios_xr"
    topologyId.EntityData.ParentYangName = "per-topology-data"
    topologyId.EntityData.SegmentPath = "topology-id"
    topologyId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topologyId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topologyId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topologyId.EntityData.Children = make(map[string]types.YChild)
    topologyId.EntityData.Leafs = make(map[string]types.YLeaf)
    topologyId.EntityData.Leafs["af-name"] = types.YLeaf{"AfName", topologyId.AfName}
    topologyId.EntityData.Leafs["saf-name"] = types.YLeaf{"SafName", topologyId.SafName}
    topologyId.EntityData.Leafs["vrf-name"] = types.YLeaf{"VrfName", topologyId.VrfName}
    topologyId.EntityData.Leafs["topology-name"] = types.YLeaf{"TopologyName", topologyId.TopologyName}
    return &(topologyId.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status
// Status of the topology
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisEnabled.
    Status interface{}

    // Disabled information of a topology.
    Disabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Disabled

    // Enabled information of a topology.
    Enabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_
}

func (status *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status) GetEntityData() *types.CommonEntityData {
    status.EntityData.YFilter = status.YFilter
    status.EntityData.YangName = "status"
    status.EntityData.BundleName = "cisco_ios_xr"
    status.EntityData.ParentYangName = "per-topology-data"
    status.EntityData.SegmentPath = "status"
    status.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    status.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    status.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    status.EntityData.Children = make(map[string]types.YChild)
    status.EntityData.Children["disabled"] = types.YChild{"Disabled", &status.Disabled}
    status.EntityData.Children["enabled"] = types.YChild{"Enabled", &status.Enabled}
    status.EntityData.Leafs = make(map[string]types.YLeaf)
    status.EntityData.Leafs["status"] = types.YLeaf{"Status", status.Status}
    return &(status.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Disabled
// Disabled information of a topology
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Disabled struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the topology is disabled. The type is IsisIfTopoDisabledReason.
    ReasonCode interface{}
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Disabled) GetEntityData() *types.CommonEntityData {
    disabled.EntityData.YFilter = disabled.YFilter
    disabled.EntityData.YangName = "disabled"
    disabled.EntityData.BundleName = "cisco_ios_xr"
    disabled.EntityData.ParentYangName = "status"
    disabled.EntityData.SegmentPath = "disabled"
    disabled.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    disabled.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    disabled.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    disabled.EntityData.Children = make(map[string]types.YChild)
    disabled.EntityData.Leafs = make(map[string]types.YLeaf)
    disabled.EntityData.Leafs["reason-code"] = types.YLeaf{"ReasonCode", disabled.ReasonCode}
    return &(disabled.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_
// Enabled information of a topology
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_ struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // L1 metric for this topology. The type is interface{} with range:
    // 0..4294967295.
    Level1Metric interface{}

    // L2 metric for this topology. The type is interface{} with range:
    // 0..4294967295.
    Level2Metric interface{}

    // L1 metric for this topology. The type is interface{} with range:
    // 0..4294967295.
    Level1Weight interface{}

    // L2 metric for this topology. The type is interface{} with range:
    // 0..4294967295.
    Level2Weight interface{}

    // MPLS maximum number of pri labels supported. The type is interface{} with
    // range: 0..255.
    MaxLabelSupported interface{}

    // MPLS maximum number of backup labels supported. The type is interface{}
    // with range: 0..255.
    MaxBkpLabelSupported interface{}

    // MPLS maximum number of srte labels supported. The type is interface{} with
    // range: 0..255.
    MaxSrteLabelSupported interface{}

    // MPLS LDP sync enabled status for L1. The type is bool.
    Level1LdpSyncEnabled interface{}

    // MPLS LDP sync enabled status for L2. The type is bool.
    Level2LdpSyncEnabled interface{}

    // Status of MPLS LDP synchronization. The type is bool.
    LdpSyncStatus interface{}

    // Status of MPLS LDPv6 synchronization. The type is bool.
    LdPv6SyncStatus interface{}

    // L1 metric-offset for this topology. The type is interface{} with range:
    // 0..4294967295.
    Level1OffsetMetric interface{}

    // L2 metric-offset for this topology. The type is interface{} with range:
    // 0..4294967295.
    Level2OffsetMetric interface{}

    // Link-Group configure status for L1. The type is bool.
    Level1LkgpConfigured interface{}

    // Link-Group configure status for L2. The type is bool.
    Level2LkgpConfigured interface{}

    // L1 PP-metric for this topology. The type is interface{} with range:
    // 0..4294967295.
    Level1PpMetric interface{}

    // L2 PP-metric for this topology. The type is interface{} with range:
    // 0..4294967295.
    Level2PpMetric interface{}

    // PP configure status for L1. The type is bool.
    Level1PpConfigured interface{}

    // PP configure status for L2. The type is bool.
    Level2PpConfigured interface{}

    // Adjacency formation status of a topology.
    AdjacencyFormStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__AdjacencyFormStatus

    // Prefix advertisement status of a topology.
    AdvPrefixStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__AdvPrefixStatus

    // Level1 FRR information.
    Level1Frr Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__Level1Frr

    // Level2 FRR information.
    Level2Frr Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__Level2Frr

    // Array of Manual Adjacency SIDs. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__ManualAdjSid.
    ManualAdjSid []Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__ManualAdjSid
}

func (enabled_ *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_) GetEntityData() *types.CommonEntityData {
    enabled_.EntityData.YFilter = enabled_.YFilter
    enabled_.EntityData.YangName = "enabled"
    enabled_.EntityData.BundleName = "cisco_ios_xr"
    enabled_.EntityData.ParentYangName = "status"
    enabled_.EntityData.SegmentPath = "enabled"
    enabled_.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    enabled_.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    enabled_.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    enabled_.EntityData.Children = make(map[string]types.YChild)
    enabled_.EntityData.Children["adjacency-form-status"] = types.YChild{"AdjacencyFormStatus", &enabled_.AdjacencyFormStatus}
    enabled_.EntityData.Children["adv-prefix-status"] = types.YChild{"AdvPrefixStatus", &enabled_.AdvPrefixStatus}
    enabled_.EntityData.Children["level1-frr"] = types.YChild{"Level1Frr", &enabled_.Level1Frr}
    enabled_.EntityData.Children["level2-frr"] = types.YChild{"Level2Frr", &enabled_.Level2Frr}
    enabled_.EntityData.Children["manual-adj-sid"] = types.YChild{"ManualAdjSid", nil}
    for i := range enabled_.ManualAdjSid {
        enabled_.EntityData.Children[types.GetSegmentPath(&enabled_.ManualAdjSid[i])] = types.YChild{"ManualAdjSid", &enabled_.ManualAdjSid[i]}
    }
    enabled_.EntityData.Leafs = make(map[string]types.YLeaf)
    enabled_.EntityData.Leafs["level1-metric"] = types.YLeaf{"Level1Metric", enabled_.Level1Metric}
    enabled_.EntityData.Leafs["level2-metric"] = types.YLeaf{"Level2Metric", enabled_.Level2Metric}
    enabled_.EntityData.Leafs["level1-weight"] = types.YLeaf{"Level1Weight", enabled_.Level1Weight}
    enabled_.EntityData.Leafs["level2-weight"] = types.YLeaf{"Level2Weight", enabled_.Level2Weight}
    enabled_.EntityData.Leafs["max-label-supported"] = types.YLeaf{"MaxLabelSupported", enabled_.MaxLabelSupported}
    enabled_.EntityData.Leafs["max-bkp-label-supported"] = types.YLeaf{"MaxBkpLabelSupported", enabled_.MaxBkpLabelSupported}
    enabled_.EntityData.Leafs["max-srte-label-supported"] = types.YLeaf{"MaxSrteLabelSupported", enabled_.MaxSrteLabelSupported}
    enabled_.EntityData.Leafs["level1ldp-sync-enabled"] = types.YLeaf{"Level1LdpSyncEnabled", enabled_.Level1LdpSyncEnabled}
    enabled_.EntityData.Leafs["level2ldp-sync-enabled"] = types.YLeaf{"Level2LdpSyncEnabled", enabled_.Level2LdpSyncEnabled}
    enabled_.EntityData.Leafs["ldp-sync-status"] = types.YLeaf{"LdpSyncStatus", enabled_.LdpSyncStatus}
    enabled_.EntityData.Leafs["ld-pv6-sync-status"] = types.YLeaf{"LdPv6SyncStatus", enabled_.LdPv6SyncStatus}
    enabled_.EntityData.Leafs["level1-offset-metric"] = types.YLeaf{"Level1OffsetMetric", enabled_.Level1OffsetMetric}
    enabled_.EntityData.Leafs["level2-offset-metric"] = types.YLeaf{"Level2OffsetMetric", enabled_.Level2OffsetMetric}
    enabled_.EntityData.Leafs["level1-lkgp-configured"] = types.YLeaf{"Level1LkgpConfigured", enabled_.Level1LkgpConfigured}
    enabled_.EntityData.Leafs["level2-lkgp-configured"] = types.YLeaf{"Level2LkgpConfigured", enabled_.Level2LkgpConfigured}
    enabled_.EntityData.Leafs["level1pp-metric"] = types.YLeaf{"Level1PpMetric", enabled_.Level1PpMetric}
    enabled_.EntityData.Leafs["level2pp-metric"] = types.YLeaf{"Level2PpMetric", enabled_.Level2PpMetric}
    enabled_.EntityData.Leafs["level1pp-configured"] = types.YLeaf{"Level1PpConfigured", enabled_.Level1PpConfigured}
    enabled_.EntityData.Leafs["level2pp-configured"] = types.YLeaf{"Level2PpConfigured", enabled_.Level2PpConfigured}
    return &(enabled_.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__AdjacencyFormStatus
// Adjacency formation status of a topology
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__AdjacencyFormStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisEnabled.
    Status interface{}

    // Disabled state for the adjacency formation status of a topology.
    Disabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__AdjacencyFormStatus_Disabled
}

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__AdjacencyFormStatus) GetEntityData() *types.CommonEntityData {
    adjacencyFormStatus.EntityData.YFilter = adjacencyFormStatus.YFilter
    adjacencyFormStatus.EntityData.YangName = "adjacency-form-status"
    adjacencyFormStatus.EntityData.BundleName = "cisco_ios_xr"
    adjacencyFormStatus.EntityData.ParentYangName = "enabled"
    adjacencyFormStatus.EntityData.SegmentPath = "adjacency-form-status"
    adjacencyFormStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyFormStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyFormStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyFormStatus.EntityData.Children = make(map[string]types.YChild)
    adjacencyFormStatus.EntityData.Children["disabled"] = types.YChild{"Disabled", &adjacencyFormStatus.Disabled}
    adjacencyFormStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencyFormStatus.EntityData.Leafs["status"] = types.YLeaf{"Status", adjacencyFormStatus.Status}
    return &(adjacencyFormStatus.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__AdjacencyFormStatus_Disabled
// Disabled state for the adjacency formation
// status of a topology
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__AdjacencyFormStatus_Disabled struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the adjacency formation status of a topology is disabled. The
    // type is IsisIfTopoAdjFormDisabledReason.
    ReasonCode interface{}
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__AdjacencyFormStatus_Disabled) GetEntityData() *types.CommonEntityData {
    disabled.EntityData.YFilter = disabled.YFilter
    disabled.EntityData.YangName = "disabled"
    disabled.EntityData.BundleName = "cisco_ios_xr"
    disabled.EntityData.ParentYangName = "adjacency-form-status"
    disabled.EntityData.SegmentPath = "disabled"
    disabled.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    disabled.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    disabled.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    disabled.EntityData.Children = make(map[string]types.YChild)
    disabled.EntityData.Leafs = make(map[string]types.YLeaf)
    disabled.EntityData.Leafs["reason-code"] = types.YLeaf{"ReasonCode", disabled.ReasonCode}
    return &(disabled.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__AdvPrefixStatus
// Prefix advertisement status of a topology
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__AdvPrefixStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisEnabled.
    Status interface{}

    // Disabled state for the prefix advertisement status of a topology.
    Disabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__AdvPrefixStatus_Disabled
}

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__AdvPrefixStatus) GetEntityData() *types.CommonEntityData {
    advPrefixStatus.EntityData.YFilter = advPrefixStatus.YFilter
    advPrefixStatus.EntityData.YangName = "adv-prefix-status"
    advPrefixStatus.EntityData.BundleName = "cisco_ios_xr"
    advPrefixStatus.EntityData.ParentYangName = "enabled"
    advPrefixStatus.EntityData.SegmentPath = "adv-prefix-status"
    advPrefixStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advPrefixStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advPrefixStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advPrefixStatus.EntityData.Children = make(map[string]types.YChild)
    advPrefixStatus.EntityData.Children["disabled"] = types.YChild{"Disabled", &advPrefixStatus.Disabled}
    advPrefixStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    advPrefixStatus.EntityData.Leafs["status"] = types.YLeaf{"Status", advPrefixStatus.Status}
    return &(advPrefixStatus.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__AdvPrefixStatus_Disabled
// Disabled state for the prefix advertisement
// status of a topology
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__AdvPrefixStatus_Disabled struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the prefix advertisement status of a topology is disabled. The
    // type is IsisIfTopoAdvPrefixDisabledReason.
    ReasonCode interface{}
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__AdvPrefixStatus_Disabled) GetEntityData() *types.CommonEntityData {
    disabled.EntityData.YFilter = disabled.YFilter
    disabled.EntityData.YangName = "disabled"
    disabled.EntityData.BundleName = "cisco_ios_xr"
    disabled.EntityData.ParentYangName = "adv-prefix-status"
    disabled.EntityData.SegmentPath = "disabled"
    disabled.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    disabled.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    disabled.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    disabled.EntityData.Children = make(map[string]types.YChild)
    disabled.EntityData.Leafs = make(map[string]types.YLeaf)
    disabled.EntityData.Leafs["reason-code"] = types.YLeaf{"ReasonCode", disabled.ReasonCode}
    return &(disabled.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__Level1Frr
// Level1 FRR information
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__Level1Frr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FRR type configured per level for this interface. The type is IsisFrr.
    FrrType interface{}

    // Is FRR enabled per level on this interface. The type is bool.
    IsFrr interface{}

    // Is FRR Remote LFA enabled per level for this interface. The type is bool.
    IsRemoteLfa interface{}

    // Is FRR TI LFA enabled per level for this interface. The type is bool.
    IsTiLfa interface{}

    // TI LFA node-protecting Tie breaker index. The type is interface{} with
    // range: 0..255.
    TiLfaNodeTieBreakerIndex interface{}

    // TI LFA srlg Tie breaker index. The type is interface{} with range: 0..255.
    TiLfaSrlgTieBreaker interface{}

    // Is Tiebreaker configured per level for this interface. The type is bool.
    IsTieBreakersConfigured interface{}

    // FRR TieBreakers array per level for this interface. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__Level1Frr_FrrTieBreaker.
    FrrTieBreaker []Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__Level1Frr_FrrTieBreaker
}

func (level1Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__Level1Frr) GetEntityData() *types.CommonEntityData {
    level1Frr.EntityData.YFilter = level1Frr.YFilter
    level1Frr.EntityData.YangName = "level1-frr"
    level1Frr.EntityData.BundleName = "cisco_ios_xr"
    level1Frr.EntityData.ParentYangName = "enabled"
    level1Frr.EntityData.SegmentPath = "level1-frr"
    level1Frr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    level1Frr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    level1Frr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    level1Frr.EntityData.Children = make(map[string]types.YChild)
    level1Frr.EntityData.Children["frr-tie-breaker"] = types.YChild{"FrrTieBreaker", nil}
    for i := range level1Frr.FrrTieBreaker {
        level1Frr.EntityData.Children[types.GetSegmentPath(&level1Frr.FrrTieBreaker[i])] = types.YChild{"FrrTieBreaker", &level1Frr.FrrTieBreaker[i]}
    }
    level1Frr.EntityData.Leafs = make(map[string]types.YLeaf)
    level1Frr.EntityData.Leafs["frr-type"] = types.YLeaf{"FrrType", level1Frr.FrrType}
    level1Frr.EntityData.Leafs["is-frr"] = types.YLeaf{"IsFrr", level1Frr.IsFrr}
    level1Frr.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", level1Frr.IsRemoteLfa}
    level1Frr.EntityData.Leafs["is-ti-lfa"] = types.YLeaf{"IsTiLfa", level1Frr.IsTiLfa}
    level1Frr.EntityData.Leafs["ti-lfa-node-tie-breaker-index"] = types.YLeaf{"TiLfaNodeTieBreakerIndex", level1Frr.TiLfaNodeTieBreakerIndex}
    level1Frr.EntityData.Leafs["ti-lfa-srlg-tie-breaker"] = types.YLeaf{"TiLfaSrlgTieBreaker", level1Frr.TiLfaSrlgTieBreaker}
    level1Frr.EntityData.Leafs["is-tie-breakers-configured"] = types.YLeaf{"IsTieBreakersConfigured", level1Frr.IsTieBreakersConfigured}
    return &(level1Frr.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__Level1Frr_FrrTieBreaker
// FRR TieBreakers array per level for this
// interface
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__Level1Frr_FrrTieBreaker struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tie Breaker Type. The type is IsisFrrTiebreaker.
    TieBreaker interface{}

    // Tie Breaker Index. The type is interface{} with range: 0..255.
    Index interface{}
}

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__Level1Frr_FrrTieBreaker) GetEntityData() *types.CommonEntityData {
    frrTieBreaker.EntityData.YFilter = frrTieBreaker.YFilter
    frrTieBreaker.EntityData.YangName = "frr-tie-breaker"
    frrTieBreaker.EntityData.BundleName = "cisco_ios_xr"
    frrTieBreaker.EntityData.ParentYangName = "level1-frr"
    frrTieBreaker.EntityData.SegmentPath = "frr-tie-breaker"
    frrTieBreaker.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrTieBreaker.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrTieBreaker.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrTieBreaker.EntityData.Children = make(map[string]types.YChild)
    frrTieBreaker.EntityData.Leafs = make(map[string]types.YLeaf)
    frrTieBreaker.EntityData.Leafs["tie-breaker"] = types.YLeaf{"TieBreaker", frrTieBreaker.TieBreaker}
    frrTieBreaker.EntityData.Leafs["index"] = types.YLeaf{"Index", frrTieBreaker.Index}
    return &(frrTieBreaker.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__Level2Frr
// Level2 FRR information
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__Level2Frr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FRR type configured per level for this interface. The type is IsisFrr.
    FrrType interface{}

    // Is FRR enabled per level on this interface. The type is bool.
    IsFrr interface{}

    // Is FRR Remote LFA enabled per level for this interface. The type is bool.
    IsRemoteLfa interface{}

    // Is FRR TI LFA enabled per level for this interface. The type is bool.
    IsTiLfa interface{}

    // TI LFA node-protecting Tie breaker index. The type is interface{} with
    // range: 0..255.
    TiLfaNodeTieBreakerIndex interface{}

    // TI LFA srlg Tie breaker index. The type is interface{} with range: 0..255.
    TiLfaSrlgTieBreaker interface{}

    // Is Tiebreaker configured per level for this interface. The type is bool.
    IsTieBreakersConfigured interface{}

    // FRR TieBreakers array per level for this interface. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__Level2Frr_FrrTieBreaker.
    FrrTieBreaker []Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__Level2Frr_FrrTieBreaker
}

func (level2Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__Level2Frr) GetEntityData() *types.CommonEntityData {
    level2Frr.EntityData.YFilter = level2Frr.YFilter
    level2Frr.EntityData.YangName = "level2-frr"
    level2Frr.EntityData.BundleName = "cisco_ios_xr"
    level2Frr.EntityData.ParentYangName = "enabled"
    level2Frr.EntityData.SegmentPath = "level2-frr"
    level2Frr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    level2Frr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    level2Frr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    level2Frr.EntityData.Children = make(map[string]types.YChild)
    level2Frr.EntityData.Children["frr-tie-breaker"] = types.YChild{"FrrTieBreaker", nil}
    for i := range level2Frr.FrrTieBreaker {
        level2Frr.EntityData.Children[types.GetSegmentPath(&level2Frr.FrrTieBreaker[i])] = types.YChild{"FrrTieBreaker", &level2Frr.FrrTieBreaker[i]}
    }
    level2Frr.EntityData.Leafs = make(map[string]types.YLeaf)
    level2Frr.EntityData.Leafs["frr-type"] = types.YLeaf{"FrrType", level2Frr.FrrType}
    level2Frr.EntityData.Leafs["is-frr"] = types.YLeaf{"IsFrr", level2Frr.IsFrr}
    level2Frr.EntityData.Leafs["is-remote-lfa"] = types.YLeaf{"IsRemoteLfa", level2Frr.IsRemoteLfa}
    level2Frr.EntityData.Leafs["is-ti-lfa"] = types.YLeaf{"IsTiLfa", level2Frr.IsTiLfa}
    level2Frr.EntityData.Leafs["ti-lfa-node-tie-breaker-index"] = types.YLeaf{"TiLfaNodeTieBreakerIndex", level2Frr.TiLfaNodeTieBreakerIndex}
    level2Frr.EntityData.Leafs["ti-lfa-srlg-tie-breaker"] = types.YLeaf{"TiLfaSrlgTieBreaker", level2Frr.TiLfaSrlgTieBreaker}
    level2Frr.EntityData.Leafs["is-tie-breakers-configured"] = types.YLeaf{"IsTieBreakersConfigured", level2Frr.IsTieBreakersConfigured}
    return &(level2Frr.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__Level2Frr_FrrTieBreaker
// FRR TieBreakers array per level for this
// interface
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__Level2Frr_FrrTieBreaker struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tie Breaker Type. The type is IsisFrrTiebreaker.
    TieBreaker interface{}

    // Tie Breaker Index. The type is interface{} with range: 0..255.
    Index interface{}
}

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__Level2Frr_FrrTieBreaker) GetEntityData() *types.CommonEntityData {
    frrTieBreaker.EntityData.YFilter = frrTieBreaker.YFilter
    frrTieBreaker.EntityData.YangName = "frr-tie-breaker"
    frrTieBreaker.EntityData.BundleName = "cisco_ios_xr"
    frrTieBreaker.EntityData.ParentYangName = "level2-frr"
    frrTieBreaker.EntityData.SegmentPath = "frr-tie-breaker"
    frrTieBreaker.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrTieBreaker.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrTieBreaker.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrTieBreaker.EntityData.Children = make(map[string]types.YChild)
    frrTieBreaker.EntityData.Leafs = make(map[string]types.YLeaf)
    frrTieBreaker.EntityData.Leafs["tie-breaker"] = types.YLeaf{"TieBreaker", frrTieBreaker.TieBreaker}
    frrTieBreaker.EntityData.Leafs["index"] = types.YLeaf{"Index", frrTieBreaker.Index}
    return &(frrTieBreaker.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__ManualAdjSid
// Array of Manual Adjacency SIDs
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__ManualAdjSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Manual Adjacency SID Label. The type is interface{} with range:
    // 0..4294967295.
    ManualAdjacencySidLabel interface{}

    // Manual Adjacency SID Index (if configured as index). The type is
    // interface{} with range: 0..4294967295.
    ManualAdjacencySidIndex interface{}

    // Manual Adjacency SID Type (Absolute or Index). The type is interface{} with
    // range: 0..255.
    ManualAdjacencySidType interface{}

    // SID configured as protected by backup path. The type is bool.
    SidProtected interface{}

    // SID is in use. The type is bool.
    SidActive interface{}
}

func (manualAdjSid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled__ManualAdjSid) GetEntityData() *types.CommonEntityData {
    manualAdjSid.EntityData.YFilter = manualAdjSid.YFilter
    manualAdjSid.EntityData.YangName = "manual-adj-sid"
    manualAdjSid.EntityData.BundleName = "cisco_ios_xr"
    manualAdjSid.EntityData.ParentYangName = "enabled"
    manualAdjSid.EntityData.SegmentPath = "manual-adj-sid"
    manualAdjSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    manualAdjSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    manualAdjSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    manualAdjSid.EntityData.Children = make(map[string]types.YChild)
    manualAdjSid.EntityData.Leafs = make(map[string]types.YLeaf)
    manualAdjSid.EntityData.Leafs["manual-adjacency-sid-label"] = types.YLeaf{"ManualAdjacencySidLabel", manualAdjSid.ManualAdjacencySidLabel}
    manualAdjSid.EntityData.Leafs["manual-adjacency-sid-index"] = types.YLeaf{"ManualAdjacencySidIndex", manualAdjSid.ManualAdjacencySidIndex}
    manualAdjSid.EntityData.Leafs["manual-adjacency-sid-type"] = types.YLeaf{"ManualAdjacencySidType", manualAdjSid.ManualAdjacencySidType}
    manualAdjSid.EntityData.Leafs["sid-protected"] = types.YLeaf{"SidProtected", manualAdjSid.SidProtected}
    manualAdjSid.EntityData.Leafs["sid-active"] = types.YLeaf{"SidActive", manualAdjSid.SidActive}
    return &(manualAdjSid.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData
// Array of address family information
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address Family Identifier of the interface. The type is IsisAfId.
    AfName interface{}

    // Address Family status of the interface.
    AfStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus
}

func (perAddressFamilyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData) GetEntityData() *types.CommonEntityData {
    perAddressFamilyData.EntityData.YFilter = perAddressFamilyData.YFilter
    perAddressFamilyData.EntityData.YangName = "per-address-family-data"
    perAddressFamilyData.EntityData.BundleName = "cisco_ios_xr"
    perAddressFamilyData.EntityData.ParentYangName = "enabled"
    perAddressFamilyData.EntityData.SegmentPath = "per-address-family-data"
    perAddressFamilyData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perAddressFamilyData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perAddressFamilyData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perAddressFamilyData.EntityData.Children = make(map[string]types.YChild)
    perAddressFamilyData.EntityData.Children["af-status"] = types.YChild{"AfStatus", &perAddressFamilyData.AfStatus}
    perAddressFamilyData.EntityData.Leafs = make(map[string]types.YLeaf)
    perAddressFamilyData.EntityData.Leafs["af-name"] = types.YLeaf{"AfName", perAddressFamilyData.AfName}
    return &(perAddressFamilyData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus
// Address Family status of the interface
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisEnabled.
    Status interface{}

    // Disabled info for the AF of an interface.
    Disabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_Disabled

    // Enabled data for the AF of an interface.
    AfData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData
}

func (afStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus) GetEntityData() *types.CommonEntityData {
    afStatus.EntityData.YFilter = afStatus.YFilter
    afStatus.EntityData.YangName = "af-status"
    afStatus.EntityData.BundleName = "cisco_ios_xr"
    afStatus.EntityData.ParentYangName = "per-address-family-data"
    afStatus.EntityData.SegmentPath = "af-status"
    afStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    afStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    afStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    afStatus.EntityData.Children = make(map[string]types.YChild)
    afStatus.EntityData.Children["disabled"] = types.YChild{"Disabled", &afStatus.Disabled}
    afStatus.EntityData.Children["af-data"] = types.YChild{"AfData", &afStatus.AfData}
    afStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    afStatus.EntityData.Leafs["status"] = types.YLeaf{"Status", afStatus.Status}
    return &(afStatus.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_Disabled
// Disabled info for the AF of an interface
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_Disabled struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the Address Family is disabled. The type is
    // IsisIfAfDisabledReason.
    ReasonCode interface{}
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_Disabled) GetEntityData() *types.CommonEntityData {
    disabled.EntityData.YFilter = disabled.YFilter
    disabled.EntityData.YangName = "disabled"
    disabled.EntityData.BundleName = "cisco_ios_xr"
    disabled.EntityData.ParentYangName = "af-status"
    disabled.EntityData.SegmentPath = "disabled"
    disabled.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    disabled.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    disabled.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    disabled.EntityData.Children = make(map[string]types.YChild)
    disabled.EntityData.Leafs = make(map[string]types.YLeaf)
    disabled.EntityData.Leafs["reason-code"] = types.YLeaf{"ReasonCode", disabled.ReasonCode}
    return &(disabled.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData
// Enabled data for the AF of an interface
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol status of the AF.
    ProtocolStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus

    // Forwarding status of the AF.
    ForwardingAddressStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus

    // Prefix status of the AF.
    PrefixStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus
}

func (afData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData) GetEntityData() *types.CommonEntityData {
    afData.EntityData.YFilter = afData.YFilter
    afData.EntityData.YangName = "af-data"
    afData.EntityData.BundleName = "cisco_ios_xr"
    afData.EntityData.ParentYangName = "af-status"
    afData.EntityData.SegmentPath = "af-data"
    afData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    afData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    afData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    afData.EntityData.Children = make(map[string]types.YChild)
    afData.EntityData.Children["protocol-status"] = types.YChild{"ProtocolStatus", &afData.ProtocolStatus}
    afData.EntityData.Children["forwarding-address-status"] = types.YChild{"ForwardingAddressStatus", &afData.ForwardingAddressStatus}
    afData.EntityData.Children["prefix-status"] = types.YChild{"PrefixStatus", &afData.PrefixStatus}
    afData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(afData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus
// Protocol status of the AF
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisUp.
    Status interface{}

    // Disabled state of the Address Family protocol.
    Disabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus_Disabled
}

func (protocolStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus) GetEntityData() *types.CommonEntityData {
    protocolStatus.EntityData.YFilter = protocolStatus.YFilter
    protocolStatus.EntityData.YangName = "protocol-status"
    protocolStatus.EntityData.BundleName = "cisco_ios_xr"
    protocolStatus.EntityData.ParentYangName = "af-data"
    protocolStatus.EntityData.SegmentPath = "protocol-status"
    protocolStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolStatus.EntityData.Children = make(map[string]types.YChild)
    protocolStatus.EntityData.Children["disabled"] = types.YChild{"Disabled", &protocolStatus.Disabled}
    protocolStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    protocolStatus.EntityData.Leafs["status"] = types.YLeaf{"Status", protocolStatus.Status}
    return &(protocolStatus.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus_Disabled
// Disabled state of the Address Family protocol
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus_Disabled struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the Address Family protocol status is down. The type is
    // IsisIfAfProtoDownReason.
    ReasonCode interface{}
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus_Disabled) GetEntityData() *types.CommonEntityData {
    disabled.EntityData.YFilter = disabled.YFilter
    disabled.EntityData.YangName = "disabled"
    disabled.EntityData.BundleName = "cisco_ios_xr"
    disabled.EntityData.ParentYangName = "protocol-status"
    disabled.EntityData.SegmentPath = "disabled"
    disabled.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    disabled.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    disabled.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    disabled.EntityData.Children = make(map[string]types.YChild)
    disabled.EntityData.Leafs = make(map[string]types.YLeaf)
    disabled.EntityData.Leafs["reason-code"] = types.YLeaf{"ReasonCode", disabled.ReasonCode}
    return &(disabled.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus
// Forwarding status of the AF
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisKnown.
    Status interface{}

    // Unknown forwarding address data.
    Unknown Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_Unknown

    // Known Forwarding address data.
    ForwardingAddressData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData
}

func (forwardingAddressStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus) GetEntityData() *types.CommonEntityData {
    forwardingAddressStatus.EntityData.YFilter = forwardingAddressStatus.YFilter
    forwardingAddressStatus.EntityData.YangName = "forwarding-address-status"
    forwardingAddressStatus.EntityData.BundleName = "cisco_ios_xr"
    forwardingAddressStatus.EntityData.ParentYangName = "af-data"
    forwardingAddressStatus.EntityData.SegmentPath = "forwarding-address-status"
    forwardingAddressStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardingAddressStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardingAddressStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardingAddressStatus.EntityData.Children = make(map[string]types.YChild)
    forwardingAddressStatus.EntityData.Children["unknown"] = types.YChild{"Unknown", &forwardingAddressStatus.Unknown}
    forwardingAddressStatus.EntityData.Children["forwarding-address-data"] = types.YChild{"ForwardingAddressData", &forwardingAddressStatus.ForwardingAddressData}
    forwardingAddressStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    forwardingAddressStatus.EntityData.Leafs["status"] = types.YLeaf{"Status", forwardingAddressStatus.Status}
    return &(forwardingAddressStatus.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_Unknown
// Unknown forwarding address data
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_Unknown struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the forwarding address(es) of an AF is(are) unknown. The type is
    // IsisIfAfFwdAddrUnknownReason.
    ReasonCode interface{}
}

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_Unknown) GetEntityData() *types.CommonEntityData {
    unknown.EntityData.YFilter = unknown.YFilter
    unknown.EntityData.YangName = "unknown"
    unknown.EntityData.BundleName = "cisco_ios_xr"
    unknown.EntityData.ParentYangName = "forwarding-address-status"
    unknown.EntityData.SegmentPath = "unknown"
    unknown.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknown.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknown.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknown.EntityData.Children = make(map[string]types.YChild)
    unknown.EntityData.Leafs = make(map[string]types.YLeaf)
    unknown.EntityData.Leafs["reason-code"] = types.YLeaf{"ReasonCode", unknown.ReasonCode}
    return &(unknown.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData
// Known Forwarding address data
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If the interface is unnumbered, then its name, else NULL. The type is
    // string.
    UnnumberedInterfaceName interface{}

    // Array of forwarding addresses. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress.
    ForwardingAddress []Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress
}

func (forwardingAddressData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData) GetEntityData() *types.CommonEntityData {
    forwardingAddressData.EntityData.YFilter = forwardingAddressData.YFilter
    forwardingAddressData.EntityData.YangName = "forwarding-address-data"
    forwardingAddressData.EntityData.BundleName = "cisco_ios_xr"
    forwardingAddressData.EntityData.ParentYangName = "forwarding-address-status"
    forwardingAddressData.EntityData.SegmentPath = "forwarding-address-data"
    forwardingAddressData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardingAddressData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardingAddressData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardingAddressData.EntityData.Children = make(map[string]types.YChild)
    forwardingAddressData.EntityData.Children["forwarding-address"] = types.YChild{"ForwardingAddress", nil}
    for i := range forwardingAddressData.ForwardingAddress {
        forwardingAddressData.EntityData.Children[types.GetSegmentPath(&forwardingAddressData.ForwardingAddress[i])] = types.YChild{"ForwardingAddress", &forwardingAddressData.ForwardingAddress[i]}
    }
    forwardingAddressData.EntityData.Leafs = make(map[string]types.YLeaf)
    forwardingAddressData.EntityData.Leafs["unnumbered-interface-name"] = types.YLeaf{"UnnumberedInterfaceName", forwardingAddressData.UnnumberedInterfaceName}
    return &(forwardingAddressData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress
// Array of forwarding addresses
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IsisAfId.
    AfName interface{}

    // IPV4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4 interface{}

    // IPV6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6 interface{}
}

func (forwardingAddress *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress) GetEntityData() *types.CommonEntityData {
    forwardingAddress.EntityData.YFilter = forwardingAddress.YFilter
    forwardingAddress.EntityData.YangName = "forwarding-address"
    forwardingAddress.EntityData.BundleName = "cisco_ios_xr"
    forwardingAddress.EntityData.ParentYangName = "forwarding-address-data"
    forwardingAddress.EntityData.SegmentPath = "forwarding-address"
    forwardingAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardingAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardingAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardingAddress.EntityData.Children = make(map[string]types.YChild)
    forwardingAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    forwardingAddress.EntityData.Leafs["af-name"] = types.YLeaf{"AfName", forwardingAddress.AfName}
    forwardingAddress.EntityData.Leafs["ipv4"] = types.YLeaf{"Ipv4", forwardingAddress.Ipv4}
    forwardingAddress.EntityData.Leafs["ipv6"] = types.YLeaf{"Ipv6", forwardingAddress.Ipv6}
    return &(forwardingAddress.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus
// Prefix status of the AF
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisKnown.
    Status interface{}

    // Unknown state for the global prefixes.
    Unknown Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_Unknown

    // Global prefix data for the Address Family.
    PrefixData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData
}

func (prefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus) GetEntityData() *types.CommonEntityData {
    prefixStatus.EntityData.YFilter = prefixStatus.YFilter
    prefixStatus.EntityData.YangName = "prefix-status"
    prefixStatus.EntityData.BundleName = "cisco_ios_xr"
    prefixStatus.EntityData.ParentYangName = "af-data"
    prefixStatus.EntityData.SegmentPath = "prefix-status"
    prefixStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixStatus.EntityData.Children = make(map[string]types.YChild)
    prefixStatus.EntityData.Children["unknown"] = types.YChild{"Unknown", &prefixStatus.Unknown}
    prefixStatus.EntityData.Children["prefix-data"] = types.YChild{"PrefixData", &prefixStatus.PrefixData}
    prefixStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    prefixStatus.EntityData.Leafs["status"] = types.YLeaf{"Status", prefixStatus.Status}
    return &(prefixStatus.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_Unknown
// Unknown state for the global prefixes
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_Unknown struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the global prefix(es) is(are) unknown. The type is
    // IsisIfAfPrefixUnknownReason.
    ReasonCode interface{}
}

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_Unknown) GetEntityData() *types.CommonEntityData {
    unknown.EntityData.YFilter = unknown.YFilter
    unknown.EntityData.YangName = "unknown"
    unknown.EntityData.BundleName = "cisco_ios_xr"
    unknown.EntityData.ParentYangName = "prefix-status"
    unknown.EntityData.SegmentPath = "unknown"
    unknown.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknown.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknown.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknown.EntityData.Children = make(map[string]types.YChild)
    unknown.EntityData.Leafs = make(map[string]types.YLeaf)
    unknown.EntityData.Leafs["reason-code"] = types.YLeaf{"ReasonCode", unknown.ReasonCode}
    return &(unknown.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData
// Global prefix data for the Address Family
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is the interface unnumbered. The type is bool.
    IsUnnumbered interface{}

    // Array of global prefixes. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix.
    Prefix []Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix
}

func (prefixData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData) GetEntityData() *types.CommonEntityData {
    prefixData.EntityData.YFilter = prefixData.YFilter
    prefixData.EntityData.YangName = "prefix-data"
    prefixData.EntityData.BundleName = "cisco_ios_xr"
    prefixData.EntityData.ParentYangName = "prefix-status"
    prefixData.EntityData.SegmentPath = "prefix-data"
    prefixData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixData.EntityData.Children = make(map[string]types.YChild)
    prefixData.EntityData.Children["prefix"] = types.YChild{"Prefix", nil}
    for i := range prefixData.Prefix {
        prefixData.EntityData.Children[types.GetSegmentPath(&prefixData.Prefix[i])] = types.YChild{"Prefix", &prefixData.Prefix[i]}
    }
    prefixData.EntityData.Leafs = make(map[string]types.YLeaf)
    prefixData.EntityData.Leafs["is-unnumbered"] = types.YLeaf{"IsUnnumbered", prefixData.IsUnnumbered}
    return &(prefixData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix
// Array of global prefixes
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IsisAfId.
    AfName interface{}

    // ipv4.
    Ipv4 Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv4

    // ipv6.
    Ipv6 Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv6
}

func (prefix *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix) GetEntityData() *types.CommonEntityData {
    prefix.EntityData.YFilter = prefix.YFilter
    prefix.EntityData.YangName = "prefix"
    prefix.EntityData.BundleName = "cisco_ios_xr"
    prefix.EntityData.ParentYangName = "prefix-data"
    prefix.EntityData.SegmentPath = "prefix"
    prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefix.EntityData.Children = make(map[string]types.YChild)
    prefix.EntityData.Children["ipv4"] = types.YChild{"Ipv4", &prefix.Ipv4}
    prefix.EntityData.Children["ipv6"] = types.YChild{"Ipv6", &prefix.Ipv6}
    prefix.EntityData.Leafs = make(map[string]types.YLeaf)
    prefix.EntityData.Leafs["af-name"] = types.YLeaf{"AfName", prefix.AfName}
    return &(prefix.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv4
// ipv4
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv4 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "prefix"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = make(map[string]types.YChild)
    ipv4.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv4.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", ipv4.Prefix}
    ipv4.EntityData.Leafs["prefix-length"] = types.YLeaf{"PrefixLength", ipv4.PrefixLength}
    return &(ipv4.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv6
// ipv6
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv6 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv6) GetEntityData() *types.CommonEntityData {
    ipv6.EntityData.YFilter = ipv6.YFilter
    ipv6.EntityData.YangName = "ipv6"
    ipv6.EntityData.BundleName = "cisco_ios_xr"
    ipv6.EntityData.ParentYangName = "prefix"
    ipv6.EntityData.SegmentPath = "ipv6"
    ipv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6.EntityData.Children = make(map[string]types.YChild)
    ipv6.EntityData.Leafs = make(map[string]types.YLeaf)
    ipv6.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", ipv6.Prefix}
    ipv6.EntityData.Leafs["prefix-length"] = types.YLeaf{"PrefixLength", ipv6.PrefixLength}
    return &(ipv6.EntityData)
}

// Isis_Instances_Instance_CheckpointAdjacencies
// Checkpointed adjacency table
type Isis_Instances_Instance_CheckpointAdjacencies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A checkpointed IS-IS adjacency. The type is slice of
    // Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency.
    CheckpointAdjacency []Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency
}

func (checkpointAdjacencies *Isis_Instances_Instance_CheckpointAdjacencies) GetEntityData() *types.CommonEntityData {
    checkpointAdjacencies.EntityData.YFilter = checkpointAdjacencies.YFilter
    checkpointAdjacencies.EntityData.YangName = "checkpoint-adjacencies"
    checkpointAdjacencies.EntityData.BundleName = "cisco_ios_xr"
    checkpointAdjacencies.EntityData.ParentYangName = "instance"
    checkpointAdjacencies.EntityData.SegmentPath = "checkpoint-adjacencies"
    checkpointAdjacencies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    checkpointAdjacencies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    checkpointAdjacencies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    checkpointAdjacencies.EntityData.Children = make(map[string]types.YChild)
    checkpointAdjacencies.EntityData.Children["checkpoint-adjacency"] = types.YChild{"CheckpointAdjacency", nil}
    for i := range checkpointAdjacencies.CheckpointAdjacency {
        checkpointAdjacencies.EntityData.Children[types.GetSegmentPath(&checkpointAdjacencies.CheckpointAdjacency[i])] = types.YChild{"CheckpointAdjacency", &checkpointAdjacencies.CheckpointAdjacency[i]}
    }
    checkpointAdjacencies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(checkpointAdjacencies.EntityData)
}

// Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency
// A checkpointed IS-IS adjacency
type Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Level. The type is IsisInternalLevel.
    Level interface{}

    // System ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    SystemId interface{}

    // Interface name. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // Checkpoint object ID. The type is interface{} with range: 0..4294967295.
    CheckpointAdjacencyObjectId interface{}

    // Neighbor system ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    CheckpointAdjacencySystemId interface{}

    // Neighbor SNPA. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    CheckpointAdjacencySnpa interface{}

    // Local interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    CheckpointAdjacencyInterface interface{}

    // Adjacency level. The type is IsisLevel.
    CheckpointAdjacencyLevel interface{}

    // Adjacency holdtime (s). The type is interface{} with range: 0..65535.
    CheckpointAdjacencyHoldtime interface{}

    // Adjacency LAN priority. The type is interface{} with range: 0..255.
    CheckpointAdjacencyLanPriority interface{}

    // Neighbor circuit number. The type is interface{} with range: 0..255.
    CheckpointAdjacencyCircuitNumber interface{}

    // Per address family next hops. The type is slice of
    // Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop.
    CheckpointAdjacencyPerAddressFamilyNextHop []Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop
}

func (checkpointAdjacency *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency) GetEntityData() *types.CommonEntityData {
    checkpointAdjacency.EntityData.YFilter = checkpointAdjacency.YFilter
    checkpointAdjacency.EntityData.YangName = "checkpoint-adjacency"
    checkpointAdjacency.EntityData.BundleName = "cisco_ios_xr"
    checkpointAdjacency.EntityData.ParentYangName = "checkpoint-adjacencies"
    checkpointAdjacency.EntityData.SegmentPath = "checkpoint-adjacency"
    checkpointAdjacency.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    checkpointAdjacency.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    checkpointAdjacency.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    checkpointAdjacency.EntityData.Children = make(map[string]types.YChild)
    checkpointAdjacency.EntityData.Children["checkpoint-adjacency-per-address-family-next-hop"] = types.YChild{"CheckpointAdjacencyPerAddressFamilyNextHop", nil}
    for i := range checkpointAdjacency.CheckpointAdjacencyPerAddressFamilyNextHop {
        checkpointAdjacency.EntityData.Children[types.GetSegmentPath(&checkpointAdjacency.CheckpointAdjacencyPerAddressFamilyNextHop[i])] = types.YChild{"CheckpointAdjacencyPerAddressFamilyNextHop", &checkpointAdjacency.CheckpointAdjacencyPerAddressFamilyNextHop[i]}
    }
    checkpointAdjacency.EntityData.Leafs = make(map[string]types.YLeaf)
    checkpointAdjacency.EntityData.Leafs["level"] = types.YLeaf{"Level", checkpointAdjacency.Level}
    checkpointAdjacency.EntityData.Leafs["system-id"] = types.YLeaf{"SystemId", checkpointAdjacency.SystemId}
    checkpointAdjacency.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", checkpointAdjacency.InterfaceName}
    checkpointAdjacency.EntityData.Leafs["checkpoint-adjacency-object-id"] = types.YLeaf{"CheckpointAdjacencyObjectId", checkpointAdjacency.CheckpointAdjacencyObjectId}
    checkpointAdjacency.EntityData.Leafs["checkpoint-adjacency-system-id"] = types.YLeaf{"CheckpointAdjacencySystemId", checkpointAdjacency.CheckpointAdjacencySystemId}
    checkpointAdjacency.EntityData.Leafs["checkpoint-adjacency-snpa"] = types.YLeaf{"CheckpointAdjacencySnpa", checkpointAdjacency.CheckpointAdjacencySnpa}
    checkpointAdjacency.EntityData.Leafs["checkpoint-adjacency-interface"] = types.YLeaf{"CheckpointAdjacencyInterface", checkpointAdjacency.CheckpointAdjacencyInterface}
    checkpointAdjacency.EntityData.Leafs["checkpoint-adjacency-level"] = types.YLeaf{"CheckpointAdjacencyLevel", checkpointAdjacency.CheckpointAdjacencyLevel}
    checkpointAdjacency.EntityData.Leafs["checkpoint-adjacency-holdtime"] = types.YLeaf{"CheckpointAdjacencyHoldtime", checkpointAdjacency.CheckpointAdjacencyHoldtime}
    checkpointAdjacency.EntityData.Leafs["checkpoint-adjacency-lan-priority"] = types.YLeaf{"CheckpointAdjacencyLanPriority", checkpointAdjacency.CheckpointAdjacencyLanPriority}
    checkpointAdjacency.EntityData.Leafs["checkpoint-adjacency-circuit-number"] = types.YLeaf{"CheckpointAdjacencyCircuitNumber", checkpointAdjacency.CheckpointAdjacencyCircuitNumber}
    return &(checkpointAdjacency.EntityData)
}

// Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop
// Per address family next hops
type Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IsisAfId.
    AfName interface{}

    // IPV4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4 interface{}

    // IPV6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6 interface{}
}

func (checkpointAdjacencyPerAddressFamilyNextHop *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop) GetEntityData() *types.CommonEntityData {
    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.YFilter = checkpointAdjacencyPerAddressFamilyNextHop.YFilter
    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.YangName = "checkpoint-adjacency-per-address-family-next-hop"
    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.BundleName = "cisco_ios_xr"
    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.ParentYangName = "checkpoint-adjacency"
    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.SegmentPath = "checkpoint-adjacency-per-address-family-next-hop"
    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.Children = make(map[string]types.YChild)
    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.Leafs = make(map[string]types.YLeaf)
    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.Leafs["af-name"] = types.YLeaf{"AfName", checkpointAdjacencyPerAddressFamilyNextHop.AfName}
    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.Leafs["ipv4"] = types.YLeaf{"Ipv4", checkpointAdjacencyPerAddressFamilyNextHop.Ipv4}
    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.Leafs["ipv6"] = types.YLeaf{"Ipv6", checkpointAdjacencyPerAddressFamilyNextHop.Ipv6}
    return &(checkpointAdjacencyPerAddressFamilyNextHop.EntityData)
}

// Isis_Instances_Instance_Srms
// Segment Routing Mapping Server operational
// data
type Isis_Instances_Instance_Srms struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Policy operational data.
    Policy Isis_Instances_Instance_Srms_Policy
}

func (srms *Isis_Instances_Instance_Srms) GetEntityData() *types.CommonEntityData {
    srms.EntityData.YFilter = srms.YFilter
    srms.EntityData.YangName = "srms"
    srms.EntityData.BundleName = "cisco_ios_xr"
    srms.EntityData.ParentYangName = "instance"
    srms.EntityData.SegmentPath = "srms"
    srms.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srms.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srms.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srms.EntityData.Children = make(map[string]types.YChild)
    srms.EntityData.Children["policy"] = types.YChild{"Policy", &srms.Policy}
    srms.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(srms.EntityData)
}

// Isis_Instances_Instance_Srms_Policy
// Policy operational data
type Isis_Instances_Instance_Srms_Policy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 policy operational data.
    PolicyIpv4 Isis_Instances_Instance_Srms_Policy_PolicyIpv4

    // IPv6 policy operational data.
    PolicyIpv6 Isis_Instances_Instance_Srms_Policy_PolicyIpv6
}

func (policy *Isis_Instances_Instance_Srms_Policy) GetEntityData() *types.CommonEntityData {
    policy.EntityData.YFilter = policy.YFilter
    policy.EntityData.YangName = "policy"
    policy.EntityData.BundleName = "cisco_ios_xr"
    policy.EntityData.ParentYangName = "srms"
    policy.EntityData.SegmentPath = "policy"
    policy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policy.EntityData.Children = make(map[string]types.YChild)
    policy.EntityData.Children["policy-ipv4"] = types.YChild{"PolicyIpv4", &policy.PolicyIpv4}
    policy.EntityData.Children["policy-ipv6"] = types.YChild{"PolicyIpv6", &policy.PolicyIpv6}
    policy.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(policy.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv4
// IPv4 policy operational data
type Isis_Instances_Instance_Srms_Policy_PolicyIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 active policy operational data.
    PolicyIpv4Active Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active

    // IPv4 backup policy operational data.
    PolicyIpv4Backup Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup
}

func (policyIpv4 *Isis_Instances_Instance_Srms_Policy_PolicyIpv4) GetEntityData() *types.CommonEntityData {
    policyIpv4.EntityData.YFilter = policyIpv4.YFilter
    policyIpv4.EntityData.YangName = "policy-ipv4"
    policyIpv4.EntityData.BundleName = "cisco_ios_xr"
    policyIpv4.EntityData.ParentYangName = "policy"
    policyIpv4.EntityData.SegmentPath = "policy-ipv4"
    policyIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyIpv4.EntityData.Children = make(map[string]types.YChild)
    policyIpv4.EntityData.Children["policy-ipv4-active"] = types.YChild{"PolicyIpv4Active", &policyIpv4.PolicyIpv4Active}
    policyIpv4.EntityData.Children["policy-ipv4-backup"] = types.YChild{"PolicyIpv4Backup", &policyIpv4.PolicyIpv4Backup}
    policyIpv4.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(policyIpv4.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active
// IPv4 active policy operational data
type Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Mapping Item. The type is slice of
    // Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi.
    PolicyMi []Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi
}

func (policyIpv4Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active) GetEntityData() *types.CommonEntityData {
    policyIpv4Active.EntityData.YFilter = policyIpv4Active.YFilter
    policyIpv4Active.EntityData.YangName = "policy-ipv4-active"
    policyIpv4Active.EntityData.BundleName = "cisco_ios_xr"
    policyIpv4Active.EntityData.ParentYangName = "policy-ipv4"
    policyIpv4Active.EntityData.SegmentPath = "policy-ipv4-active"
    policyIpv4Active.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyIpv4Active.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyIpv4Active.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyIpv4Active.EntityData.Children = make(map[string]types.YChild)
    policyIpv4Active.EntityData.Children["policy-mi"] = types.YChild{"PolicyMi", nil}
    for i := range policyIpv4Active.PolicyMi {
        policyIpv4Active.EntityData.Children[types.GetSegmentPath(&policyIpv4Active.PolicyMi[i])] = types.YChild{"PolicyMi", &policyIpv4Active.PolicyMi[i]}
    }
    policyIpv4Active.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(policyIpv4Active.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi
// Mapping Item
type Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Mapping Item ID (0, 1, 2, ...). The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    MiId interface{}

    // src. The type is SrmsMiSrcEB.
    Src interface{}

    // Router ID. The type is string with length: 0..30.
    Router interface{}

    // Area (OSPF) or Level (ISIS). The type is string with length: 0..30.
    Area interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    Prefix interface{}

    // Starting SID. The type is interface{} with range: 0..4294967295.
    SidStart interface{}

    // SID range. The type is interface{} with range: 0..4294967295.
    SidCount interface{}

    // Last IP Prefix. The type is string with length: 0..50.
    LastPrefix interface{}

    // Last SID Index. The type is interface{} with range: 0..4294967295.
    LastSidIndex interface{}

    // Attached flag. The type is SrmsMiFlagEB.
    FlagAttached interface{}

    // addr.
    Addr Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi) GetEntityData() *types.CommonEntityData {
    policyMi.EntityData.YFilter = policyMi.YFilter
    policyMi.EntityData.YangName = "policy-mi"
    policyMi.EntityData.BundleName = "cisco_ios_xr"
    policyMi.EntityData.ParentYangName = "policy-ipv4-active"
    policyMi.EntityData.SegmentPath = "policy-mi" + "[mi-id='" + fmt.Sprintf("%v", policyMi.MiId) + "']"
    policyMi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyMi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyMi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyMi.EntityData.Children = make(map[string]types.YChild)
    policyMi.EntityData.Children["addr"] = types.YChild{"Addr", &policyMi.Addr}
    policyMi.EntityData.Leafs = make(map[string]types.YLeaf)
    policyMi.EntityData.Leafs["mi-id"] = types.YLeaf{"MiId", policyMi.MiId}
    policyMi.EntityData.Leafs["src"] = types.YLeaf{"Src", policyMi.Src}
    policyMi.EntityData.Leafs["router"] = types.YLeaf{"Router", policyMi.Router}
    policyMi.EntityData.Leafs["area"] = types.YLeaf{"Area", policyMi.Area}
    policyMi.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", policyMi.Prefix}
    policyMi.EntityData.Leafs["sid-start"] = types.YLeaf{"SidStart", policyMi.SidStart}
    policyMi.EntityData.Leafs["sid-count"] = types.YLeaf{"SidCount", policyMi.SidCount}
    policyMi.EntityData.Leafs["last-prefix"] = types.YLeaf{"LastPrefix", policyMi.LastPrefix}
    policyMi.EntityData.Leafs["last-sid-index"] = types.YLeaf{"LastSidIndex", policyMi.LastSidIndex}
    policyMi.EntityData.Leafs["flag-attached"] = types.YLeaf{"FlagAttached", policyMi.FlagAttached}
    return &(policyMi.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr
// addr
type Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF. The type is SrmsMiAfEB.
    Af interface{}

    // IPv4. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4 interface{}

    // IPv6. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6 interface{}
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr) GetEntityData() *types.CommonEntityData {
    addr.EntityData.YFilter = addr.YFilter
    addr.EntityData.YangName = "addr"
    addr.EntityData.BundleName = "cisco_ios_xr"
    addr.EntityData.ParentYangName = "policy-mi"
    addr.EntityData.SegmentPath = "addr"
    addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    addr.EntityData.Children = make(map[string]types.YChild)
    addr.EntityData.Leafs = make(map[string]types.YLeaf)
    addr.EntityData.Leafs["af"] = types.YLeaf{"Af", addr.Af}
    addr.EntityData.Leafs["ipv4"] = types.YLeaf{"Ipv4", addr.Ipv4}
    addr.EntityData.Leafs["ipv6"] = types.YLeaf{"Ipv6", addr.Ipv6}
    return &(addr.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup
// IPv4 backup policy operational data
type Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Mapping Item. The type is slice of
    // Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi.
    PolicyMi []Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi
}

func (policyIpv4Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup) GetEntityData() *types.CommonEntityData {
    policyIpv4Backup.EntityData.YFilter = policyIpv4Backup.YFilter
    policyIpv4Backup.EntityData.YangName = "policy-ipv4-backup"
    policyIpv4Backup.EntityData.BundleName = "cisco_ios_xr"
    policyIpv4Backup.EntityData.ParentYangName = "policy-ipv4"
    policyIpv4Backup.EntityData.SegmentPath = "policy-ipv4-backup"
    policyIpv4Backup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyIpv4Backup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyIpv4Backup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyIpv4Backup.EntityData.Children = make(map[string]types.YChild)
    policyIpv4Backup.EntityData.Children["policy-mi"] = types.YChild{"PolicyMi", nil}
    for i := range policyIpv4Backup.PolicyMi {
        policyIpv4Backup.EntityData.Children[types.GetSegmentPath(&policyIpv4Backup.PolicyMi[i])] = types.YChild{"PolicyMi", &policyIpv4Backup.PolicyMi[i]}
    }
    policyIpv4Backup.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(policyIpv4Backup.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi
// Mapping Item
type Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Mapping Item ID (0, 1, 2, ...). The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    MiId interface{}

    // src. The type is SrmsMiSrcEB.
    Src interface{}

    // Router ID. The type is string with length: 0..30.
    Router interface{}

    // Area (OSPF) or Level (ISIS). The type is string with length: 0..30.
    Area interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    Prefix interface{}

    // Starting SID. The type is interface{} with range: 0..4294967295.
    SidStart interface{}

    // SID range. The type is interface{} with range: 0..4294967295.
    SidCount interface{}

    // Last IP Prefix. The type is string with length: 0..50.
    LastPrefix interface{}

    // Last SID Index. The type is interface{} with range: 0..4294967295.
    LastSidIndex interface{}

    // Attached flag. The type is SrmsMiFlagEB.
    FlagAttached interface{}

    // addr.
    Addr Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi) GetEntityData() *types.CommonEntityData {
    policyMi.EntityData.YFilter = policyMi.YFilter
    policyMi.EntityData.YangName = "policy-mi"
    policyMi.EntityData.BundleName = "cisco_ios_xr"
    policyMi.EntityData.ParentYangName = "policy-ipv4-backup"
    policyMi.EntityData.SegmentPath = "policy-mi" + "[mi-id='" + fmt.Sprintf("%v", policyMi.MiId) + "']"
    policyMi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyMi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyMi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyMi.EntityData.Children = make(map[string]types.YChild)
    policyMi.EntityData.Children["addr"] = types.YChild{"Addr", &policyMi.Addr}
    policyMi.EntityData.Leafs = make(map[string]types.YLeaf)
    policyMi.EntityData.Leafs["mi-id"] = types.YLeaf{"MiId", policyMi.MiId}
    policyMi.EntityData.Leafs["src"] = types.YLeaf{"Src", policyMi.Src}
    policyMi.EntityData.Leafs["router"] = types.YLeaf{"Router", policyMi.Router}
    policyMi.EntityData.Leafs["area"] = types.YLeaf{"Area", policyMi.Area}
    policyMi.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", policyMi.Prefix}
    policyMi.EntityData.Leafs["sid-start"] = types.YLeaf{"SidStart", policyMi.SidStart}
    policyMi.EntityData.Leafs["sid-count"] = types.YLeaf{"SidCount", policyMi.SidCount}
    policyMi.EntityData.Leafs["last-prefix"] = types.YLeaf{"LastPrefix", policyMi.LastPrefix}
    policyMi.EntityData.Leafs["last-sid-index"] = types.YLeaf{"LastSidIndex", policyMi.LastSidIndex}
    policyMi.EntityData.Leafs["flag-attached"] = types.YLeaf{"FlagAttached", policyMi.FlagAttached}
    return &(policyMi.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr
// addr
type Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF. The type is SrmsMiAfEB.
    Af interface{}

    // IPv4. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4 interface{}

    // IPv6. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6 interface{}
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr) GetEntityData() *types.CommonEntityData {
    addr.EntityData.YFilter = addr.YFilter
    addr.EntityData.YangName = "addr"
    addr.EntityData.BundleName = "cisco_ios_xr"
    addr.EntityData.ParentYangName = "policy-mi"
    addr.EntityData.SegmentPath = "addr"
    addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    addr.EntityData.Children = make(map[string]types.YChild)
    addr.EntityData.Leafs = make(map[string]types.YLeaf)
    addr.EntityData.Leafs["af"] = types.YLeaf{"Af", addr.Af}
    addr.EntityData.Leafs["ipv4"] = types.YLeaf{"Ipv4", addr.Ipv4}
    addr.EntityData.Leafs["ipv6"] = types.YLeaf{"Ipv6", addr.Ipv6}
    return &(addr.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv6
// IPv6 policy operational data
type Isis_Instances_Instance_Srms_Policy_PolicyIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 backup policy operational data.
    PolicyIpv6Backup Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup

    // IPv6 active policy operational data.
    PolicyIpv6Active Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active
}

func (policyIpv6 *Isis_Instances_Instance_Srms_Policy_PolicyIpv6) GetEntityData() *types.CommonEntityData {
    policyIpv6.EntityData.YFilter = policyIpv6.YFilter
    policyIpv6.EntityData.YangName = "policy-ipv6"
    policyIpv6.EntityData.BundleName = "cisco_ios_xr"
    policyIpv6.EntityData.ParentYangName = "policy"
    policyIpv6.EntityData.SegmentPath = "policy-ipv6"
    policyIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyIpv6.EntityData.Children = make(map[string]types.YChild)
    policyIpv6.EntityData.Children["policy-ipv6-backup"] = types.YChild{"PolicyIpv6Backup", &policyIpv6.PolicyIpv6Backup}
    policyIpv6.EntityData.Children["policy-ipv6-active"] = types.YChild{"PolicyIpv6Active", &policyIpv6.PolicyIpv6Active}
    policyIpv6.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(policyIpv6.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup
// IPv6 backup policy operational data
type Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Mapping Item. The type is slice of
    // Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi.
    PolicyMi []Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi
}

func (policyIpv6Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup) GetEntityData() *types.CommonEntityData {
    policyIpv6Backup.EntityData.YFilter = policyIpv6Backup.YFilter
    policyIpv6Backup.EntityData.YangName = "policy-ipv6-backup"
    policyIpv6Backup.EntityData.BundleName = "cisco_ios_xr"
    policyIpv6Backup.EntityData.ParentYangName = "policy-ipv6"
    policyIpv6Backup.EntityData.SegmentPath = "policy-ipv6-backup"
    policyIpv6Backup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyIpv6Backup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyIpv6Backup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyIpv6Backup.EntityData.Children = make(map[string]types.YChild)
    policyIpv6Backup.EntityData.Children["policy-mi"] = types.YChild{"PolicyMi", nil}
    for i := range policyIpv6Backup.PolicyMi {
        policyIpv6Backup.EntityData.Children[types.GetSegmentPath(&policyIpv6Backup.PolicyMi[i])] = types.YChild{"PolicyMi", &policyIpv6Backup.PolicyMi[i]}
    }
    policyIpv6Backup.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(policyIpv6Backup.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi
// Mapping Item
type Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Mapping Item ID (0, 1, 2, ...). The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    MiId interface{}

    // src. The type is SrmsMiSrcEB.
    Src interface{}

    // Router ID. The type is string with length: 0..30.
    Router interface{}

    // Area (OSPF) or Level (ISIS). The type is string with length: 0..30.
    Area interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    Prefix interface{}

    // Starting SID. The type is interface{} with range: 0..4294967295.
    SidStart interface{}

    // SID range. The type is interface{} with range: 0..4294967295.
    SidCount interface{}

    // Last IP Prefix. The type is string with length: 0..50.
    LastPrefix interface{}

    // Last SID Index. The type is interface{} with range: 0..4294967295.
    LastSidIndex interface{}

    // Attached flag. The type is SrmsMiFlagEB.
    FlagAttached interface{}

    // addr.
    Addr Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi_Addr
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi) GetEntityData() *types.CommonEntityData {
    policyMi.EntityData.YFilter = policyMi.YFilter
    policyMi.EntityData.YangName = "policy-mi"
    policyMi.EntityData.BundleName = "cisco_ios_xr"
    policyMi.EntityData.ParentYangName = "policy-ipv6-backup"
    policyMi.EntityData.SegmentPath = "policy-mi" + "[mi-id='" + fmt.Sprintf("%v", policyMi.MiId) + "']"
    policyMi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyMi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyMi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyMi.EntityData.Children = make(map[string]types.YChild)
    policyMi.EntityData.Children["addr"] = types.YChild{"Addr", &policyMi.Addr}
    policyMi.EntityData.Leafs = make(map[string]types.YLeaf)
    policyMi.EntityData.Leafs["mi-id"] = types.YLeaf{"MiId", policyMi.MiId}
    policyMi.EntityData.Leafs["src"] = types.YLeaf{"Src", policyMi.Src}
    policyMi.EntityData.Leafs["router"] = types.YLeaf{"Router", policyMi.Router}
    policyMi.EntityData.Leafs["area"] = types.YLeaf{"Area", policyMi.Area}
    policyMi.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", policyMi.Prefix}
    policyMi.EntityData.Leafs["sid-start"] = types.YLeaf{"SidStart", policyMi.SidStart}
    policyMi.EntityData.Leafs["sid-count"] = types.YLeaf{"SidCount", policyMi.SidCount}
    policyMi.EntityData.Leafs["last-prefix"] = types.YLeaf{"LastPrefix", policyMi.LastPrefix}
    policyMi.EntityData.Leafs["last-sid-index"] = types.YLeaf{"LastSidIndex", policyMi.LastSidIndex}
    policyMi.EntityData.Leafs["flag-attached"] = types.YLeaf{"FlagAttached", policyMi.FlagAttached}
    return &(policyMi.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi_Addr
// addr
type Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi_Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF. The type is SrmsMiAfEB.
    Af interface{}

    // IPv4. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4 interface{}

    // IPv6. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6 interface{}
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi_Addr) GetEntityData() *types.CommonEntityData {
    addr.EntityData.YFilter = addr.YFilter
    addr.EntityData.YangName = "addr"
    addr.EntityData.BundleName = "cisco_ios_xr"
    addr.EntityData.ParentYangName = "policy-mi"
    addr.EntityData.SegmentPath = "addr"
    addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    addr.EntityData.Children = make(map[string]types.YChild)
    addr.EntityData.Leafs = make(map[string]types.YLeaf)
    addr.EntityData.Leafs["af"] = types.YLeaf{"Af", addr.Af}
    addr.EntityData.Leafs["ipv4"] = types.YLeaf{"Ipv4", addr.Ipv4}
    addr.EntityData.Leafs["ipv6"] = types.YLeaf{"Ipv6", addr.Ipv6}
    return &(addr.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active
// IPv6 active policy operational data
type Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Mapping Item. The type is slice of
    // Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi.
    PolicyMi []Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi
}

func (policyIpv6Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active) GetEntityData() *types.CommonEntityData {
    policyIpv6Active.EntityData.YFilter = policyIpv6Active.YFilter
    policyIpv6Active.EntityData.YangName = "policy-ipv6-active"
    policyIpv6Active.EntityData.BundleName = "cisco_ios_xr"
    policyIpv6Active.EntityData.ParentYangName = "policy-ipv6"
    policyIpv6Active.EntityData.SegmentPath = "policy-ipv6-active"
    policyIpv6Active.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyIpv6Active.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyIpv6Active.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyIpv6Active.EntityData.Children = make(map[string]types.YChild)
    policyIpv6Active.EntityData.Children["policy-mi"] = types.YChild{"PolicyMi", nil}
    for i := range policyIpv6Active.PolicyMi {
        policyIpv6Active.EntityData.Children[types.GetSegmentPath(&policyIpv6Active.PolicyMi[i])] = types.YChild{"PolicyMi", &policyIpv6Active.PolicyMi[i]}
    }
    policyIpv6Active.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(policyIpv6Active.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi
// Mapping Item
type Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Mapping Item ID (0, 1, 2, ...). The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    MiId interface{}

    // src. The type is SrmsMiSrcEB.
    Src interface{}

    // Router ID. The type is string with length: 0..30.
    Router interface{}

    // Area (OSPF) or Level (ISIS). The type is string with length: 0..30.
    Area interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    Prefix interface{}

    // Starting SID. The type is interface{} with range: 0..4294967295.
    SidStart interface{}

    // SID range. The type is interface{} with range: 0..4294967295.
    SidCount interface{}

    // Last IP Prefix. The type is string with length: 0..50.
    LastPrefix interface{}

    // Last SID Index. The type is interface{} with range: 0..4294967295.
    LastSidIndex interface{}

    // Attached flag. The type is SrmsMiFlagEB.
    FlagAttached interface{}

    // addr.
    Addr Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi_Addr
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi) GetEntityData() *types.CommonEntityData {
    policyMi.EntityData.YFilter = policyMi.YFilter
    policyMi.EntityData.YangName = "policy-mi"
    policyMi.EntityData.BundleName = "cisco_ios_xr"
    policyMi.EntityData.ParentYangName = "policy-ipv6-active"
    policyMi.EntityData.SegmentPath = "policy-mi" + "[mi-id='" + fmt.Sprintf("%v", policyMi.MiId) + "']"
    policyMi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyMi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyMi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyMi.EntityData.Children = make(map[string]types.YChild)
    policyMi.EntityData.Children["addr"] = types.YChild{"Addr", &policyMi.Addr}
    policyMi.EntityData.Leafs = make(map[string]types.YLeaf)
    policyMi.EntityData.Leafs["mi-id"] = types.YLeaf{"MiId", policyMi.MiId}
    policyMi.EntityData.Leafs["src"] = types.YLeaf{"Src", policyMi.Src}
    policyMi.EntityData.Leafs["router"] = types.YLeaf{"Router", policyMi.Router}
    policyMi.EntityData.Leafs["area"] = types.YLeaf{"Area", policyMi.Area}
    policyMi.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", policyMi.Prefix}
    policyMi.EntityData.Leafs["sid-start"] = types.YLeaf{"SidStart", policyMi.SidStart}
    policyMi.EntityData.Leafs["sid-count"] = types.YLeaf{"SidCount", policyMi.SidCount}
    policyMi.EntityData.Leafs["last-prefix"] = types.YLeaf{"LastPrefix", policyMi.LastPrefix}
    policyMi.EntityData.Leafs["last-sid-index"] = types.YLeaf{"LastSidIndex", policyMi.LastSidIndex}
    policyMi.EntityData.Leafs["flag-attached"] = types.YLeaf{"FlagAttached", policyMi.FlagAttached}
    return &(policyMi.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi_Addr
// addr
type Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi_Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF. The type is SrmsMiAfEB.
    Af interface{}

    // IPv4. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4 interface{}

    // IPv6. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6 interface{}
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi_Addr) GetEntityData() *types.CommonEntityData {
    addr.EntityData.YFilter = addr.YFilter
    addr.EntityData.YangName = "addr"
    addr.EntityData.BundleName = "cisco_ios_xr"
    addr.EntityData.ParentYangName = "policy-mi"
    addr.EntityData.SegmentPath = "addr"
    addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    addr.EntityData.Children = make(map[string]types.YChild)
    addr.EntityData.Leafs = make(map[string]types.YLeaf)
    addr.EntityData.Leafs["af"] = types.YLeaf{"Af", addr.Af}
    addr.EntityData.Leafs["ipv4"] = types.YLeaf{"Ipv4", addr.Ipv4}
    addr.EntityData.Leafs["ipv6"] = types.YLeaf{"Ipv6", addr.Ipv6}
    return &(addr.EntityData)
}

// Isis_Instances_Instance_ErrorLog
// Log of errors and warnings
type Isis_Instances_Instance_ErrorLog struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Error Log entries. The type is slice of
    // Isis_Instances_Instance_ErrorLog_LogEntry.
    LogEntry []Isis_Instances_Instance_ErrorLog_LogEntry
}

func (errorLog *Isis_Instances_Instance_ErrorLog) GetEntityData() *types.CommonEntityData {
    errorLog.EntityData.YFilter = errorLog.YFilter
    errorLog.EntityData.YangName = "error-log"
    errorLog.EntityData.BundleName = "cisco_ios_xr"
    errorLog.EntityData.ParentYangName = "instance"
    errorLog.EntityData.SegmentPath = "error-log"
    errorLog.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    errorLog.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    errorLog.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    errorLog.EntityData.Children = make(map[string]types.YChild)
    errorLog.EntityData.Children["log-entry"] = types.YChild{"LogEntry", nil}
    for i := range errorLog.LogEntry {
        errorLog.EntityData.Children[types.GetSegmentPath(&errorLog.LogEntry[i])] = types.YChild{"LogEntry", &errorLog.LogEntry[i]}
    }
    errorLog.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(errorLog.EntityData)
}

// Isis_Instances_Instance_ErrorLog_LogEntry
// Error Log entries
type Isis_Instances_Instance_ErrorLog_LogEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Logging level. The type is IsisErrLogLevel.
    ErrorLogLevel interface{}

    // Error code. The type is interface{} with range: 0..4294967295.
    ErrorCode interface{}

    // Error details. The type is string.
    ErrorReason interface{}

    // Generic entry data.
    GenericData Isis_Instances_Instance_ErrorLog_LogEntry_GenericData
}

func (logEntry *Isis_Instances_Instance_ErrorLog_LogEntry) GetEntityData() *types.CommonEntityData {
    logEntry.EntityData.YFilter = logEntry.YFilter
    logEntry.EntityData.YangName = "log-entry"
    logEntry.EntityData.BundleName = "cisco_ios_xr"
    logEntry.EntityData.ParentYangName = "error-log"
    logEntry.EntityData.SegmentPath = "log-entry"
    logEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    logEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    logEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    logEntry.EntityData.Children = make(map[string]types.YChild)
    logEntry.EntityData.Children["generic-data"] = types.YChild{"GenericData", &logEntry.GenericData}
    logEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    logEntry.EntityData.Leafs["error-log-level"] = types.YLeaf{"ErrorLogLevel", logEntry.ErrorLogLevel}
    logEntry.EntityData.Leafs["error-code"] = types.YLeaf{"ErrorCode", logEntry.ErrorCode}
    logEntry.EntityData.Leafs["error-reason"] = types.YLeaf{"ErrorReason", logEntry.ErrorReason}
    return &(logEntry.EntityData)
}

// Isis_Instances_Instance_ErrorLog_LogEntry_GenericData
// Generic entry data
type Isis_Instances_Instance_ErrorLog_LogEntry_GenericData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in UTC relative to Jan 1st, 1970.
    Timestamp Isis_Instances_Instance_ErrorLog_LogEntry_GenericData_Timestamp
}

func (genericData *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData) GetEntityData() *types.CommonEntityData {
    genericData.EntityData.YFilter = genericData.YFilter
    genericData.EntityData.YangName = "generic-data"
    genericData.EntityData.BundleName = "cisco_ios_xr"
    genericData.EntityData.ParentYangName = "log-entry"
    genericData.EntityData.SegmentPath = "generic-data"
    genericData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericData.EntityData.Children = make(map[string]types.YChild)
    genericData.EntityData.Children["timestamp"] = types.YChild{"Timestamp", &genericData.Timestamp}
    genericData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(genericData.EntityData)
}

// Isis_Instances_Instance_ErrorLog_LogEntry_GenericData_Timestamp
// Time in UTC relative to Jan 1st, 1970
type Isis_Instances_Instance_ErrorLog_LogEntry_GenericData_Timestamp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (timestamp *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData_Timestamp) GetEntityData() *types.CommonEntityData {
    timestamp.EntityData.YFilter = timestamp.YFilter
    timestamp.EntityData.YangName = "timestamp"
    timestamp.EntityData.BundleName = "cisco_ios_xr"
    timestamp.EntityData.ParentYangName = "generic-data"
    timestamp.EntityData.SegmentPath = "timestamp"
    timestamp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timestamp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timestamp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timestamp.EntityData.Children = make(map[string]types.YChild)
    timestamp.EntityData.Leafs = make(map[string]types.YLeaf)
    timestamp.EntityData.Leafs["seconds"] = types.YLeaf{"Seconds", timestamp.Seconds}
    timestamp.EntityData.Leafs["nano-seconds"] = types.YLeaf{"NanoSeconds", timestamp.NanoSeconds}
    return &(timestamp.EntityData)
}

// Isis_Instances_Instance_CheckpointInterfaces
// Checkpointed interface table
type Isis_Instances_Instance_CheckpointInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Checkpointed information about one IS-IS interface. The type is slice of
    // Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface.
    CheckpointInterface []Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface
}

func (checkpointInterfaces *Isis_Instances_Instance_CheckpointInterfaces) GetEntityData() *types.CommonEntityData {
    checkpointInterfaces.EntityData.YFilter = checkpointInterfaces.YFilter
    checkpointInterfaces.EntityData.YangName = "checkpoint-interfaces"
    checkpointInterfaces.EntityData.BundleName = "cisco_ios_xr"
    checkpointInterfaces.EntityData.ParentYangName = "instance"
    checkpointInterfaces.EntityData.SegmentPath = "checkpoint-interfaces"
    checkpointInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    checkpointInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    checkpointInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    checkpointInterfaces.EntityData.Children = make(map[string]types.YChild)
    checkpointInterfaces.EntityData.Children["checkpoint-interface"] = types.YChild{"CheckpointInterface", nil}
    for i := range checkpointInterfaces.CheckpointInterface {
        checkpointInterfaces.EntityData.Children[types.GetSegmentPath(&checkpointInterfaces.CheckpointInterface[i])] = types.YChild{"CheckpointInterface", &checkpointInterfaces.CheckpointInterface[i]}
    }
    checkpointInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(checkpointInterfaces.EntityData)
}

// Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface
// Checkpointed information about one IS-IS
// interface
type Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // Checkpoint object ID. The type is interface{} with range: 0..4294967295.
    CheckpointObjectId interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // Local interface handle. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    CheckpointInterfaceHandle interface{}

    // Local circuit number. The type is interface{} with range: 0..255.
    LocalCircuitNumber interface{}

    // Areas in which this system is DIS. The type is IsisLevels.
    DisAreas interface{}

    // TRUE if there is an adjacency on this interface. The type is bool.
    HasAdjacency interface{}

    // SNPA of this interface. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    LocalSnpa interface{}

    // TRUE if multicast group registration succeeded on this interface. The type
    // is bool.
    HasJoinedMcastGroup interface{}

    // MPLS LDP sync status. The type is bool.
    HasAchievedLdpSync interface{}

    // MPLS LDPv6 sync status. The type is bool.
    HasAchievedLdPv6Sync interface{}
}

func (checkpointInterface *Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface) GetEntityData() *types.CommonEntityData {
    checkpointInterface.EntityData.YFilter = checkpointInterface.YFilter
    checkpointInterface.EntityData.YangName = "checkpoint-interface"
    checkpointInterface.EntityData.BundleName = "cisco_ios_xr"
    checkpointInterface.EntityData.ParentYangName = "checkpoint-interfaces"
    checkpointInterface.EntityData.SegmentPath = "checkpoint-interface" + "[interface-name='" + fmt.Sprintf("%v", checkpointInterface.InterfaceName) + "']"
    checkpointInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    checkpointInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    checkpointInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    checkpointInterface.EntityData.Children = make(map[string]types.YChild)
    checkpointInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    checkpointInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", checkpointInterface.InterfaceName}
    checkpointInterface.EntityData.Leafs["checkpoint-object-id"] = types.YLeaf{"CheckpointObjectId", checkpointInterface.CheckpointObjectId}
    checkpointInterface.EntityData.Leafs["interface-name-xr"] = types.YLeaf{"InterfaceNameXr", checkpointInterface.InterfaceNameXr}
    checkpointInterface.EntityData.Leafs["checkpoint-interface-handle"] = types.YLeaf{"CheckpointInterfaceHandle", checkpointInterface.CheckpointInterfaceHandle}
    checkpointInterface.EntityData.Leafs["local-circuit-number"] = types.YLeaf{"LocalCircuitNumber", checkpointInterface.LocalCircuitNumber}
    checkpointInterface.EntityData.Leafs["dis-areas"] = types.YLeaf{"DisAreas", checkpointInterface.DisAreas}
    checkpointInterface.EntityData.Leafs["has-adjacency"] = types.YLeaf{"HasAdjacency", checkpointInterface.HasAdjacency}
    checkpointInterface.EntityData.Leafs["local-snpa"] = types.YLeaf{"LocalSnpa", checkpointInterface.LocalSnpa}
    checkpointInterface.EntityData.Leafs["has-joined-mcast-group"] = types.YLeaf{"HasJoinedMcastGroup", checkpointInterface.HasJoinedMcastGroup}
    checkpointInterface.EntityData.Leafs["has-achieved-ldp-sync"] = types.YLeaf{"HasAchievedLdpSync", checkpointInterface.HasAchievedLdpSync}
    checkpointInterface.EntityData.Leafs["has-achieved-ld-pv6-sync"] = types.YLeaf{"HasAchievedLdPv6Sync", checkpointInterface.HasAchievedLdPv6Sync}
    return &(checkpointInterface.EntityData)
}

// Isis_Instances_Instance_InterfaceStatistics
// Interface statistics table
type Isis_Instances_Instance_InterfaceStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Statistics data for one IS-IS interface. The type is slice of
    // Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic.
    InterfaceStatistic []Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic
}

func (interfaceStatistics *Isis_Instances_Instance_InterfaceStatistics) GetEntityData() *types.CommonEntityData {
    interfaceStatistics.EntityData.YFilter = interfaceStatistics.YFilter
    interfaceStatistics.EntityData.YangName = "interface-statistics"
    interfaceStatistics.EntityData.BundleName = "cisco_ios_xr"
    interfaceStatistics.EntityData.ParentYangName = "instance"
    interfaceStatistics.EntityData.SegmentPath = "interface-statistics"
    interfaceStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStatistics.EntityData.Children = make(map[string]types.YChild)
    interfaceStatistics.EntityData.Children["interface-statistic"] = types.YChild{"InterfaceStatistic", nil}
    for i := range interfaceStatistics.InterfaceStatistic {
        interfaceStatistics.EntityData.Children[types.GetSegmentPath(&interfaceStatistics.InterfaceStatistic[i])] = types.YChild{"InterfaceStatistic", &interfaceStatistics.InterfaceStatistic[i]}
    }
    interfaceStatistics.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(interfaceStatistics.EntityData)
}

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic
// Statistics data for one IS-IS interface
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // Interface to which traffic statistics apply. The type is string with
    // pattern: b'[a-zA-Z0-9./-]+'.
    TrafficInterface interface{}

    // Interface media class. The type is IsisMediaClass.
    InterfaceMediaType interface{}

    // P2P interface statistics. NULL for non-P2P interfaces.
    P2PStatistics Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics

    // Per-area data. The type is slice of
    // Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData.
    PerAreaData []Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData
}

func (interfaceStatistic *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic) GetEntityData() *types.CommonEntityData {
    interfaceStatistic.EntityData.YFilter = interfaceStatistic.YFilter
    interfaceStatistic.EntityData.YangName = "interface-statistic"
    interfaceStatistic.EntityData.BundleName = "cisco_ios_xr"
    interfaceStatistic.EntityData.ParentYangName = "interface-statistics"
    interfaceStatistic.EntityData.SegmentPath = "interface-statistic" + "[interface-name='" + fmt.Sprintf("%v", interfaceStatistic.InterfaceName) + "']"
    interfaceStatistic.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStatistic.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStatistic.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStatistic.EntityData.Children = make(map[string]types.YChild)
    interfaceStatistic.EntityData.Children["p2p-statistics"] = types.YChild{"P2PStatistics", &interfaceStatistic.P2PStatistics}
    interfaceStatistic.EntityData.Children["per-area-data"] = types.YChild{"PerAreaData", nil}
    for i := range interfaceStatistic.PerAreaData {
        interfaceStatistic.EntityData.Children[types.GetSegmentPath(&interfaceStatistic.PerAreaData[i])] = types.YChild{"PerAreaData", &interfaceStatistic.PerAreaData[i]}
    }
    interfaceStatistic.EntityData.Leafs = make(map[string]types.YLeaf)
    interfaceStatistic.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", interfaceStatistic.InterfaceName}
    interfaceStatistic.EntityData.Leafs["traffic-interface"] = types.YLeaf{"TrafficInterface", interfaceStatistic.TrafficInterface}
    interfaceStatistic.EntityData.Leafs["interface-media-type"] = types.YLeaf{"InterfaceMediaType", interfaceStatistic.InterfaceMediaType}
    return &(interfaceStatistic.EntityData)
}

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics
// P2P interface statistics. NULL for non-P2P
// interfaces
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IIHs not sent due to memory exhaustion. The type is interface{} with range:
    // 0..4294967295.
    MemoryExhaustedIihCount interface{}

    // LSP retransmissions. The type is interface{} with range: 0..4294967295.
    LspRetransmitCount interface{}

    // IIH statistics.
    IihCount Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics_IihCount
}

func (p2PStatistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics) GetEntityData() *types.CommonEntityData {
    p2PStatistics.EntityData.YFilter = p2PStatistics.YFilter
    p2PStatistics.EntityData.YangName = "p2p-statistics"
    p2PStatistics.EntityData.BundleName = "cisco_ios_xr"
    p2PStatistics.EntityData.ParentYangName = "interface-statistic"
    p2PStatistics.EntityData.SegmentPath = "p2p-statistics"
    p2PStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    p2PStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    p2PStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    p2PStatistics.EntityData.Children = make(map[string]types.YChild)
    p2PStatistics.EntityData.Children["iih-count"] = types.YChild{"IihCount", &p2PStatistics.IihCount}
    p2PStatistics.EntityData.Leafs = make(map[string]types.YLeaf)
    p2PStatistics.EntityData.Leafs["memory-exhausted-iih-count"] = types.YLeaf{"MemoryExhaustedIihCount", p2PStatistics.MemoryExhaustedIihCount}
    p2PStatistics.EntityData.Leafs["lsp-retransmit-count"] = types.YLeaf{"LspRetransmitCount", p2PStatistics.LspRetransmitCount}
    return &(p2PStatistics.EntityData)
}

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics_IihCount
// IIH statistics
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics_IihCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PDUs received. The type is interface{} with range: 0..4294967295.
    PduReceiveCount interface{}

    // PDUs sent. The type is interface{} with range: 0..4294967295.
    PduSendCount interface{}
}

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2PStatistics_IihCount) GetEntityData() *types.CommonEntityData {
    iihCount.EntityData.YFilter = iihCount.YFilter
    iihCount.EntityData.YangName = "iih-count"
    iihCount.EntityData.BundleName = "cisco_ios_xr"
    iihCount.EntityData.ParentYangName = "p2p-statistics"
    iihCount.EntityData.SegmentPath = "iih-count"
    iihCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iihCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iihCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iihCount.EntityData.Children = make(map[string]types.YChild)
    iihCount.EntityData.Leafs = make(map[string]types.YLeaf)
    iihCount.EntityData.Leafs["pdu-receive-count"] = types.YLeaf{"PduReceiveCount", iihCount.PduReceiveCount}
    iihCount.EntityData.Leafs["pdu-send-count"] = types.YLeaf{"PduSendCount", iihCount.PduSendCount}
    return &(iihCount.EntityData)
}

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData
// Per-area data
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Level of the area this data relates to. The type is IsisLevel.
    Level interface{}

    // Statistics.
    Statistics Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics

    // LAN interface statistics. NULL for non-LAN interfaces.
    LanData Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData
}

func (perAreaData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData) GetEntityData() *types.CommonEntityData {
    perAreaData.EntityData.YFilter = perAreaData.YFilter
    perAreaData.EntityData.YangName = "per-area-data"
    perAreaData.EntityData.BundleName = "cisco_ios_xr"
    perAreaData.EntityData.ParentYangName = "interface-statistic"
    perAreaData.EntityData.SegmentPath = "per-area-data"
    perAreaData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perAreaData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perAreaData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perAreaData.EntityData.Children = make(map[string]types.YChild)
    perAreaData.EntityData.Children["statistics"] = types.YChild{"Statistics", &perAreaData.Statistics}
    perAreaData.EntityData.Children["lan-data"] = types.YChild{"LanData", &perAreaData.LanData}
    perAreaData.EntityData.Leafs = make(map[string]types.YLeaf)
    perAreaData.EntityData.Leafs["level"] = types.YLeaf{"Level", perAreaData.Level}
    return &(perAreaData.EntityData)
}

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics
// Statistics
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of LSPs dropped due to minimum arrival time config. The type is
    // interface{} with range: 0..4294967295.
    LspDropCount interface{}

    // Count of LSPs already received by neighbors and not flooded. The type is
    // interface{} with range: 0..4294967295.
    LspFloodingDupCount interface{}

    // LSP statistics.
    LspCount Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_LspCount

    // CSNP statistics.
    CsnpCount Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_CsnpCount

    // PSNP statistics.
    PsnpCount Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_PsnpCount
}

func (statistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "per-area-data"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = make(map[string]types.YChild)
    statistics.EntityData.Children["lsp-count"] = types.YChild{"LspCount", &statistics.LspCount}
    statistics.EntityData.Children["csnp-count"] = types.YChild{"CsnpCount", &statistics.CsnpCount}
    statistics.EntityData.Children["psnp-count"] = types.YChild{"PsnpCount", &statistics.PsnpCount}
    statistics.EntityData.Leafs = make(map[string]types.YLeaf)
    statistics.EntityData.Leafs["lsp-drop-count"] = types.YLeaf{"LspDropCount", statistics.LspDropCount}
    statistics.EntityData.Leafs["lsp-flooding-dup-count"] = types.YLeaf{"LspFloodingDupCount", statistics.LspFloodingDupCount}
    return &(statistics.EntityData)
}

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_LspCount
// LSP statistics
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_LspCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PDUs received. The type is interface{} with range: 0..4294967295.
    PduReceiveCount interface{}

    // PDUs sent. The type is interface{} with range: 0..4294967295.
    PduSendCount interface{}
}

func (lspCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_LspCount) GetEntityData() *types.CommonEntityData {
    lspCount.EntityData.YFilter = lspCount.YFilter
    lspCount.EntityData.YangName = "lsp-count"
    lspCount.EntityData.BundleName = "cisco_ios_xr"
    lspCount.EntityData.ParentYangName = "statistics"
    lspCount.EntityData.SegmentPath = "lsp-count"
    lspCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lspCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lspCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lspCount.EntityData.Children = make(map[string]types.YChild)
    lspCount.EntityData.Leafs = make(map[string]types.YLeaf)
    lspCount.EntityData.Leafs["pdu-receive-count"] = types.YLeaf{"PduReceiveCount", lspCount.PduReceiveCount}
    lspCount.EntityData.Leafs["pdu-send-count"] = types.YLeaf{"PduSendCount", lspCount.PduSendCount}
    return &(lspCount.EntityData)
}

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_CsnpCount
// CSNP statistics
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_CsnpCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PDUs received. The type is interface{} with range: 0..4294967295.
    PduReceiveCount interface{}

    // PDUs sent. The type is interface{} with range: 0..4294967295.
    PduSendCount interface{}
}

func (csnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_CsnpCount) GetEntityData() *types.CommonEntityData {
    csnpCount.EntityData.YFilter = csnpCount.YFilter
    csnpCount.EntityData.YangName = "csnp-count"
    csnpCount.EntityData.BundleName = "cisco_ios_xr"
    csnpCount.EntityData.ParentYangName = "statistics"
    csnpCount.EntityData.SegmentPath = "csnp-count"
    csnpCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    csnpCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    csnpCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    csnpCount.EntityData.Children = make(map[string]types.YChild)
    csnpCount.EntityData.Leafs = make(map[string]types.YLeaf)
    csnpCount.EntityData.Leafs["pdu-receive-count"] = types.YLeaf{"PduReceiveCount", csnpCount.PduReceiveCount}
    csnpCount.EntityData.Leafs["pdu-send-count"] = types.YLeaf{"PduSendCount", csnpCount.PduSendCount}
    return &(csnpCount.EntityData)
}

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_PsnpCount
// PSNP statistics
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_PsnpCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PDUs received. The type is interface{} with range: 0..4294967295.
    PduReceiveCount interface{}

    // PDUs sent. The type is interface{} with range: 0..4294967295.
    PduSendCount interface{}
}

func (psnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_PsnpCount) GetEntityData() *types.CommonEntityData {
    psnpCount.EntityData.YFilter = psnpCount.YFilter
    psnpCount.EntityData.YangName = "psnp-count"
    psnpCount.EntityData.BundleName = "cisco_ios_xr"
    psnpCount.EntityData.ParentYangName = "statistics"
    psnpCount.EntityData.SegmentPath = "psnp-count"
    psnpCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    psnpCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    psnpCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    psnpCount.EntityData.Children = make(map[string]types.YChild)
    psnpCount.EntityData.Leafs = make(map[string]types.YLeaf)
    psnpCount.EntityData.Leafs["pdu-receive-count"] = types.YLeaf{"PduReceiveCount", psnpCount.PduReceiveCount}
    psnpCount.EntityData.Leafs["pdu-send-count"] = types.YLeaf{"PduSendCount", psnpCount.PduSendCount}
    return &(psnpCount.EntityData)
}

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData
// LAN interface statistics. NULL for non-LAN
// interfaces
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IIHs not sent due to memory exhaustion. The type is interface{} with range:
    // 0..4294967295.
    MemoryExhaustedIihCount interface{}

    // DIS elections. The type is interface{} with range: 0..4294967295.
    DisElectionCount interface{}

    // IIH statistics.
    IihCount Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData_IihCount
}

func (lanData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData) GetEntityData() *types.CommonEntityData {
    lanData.EntityData.YFilter = lanData.YFilter
    lanData.EntityData.YangName = "lan-data"
    lanData.EntityData.BundleName = "cisco_ios_xr"
    lanData.EntityData.ParentYangName = "per-area-data"
    lanData.EntityData.SegmentPath = "lan-data"
    lanData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lanData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lanData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lanData.EntityData.Children = make(map[string]types.YChild)
    lanData.EntityData.Children["iih-count"] = types.YChild{"IihCount", &lanData.IihCount}
    lanData.EntityData.Leafs = make(map[string]types.YLeaf)
    lanData.EntityData.Leafs["memory-exhausted-iih-count"] = types.YLeaf{"MemoryExhaustedIihCount", lanData.MemoryExhaustedIihCount}
    lanData.EntityData.Leafs["dis-election-count"] = types.YLeaf{"DisElectionCount", lanData.DisElectionCount}
    return &(lanData.EntityData)
}

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData_IihCount
// IIH statistics
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData_IihCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PDUs received. The type is interface{} with range: 0..4294967295.
    PduReceiveCount interface{}

    // PDUs sent. The type is interface{} with range: 0..4294967295.
    PduSendCount interface{}
}

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData_IihCount) GetEntityData() *types.CommonEntityData {
    iihCount.EntityData.YFilter = iihCount.YFilter
    iihCount.EntityData.YangName = "iih-count"
    iihCount.EntityData.BundleName = "cisco_ios_xr"
    iihCount.EntityData.ParentYangName = "lan-data"
    iihCount.EntityData.SegmentPath = "iih-count"
    iihCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iihCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iihCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iihCount.EntityData.Children = make(map[string]types.YChild)
    iihCount.EntityData.Leafs = make(map[string]types.YLeaf)
    iihCount.EntityData.Leafs["pdu-receive-count"] = types.YLeaf{"PduReceiveCount", iihCount.PduReceiveCount}
    iihCount.EntityData.Leafs["pdu-send-count"] = types.YLeaf{"PduSendCount", iihCount.PduSendCount}
    return &(iihCount.EntityData)
}

// Isis_Instances_Instance_Protocol
// Basic protocol information about an IS-IS
// instance
type Isis_Instances_Instance_Protocol struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF context. The type is string.
    VrfContext interface{}

    // Local system ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    NsapSystemId interface{}

    // Indicates if system ID valid. The type is bool.
    ValidNsapSystemId interface{}

    // instance id. The type is interface{} with range: 0..65535.
    InstanceId interface{}

    // Levels running. The type is IsisLevels.
    RunningLevels interface{}

    // Configured NSF type. The type is IsisNsfFlavor.
    ConfiguredNsfFlavor interface{}

    // NSF type of last restart. The type is IsisNsfFlavor.
    LastRestartNsfFlavor interface{}

    // Last restart status. The type is IsisStartupStatus.
    LastRestartStatus interface{}

    // TE connection. The type is IsisUp.
    TeConnection interface{}

    // Time remaining until the next NSF restart may be attempted. The type is
    // interface{} with range: 0..4294967295.
    RemainingTimeForNextNsfRestart interface{}

    // Adj Forming count. The type is interface{} with range: 0..4294967295.
    AdjFormCount interface{}

    // Adj Full count. The type is interface{} with range: 0..4294967295.
    AdjFullCount interface{}

    // Adjacency Stagger Enabled. The type is bool.
    AdjStaggerEnabled interface{}

    // Adjacency Stagger Initiall Number of Forming Neighbors Allowed. The type is
    // interface{} with range: 0..4294967295.
    AdjStaggerInit interface{}

    // Adjacency Stagger Max Number of Forming Neighbors Allowed. The type is
    // interface{} with range: 0..4294967295.
    AdjStaggerMax interface{}

    // Is SRGB allocated ?. The type is bool.
    SrgbAllocated interface{}

    // First label in SRGB. The type is interface{} with range: 0..4294967295.
    SrgbStart interface{}

    // Last label in SRGB. The type is interface{} with range: 0..4294967295.
    SrgbEnd interface{}

    // Is SRLB allocated ?. The type is bool.
    SrlbAllocated interface{}

    // First label in SRLB. The type is interface{} with range: 0..4294967295.
    SrlbStart interface{}

    // Last label in SRLB. The type is interface{} with range: 0..4294967295.
    SrlbEnd interface{}

    // Manual area addresses. The type is slice of
    // Isis_Instances_Instance_Protocol_ManualAreaAddress.
    ManualAreaAddress []Isis_Instances_Instance_Protocol_ManualAreaAddress

    // Active area addresses. The type is slice of
    // Isis_Instances_Instance_Protocol_ActiveAreaAddress.
    ActiveAreaAddress []Isis_Instances_Instance_Protocol_ActiveAreaAddress

    // Per-topology data. The type is slice of
    // Isis_Instances_Instance_Protocol_PerTopoData.
    PerTopoData []Isis_Instances_Instance_Protocol_PerTopoData
}

func (protocol *Isis_Instances_Instance_Protocol) GetEntityData() *types.CommonEntityData {
    protocol.EntityData.YFilter = protocol.YFilter
    protocol.EntityData.YangName = "protocol"
    protocol.EntityData.BundleName = "cisco_ios_xr"
    protocol.EntityData.ParentYangName = "instance"
    protocol.EntityData.SegmentPath = "protocol"
    protocol.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocol.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocol.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocol.EntityData.Children = make(map[string]types.YChild)
    protocol.EntityData.Children["manual-area-address"] = types.YChild{"ManualAreaAddress", nil}
    for i := range protocol.ManualAreaAddress {
        protocol.EntityData.Children[types.GetSegmentPath(&protocol.ManualAreaAddress[i])] = types.YChild{"ManualAreaAddress", &protocol.ManualAreaAddress[i]}
    }
    protocol.EntityData.Children["active-area-address"] = types.YChild{"ActiveAreaAddress", nil}
    for i := range protocol.ActiveAreaAddress {
        protocol.EntityData.Children[types.GetSegmentPath(&protocol.ActiveAreaAddress[i])] = types.YChild{"ActiveAreaAddress", &protocol.ActiveAreaAddress[i]}
    }
    protocol.EntityData.Children["per-topo-data"] = types.YChild{"PerTopoData", nil}
    for i := range protocol.PerTopoData {
        protocol.EntityData.Children[types.GetSegmentPath(&protocol.PerTopoData[i])] = types.YChild{"PerTopoData", &protocol.PerTopoData[i]}
    }
    protocol.EntityData.Leafs = make(map[string]types.YLeaf)
    protocol.EntityData.Leafs["vrf-context"] = types.YLeaf{"VrfContext", protocol.VrfContext}
    protocol.EntityData.Leafs["nsap-system-id"] = types.YLeaf{"NsapSystemId", protocol.NsapSystemId}
    protocol.EntityData.Leafs["valid-nsap-system-id"] = types.YLeaf{"ValidNsapSystemId", protocol.ValidNsapSystemId}
    protocol.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", protocol.InstanceId}
    protocol.EntityData.Leafs["running-levels"] = types.YLeaf{"RunningLevels", protocol.RunningLevels}
    protocol.EntityData.Leafs["configured-nsf-flavor"] = types.YLeaf{"ConfiguredNsfFlavor", protocol.ConfiguredNsfFlavor}
    protocol.EntityData.Leafs["last-restart-nsf-flavor"] = types.YLeaf{"LastRestartNsfFlavor", protocol.LastRestartNsfFlavor}
    protocol.EntityData.Leafs["last-restart-status"] = types.YLeaf{"LastRestartStatus", protocol.LastRestartStatus}
    protocol.EntityData.Leafs["te-connection"] = types.YLeaf{"TeConnection", protocol.TeConnection}
    protocol.EntityData.Leafs["remaining-time-for-next-nsf-restart"] = types.YLeaf{"RemainingTimeForNextNsfRestart", protocol.RemainingTimeForNextNsfRestart}
    protocol.EntityData.Leafs["adj-form-count"] = types.YLeaf{"AdjFormCount", protocol.AdjFormCount}
    protocol.EntityData.Leafs["adj-full-count"] = types.YLeaf{"AdjFullCount", protocol.AdjFullCount}
    protocol.EntityData.Leafs["adj-stagger-enabled"] = types.YLeaf{"AdjStaggerEnabled", protocol.AdjStaggerEnabled}
    protocol.EntityData.Leafs["adj-stagger-init"] = types.YLeaf{"AdjStaggerInit", protocol.AdjStaggerInit}
    protocol.EntityData.Leafs["adj-stagger-max"] = types.YLeaf{"AdjStaggerMax", protocol.AdjStaggerMax}
    protocol.EntityData.Leafs["srgb-allocated"] = types.YLeaf{"SrgbAllocated", protocol.SrgbAllocated}
    protocol.EntityData.Leafs["srgb-start"] = types.YLeaf{"SrgbStart", protocol.SrgbStart}
    protocol.EntityData.Leafs["srgb-end"] = types.YLeaf{"SrgbEnd", protocol.SrgbEnd}
    protocol.EntityData.Leafs["srlb-allocated"] = types.YLeaf{"SrlbAllocated", protocol.SrlbAllocated}
    protocol.EntityData.Leafs["srlb-start"] = types.YLeaf{"SrlbStart", protocol.SrlbStart}
    protocol.EntityData.Leafs["srlb-end"] = types.YLeaf{"SrlbEnd", protocol.SrlbEnd}
    return &(protocol.EntityData)
}

// Isis_Instances_Instance_Protocol_ManualAreaAddress
// Manual area addresses
type Isis_Instances_Instance_Protocol_ManualAreaAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern: b'[a-fA-F0-9]{2}(\\.[a-fA-F0-9]{4}){0,6}'.
    Entry interface{}
}

func (manualAreaAddress *Isis_Instances_Instance_Protocol_ManualAreaAddress) GetEntityData() *types.CommonEntityData {
    manualAreaAddress.EntityData.YFilter = manualAreaAddress.YFilter
    manualAreaAddress.EntityData.YangName = "manual-area-address"
    manualAreaAddress.EntityData.BundleName = "cisco_ios_xr"
    manualAreaAddress.EntityData.ParentYangName = "protocol"
    manualAreaAddress.EntityData.SegmentPath = "manual-area-address"
    manualAreaAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    manualAreaAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    manualAreaAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    manualAreaAddress.EntityData.Children = make(map[string]types.YChild)
    manualAreaAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    manualAreaAddress.EntityData.Leafs["entry"] = types.YLeaf{"Entry", manualAreaAddress.Entry}
    return &(manualAreaAddress.EntityData)
}

// Isis_Instances_Instance_Protocol_ActiveAreaAddress
// Active area addresses
type Isis_Instances_Instance_Protocol_ActiveAreaAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern: b'[a-fA-F0-9]{2}(\\.[a-fA-F0-9]{4}){0,6}'.
    Entry interface{}
}

func (activeAreaAddress *Isis_Instances_Instance_Protocol_ActiveAreaAddress) GetEntityData() *types.CommonEntityData {
    activeAreaAddress.EntityData.YFilter = activeAreaAddress.YFilter
    activeAreaAddress.EntityData.YangName = "active-area-address"
    activeAreaAddress.EntityData.BundleName = "cisco_ios_xr"
    activeAreaAddress.EntityData.ParentYangName = "protocol"
    activeAreaAddress.EntityData.SegmentPath = "active-area-address"
    activeAreaAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    activeAreaAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    activeAreaAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    activeAreaAddress.EntityData.Children = make(map[string]types.YChild)
    activeAreaAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    activeAreaAddress.EntityData.Leafs["entry"] = types.YLeaf{"Entry", activeAreaAddress.Entry}
    return &(activeAreaAddress.EntityData)
}

// Isis_Instances_Instance_Protocol_PerTopoData
// Per-topology data
type Isis_Instances_Instance_Protocol_PerTopoData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Default administrative distance. The type is interface{} with range:
    // 0..4294967295.
    DefaultAdminDistance interface{}

    // Advertise passive interface prefixes only. The type is bool.
    AdvertisePassiveOnly interface{}

    // Waiting for redist complete RIB event. The type is bool.
    WaitRedistComplete interface{}

    // Topology ID.
    Id Isis_Instances_Instance_Protocol_PerTopoData_Id

    // List of redistributed protocols.
    RedistProtocolsList Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList

    // Per-area data. The type is slice of
    // Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData.
    PerAreaData []Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData
}

func (perTopoData *Isis_Instances_Instance_Protocol_PerTopoData) GetEntityData() *types.CommonEntityData {
    perTopoData.EntityData.YFilter = perTopoData.YFilter
    perTopoData.EntityData.YangName = "per-topo-data"
    perTopoData.EntityData.BundleName = "cisco_ios_xr"
    perTopoData.EntityData.ParentYangName = "protocol"
    perTopoData.EntityData.SegmentPath = "per-topo-data"
    perTopoData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perTopoData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perTopoData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perTopoData.EntityData.Children = make(map[string]types.YChild)
    perTopoData.EntityData.Children["id"] = types.YChild{"Id", &perTopoData.Id}
    perTopoData.EntityData.Children["redist-protocols-list"] = types.YChild{"RedistProtocolsList", &perTopoData.RedistProtocolsList}
    perTopoData.EntityData.Children["per-area-data"] = types.YChild{"PerAreaData", nil}
    for i := range perTopoData.PerAreaData {
        perTopoData.EntityData.Children[types.GetSegmentPath(&perTopoData.PerAreaData[i])] = types.YChild{"PerAreaData", &perTopoData.PerAreaData[i]}
    }
    perTopoData.EntityData.Leafs = make(map[string]types.YLeaf)
    perTopoData.EntityData.Leafs["default-admin-distance"] = types.YLeaf{"DefaultAdminDistance", perTopoData.DefaultAdminDistance}
    perTopoData.EntityData.Leafs["advertise-passive-only"] = types.YLeaf{"AdvertisePassiveOnly", perTopoData.AdvertisePassiveOnly}
    perTopoData.EntityData.Leafs["wait-redist-complete"] = types.YLeaf{"WaitRedistComplete", perTopoData.WaitRedistComplete}
    return &(perTopoData.EntityData)
}

// Isis_Instances_Instance_Protocol_PerTopoData_Id
// Topology ID
type Isis_Instances_Instance_Protocol_PerTopoData_Id struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF name. The type is IsisAfId.
    AfName interface{}

    // Sub-AF name. The type is IsisSubAfId.
    SafName interface{}

    // VRF Name. The type is string.
    VrfName interface{}

    // Topology Name. The type is string.
    TopologyName interface{}
}

func (id *Isis_Instances_Instance_Protocol_PerTopoData_Id) GetEntityData() *types.CommonEntityData {
    id.EntityData.YFilter = id.YFilter
    id.EntityData.YangName = "id"
    id.EntityData.BundleName = "cisco_ios_xr"
    id.EntityData.ParentYangName = "per-topo-data"
    id.EntityData.SegmentPath = "id"
    id.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    id.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    id.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    id.EntityData.Children = make(map[string]types.YChild)
    id.EntityData.Leafs = make(map[string]types.YLeaf)
    id.EntityData.Leafs["af-name"] = types.YLeaf{"AfName", id.AfName}
    id.EntityData.Leafs["saf-name"] = types.YLeaf{"SafName", id.SafName}
    id.EntityData.Leafs["vrf-name"] = types.YLeaf{"VrfName", id.VrfName}
    id.EntityData.Leafs["topology-name"] = types.YLeaf{"TopologyName", id.TopologyName}
    return &(id.EntityData)
}

// Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList
// List of redistributed protocols
type Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // isis sh redist entry. The type is slice of
    // Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry.
    IsisShRedistEntry []Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry
}

func (redistProtocolsList *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList) GetEntityData() *types.CommonEntityData {
    redistProtocolsList.EntityData.YFilter = redistProtocolsList.YFilter
    redistProtocolsList.EntityData.YangName = "redist-protocols-list"
    redistProtocolsList.EntityData.BundleName = "cisco_ios_xr"
    redistProtocolsList.EntityData.ParentYangName = "per-topo-data"
    redistProtocolsList.EntityData.SegmentPath = "redist-protocols-list"
    redistProtocolsList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistProtocolsList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistProtocolsList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistProtocolsList.EntityData.Children = make(map[string]types.YChild)
    redistProtocolsList.EntityData.Children["isis-sh-redist-entry"] = types.YChild{"IsisShRedistEntry", nil}
    for i := range redistProtocolsList.IsisShRedistEntry {
        redistProtocolsList.EntityData.Children[types.GetSegmentPath(&redistProtocolsList.IsisShRedistEntry[i])] = types.YChild{"IsisShRedistEntry", &redistProtocolsList.IsisShRedistEntry[i]}
    }
    redistProtocolsList.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(redistProtocolsList.EntityData)
}

// Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry
// isis sh redist entry
type Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Relevant details of the redistributed protocol.
    ProtocolDetails Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry_ProtocolDetails
}

func (isisShRedistEntry *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry) GetEntityData() *types.CommonEntityData {
    isisShRedistEntry.EntityData.YFilter = isisShRedistEntry.YFilter
    isisShRedistEntry.EntityData.YangName = "isis-sh-redist-entry"
    isisShRedistEntry.EntityData.BundleName = "cisco_ios_xr"
    isisShRedistEntry.EntityData.ParentYangName = "redist-protocols-list"
    isisShRedistEntry.EntityData.SegmentPath = "isis-sh-redist-entry"
    isisShRedistEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isisShRedistEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isisShRedistEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isisShRedistEntry.EntityData.Children = make(map[string]types.YChild)
    isisShRedistEntry.EntityData.Children["protocol-details"] = types.YChild{"ProtocolDetails", &isisShRedistEntry.ProtocolDetails}
    isisShRedistEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(isisShRedistEntry.EntityData)
}

// Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry_ProtocolDetails
// Relevant details of the redistributed protocol
type Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry_ProtocolDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol. The type is IsisRedistProto.
    Protocol interface{}

    // IS-IS instance identifier. The type is string.
    IsisInstanceId interface{}

    // OSPF process identifier. The type is string.
    OspfProcessId interface{}

    // OSPFv3 process identifier. The type is string.
    Ospfv3ProcessId interface{}

    // BGP Autonomous System number. The type is string.
    BgpAsNumber interface{}

    // EIGRP Autonomous System number. The type is string.
    EigrpAsNumber interface{}

    // Application Name. The type is string.
    ApplicationName interface{}
}

func (protocolDetails *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry_ProtocolDetails) GetEntityData() *types.CommonEntityData {
    protocolDetails.EntityData.YFilter = protocolDetails.YFilter
    protocolDetails.EntityData.YangName = "protocol-details"
    protocolDetails.EntityData.BundleName = "cisco_ios_xr"
    protocolDetails.EntityData.ParentYangName = "isis-sh-redist-entry"
    protocolDetails.EntityData.SegmentPath = "protocol-details"
    protocolDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolDetails.EntityData.Children = make(map[string]types.YChild)
    protocolDetails.EntityData.Leafs = make(map[string]types.YLeaf)
    protocolDetails.EntityData.Leafs["protocol"] = types.YLeaf{"Protocol", protocolDetails.Protocol}
    protocolDetails.EntityData.Leafs["isis-instance-id"] = types.YLeaf{"IsisInstanceId", protocolDetails.IsisInstanceId}
    protocolDetails.EntityData.Leafs["ospf-process-id"] = types.YLeaf{"OspfProcessId", protocolDetails.OspfProcessId}
    protocolDetails.EntityData.Leafs["ospfv3-process-id"] = types.YLeaf{"Ospfv3ProcessId", protocolDetails.Ospfv3ProcessId}
    protocolDetails.EntityData.Leafs["bgp-as-number"] = types.YLeaf{"BgpAsNumber", protocolDetails.BgpAsNumber}
    protocolDetails.EntityData.Leafs["eigrp-as-number"] = types.YLeaf{"EigrpAsNumber", protocolDetails.EigrpAsNumber}
    protocolDetails.EntityData.Leafs["application-name"] = types.YLeaf{"ApplicationName", protocolDetails.ApplicationName}
    return &(protocolDetails.EntityData)
}

// Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData
// Per-area data
type Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The level this data refers to. The type is IsisLevel.
    Level interface{}

    // Does this topology use the default link topology. The type is bool.
    UsesDefaultLinkTopoFlag interface{}

    // Generate metric style. The type is IsisMetricStyle.
    GeneratedMetricStyle interface{}

    // Accept metric style. The type is IsisMetricStyle.
    AcceptedMetricStyle interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // ISPF state. The type is IsisEnabled.
    IspfState interface{}

    // Indicates whether MPLS TE is enabled. The type is bool.
    TeEnabled interface{}

    // Microloop avoidance type. The type is IsisUloopAvoidance.
    UloopAvoidanceType interface{}

    // Microloop RIB update delay. The type is interface{} with range:
    // 0..4294967295.
    RibUpdateDelay interface{}

    // Explicit paths installed in the RIB. The type is bool.
    SrUloopIsActive interface{}

    // SR microloop avoidance duration. The type is interface{} with range:
    // 0..4294967295.
    Duration interface{}

    // SR microloop avoidance event. The type is IsisUloopEvent.
    SrUloopEvent interface{}

    // SR microloop near node. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}'.
    SrUloopNearNodeId interface{}

    // SR microloop far node. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}'.
    SrUloopFarNodeId interface{}
}

func (perAreaData *Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData) GetEntityData() *types.CommonEntityData {
    perAreaData.EntityData.YFilter = perAreaData.YFilter
    perAreaData.EntityData.YangName = "per-area-data"
    perAreaData.EntityData.BundleName = "cisco_ios_xr"
    perAreaData.EntityData.ParentYangName = "per-topo-data"
    perAreaData.EntityData.SegmentPath = "per-area-data"
    perAreaData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perAreaData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perAreaData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perAreaData.EntityData.Children = make(map[string]types.YChild)
    perAreaData.EntityData.Leafs = make(map[string]types.YLeaf)
    perAreaData.EntityData.Leafs["level"] = types.YLeaf{"Level", perAreaData.Level}
    perAreaData.EntityData.Leafs["uses-default-link-topo-flag"] = types.YLeaf{"UsesDefaultLinkTopoFlag", perAreaData.UsesDefaultLinkTopoFlag}
    perAreaData.EntityData.Leafs["generated-metric-style"] = types.YLeaf{"GeneratedMetricStyle", perAreaData.GeneratedMetricStyle}
    perAreaData.EntityData.Leafs["accepted-metric-style"] = types.YLeaf{"AcceptedMetricStyle", perAreaData.AcceptedMetricStyle}
    perAreaData.EntityData.Leafs["metric"] = types.YLeaf{"Metric", perAreaData.Metric}
    perAreaData.EntityData.Leafs["ispf-state"] = types.YLeaf{"IspfState", perAreaData.IspfState}
    perAreaData.EntityData.Leafs["te-enabled"] = types.YLeaf{"TeEnabled", perAreaData.TeEnabled}
    perAreaData.EntityData.Leafs["uloop-avoidance-type"] = types.YLeaf{"UloopAvoidanceType", perAreaData.UloopAvoidanceType}
    perAreaData.EntityData.Leafs["rib-update-delay"] = types.YLeaf{"RibUpdateDelay", perAreaData.RibUpdateDelay}
    perAreaData.EntityData.Leafs["sr-uloop-is-active"] = types.YLeaf{"SrUloopIsActive", perAreaData.SrUloopIsActive}
    perAreaData.EntityData.Leafs["duration"] = types.YLeaf{"Duration", perAreaData.Duration}
    perAreaData.EntityData.Leafs["sr-uloop-event"] = types.YLeaf{"SrUloopEvent", perAreaData.SrUloopEvent}
    perAreaData.EntityData.Leafs["sr-uloop-near-node-id"] = types.YLeaf{"SrUloopNearNodeId", perAreaData.SrUloopNearNodeId}
    perAreaData.EntityData.Leafs["sr-uloop-far-node-id"] = types.YLeaf{"SrUloopFarNodeId", perAreaData.SrUloopFarNodeId}
    return &(perAreaData.EntityData)
}

// Isis_Instances_Instance_NeighborSummaries
// Neighbor-summary table
type Isis_Instances_Instance_NeighborSummaries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor-summary data for a single interface. The type is slice of
    // Isis_Instances_Instance_NeighborSummaries_NeighborSummary.
    NeighborSummary []Isis_Instances_Instance_NeighborSummaries_NeighborSummary
}

func (neighborSummaries *Isis_Instances_Instance_NeighborSummaries) GetEntityData() *types.CommonEntityData {
    neighborSummaries.EntityData.YFilter = neighborSummaries.YFilter
    neighborSummaries.EntityData.YangName = "neighbor-summaries"
    neighborSummaries.EntityData.BundleName = "cisco_ios_xr"
    neighborSummaries.EntityData.ParentYangName = "instance"
    neighborSummaries.EntityData.SegmentPath = "neighbor-summaries"
    neighborSummaries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborSummaries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborSummaries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborSummaries.EntityData.Children = make(map[string]types.YChild)
    neighborSummaries.EntityData.Children["neighbor-summary"] = types.YChild{"NeighborSummary", nil}
    for i := range neighborSummaries.NeighborSummary {
        neighborSummaries.EntityData.Children[types.GetSegmentPath(&neighborSummaries.NeighborSummary[i])] = types.YChild{"NeighborSummary", &neighborSummaries.NeighborSummary[i]}
    }
    neighborSummaries.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(neighborSummaries.EntityData)
}

// Isis_Instances_Instance_NeighborSummaries_NeighborSummary
// Neighbor-summary data for a single interface
type Isis_Instances_Instance_NeighborSummaries_NeighborSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // L1-only neighbors.
    Level1Neighbors Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level1Neighbors

    // L2-only neighbors.
    Level2Neighbors Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level2Neighbors

    // L12 neighbors.
    Level12Neigbors Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level12Neigbors
}

func (neighborSummary *Isis_Instances_Instance_NeighborSummaries_NeighborSummary) GetEntityData() *types.CommonEntityData {
    neighborSummary.EntityData.YFilter = neighborSummary.YFilter
    neighborSummary.EntityData.YangName = "neighbor-summary"
    neighborSummary.EntityData.BundleName = "cisco_ios_xr"
    neighborSummary.EntityData.ParentYangName = "neighbor-summaries"
    neighborSummary.EntityData.SegmentPath = "neighbor-summary" + "[interface-name='" + fmt.Sprintf("%v", neighborSummary.InterfaceName) + "']"
    neighborSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborSummary.EntityData.Children = make(map[string]types.YChild)
    neighborSummary.EntityData.Children["level1-neighbors"] = types.YChild{"Level1Neighbors", &neighborSummary.Level1Neighbors}
    neighborSummary.EntityData.Children["level2-neighbors"] = types.YChild{"Level2Neighbors", &neighborSummary.Level2Neighbors}
    neighborSummary.EntityData.Children["level12-neigbors"] = types.YChild{"Level12Neigbors", &neighborSummary.Level12Neigbors}
    neighborSummary.EntityData.Leafs = make(map[string]types.YLeaf)
    neighborSummary.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", neighborSummary.InterfaceName}
    return &(neighborSummary.EntityData)
}

// Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level1Neighbors
// L1-only neighbors
type Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level1Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbors up. The type is interface{} with range: 0..4294967295.
    NeighborUpCount interface{}

    // Neighbors being initialized. The type is interface{} with range:
    // 0..4294967295.
    NeighborInitCount interface{}

    // Neighbors down. The type is interface{} with range: 0..4294967295.
    NeighborDownCount interface{}
}

func (level1Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level1Neighbors) GetEntityData() *types.CommonEntityData {
    level1Neighbors.EntityData.YFilter = level1Neighbors.YFilter
    level1Neighbors.EntityData.YangName = "level1-neighbors"
    level1Neighbors.EntityData.BundleName = "cisco_ios_xr"
    level1Neighbors.EntityData.ParentYangName = "neighbor-summary"
    level1Neighbors.EntityData.SegmentPath = "level1-neighbors"
    level1Neighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    level1Neighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    level1Neighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    level1Neighbors.EntityData.Children = make(map[string]types.YChild)
    level1Neighbors.EntityData.Leafs = make(map[string]types.YLeaf)
    level1Neighbors.EntityData.Leafs["neighbor-up-count"] = types.YLeaf{"NeighborUpCount", level1Neighbors.NeighborUpCount}
    level1Neighbors.EntityData.Leafs["neighbor-init-count"] = types.YLeaf{"NeighborInitCount", level1Neighbors.NeighborInitCount}
    level1Neighbors.EntityData.Leafs["neighbor-down-count"] = types.YLeaf{"NeighborDownCount", level1Neighbors.NeighborDownCount}
    return &(level1Neighbors.EntityData)
}

// Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level2Neighbors
// L2-only neighbors
type Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level2Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbors up. The type is interface{} with range: 0..4294967295.
    NeighborUpCount interface{}

    // Neighbors being initialized. The type is interface{} with range:
    // 0..4294967295.
    NeighborInitCount interface{}

    // Neighbors down. The type is interface{} with range: 0..4294967295.
    NeighborDownCount interface{}
}

func (level2Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level2Neighbors) GetEntityData() *types.CommonEntityData {
    level2Neighbors.EntityData.YFilter = level2Neighbors.YFilter
    level2Neighbors.EntityData.YangName = "level2-neighbors"
    level2Neighbors.EntityData.BundleName = "cisco_ios_xr"
    level2Neighbors.EntityData.ParentYangName = "neighbor-summary"
    level2Neighbors.EntityData.SegmentPath = "level2-neighbors"
    level2Neighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    level2Neighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    level2Neighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    level2Neighbors.EntityData.Children = make(map[string]types.YChild)
    level2Neighbors.EntityData.Leafs = make(map[string]types.YLeaf)
    level2Neighbors.EntityData.Leafs["neighbor-up-count"] = types.YLeaf{"NeighborUpCount", level2Neighbors.NeighborUpCount}
    level2Neighbors.EntityData.Leafs["neighbor-init-count"] = types.YLeaf{"NeighborInitCount", level2Neighbors.NeighborInitCount}
    level2Neighbors.EntityData.Leafs["neighbor-down-count"] = types.YLeaf{"NeighborDownCount", level2Neighbors.NeighborDownCount}
    return &(level2Neighbors.EntityData)
}

// Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level12Neigbors
// L12 neighbors
type Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level12Neigbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbors up. The type is interface{} with range: 0..4294967295.
    NeighborUpCount interface{}

    // Neighbors being initialized. The type is interface{} with range:
    // 0..4294967295.
    NeighborInitCount interface{}

    // Neighbors down. The type is interface{} with range: 0..4294967295.
    NeighborDownCount interface{}
}

func (level12Neigbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level12Neigbors) GetEntityData() *types.CommonEntityData {
    level12Neigbors.EntityData.YFilter = level12Neigbors.YFilter
    level12Neigbors.EntityData.YangName = "level12-neigbors"
    level12Neigbors.EntityData.BundleName = "cisco_ios_xr"
    level12Neigbors.EntityData.ParentYangName = "neighbor-summary"
    level12Neigbors.EntityData.SegmentPath = "level12-neigbors"
    level12Neigbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    level12Neigbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    level12Neigbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    level12Neigbors.EntityData.Children = make(map[string]types.YChild)
    level12Neigbors.EntityData.Leafs = make(map[string]types.YLeaf)
    level12Neigbors.EntityData.Leafs["neighbor-up-count"] = types.YLeaf{"NeighborUpCount", level12Neigbors.NeighborUpCount}
    level12Neigbors.EntityData.Leafs["neighbor-init-count"] = types.YLeaf{"NeighborInitCount", level12Neigbors.NeighborInitCount}
    level12Neigbors.EntityData.Leafs["neighbor-down-count"] = types.YLeaf{"NeighborDownCount", level12Neigbors.NeighborDownCount}
    return &(level12Neigbors.EntityData)
}

// Isis_Instances_Instance_CheckpointLsps
// Checkpointed LSP table
type Isis_Instances_Instance_CheckpointLsps struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A checkpointed IS-IS LSP. The type is slice of
    // Isis_Instances_Instance_CheckpointLsps_CheckpointLsp.
    CheckpointLsp []Isis_Instances_Instance_CheckpointLsps_CheckpointLsp
}

func (checkpointLsps *Isis_Instances_Instance_CheckpointLsps) GetEntityData() *types.CommonEntityData {
    checkpointLsps.EntityData.YFilter = checkpointLsps.YFilter
    checkpointLsps.EntityData.YangName = "checkpoint-lsps"
    checkpointLsps.EntityData.BundleName = "cisco_ios_xr"
    checkpointLsps.EntityData.ParentYangName = "instance"
    checkpointLsps.EntityData.SegmentPath = "checkpoint-lsps"
    checkpointLsps.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    checkpointLsps.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    checkpointLsps.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    checkpointLsps.EntityData.Children = make(map[string]types.YChild)
    checkpointLsps.EntityData.Children["checkpoint-lsp"] = types.YChild{"CheckpointLsp", nil}
    for i := range checkpointLsps.CheckpointLsp {
        checkpointLsps.EntityData.Children[types.GetSegmentPath(&checkpointLsps.CheckpointLsp[i])] = types.YChild{"CheckpointLsp", &checkpointLsps.CheckpointLsp[i]}
    }
    checkpointLsps.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(checkpointLsps.EntityData)
}

// Isis_Instances_Instance_CheckpointLsps_CheckpointLsp
// A checkpointed IS-IS LSP
type Isis_Instances_Instance_CheckpointLsps_CheckpointLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Level. The type is IsisInternalLevel.
    Level interface{}

    // LSP ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}\\-[a-fA-F0-9]{2}'.
    LspId interface{}

    // LSP Checkpoint table object ID. The type is interface{} with range:
    // 0..4294967295.
    CheckpointLspObjectId interface{}

    // LSP level. The type is interface{} with range: 0..255.
    CheckpointLspLevel interface{}

    // TRUE if this is a local LSP. The type is bool.
    CheckpointLspLocalFlag interface{}

    // LSP ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}\\.[a-fA-F0-9]{2}\\-[a-fA-F0-9]{2}'.
    CheckpointLspId interface{}
}

func (checkpointLsp *Isis_Instances_Instance_CheckpointLsps_CheckpointLsp) GetEntityData() *types.CommonEntityData {
    checkpointLsp.EntityData.YFilter = checkpointLsp.YFilter
    checkpointLsp.EntityData.YangName = "checkpoint-lsp"
    checkpointLsp.EntityData.BundleName = "cisco_ios_xr"
    checkpointLsp.EntityData.ParentYangName = "checkpoint-lsps"
    checkpointLsp.EntityData.SegmentPath = "checkpoint-lsp"
    checkpointLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    checkpointLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    checkpointLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    checkpointLsp.EntityData.Children = make(map[string]types.YChild)
    checkpointLsp.EntityData.Leafs = make(map[string]types.YLeaf)
    checkpointLsp.EntityData.Leafs["level"] = types.YLeaf{"Level", checkpointLsp.Level}
    checkpointLsp.EntityData.Leafs["lsp-id"] = types.YLeaf{"LspId", checkpointLsp.LspId}
    checkpointLsp.EntityData.Leafs["checkpoint-lsp-object-id"] = types.YLeaf{"CheckpointLspObjectId", checkpointLsp.CheckpointLspObjectId}
    checkpointLsp.EntityData.Leafs["checkpoint-lsp-level"] = types.YLeaf{"CheckpointLspLevel", checkpointLsp.CheckpointLspLevel}
    checkpointLsp.EntityData.Leafs["checkpoint-lsp-local-flag"] = types.YLeaf{"CheckpointLspLocalFlag", checkpointLsp.CheckpointLspLocalFlag}
    checkpointLsp.EntityData.Leafs["checkpoint-lsp-id"] = types.YLeaf{"CheckpointLspId", checkpointLsp.CheckpointLspId}
    return &(checkpointLsp.EntityData)
}

// Isis_Instances_Instance_MeshGroups
// Mesh-group information
type Isis_Instances_Instance_MeshGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of mesh-group-configured interfaces.
    MeshGroupConfiguredInterfaceList Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList
}

func (meshGroups *Isis_Instances_Instance_MeshGroups) GetEntityData() *types.CommonEntityData {
    meshGroups.EntityData.YFilter = meshGroups.YFilter
    meshGroups.EntityData.YangName = "mesh-groups"
    meshGroups.EntityData.BundleName = "cisco_ios_xr"
    meshGroups.EntityData.ParentYangName = "instance"
    meshGroups.EntityData.SegmentPath = "mesh-groups"
    meshGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    meshGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    meshGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    meshGroups.EntityData.Children = make(map[string]types.YChild)
    meshGroups.EntityData.Children["mesh-group-configured-interface-list"] = types.YChild{"MeshGroupConfiguredInterfaceList", &meshGroups.MeshGroupConfiguredInterfaceList}
    meshGroups.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(meshGroups.EntityData)
}

// Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList
// List of mesh-group-configured interfaces
type Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // isis sh mesh entry. The type is slice of
    // Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry.
    IsisShMeshEntry []Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry
}

func (meshGroupConfiguredInterfaceList *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList) GetEntityData() *types.CommonEntityData {
    meshGroupConfiguredInterfaceList.EntityData.YFilter = meshGroupConfiguredInterfaceList.YFilter
    meshGroupConfiguredInterfaceList.EntityData.YangName = "mesh-group-configured-interface-list"
    meshGroupConfiguredInterfaceList.EntityData.BundleName = "cisco_ios_xr"
    meshGroupConfiguredInterfaceList.EntityData.ParentYangName = "mesh-groups"
    meshGroupConfiguredInterfaceList.EntityData.SegmentPath = "mesh-group-configured-interface-list"
    meshGroupConfiguredInterfaceList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    meshGroupConfiguredInterfaceList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    meshGroupConfiguredInterfaceList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    meshGroupConfiguredInterfaceList.EntityData.Children = make(map[string]types.YChild)
    meshGroupConfiguredInterfaceList.EntityData.Children["isis-sh-mesh-entry"] = types.YChild{"IsisShMeshEntry", nil}
    for i := range meshGroupConfiguredInterfaceList.IsisShMeshEntry {
        meshGroupConfiguredInterfaceList.EntityData.Children[types.GetSegmentPath(&meshGroupConfiguredInterfaceList.IsisShMeshEntry[i])] = types.YChild{"IsisShMeshEntry", &meshGroupConfiguredInterfaceList.IsisShMeshEntry[i]}
    }
    meshGroupConfiguredInterfaceList.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(meshGroupConfiguredInterfaceList.EntityData)
}

// Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry
// isis sh mesh entry
type Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    MeshGroupInterface interface{}

    // Mesh-group number. The type is interface{} with range: 0..4294967295.
    MeshGroupNumber interface{}
}

func (isisShMeshEntry *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry) GetEntityData() *types.CommonEntityData {
    isisShMeshEntry.EntityData.YFilter = isisShMeshEntry.YFilter
    isisShMeshEntry.EntityData.YangName = "isis-sh-mesh-entry"
    isisShMeshEntry.EntityData.BundleName = "cisco_ios_xr"
    isisShMeshEntry.EntityData.ParentYangName = "mesh-group-configured-interface-list"
    isisShMeshEntry.EntityData.SegmentPath = "isis-sh-mesh-entry"
    isisShMeshEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isisShMeshEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isisShMeshEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isisShMeshEntry.EntityData.Children = make(map[string]types.YChild)
    isisShMeshEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    isisShMeshEntry.EntityData.Leafs["mesh-group-interface"] = types.YLeaf{"MeshGroupInterface", isisShMeshEntry.MeshGroupInterface}
    isisShMeshEntry.EntityData.Leafs["mesh-group-number"] = types.YLeaf{"MeshGroupNumber", isisShMeshEntry.MeshGroupNumber}
    return &(isisShMeshEntry.EntityData)
}

// Isis_Instances_Instance_NsrStatistics
// NSR Statistics information
type Isis_Instances_Instance_NsrStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS VM STATE. The type is interface{} with range: 0..65535.
    IsisVmState interface{}

    // ISIS NSR STATS Data.
    IsisNsrStatsData Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData
}

func (nsrStatistics *Isis_Instances_Instance_NsrStatistics) GetEntityData() *types.CommonEntityData {
    nsrStatistics.EntityData.YFilter = nsrStatistics.YFilter
    nsrStatistics.EntityData.YangName = "nsr-statistics"
    nsrStatistics.EntityData.BundleName = "cisco_ios_xr"
    nsrStatistics.EntityData.ParentYangName = "instance"
    nsrStatistics.EntityData.SegmentPath = "nsr-statistics"
    nsrStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrStatistics.EntityData.Children = make(map[string]types.YChild)
    nsrStatistics.EntityData.Children["isis-nsr-stats-data"] = types.YChild{"IsisNsrStatsData", &nsrStatistics.IsisNsrStatsData}
    nsrStatistics.EntityData.Leafs = make(map[string]types.YLeaf)
    nsrStatistics.EntityData.Leafs["isis-vm-state"] = types.YLeaf{"IsisVmState", nsrStatistics.IsisVmState}
    return &(nsrStatistics.EntityData)
}

// Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData
// ISIS NSR STATS Data
type Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // self.
    Self Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Self

    // peer. The type is slice of
    // Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer.
    Peer []Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer
}

func (isisNsrStatsData *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData) GetEntityData() *types.CommonEntityData {
    isisNsrStatsData.EntityData.YFilter = isisNsrStatsData.YFilter
    isisNsrStatsData.EntityData.YangName = "isis-nsr-stats-data"
    isisNsrStatsData.EntityData.BundleName = "cisco_ios_xr"
    isisNsrStatsData.EntityData.ParentYangName = "nsr-statistics"
    isisNsrStatsData.EntityData.SegmentPath = "isis-nsr-stats-data"
    isisNsrStatsData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isisNsrStatsData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isisNsrStatsData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isisNsrStatsData.EntityData.Children = make(map[string]types.YChild)
    isisNsrStatsData.EntityData.Children["self"] = types.YChild{"Self", &isisNsrStatsData.Self}
    isisNsrStatsData.EntityData.Children["peer"] = types.YChild{"Peer", nil}
    for i := range isisNsrStatsData.Peer {
        isisNsrStatsData.EntityData.Children[types.GetSegmentPath(&isisNsrStatsData.Peer[i])] = types.YChild{"Peer", &isisNsrStatsData.Peer[i]}
    }
    isisNsrStatsData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(isisNsrStatsData.EntityData)
}

// Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Self
// self
type Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Self struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // no of l1 lsp. The type is interface{} with range: 0..4294967295.
    NoOfL1Lsp interface{}

    // no of l2 lsp. The type is interface{} with range: 0..4294967295.
    NoOfL2Lsp interface{}

    // no of l1 adj. The type is interface{} with range: 0..65535.
    NoOfL1Adj interface{}

    // no of l2 adj. The type is interface{} with range: 0..65535.
    NoOfL2Adj interface{}

    // no of live interface. The type is interface{} with range: 0..65535.
    NoOfLiveInterface interface{}

    // no of ptp interface. The type is interface{} with range: 0..65535.
    NoOfPtpInterface interface{}

    // no of lan interface. The type is interface{} with range: 0..65535.
    NoOfLanInterface interface{}

    // no of loopback interface. The type is interface{} with range: 0..65535.
    NoOfLoopbackInterface interface{}

    // no of te tunnels. The type is interface{} with range: 0..65535.
    NoOfTeTunnels interface{}

    // no of te links. The type is interface{} with range: 0..65535.
    NoOfTeLinks interface{}

    // no of ipv4 routes. The type is interface{} with range: 0..4294967295.
    NoOfIpv4Routes interface{}

    // no of ipv6 routes. The type is interface{} with range: 0..4294967295.
    NoOfIpv6Routes interface{}

    // seqnum. The type is interface{} with range: 0..4294967295.
    Seqnum interface{}
}

func (self *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Self) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "self"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "isis-nsr-stats-data"
    self.EntityData.SegmentPath = "self"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["no-of-l1-lsp"] = types.YLeaf{"NoOfL1Lsp", self.NoOfL1Lsp}
    self.EntityData.Leafs["no-of-l2-lsp"] = types.YLeaf{"NoOfL2Lsp", self.NoOfL2Lsp}
    self.EntityData.Leafs["no-of-l1-adj"] = types.YLeaf{"NoOfL1Adj", self.NoOfL1Adj}
    self.EntityData.Leafs["no-of-l2-adj"] = types.YLeaf{"NoOfL2Adj", self.NoOfL2Adj}
    self.EntityData.Leafs["no-of-live-interface"] = types.YLeaf{"NoOfLiveInterface", self.NoOfLiveInterface}
    self.EntityData.Leafs["no-of-ptp-interface"] = types.YLeaf{"NoOfPtpInterface", self.NoOfPtpInterface}
    self.EntityData.Leafs["no-of-lan-interface"] = types.YLeaf{"NoOfLanInterface", self.NoOfLanInterface}
    self.EntityData.Leafs["no-of-loopback-interface"] = types.YLeaf{"NoOfLoopbackInterface", self.NoOfLoopbackInterface}
    self.EntityData.Leafs["no-of-te-tunnels"] = types.YLeaf{"NoOfTeTunnels", self.NoOfTeTunnels}
    self.EntityData.Leafs["no-of-te-links"] = types.YLeaf{"NoOfTeLinks", self.NoOfTeLinks}
    self.EntityData.Leafs["no-of-ipv4-routes"] = types.YLeaf{"NoOfIpv4Routes", self.NoOfIpv4Routes}
    self.EntityData.Leafs["no-of-ipv6-routes"] = types.YLeaf{"NoOfIpv6Routes", self.NoOfIpv6Routes}
    self.EntityData.Leafs["seqnum"] = types.YLeaf{"Seqnum", self.Seqnum}
    return &(self.EntityData)
}

// Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer
// peer
type Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // no of l1 lsp. The type is interface{} with range: 0..4294967295.
    NoOfL1Lsp interface{}

    // no of l2 lsp. The type is interface{} with range: 0..4294967295.
    NoOfL2Lsp interface{}

    // no of l1 adj. The type is interface{} with range: 0..65535.
    NoOfL1Adj interface{}

    // no of l2 adj. The type is interface{} with range: 0..65535.
    NoOfL2Adj interface{}

    // no of live interface. The type is interface{} with range: 0..65535.
    NoOfLiveInterface interface{}

    // no of ptp interface. The type is interface{} with range: 0..65535.
    NoOfPtpInterface interface{}

    // no of lan interface. The type is interface{} with range: 0..65535.
    NoOfLanInterface interface{}

    // no of loopback interface. The type is interface{} with range: 0..65535.
    NoOfLoopbackInterface interface{}

    // no of te tunnels. The type is interface{} with range: 0..65535.
    NoOfTeTunnels interface{}

    // no of te links. The type is interface{} with range: 0..65535.
    NoOfTeLinks interface{}

    // no of ipv4 routes. The type is interface{} with range: 0..4294967295.
    NoOfIpv4Routes interface{}

    // no of ipv6 routes. The type is interface{} with range: 0..4294967295.
    NoOfIpv6Routes interface{}

    // seqnum. The type is interface{} with range: 0..4294967295.
    Seqnum interface{}
}

func (peer *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer) GetEntityData() *types.CommonEntityData {
    peer.EntityData.YFilter = peer.YFilter
    peer.EntityData.YangName = "peer"
    peer.EntityData.BundleName = "cisco_ios_xr"
    peer.EntityData.ParentYangName = "isis-nsr-stats-data"
    peer.EntityData.SegmentPath = "peer"
    peer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peer.EntityData.Children = make(map[string]types.YChild)
    peer.EntityData.Leafs = make(map[string]types.YLeaf)
    peer.EntityData.Leafs["no-of-l1-lsp"] = types.YLeaf{"NoOfL1Lsp", peer.NoOfL1Lsp}
    peer.EntityData.Leafs["no-of-l2-lsp"] = types.YLeaf{"NoOfL2Lsp", peer.NoOfL2Lsp}
    peer.EntityData.Leafs["no-of-l1-adj"] = types.YLeaf{"NoOfL1Adj", peer.NoOfL1Adj}
    peer.EntityData.Leafs["no-of-l2-adj"] = types.YLeaf{"NoOfL2Adj", peer.NoOfL2Adj}
    peer.EntityData.Leafs["no-of-live-interface"] = types.YLeaf{"NoOfLiveInterface", peer.NoOfLiveInterface}
    peer.EntityData.Leafs["no-of-ptp-interface"] = types.YLeaf{"NoOfPtpInterface", peer.NoOfPtpInterface}
    peer.EntityData.Leafs["no-of-lan-interface"] = types.YLeaf{"NoOfLanInterface", peer.NoOfLanInterface}
    peer.EntityData.Leafs["no-of-loopback-interface"] = types.YLeaf{"NoOfLoopbackInterface", peer.NoOfLoopbackInterface}
    peer.EntityData.Leafs["no-of-te-tunnels"] = types.YLeaf{"NoOfTeTunnels", peer.NoOfTeTunnels}
    peer.EntityData.Leafs["no-of-te-links"] = types.YLeaf{"NoOfTeLinks", peer.NoOfTeLinks}
    peer.EntityData.Leafs["no-of-ipv4-routes"] = types.YLeaf{"NoOfIpv4Routes", peer.NoOfIpv4Routes}
    peer.EntityData.Leafs["no-of-ipv6-routes"] = types.YLeaf{"NoOfIpv6Routes", peer.NoOfIpv6Routes}
    peer.EntityData.Leafs["seqnum"] = types.YLeaf{"Seqnum", peer.Seqnum}
    return &(peer.EntityData)
}

// Isis_Instances_Instance_CheckpointTeTunnels
// Checkpointed TE tunnel table
type Isis_Instances_Instance_CheckpointTeTunnels struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A checkpointed TE tunnel. The type is slice of
    // Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel.
    CheckpointTeTunnel []Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel
}

func (checkpointTeTunnels *Isis_Instances_Instance_CheckpointTeTunnels) GetEntityData() *types.CommonEntityData {
    checkpointTeTunnels.EntityData.YFilter = checkpointTeTunnels.YFilter
    checkpointTeTunnels.EntityData.YangName = "checkpoint-te-tunnels"
    checkpointTeTunnels.EntityData.BundleName = "cisco_ios_xr"
    checkpointTeTunnels.EntityData.ParentYangName = "instance"
    checkpointTeTunnels.EntityData.SegmentPath = "checkpoint-te-tunnels"
    checkpointTeTunnels.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    checkpointTeTunnels.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    checkpointTeTunnels.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    checkpointTeTunnels.EntityData.Children = make(map[string]types.YChild)
    checkpointTeTunnels.EntityData.Children["checkpoint-te-tunnel"] = types.YChild{"CheckpointTeTunnel", nil}
    for i := range checkpointTeTunnels.CheckpointTeTunnel {
        checkpointTeTunnels.EntityData.Children[types.GetSegmentPath(&checkpointTeTunnels.CheckpointTeTunnel[i])] = types.YChild{"CheckpointTeTunnel", &checkpointTeTunnels.CheckpointTeTunnel[i]}
    }
    checkpointTeTunnels.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(checkpointTeTunnels.EntityData)
}

// Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel
// A checkpointed TE tunnel
type Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Level. The type is IsisInternalLevel.
    Level interface{}

    // Interface name. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // TE database level. The type is IsisLevel.
    CheckpointTeLevel interface{}

    // Destination system ID. The type is string with pattern:
    // b'[a-fA-F0-9]{4}(\\.[a-fA-F0-9]{4}){2}'.
    CheckpointTeSystemId interface{}

    // Tunnel interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    CheckpointTeInterface interface{}

    // Tunnel flags. The type is interface{} with range: 0..4294967295.
    CheckpointTeFlags interface{}

    // Tunnel next-hop IP address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    CheckpointTeNexthop interface{}

    // Tunnel metric. The type is interface{} with range: -2147483648..2147483647.
    CheckpointTeMetric interface{}

    // Tunnel metric mode. The type is IsisMetricMode.
    CheckpointTeMetricMode interface{}

    // Tunnel bandwidth. The type is interface{} with range: 0..4294967295.
    CheckpointTeBandwidth interface{}

    // Tunnel checkpoint object ID. The type is interface{} with range:
    // 0..4294967295.
    CheckpointTeObjectId interface{}
}

func (checkpointTeTunnel *Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel) GetEntityData() *types.CommonEntityData {
    checkpointTeTunnel.EntityData.YFilter = checkpointTeTunnel.YFilter
    checkpointTeTunnel.EntityData.YangName = "checkpoint-te-tunnel"
    checkpointTeTunnel.EntityData.BundleName = "cisco_ios_xr"
    checkpointTeTunnel.EntityData.ParentYangName = "checkpoint-te-tunnels"
    checkpointTeTunnel.EntityData.SegmentPath = "checkpoint-te-tunnel"
    checkpointTeTunnel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    checkpointTeTunnel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    checkpointTeTunnel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    checkpointTeTunnel.EntityData.Children = make(map[string]types.YChild)
    checkpointTeTunnel.EntityData.Leafs = make(map[string]types.YLeaf)
    checkpointTeTunnel.EntityData.Leafs["level"] = types.YLeaf{"Level", checkpointTeTunnel.Level}
    checkpointTeTunnel.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", checkpointTeTunnel.InterfaceName}
    checkpointTeTunnel.EntityData.Leafs["checkpoint-te-level"] = types.YLeaf{"CheckpointTeLevel", checkpointTeTunnel.CheckpointTeLevel}
    checkpointTeTunnel.EntityData.Leafs["checkpoint-te-system-id"] = types.YLeaf{"CheckpointTeSystemId", checkpointTeTunnel.CheckpointTeSystemId}
    checkpointTeTunnel.EntityData.Leafs["checkpoint-te-interface"] = types.YLeaf{"CheckpointTeInterface", checkpointTeTunnel.CheckpointTeInterface}
    checkpointTeTunnel.EntityData.Leafs["checkpoint-te-flags"] = types.YLeaf{"CheckpointTeFlags", checkpointTeTunnel.CheckpointTeFlags}
    checkpointTeTunnel.EntityData.Leafs["checkpoint-te-nexthop"] = types.YLeaf{"CheckpointTeNexthop", checkpointTeTunnel.CheckpointTeNexthop}
    checkpointTeTunnel.EntityData.Leafs["checkpoint-te-metric"] = types.YLeaf{"CheckpointTeMetric", checkpointTeTunnel.CheckpointTeMetric}
    checkpointTeTunnel.EntityData.Leafs["checkpoint-te-metric-mode"] = types.YLeaf{"CheckpointTeMetricMode", checkpointTeTunnel.CheckpointTeMetricMode}
    checkpointTeTunnel.EntityData.Leafs["checkpoint-te-bandwidth"] = types.YLeaf{"CheckpointTeBandwidth", checkpointTeTunnel.CheckpointTeBandwidth}
    checkpointTeTunnel.EntityData.Leafs["checkpoint-te-object-id"] = types.YLeaf{"CheckpointTeObjectId", checkpointTeTunnel.CheckpointTeObjectId}
    return &(checkpointTeTunnel.EntityData)
}

