// This module contains a collection of YANG definitions
// for Cisco IOS-XR clns-isis package operational data.
// 
// This module contains definitions
// for the following management objects:
//   ocni-isis: An OpenConfig description of a network-instance
//   isis: isis
// 
// Copyright (c) 2013-2018 by Cisco Systems, Inc.
// All rights reserved.
package clns_isis_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package clns_isis_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-clns-isis-oper ocni-isis}", reflect.TypeOf(OcniIsis{}))
    ydk.RegisterEntity("Cisco-IOS-XR-clns-isis-oper:ocni-isis", reflect.TypeOf(OcniIsis{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-clns-isis-oper isis}", reflect.TypeOf(Isis{}))
    ydk.RegisterEntity("Cisco-IOS-XR-clns-isis-oper:isis", reflect.TypeOf(Isis{}))
}

// IsisSubAfId represents Isis sub af id
type IsisSubAfId string

const (
    // Unicast
    IsisSubAfId_unicast IsisSubAfId = "unicast"

    // Multicast
    IsisSubAfId_multicast IsisSubAfId = "multicast"
)

// IsisIfAfFwdAddrUnknownReason represents Isis if af fwd addr unknown reason
type IsisIfAfFwdAddrUnknownReason string

const (
    // isis intf af fwd addr unknown cfg passive
    IsisIfAfFwdAddrUnknownReason_isis_intf_af_fwd_addr_unknown_cfg_passive IsisIfAfFwdAddrUnknownReason = "isis-intf-af-fwd-addr-unknown-cfg-passive"

    // isis intf af fwd addr unknown proto doesnt
    // exist
    IsisIfAfFwdAddrUnknownReason_isis_intf_af_fwd_addr_unknown_proto_doesnt_exist IsisIfAfFwdAddrUnknownReason = "isis-intf-af-fwd-addr-unknown-proto-doesnt-exist"

    // isis intf af fwd addr unknown next hop reg
    // error
    IsisIfAfFwdAddrUnknownReason_isis_intf_af_fwd_addr_unknown_next_hop_reg_error IsisIfAfFwdAddrUnknownReason = "isis-intf-af-fwd-addr-unknown-next-hop-reg-error"

    // isis intf af fwd addr unknown no link local add
    IsisIfAfFwdAddrUnknownReason_isis_intf_af_fwd_addr_unknown_no_link_local_add IsisIfAfFwdAddrUnknownReason = "isis-intf-af-fwd-addr-unknown-no-link-local-add"

    // isis intf af fwd addr unknown af not up
    IsisIfAfFwdAddrUnknownReason_isis_intf_af_fwd_addr_unknown_af_not_up IsisIfAfFwdAddrUnknownReason = "isis-intf-af-fwd-addr-unknown-af-not-up"

    // isis intf af fwd addr unknown vrf enabled
    IsisIfAfFwdAddrUnknownReason_isis_intf_af_fwd_addr_unknown_vrf_enabled IsisIfAfFwdAddrUnknownReason = "isis-intf-af-fwd-addr-unknown-vrf-enabled"

    // isis intf af fwd addr unknown internal error
    IsisIfAfFwdAddrUnknownReason_isis_intf_af_fwd_addr_unknown_internal_error IsisIfAfFwdAddrUnknownReason = "isis-intf-af-fwd-addr-unknown-internal-error"
)

// IsisUloopEvent represents Isis uloop event
type IsisUloopEvent string

const (
    // isis u loop event none
    IsisUloopEvent_isis_u_loop_event_none IsisUloopEvent = "isis-u-loop-event-none"

    // isis u loop event link down
    IsisUloopEvent_isis_u_loop_event_link_down IsisUloopEvent = "isis-u-loop-event-link-down"

    // isis u loop event link up
    IsisUloopEvent_isis_u_loop_event_link_up IsisUloopEvent = "isis-u-loop-event-link-up"

    // isis u loop event ol bit set
    IsisUloopEvent_isis_u_loop_event_ol_bit_set IsisUloopEvent = "isis-u-loop-event-ol-bit-set"

    // isis u loop event ol bit unset
    IsisUloopEvent_isis_u_loop_event_ol_bit_unset IsisUloopEvent = "isis-u-loop-event-ol-bit-unset"
)

// SrmsMiSrcEB represents Srms mi src e b
type SrmsMiSrcEB string

const (
    // None
    SrmsMiSrcEB_none SrmsMiSrcEB = "none"

    // Local
    SrmsMiSrcEB_local SrmsMiSrcEB = "local"

    // Remote
    SrmsMiSrcEB_remote SrmsMiSrcEB = "remote"
)

// IsisLspDbOp represents Isis lsp db op
type IsisLspDbOp string

const (
    // Clear the LSP database
    IsisLspDbOp_isis_lsp_db_clear IsisLspDbOp = "isis-lsp-db-clear"

    // Insertion of new LSP
    IsisLspDbOp_isis_lsp_db_insert_new_lsp IsisLspDbOp = "isis-lsp-db-insert-new-lsp"

    // LSP replacing LSP
    IsisLspDbOp_isis_lsp_db_replace_lsp_with_lsp IsisLspDbOp = "isis-lsp-db-replace-lsp-with-lsp"

    // LSP purged by the local system
    IsisLspDbOp_isis_lsp_db_purge_lsp IsisLspDbOp = "isis-lsp-db-purge-lsp"

    // Removal of the LSP from the database
    IsisLspDbOp_isis_lsp_db_delete_lsp IsisLspDbOp = "isis-lsp-db-delete-lsp"
)

// OpenconfigIsisLspRouterCapabilityStateFlagsEnum represents enum
type OpenconfigIsisLspRouterCapabilityStateFlagsEnum string

const (
    // When the S bit is set(1), the IS - IS Router
    // CAPABILITY TLV MUST be flooded across the
    // entire routing domain. When the S bit is not
    // set(0), the TLV MUST NOT be leaked between
    // levels . This bit MUST NOT be altered during
    // the TLV leaking.
    OpenconfigIsisLspRouterCapabilityStateFlagsEnum_flood OpenconfigIsisLspRouterCapabilityStateFlagsEnum = "flood"

    // When the IS-IS Router CAPABILITY TLV is leaked
    // from level - 2 to level-1, the Down bit MUST be
    // set. Otherwise, this bit MUST be clear. IS - IS
    // Router capability TLVs with the Down bit set
    // MUST NOT be leaked from level - 1 to level-2.
    // This is to prevent TLV looping.
    OpenconfigIsisLspRouterCapabilityStateFlagsEnum_down OpenconfigIsisLspRouterCapabilityStateFlagsEnum = "down"
)

// IsisStartupStatus represents Isis startup status
type IsisStartupStatus string

const (
    // Startup-state-machine controlled restart in
    // progress
    IsisStartupStatus_isis_startup_ssm_active IsisStartupStatus = "isis-startup-ssm-active"

    // Startup-state-machine controlled restart
    // complete
    IsisStartupStatus_isis_startup_ssm_complete IsisStartupStatus = "isis-startup-ssm-complete"

    // Startup-state-machine controlled restart
    // aborted
    IsisStartupStatus_isis_startup_ssm_aborted IsisStartupStatus = "isis-startup-ssm-aborted"

    // Startup-state-machine controlled not attempted
    IsisStartupStatus_isis_startup_ssm_not_run IsisStartupStatus = "isis-startup-ssm-not-run"
)

// IsisUp represents Isis up
type IsisUp string

const (
    // Down
    IsisUp_isis_down IsisUp = "isis-down"

    // Up
    IsisUp_isis_up IsisUp = "isis-up"
)

// IsisErrLogLevel represents Isis err log level
type IsisErrLogLevel string

const (
    // isis err log level info
    IsisErrLogLevel_isis_err_log_level_info IsisErrLogLevel = "isis-err-log-level-info"

    // isis err log level warn
    IsisErrLogLevel_isis_err_log_level_warn IsisErrLogLevel = "isis-err-log-level-warn"

    // isis err log level critical
    IsisErrLogLevel_isis_err_log_level_critical IsisErrLogLevel = "isis-err-log-level-critical"
)

// OpenconfigIsisTypesHelloPaddingTypeEnum represents Openconfig isis types hello padding type enum
type OpenconfigIsisTypesHelloPaddingTypeEnum string

const (
    // This enum describes strict padding
    OpenconfigIsisTypesHelloPaddingTypeEnum_strict OpenconfigIsisTypesHelloPaddingTypeEnum = "strict"

    // This enum describes loose padding
    OpenconfigIsisTypesHelloPaddingTypeEnum_loose OpenconfigIsisTypesHelloPaddingTypeEnum = "loose"

    // This enum describes adaptive padding
    OpenconfigIsisTypesHelloPaddingTypeEnum_adaptive OpenconfigIsisTypesHelloPaddingTypeEnum = "adaptive"

    // This enum disables padding
    OpenconfigIsisTypesHelloPaddingTypeEnum_disable OpenconfigIsisTypesHelloPaddingTypeEnum = "disable"
)

// IsisIfTopoAdjFormDisabledReason represents Isis if topo adj form disabled reason
type IsisIfTopoAdjFormDisabledReason string

const (
    // isis intf topo adj form disabled intf passive
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_intf_passive IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-intf-passive"

    // isis intf topo adj form disabled af not up
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_af_not_up IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-af-not-up"

    // isis intf topo adj form disabled af fwd addr
    // unknown
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_af_fwd_addr_unknown IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-af-fwd-addr-unknown"

    // isis intf topo adj form disabled topo not cfg
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_topo_not_cfg IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-topo-not-cfg"

    // isis intf topo adj form disabled topo can not
    // participate
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_topo_can_not_participate IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-topo-can-not-participate"

    // isis intf topo adj form disabled idle
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_idle IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-idle"

    // isis intf topo adj form disabled internal error
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_internal_error IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-internal-error"

    // isis intf topo adj form disabled mtu
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_mtu IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-mtu"

    // isis intf topo adj form disabled snpa
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_snpa IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-snpa"

    // isis intf topo adj form disabled mcast
    IsisIfTopoAdjFormDisabledReason_isis_intf_topo_adj_form_disabled_mcast IsisIfTopoAdjFormDisabledReason = "isis-intf-topo-adj-form-disabled-mcast"
)

// IsisTilfaComputation represents Isis tilfa computation
type IsisTilfaComputation string

const (
    // isis tilfa comp none
    IsisTilfaComputation_isis_tilfa_comp_none IsisTilfaComputation = "isis-tilfa-comp-none"

    // isis tilfa comp link
    IsisTilfaComputation_isis_tilfa_comp_link IsisTilfaComputation = "isis-tilfa-comp-link"

    // isis tilfa comp node
    IsisTilfaComputation_isis_tilfa_comp_node IsisTilfaComputation = "isis-tilfa-comp-node"

    // isis tilfa comp srlg
    IsisTilfaComputation_isis_tilfa_comp_srlg IsisTilfaComputation = "isis-tilfa-comp-srlg"

    // isis tilfa comp node srlg
    IsisTilfaComputation_isis_tilfa_comp_node_srlg IsisTilfaComputation = "isis-tilfa-comp-node-srlg"
)

// IsisAdjStateReason represents Isis adj state reason
type IsisAdjStateReason string

const (
    // NSF Restart
    IsisAdjStateReason_isis_adj_up_nsf_restart IsisAdjStateReason = "isis-adj-up-nsf-restart"

    // New adjacency
    IsisAdjStateReason_isis_adj_up_new_adj IsisAdjStateReason = "isis-adj-up-new-adj"

    // Restarted
    IsisAdjStateReason_isis_adj_up_restarted IsisAdjStateReason = "isis-adj-up-restarted"

    // Restored during NSF
    IsisAdjStateReason_isis_adj_up_nsf_restored IsisAdjStateReason = "isis-adj-up-nsf-restored"

    // Restored from checkpoint
    IsisAdjStateReason_isis_adj_up_chkpt_restored IsisAdjStateReason = "isis-adj-up-chkpt-restored"

    // Into INIT
    IsisAdjStateReason_isis_adj_init_reason IsisAdjStateReason = "isis-adj-init-reason"

    // Neighbor forgot us
    IsisAdjStateReason_isis_adj_init_neighbor_forgot IsisAdjStateReason = "isis-adj-init-neighbor-forgot"

    // Holdtime expired
    IsisAdjStateReason_isis_adj_down_hold_time IsisAdjStateReason = "isis-adj-down-hold-time"

    // Interface state going down
    IsisAdjStateReason_isis_adj_down_if_down IsisAdjStateReason = "isis-adj-down-if-down"

    // Area address/level mismatch
    IsisAdjStateReason_isis_adj_down_cfg_mismatch IsisAdjStateReason = "isis-adj-down-cfg-mismatch"

    // Circuit ID changed
    IsisAdjStateReason_isis_adj_down_circ_id IsisAdjStateReason = "isis-adj-down-circ-id"

    // NSF could not CSNP Ack P2P adjacency
    IsisAdjStateReason_isis_adj_down_nsf_ack_fail IsisAdjStateReason = "isis-adj-down-nsf-ack-fail"

    // Clear of the Adjacency DB
    IsisAdjStateReason_isis_adj_down_db_clear IsisAdjStateReason = "isis-adj-down-db-clear"

    // Neighbors have no common link topology
    IsisAdjStateReason_isis_adj_down_no_common_topology IsisAdjStateReason = "isis-adj-down-no-common-topology"

    // Restart TLV missing during IETF NSF restart
    IsisAdjStateReason_isis_adj_down_restart_tlv_missing IsisAdjStateReason = "isis-adj-down-restart-tlv-missing"

    // BFD session has gone DOWN
    IsisAdjStateReason_isis_adj_down_bfd_down IsisAdjStateReason = "isis-adj-down-bfd-down"

    // 3-way state down
    IsisAdjStateReason_isis_adj_down_3way_down IsisAdjStateReason = "isis-adj-down-3way-down"
)

// SrmsMiAfEB represents Srms mi af e b
type SrmsMiAfEB string

const (
    // None
    SrmsMiAfEB_none SrmsMiAfEB = "none"

    // IPv4
    SrmsMiAfEB_ipv4 SrmsMiAfEB = "ipv4"

    // IPv6
    SrmsMiAfEB_ipv6 SrmsMiAfEB = "ipv6"
)

// IsisAdjBfdState represents Current BFD state of an adjacency
type IsisAdjBfdState string

const (
    // No BFD session created
    IsisAdjBfdState_isis_adj_bfd_no_state IsisAdjBfdState = "isis-adj-bfd-no-state"

    // BFD session is DOWN
    IsisAdjBfdState_isis_adj_bfd_down_state IsisAdjBfdState = "isis-adj-bfd-down-state"

    // Waiting for BFD session to come UP
    IsisAdjBfdState_isis_adj_bfd_init_state IsisAdjBfdState = "isis-adj-bfd-init-state"

    // BFD session is UP
    IsisAdjBfdState_isis_adj_bfd_up_state IsisAdjBfdState = "isis-adj-bfd-up-state"
)

// IsisRedistProto represents Isis redist proto
type IsisRedistProto string

const (
    // Redistributed protocol is Connected
    IsisRedistProto_isis_redist_connected IsisRedistProto = "isis-redist-connected"

    // Redistributed protocol is Static
    IsisRedistProto_isis_redist_static IsisRedistProto = "isis-redist-static"

    // Redistributed protocol is OSPF
    IsisRedistProto_isis_redist_ospf IsisRedistProto = "isis-redist-ospf"

    // Redistributed protocol is BGP
    IsisRedistProto_isis_redist_bgp IsisRedistProto = "isis-redist-bgp"

    // Redistributed protocol is IS-IS
    IsisRedistProto_isis_redist_isis IsisRedistProto = "isis-redist-isis"

    // Redistributed protocol is OSPFv3
    IsisRedistProto_isis_redist_ospfv3 IsisRedistProto = "isis-redist-ospfv3"

    // Redistributed protocol is RIP
    IsisRedistProto_isis_redist_rip IsisRedistProto = "isis-redist-rip"

    // Redistributed protocol is EIGRP
    IsisRedistProto_isis_redist_eigrp IsisRedistProto = "isis-redist-eigrp"

    // Redistributed protocol is Subscriber
    IsisRedistProto_isis_redist_subscriber IsisRedistProto = "isis-redist-subscriber"

    // Redistributed protocol is Application
    IsisRedistProto_isis_redist_application IsisRedistProto = "isis-redist-application"

    // Redistributed protocol is Mobile
    IsisRedistProto_isis_redist_mobile IsisRedistProto = "isis-redist-mobile"
)

// IsisShRouteAdvOrigin represents Origin of a prefix advertisement
type IsisShRouteAdvOrigin string

const (
    // IS-IS interface prefix
    IsisShRouteAdvOrigin_isis_sh_route_adv_origin_interface IsisShRouteAdvOrigin = "isis-sh-route-adv-origin-interface"

    // Redistributed prefix
    IsisShRouteAdvOrigin_isis_sh_route_adv_origin_redistributed IsisShRouteAdvOrigin = "isis-sh-route-adv-origin-redistributed"

    // Native prefix
    IsisShRouteAdvOrigin_isis_sh_route_adv_origin_native IsisShRouteAdvOrigin = "isis-sh-route-adv-origin-native"

    // Summary prefix
    IsisShRouteAdvOrigin_isis_sh_route_adv_origin_summary IsisShRouteAdvOrigin = "isis-sh-route-adv-origin-summary"

    // Explicit origination of default prefix
    IsisShRouteAdvOrigin_isis_sh_route_adv_origin_default IsisShRouteAdvOrigin = "isis-sh-route-adv-origin-default"
)

// IsisEnabled represents Isis enabled
type IsisEnabled string

const (
    // Disabled
    IsisEnabled_isis_disabled IsisEnabled = "isis-disabled"

    // Enabled
    IsisEnabled_isis_enabled IsisEnabled = "isis-enabled"
)

// IsisLevel represents Isis level
type IsisLevel string

const (
    // isis level0
    IsisLevel_isis_level0 IsisLevel = "isis-level0"

    // isis level1
    IsisLevel_isis_level1 IsisLevel = "isis-level1"

    // isis level2
    IsisLevel_isis_level2 IsisLevel = "isis-level2"
)

// IsisFrrTiebreaker represents Isis frr tiebreaker
type IsisFrrTiebreaker string

const (
    // Backup path is via downstream node
    IsisFrrTiebreaker_isis_frr_tiebreaker_down_stream IsisFrrTiebreaker = "isis-frr-tiebreaker-down-stream"

    // Backup path is line card disjoint
    IsisFrrTiebreaker_isis_frr_tiebreaker_lc_disjoint IsisFrrTiebreaker = "isis-frr-tiebreaker-lc-disjoint"

    // Backup path has lowest metric
    IsisFrrTiebreaker_isis_frr_tiebreaker_low_est_backup_metric IsisFrrTiebreaker = "isis-frr-tiebreaker-low-est-backup-metric"

    // Backup path is node protecting
    IsisFrrTiebreaker_isis_frr_tiebreaker_node_protecting IsisFrrTiebreaker = "isis-frr-tiebreaker-node-protecting"

    // Backup path is ECMP
    IsisFrrTiebreaker_isis_frr_tiebreaker_primary_path IsisFrrTiebreaker = "isis-frr-tiebreaker-primary-path"

    // Backup path is not an ECMP
    IsisFrrTiebreaker_isis_frr_tiebreaker_secondary_path IsisFrrTiebreaker = "isis-frr-tiebreaker-secondary-path"

    // Backup path is SRLG disjoint
    IsisFrrTiebreaker_isis_frr_tiebreaker_srlg_disjoint IsisFrrTiebreaker = "isis-frr-tiebreaker-srlg-disjoint"

    // Backup path is link protecting
    IsisFrrTiebreaker_isis_frr_tiebreaker_default IsisFrrTiebreaker = "isis-frr-tiebreaker-default"
)

// OpenconfigIsisLspIpv6SrlgStateFlagsEnum represents Openconfig isis lsp ipv6 srlg state flags enum
type OpenconfigIsisLspIpv6SrlgStateFlagsEnum string

const (
    // When set, the IPv6 neighbour address is
    // included, whereas if unset, it is omitted
    OpenconfigIsisLspIpv6SrlgStateFlagsEnum_na OpenconfigIsisLspIpv6SrlgStateFlagsEnum = "na"
)

// IsisFrr represents Isis frr
type IsisFrr string

const (
    // Computation disabled
    IsisFrr_isis_frr_type_none IsisFrr = "isis-frr-type-none"

    // Prefix independent per-link computation
    IsisFrr_isis_frr_type_per_link IsisFrr = "isis-frr-type-per-link"

    // Prefix dependent computation
    IsisFrr_isis_frr_type_per_prefix IsisFrr = "isis-frr-type-per-prefix"

    // Segment Routing Microloop Avoidance computation
    IsisFrr_isis_frr_type_sr_u_loop IsisFrr = "isis-frr-type-sr-u-loop"
)

// IsisIfDisabledReason represents Isis if disabled reason
type IsisIfDisabledReason string

const (
    // isis intf disabled no net cfg
    IsisIfDisabledReason_isis_intf_disabled_no_net_cfg IsisIfDisabledReason = "isis-intf-disabled-no-net-cfg"

    // isis intf disabled area missing
    IsisIfDisabledReason_isis_intf_disabled_area_missing IsisIfDisabledReason = "isis-intf-disabled-area-missing"

    // isis intf disabled no area running
    IsisIfDisabledReason_isis_intf_disabled_no_area_running IsisIfDisabledReason = "isis-intf-disabled-no-area-running"

    // isis intf disabled no topos cfg
    IsisIfDisabledReason_isis_intf_disabled_no_topos_cfg IsisIfDisabledReason = "isis-intf-disabled-no-topos-cfg"

    // isis intf disabled no imd conn
    IsisIfDisabledReason_isis_intf_disabled_no_imd_conn IsisIfDisabledReason = "isis-intf-disabled-no-imd-conn"

    // isis intf disabled imd reg error
    IsisIfDisabledReason_isis_intf_disabled_imd_reg_error IsisIfDisabledReason = "isis-intf-disabled-imd-reg-error"

    // isis intf disabled level mismatch
    IsisIfDisabledReason_isis_intf_disabled_level_mismatch IsisIfDisabledReason = "isis-intf-disabled-level-mismatch"

    // isis intf disabled base caps error
    IsisIfDisabledReason_isis_intf_disabled_base_caps_error IsisIfDisabledReason = "isis-intf-disabled-base-caps-error"

    // isis intf disabled intf doesnt exist
    IsisIfDisabledReason_isis_intf_disabled_intf_doesnt_exist IsisIfDisabledReason = "isis-intf-disabled-intf-doesnt-exist"

    // isis intf disabled intf shutdown
    IsisIfDisabledReason_isis_intf_disabled_intf_shutdown IsisIfDisabledReason = "isis-intf-disabled-intf-shutdown"

    // isis intf disabled internal error
    IsisIfDisabledReason_isis_intf_disabled_internal_error IsisIfDisabledReason = "isis-intf-disabled-internal-error"
)

// IsisShTeLink represents Isis sh te link
type IsisShTeLink string

const (
    // Tunnel is absolute
    IsisShTeLink_isis_sh_te_link_p2p IsisShTeLink = "isis-sh-te-link-p2p"

    // Broadcast link
    IsisShTeLink_isis_sh_te_link_broadcast IsisShTeLink = "isis-sh-te-link-broadcast"
)

// IsisMediaClass represents Isis media class
type IsisMediaClass string

const (
    // LAN
    IsisMediaClass_isis_media_class_lan IsisMediaClass = "isis-media-class-lan"

    // P2P
    IsisMediaClass_isis_media_class_p2p IsisMediaClass = "isis-media-class-p2p"

    // Loopback
    IsisMediaClass_isis_media_class_loop_back IsisMediaClass = "isis-media-class-loop-back"
)

// OpenconfigIsisTypesAdaptiveTimerTypeEnum represents Openconfig isis types adaptive timer type enum
type OpenconfigIsisTypesAdaptiveTimerTypeEnum string

const (
    // This enum describes linear algorithm timer
    OpenconfigIsisTypesAdaptiveTimerTypeEnum_linear OpenconfigIsisTypesAdaptiveTimerTypeEnum = "linear"

    // This enum describes exponential algorithm timer
    OpenconfigIsisTypesAdaptiveTimerTypeEnum_exponential OpenconfigIsisTypesAdaptiveTimerTypeEnum = "exponential"
)

// IsisIfMcastInvalidReason represents Isis if mcast invalid reason
type IsisIfMcastInvalidReason string

const (
    // Error when attempting to join this multicast
    // group
    IsisIfMcastInvalidReason_isis_intf_mcast_invalid_join_error IsisIfMcastInvalidReason = "isis-intf-mcast-invalid-join-error"

    // Internal error
    IsisIfMcastInvalidReason_isis_intf_mcast_invalid_internal_error IsisIfMcastInvalidReason = "isis-intf-mcast-invalid-internal-error"

    // Multicast group membership not yet requested
    IsisIfMcastInvalidReason_isis_intf_mcast_invalid_not_yet_needed IsisIfMcastInvalidReason = "isis-intf-mcast-invalid-not-yet-needed"
)

// IsisIfTopoAdvPrefixDisabledReason represents Isis if topo adv prefix disabled reason
type IsisIfTopoAdvPrefixDisabledReason string

const (
    // isis intf topo adv prefix disabled intf
    // suppressed
    IsisIfTopoAdvPrefixDisabledReason_isis_intf_topo_adv_prefix_disabled_intf_suppressed IsisIfTopoAdvPrefixDisabledReason = "isis-intf-topo-adv-prefix-disabled-intf-suppressed"

    // isis intf topo adv prefix disabled af not up
    IsisIfTopoAdvPrefixDisabledReason_isis_intf_topo_adv_prefix_disabled_af_not_up IsisIfTopoAdvPrefixDisabledReason = "isis-intf-topo-adv-prefix-disabled-af-not-up"

    // isis intf topo adv prefix disabled af prefixes
    // unknown
    IsisIfTopoAdvPrefixDisabledReason_isis_intf_topo_adv_prefix_disabled_af_prefixes_unknown IsisIfTopoAdvPrefixDisabledReason = "isis-intf-topo-adv-prefix-disabled-af-prefixes-unknown"

    // isis intf topo adv prefix disabled internal
    // error
    IsisIfTopoAdvPrefixDisabledReason_isis_intf_topo_adv_prefix_disabled_internal_error IsisIfTopoAdvPrefixDisabledReason = "isis-intf-topo-adv-prefix-disabled-internal-error"
)

// IsisAdjState represents Isis adj state
type IsisAdjState string

const (
    // Adjacency up
    IsisAdjState_isis_adj_up_state IsisAdjState = "isis-adj-up-state"

    // Adjacency initializing
    IsisAdjState_isis_adj_init_state IsisAdjState = "isis-adj-init-state"

    // Adjacency down/failed
    IsisAdjState_isis_adj_failed_state IsisAdjState = "isis-adj-failed-state"
)

// OpenconfigIsisLspNlpidEnum represents Openconfig isis lsp nlpid enum
type OpenconfigIsisLspNlpidEnum string

const (
    // IPv4 Address family.
    OpenconfigIsisLspNlpidEnum_ipv4 OpenconfigIsisLspNlpidEnum = "ipv4"

    // IPv6 Address family.
    OpenconfigIsisLspNlpidEnum_ipv6 OpenconfigIsisLspNlpidEnum = "ipv6"
)

// IsisIfClnsProtoDownReason represents Isis if clns proto down reason
type IsisIfClnsProtoDownReason string

const (
    // isis intf clns proto down add to intf stack
    // fail
    IsisIfClnsProtoDownReason_isis_intf_clns_proto_down_add_to_intf_stack_fail IsisIfClnsProtoDownReason = "isis-intf-clns-proto-down-add-to-intf-stack-fail"

    // isis intf clns proto down no imd conn
    IsisIfClnsProtoDownReason_isis_intf_clns_proto_down_no_imd_conn IsisIfClnsProtoDownReason = "isis-intf-clns-proto-down-no-imd-conn"

    // isis intf clns proto down imd node doesnt exist
    IsisIfClnsProtoDownReason_isis_intf_clns_proto_down_imd_node_doesnt_exist IsisIfClnsProtoDownReason = "isis-intf-clns-proto-down-imd-node-doesnt-exist"

    // isis intf clns proto down imd exist reg error
    IsisIfClnsProtoDownReason_isis_intf_clns_proto_down_imd_exist_reg_error IsisIfClnsProtoDownReason = "isis-intf-clns-proto-down-imd-exist-reg-error"

    // isis intf clns proto down imd state reg error
    IsisIfClnsProtoDownReason_isis_intf_clns_proto_down_imd_state_reg_error IsisIfClnsProtoDownReason = "isis-intf-clns-proto-down-imd-state-reg-error"

    // isis intf clns proto down clns not up
    IsisIfClnsProtoDownReason_isis_intf_clns_proto_down_clns_not_up IsisIfClnsProtoDownReason = "isis-intf-clns-proto-down-clns-not-up"
)

// SrmsMiFlagEB represents Srms mi flag e b
type SrmsMiFlagEB string

const (
    // False
    SrmsMiFlagEB_false_ SrmsMiFlagEB = "false"

    // True
    SrmsMiFlagEB_true_ SrmsMiFlagEB = "true"
)

// IsisAdjTopoStatus represents Status of a topology in an adjacency
type IsisAdjTopoStatus string

const (
    // Topology is included in adjacency
    IsisAdjTopoStatus_isis_adj_topo_status_ok IsisAdjTopoStatus = "isis-adj-topo-status-ok"

    // Topology is not configured on the interface
    IsisAdjTopoStatus_isis_adj_topo_status_intf_not_configured IsisAdjTopoStatus = "isis-adj-topo-status-intf-not-configured"

    // Topology is not running on the interface
    IsisAdjTopoStatus_isis_adj_topo_status_intf_not_running IsisAdjTopoStatus = "isis-adj-topo-status-intf-not-running"

    // Adjacency is in INIT state
    IsisAdjTopoStatus_isis_adj_topo_status_init_state IsisAdjTopoStatus = "isis-adj-topo-status-init-state"

    // Neighbor doesn't participate in topology
    IsisAdjTopoStatus_isis_adj_topo_status_neighbor_doesnt_participate IsisAdjTopoStatus = "isis-adj-topo-status-neighbor-doesnt-participate"

    // Neighbor IIH doesn't contain IPv4 address TLV
    IsisAdjTopoStatus_isis_adj_topo_status_ipv4_address_tlv_missing IsisAdjTopoStatus = "isis-adj-topo-status-ipv4-address-tlv-missing"

    // Neighbor's IPv4 address TLV is empty
    IsisAdjTopoStatus_isis_adj_topo_status_ipv4_address_tlv_empty IsisAdjTopoStatus = "isis-adj-topo-status-ipv4-address-tlv-empty"

    // Neighbor IIH doesn't contain IPv6 address TLV
    IsisAdjTopoStatus_isis_adj_topo_status_ipv6_address_tlv_missing IsisAdjTopoStatus = "isis-adj-topo-status-ipv6-address-tlv-missing"

    // Neighbor's IPv6 address TLV is empty
    IsisAdjTopoStatus_isis_adj_topo_status_ipv6_address_tlv_empty IsisAdjTopoStatus = "isis-adj-topo-status-ipv6-address-tlv-empty"

    // Neighbor's IPv4 address matches ours
    IsisAdjTopoStatus_isis_adj_topo_status_ipv4_address_matches_ours IsisAdjTopoStatus = "isis-adj-topo-status-ipv4-address-matches-ours"

    // Neighbor's IPv6 address matches ours
    IsisAdjTopoStatus_isis_adj_topo_status_ipv6_address_matches_ours IsisAdjTopoStatus = "isis-adj-topo-status-ipv6-address-matches-ours"

    // Neighbor's IPv4 address is in a different
    // subnet to ours
    IsisAdjTopoStatus_isis_adj_topo_status_ipv4_address_subnet_mismatch IsisAdjTopoStatus = "isis-adj-topo-status-ipv4-address-subnet-mismatch"

    // Neighbor's IPv6 address is not link local
    IsisAdjTopoStatus_isis_adj_topo_status_ipv6_address_not_link_local IsisAdjTopoStatus = "isis-adj-topo-status-ipv6-address-not-link-local"
)

// OpenconfigIsisLspLanAdjacencySidStateFlagsEnum represents enum
type OpenconfigIsisLspLanAdjacencySidStateFlagsEnum string

const (
    // Address-family flag. When unset, the Adj-SID
    // refers to an adjacency with outgoing IPv4
    // encapsulation. If set then the Adj-SID refers
    // to an adjacency with outgoing IPv6
    // encapsulation.
    OpenconfigIsisLspLanAdjacencySidStateFlagsEnum_address_family OpenconfigIsisLspLanAdjacencySidStateFlagsEnum = "address-family"

    // Backup flag. When set, the Adj-SID refers to an
    // adjacency being protected (e.g.: using IPFRR or
    // MPLS-FRR).
    OpenconfigIsisLspLanAdjacencySidStateFlagsEnum_backup OpenconfigIsisLspLanAdjacencySidStateFlagsEnum = "backup"

    // Value flag. When set, the SID carries a value
    // (instead of an index). By default the flag is
    // SET.
    OpenconfigIsisLspLanAdjacencySidStateFlagsEnum_value OpenconfigIsisLspLanAdjacencySidStateFlagsEnum = "value"

    // Local flag. When set, the value/index carried
    // by the SID has local significance. By default
    // the flag is SET.
    OpenconfigIsisLspLanAdjacencySidStateFlagsEnum_local OpenconfigIsisLspLanAdjacencySidStateFlagsEnum = "local"

    // Set flag. When set, the S-Flag indicates that
    // the Adj-SID refers to a set of adjacencies.
    OpenconfigIsisLspLanAdjacencySidStateFlagsEnum_set OpenconfigIsisLspLanAdjacencySidStateFlagsEnum = "set"
)

// IsisIfTopoDisabledReason represents Isis if topo disabled reason
type IsisIfTopoDisabledReason string

const (
    // isis intf topo disabled not cfg
    IsisIfTopoDisabledReason_isis_intf_topo_disabled_not_cfg IsisIfTopoDisabledReason = "isis-intf-topo-disabled-not-cfg"

    // isis intf topo disabled internal error
    IsisIfTopoDisabledReason_isis_intf_topo_disabled_internal_error IsisIfTopoDisabledReason = "isis-intf-topo-disabled-internal-error"
)

// IsisIfAdjFormDisabledReason represents Isis if adj form disabled reason
type IsisIfAdjFormDisabledReason string

const (
    // isis intf adj form disabled cfg passive
    IsisIfAdjFormDisabledReason_isis_intf_adj_form_disabled_cfg_passive IsisIfAdjFormDisabledReason = "isis-intf-adj-form-disabled-cfg-passive"

    // isis intf adj form disabled no topo participate
    IsisIfAdjFormDisabledReason_isis_intf_adj_form_disabled_no_topo_participate IsisIfAdjFormDisabledReason = "isis-intf-adj-form-disabled-no-topo-participate"

    // isis intf adj form disabled add to intf stack
    // fail
    IsisIfAdjFormDisabledReason_isis_intf_adj_form_disabled_add_to_intf_stack_fail IsisIfAdjFormDisabledReason = "isis-intf-adj-form-disabled-add-to-intf-stack-fail"

    // isis intf adj form disabled clns io
    IsisIfAdjFormDisabledReason_isis_intf_adj_form_disabled_clns_io IsisIfAdjFormDisabledReason = "isis-intf-adj-form-disabled-clns-io"

    // isis intf adj form disabled internal error
    IsisIfAdjFormDisabledReason_isis_intf_adj_form_disabled_internal_error IsisIfAdjFormDisabledReason = "isis-intf-adj-form-disabled-internal-error"
)

// IsisEdmLabelTypeEnum represents isislabeltype
type IsisEdmLabelTypeEnum string

const (
    // isis edm label alloc prefix sid
    IsisEdmLabelTypeEnum_isis_edm_label_alloc_prefix_sid IsisEdmLabelTypeEnum = "isis-edm-label-alloc-prefix-sid"

    // isis edm label alloc local sid
    IsisEdmLabelTypeEnum_isis_edm_label_alloc_local_sid IsisEdmLabelTypeEnum = "isis-edm-label-alloc-local-sid"

    // isis edm label alloc max
    IsisEdmLabelTypeEnum_isis_edm_label_alloc_max IsisEdmLabelTypeEnum = "isis-edm-label-alloc-max"
)

// OpenconfigIsisLspIsisMetricFlagsEnum represents Openconfig isis lsp isis metric flags enum
type OpenconfigIsisLspIsisMetricFlagsEnum string

const (
    // When this flag is not set, internal metrics are
    // in use.
    OpenconfigIsisLspIsisMetricFlagsEnum_internal OpenconfigIsisLspIsisMetricFlagsEnum = "internal"

    // When this flag (referred to as the S-bit) is
    // set, then the metric is unsupported.
    OpenconfigIsisLspIsisMetricFlagsEnum_unsupported OpenconfigIsisLspIsisMetricFlagsEnum = "unsupported"
)

// OpenconfigSegmentRoutingLabelOptionsEnum represents Openconfig segment routing label options enum
type OpenconfigSegmentRoutingLabelOptionsEnum string

const (
    // When this value is specified, the penultimate
    // hop must not pop the Prefix-SID label before
    // forwarding it to the local system.
    OpenconfigSegmentRoutingLabelOptionsEnum_no_php OpenconfigSegmentRoutingLabelOptionsEnum = "no-php"

    // When set, the penultimate hop must swap the
    // prefix SID for the relevant explicit null label
    // before forwarding the packet.
    OpenconfigSegmentRoutingLabelOptionsEnum_explicit_null OpenconfigSegmentRoutingLabelOptionsEnum = "explicit-null"
)

// IsisLevels represents Isis levels
type IsisLevels string

const (
    // isis levels none
    IsisLevels_isis_levels_none IsisLevels = "isis-levels-none"

    // isis levels 1
    IsisLevels_isis_levels_1 IsisLevels = "isis-levels-1"

    // isis levels 2
    IsisLevels_isis_levels_2 IsisLevels = "isis-levels-2"

    // isis levels 12
    IsisLevels_isis_levels_12 IsisLevels = "isis-levels-12"

    // isis levels total
    IsisLevels_isis_levels_total IsisLevels = "isis-levels-total"
)

// OpenconfigIsisTypesCircuitTypeEnum represents Openconfig isis types circuit type enum
type OpenconfigIsisTypesCircuitTypeEnum string

const (
    // This enum describes a point-to-point interface
    OpenconfigIsisTypesCircuitTypeEnum_point_to_point OpenconfigIsisTypesCircuitTypeEnum = "point-to-point"

    // This enum describes a broadcast interface
    OpenconfigIsisTypesCircuitTypeEnum_broadcast OpenconfigIsisTypesCircuitTypeEnum = "broadcast"
)

// OpenconfigIsisLspCryptoTypeEnum represents Openconfig isis lsp crypto type enum
type OpenconfigIsisLspCryptoTypeEnum string

const (
    // HMAC-MD5 Authentication type.
    OpenconfigIsisLspCryptoTypeEnum_hmac_md5 OpenconfigIsisLspCryptoTypeEnum = "hmac-md5"

    // Cleartext Authentication type.
    OpenconfigIsisLspCryptoTypeEnum_cleartext OpenconfigIsisLspCryptoTypeEnum = "cleartext"
)

// IsisIfAfDisabledReason represents Isis if af disabled reason
type IsisIfAfDisabledReason string

const (
    // isis intf af disabled no topo enabled
    IsisIfAfDisabledReason_isis_intf_af_disabled_no_topo_enabled IsisIfAfDisabledReason = "isis-intf-af-disabled-no-topo-enabled"

    // isis intf af disabled internal error
    IsisIfAfDisabledReason_isis_intf_af_disabled_internal_error IsisIfAfDisabledReason = "isis-intf-af-disabled-internal-error"
)

// OpenconfigIsisLspStateFlagsEnum represents Openconfig isis lsp state flags enum
type OpenconfigIsisLspStateFlagsEnum string

const (
    // When set, the interface is numbered, whereas if
    // unset indicates that the interface is
    // unnumbered.
    OpenconfigIsisLspStateFlagsEnum_numbered OpenconfigIsisLspStateFlagsEnum = "numbered"
)

// OpenconfigIsisTypesMetricStyleEnum represents Openconfig isis types metric style enum
type OpenconfigIsisTypesMetricStyleEnum string

const (
    // This enum describes narrow metric style
    OpenconfigIsisTypesMetricStyleEnum_narrow_metric OpenconfigIsisTypesMetricStyleEnum = "narrow-metric"

    // This enum describes wide metric style
    OpenconfigIsisTypesMetricStyleEnum_wide_metric OpenconfigIsisTypesMetricStyleEnum = "wide-metric"
)

// IsisNsfFlavor represents Isis nsf flavor
type IsisNsfFlavor string

const (
    // NSF not configured
    IsisNsfFlavor_isis_nsf_flav_or_none IsisNsfFlavor = "isis-nsf-flav-or-none"

    // Cisco-proprietary NSF
    IsisNsfFlavor_isis_nsf_flav_or_cisco IsisNsfFlavor = "isis-nsf-flav-or-cisco"

    // IETF-standard NSF
    IsisNsfFlavor_isis_nsf_flav_or_ietf IsisNsfFlavor = "isis-nsf-flav-or-ietf"

    // Cisco-proprietary NSR
    IsisNsfFlavor_isis_nsf_flav_or_nsr IsisNsfFlavor = "isis-nsf-flav-or-nsr"
)

// IsisAdjTopoChange represents Per-topology change type for an adjacency
type IsisAdjTopoChange string

const (
    // Topology up
    IsisAdjTopoChange_isis_adj_topo_up_change IsisAdjTopoChange = "isis-adj-topo-up-change"

    // Topology next-hop changed
    IsisAdjTopoChange_isis_adj_topo_next_hop_change IsisAdjTopoChange = "isis-adj-topo-next-hop-change"

    // Topology down
    IsisAdjTopoChange_isis_adj_topo_down_change IsisAdjTopoChange = "isis-adj-topo-down-change"
)

// IsisShTePceFloodingScope represents Isis sh te pce flooding scope
type IsisShTePceFloodingScope string

const (
    // Flooding is disabled
    IsisShTePceFloodingScope_none IsisShTePceFloodingScope = "none"

    // Area wide flooding
    IsisShTePceFloodingScope_area IsisShTePceFloodingScope = "area"

    // Domain wide flooding
    IsisShTePceFloodingScope_domain IsisShTePceFloodingScope = "domain"
)

// OpenconfigIsisLspAlgorithmEnum represents Openconfig isis lsp algorithm enum
type OpenconfigIsisLspAlgorithmEnum string

const (
    // Shortest Path First (SPF) algorithm based on
    // link metric.  This is the well-known shortest
    // path algorithm as computed by the IS-IS
    // Decision process.  Consistent with the deployed
    // practice for link- state protocols, algorithm 0
    // permits any node to overwrite the SPF path with
    // a different path based on local policy.
    OpenconfigIsisLspAlgorithmEnum_spf OpenconfigIsisLspAlgorithmEnum = "spf"

    // Strict Shortest Path First (SPF) algorithm
    // based on link metric. The algorithm is
    // identical to algorithm 0 but algorithm 1
    // requires that all nodes along the path will
    // honor the SPF routing decision. Local policy
    // MUST NOT alter the forwarding decision computed
    // by algorithm 1 at the node claiming to support
    // algorithm 1.
    OpenconfigIsisLspAlgorithmEnum_strict_spf OpenconfigIsisLspAlgorithmEnum = "strict-spf"
)

// IsisPrefixPriority represents Isis prefix priority
type IsisPrefixPriority string

const (
    // Critical priority prefixes
    IsisPrefixPriority_isis_prefix_priority_critical IsisPrefixPriority = "isis-prefix-priority-critical"

    // High priority prefixes
    IsisPrefixPriority_isis_prefix_priority_high IsisPrefixPriority = "isis-prefix-priority-high"

    // Medium priority prefixes
    IsisPrefixPriority_isis_prefix_priority_med IsisPrefixPriority = "isis-prefix-priority-med"

    // Low priority prefixes
    IsisPrefixPriority_isis_prefix_priority_low IsisPrefixPriority = "isis-prefix-priority-low"
)

// OpenconfigIsisLspFlagsStateFlagsEnum represents Openconfig isis lsp flags state flags enum
type OpenconfigIsisLspFlagsStateFlagsEnum string

const (
    // External prefix flag. Set if the prefix has
    // been redistributed from another protocol. This
    // includes the case where multiple virtual
    // routers are supported and the source of the
    // redistributed prefix is another IS-IS instance.
    OpenconfigIsisLspFlagsStateFlagsEnum_external_flag OpenconfigIsisLspFlagsStateFlagsEnum = "external-flag"

    // Readvertisement flag. Set when the prefix has
    // been leaked from one level to another (upwards
    // or downwards).
    OpenconfigIsisLspFlagsStateFlagsEnum_readvertisement_flag OpenconfigIsisLspFlagsStateFlagsEnum = "readvertisement-flag"

    // Node flag. Set when the prefix identifies the
    // advertising router, i.e., the prefix is a host
    // prefix advertising  a globally reachable
    // address typically associated with a loopback
    // address.
    OpenconfigIsisLspFlagsStateFlagsEnum_node_flag OpenconfigIsisLspFlagsStateFlagsEnum = "node-flag"
)

// IsisAfId represents Isis af id
type IsisAfId string

const (
    // IPv4
    IsisAfId_ipv4 IsisAfId = "ipv4"

    // IPv6
    IsisAfId_ipv6 IsisAfId = "ipv6"
)

// IsisKnown represents Isis known
type IsisKnown string

const (
    // Unknown
    IsisKnown_isis_unknown IsisKnown = "isis-unknown"

    // Known
    IsisKnown_isis_known IsisKnown = "isis-known"
)

// OpenconfigIsisLspAdjacencySidStateFlagsEnum represents enum
type OpenconfigIsisLspAdjacencySidStateFlagsEnum string

const (
    // Address-family flag. When unset, the Adj-SID
    // refers to an adjacency with outgoing IPv4
    // encapsulation. If set then the Adj-SID refers
    // to an adjacency with outgoing IPv6
    // encapsulation.
    OpenconfigIsisLspAdjacencySidStateFlagsEnum_address_family OpenconfigIsisLspAdjacencySidStateFlagsEnum = "address-family"

    // Backup flag. When set, the Adj-SID refers to an
    // adjacency being protected (e.g.: using IPFRR or
    // MPLS-FRR).
    OpenconfigIsisLspAdjacencySidStateFlagsEnum_backup OpenconfigIsisLspAdjacencySidStateFlagsEnum = "backup"

    // Value flag. When set, the SID carries a value
    // (instead of an index). By default the flag is
    // SET.
    OpenconfigIsisLspAdjacencySidStateFlagsEnum_value OpenconfigIsisLspAdjacencySidStateFlagsEnum = "value"

    // Local flag. When set, the value/index carried
    // by the SID has local significance. By default
    // the flag is SET.
    OpenconfigIsisLspAdjacencySidStateFlagsEnum_local OpenconfigIsisLspAdjacencySidStateFlagsEnum = "local"

    // Set flag. When set, the S-Flag indicates that
    // the Adj-SID refers to a set of adjacencies.
    OpenconfigIsisLspAdjacencySidStateFlagsEnum_set OpenconfigIsisLspAdjacencySidStateFlagsEnum = "set"
)

// OpenconfigIsisLspPrefixSidStateFlagsEnum represents Openconfig isis lsp prefix sid state flags enum
type OpenconfigIsisLspPrefixSidStateFlagsEnum string

const (
    // Readvertisment flag. When set, the prefix to
    // which this Prefix-SID is attached, has been
    // propagated by the router either from another
    // level or from redistribution.
    OpenconfigIsisLspPrefixSidStateFlagsEnum_readvertisement OpenconfigIsisLspPrefixSidStateFlagsEnum = "readvertisement"

    // Node flag. When set, the Prefix-SID refers to
    // the router identified by the prefix. Typically,
    // the N-Flag is set on Prefix-SIDs attached to a
    // router loopback address.
    OpenconfigIsisLspPrefixSidStateFlagsEnum_node OpenconfigIsisLspPrefixSidStateFlagsEnum = "node"

    // Penultimate-Hop-Popping flag. When set, then
    // the penultimate hop MUST NOT pop the Prefix-SID
    // before delivering the packet to the node that
    // advertised the Prefix-SID.
    OpenconfigIsisLspPrefixSidStateFlagsEnum_php OpenconfigIsisLspPrefixSidStateFlagsEnum = "php"

    // Explicit-Null flag. When set, any upstream
    // neighbor of the Prefix-SID originator MUST
    // replace the Prefix-SID with a Prefix-SID having
    // an Explicit-NULL value (0 for IPv4 and 2 for
    // IPv6) before forwarding the packet.
    OpenconfigIsisLspPrefixSidStateFlagsEnum_explicit_null OpenconfigIsisLspPrefixSidStateFlagsEnum = "explicit-null"

    // Value flag. When set, the Prefix-SID carries a
    // value (instead of an index). By default the
    // flag is UNSET.
    OpenconfigIsisLspPrefixSidStateFlagsEnum_value OpenconfigIsisLspPrefixSidStateFlagsEnum = "value"

    // Local flag. When set, the value/index carried
    // by the Prefix-SID has local significance. By
    // default the flag is UNSET.
    OpenconfigIsisLspPrefixSidStateFlagsEnum_local OpenconfigIsisLspPrefixSidStateFlagsEnum = "local"
)

// OpenconfigIsisLspFlagsEnum represents Openconfig isis lsp flags enum
type OpenconfigIsisLspFlagsEnum string

const (
    // When set, the originator supports partition
    // repair.
    OpenconfigIsisLspFlagsEnum_partition_repair OpenconfigIsisLspFlagsEnum = "partition-repair"

    // When set, the originator is attached to another
    // area using the referred metric.
    OpenconfigIsisLspFlagsEnum_attached_error OpenconfigIsisLspFlagsEnum = "attached-error"

    // When set, the originator is attached to another
    // area using the referred metric.
    OpenconfigIsisLspFlagsEnum_attached_expense OpenconfigIsisLspFlagsEnum = "attached-expense"

    // When set, the originator is attached to another
    // area using the referred metric.
    OpenconfigIsisLspFlagsEnum_attached_delay OpenconfigIsisLspFlagsEnum = "attached-delay"

    // When set, the originator is attached to another
    // area using the referred metric.
    OpenconfigIsisLspFlagsEnum_attached_default OpenconfigIsisLspFlagsEnum = "attached-default"

    // When set, the originator is overloaded, and
    // must be avoided in path calculation.
    OpenconfigIsisLspFlagsEnum_overload OpenconfigIsisLspFlagsEnum = "overload"
)

// IsisValid represents Isis valid
type IsisValid string

const (
    // Invalid
    IsisValid_isis_invalid IsisValid = "isis-invalid"

    // Valid
    IsisValid_isis_valid IsisValid = "isis-valid"
)

// IsisIfClnsMtuInvalidReason represents Isis if clns mtu invalid reason
type IsisIfClnsMtuInvalidReason string

const (
    // isis intf clns mtu invalid too small
    IsisIfClnsMtuInvalidReason_isis_intf_clns_mtu_invalid_too_small IsisIfClnsMtuInvalidReason = "isis-intf-clns-mtu-invalid-too-small"

    // isis intf clns mtu invalid internal error
    IsisIfClnsMtuInvalidReason_isis_intf_clns_mtu_invalid_internal_error IsisIfClnsMtuInvalidReason = "isis-intf-clns-mtu-invalid-internal-error"
)

// OpenconfigIsisLspDefaultMetricStateFlagsEnum represents enum
type OpenconfigIsisLspDefaultMetricStateFlagsEnum string

const (
    // When set to zero, indicates internal metrics.
    OpenconfigIsisLspDefaultMetricStateFlagsEnum_internal OpenconfigIsisLspDefaultMetricStateFlagsEnum = "internal"
)

// OpenconfigIsisAdjacencyStateNlpidEnum represents Openconfig isis adjacency state nlpid enum
type OpenconfigIsisAdjacencyStateNlpidEnum string

const (
    // IPv4 Address family.
    OpenconfigIsisAdjacencyStateNlpidEnum_ipv4 OpenconfigIsisAdjacencyStateNlpidEnum = "ipv4"

    // IPv6 Address family.
    OpenconfigIsisAdjacencyStateNlpidEnum_ipv6 OpenconfigIsisAdjacencyStateNlpidEnum = "ipv6"
)

// IsisIfAfProtoDownReason represents Isis if af proto down reason
type IsisIfAfProtoDownReason string

const (
    // isis intf af proto down imd conn fail
    IsisIfAfProtoDownReason_isis_intf_af_proto_down_imd_conn_fail IsisIfAfProtoDownReason = "isis-intf-af-proto-down-imd-conn-fail"

    // isis intf af proto down imd node doesnt exist
    IsisIfAfProtoDownReason_isis_intf_af_proto_down_imd_node_doesnt_exist IsisIfAfProtoDownReason = "isis-intf-af-proto-down-imd-node-doesnt-exist"

    // isis intf af proto down imd exist reg error
    IsisIfAfProtoDownReason_isis_intf_af_proto_down_imd_exist_reg_error IsisIfAfProtoDownReason = "isis-intf-af-proto-down-imd-exist-reg-error"

    // isis intf af proto down imd state reg error
    IsisIfAfProtoDownReason_isis_intf_af_proto_down_imd_state_reg_error IsisIfAfProtoDownReason = "isis-intf-af-proto-down-imd-state-reg-error"

    // isis intf af proto down af not up
    IsisIfAfProtoDownReason_isis_intf_af_proto_down_af_not_up IsisIfAfProtoDownReason = "isis-intf-af-proto-down-af-not-up"

    // isis intf af proto down internal error
    IsisIfAfProtoDownReason_isis_intf_af_proto_down_internal_error IsisIfAfProtoDownReason = "isis-intf-af-proto-down-internal-error"
)

// IsisMetricMode represents Isis metric mode
type IsisMetricMode string

const (
    // Fixed
    IsisMetricMode_isis_metric_mode_fixed IsisMetricMode = "isis-metric-mode-fixed"

    // Relative
    IsisMetricMode_isis_metric_mode_relative IsisMetricMode = "isis-metric-mode-relative"

    // Absolute
    IsisMetricMode_isis_metric_mode_absolute IsisMetricMode = "isis-metric-mode-absolute"
)

// OpenconfigIsisLspSegmentRoutingCapabilityStateFlagsEnum represents state flags enum
type OpenconfigIsisLspSegmentRoutingCapabilityStateFlagsEnum string

const (
    // When set, the router is capable of processing
    // SR MPLS encapsulated IPv4 packets on all
    // interfaces.
    OpenconfigIsisLspSegmentRoutingCapabilityStateFlagsEnum_ipv4_mpls OpenconfigIsisLspSegmentRoutingCapabilityStateFlagsEnum = "ipv4-mpls"

    // When set, the router is capable of processing
    // SR MPLS encapsulated IPv6 packets on all
    // interfaces.
    OpenconfigIsisLspSegmentRoutingCapabilityStateFlagsEnum_ipv6_mpls OpenconfigIsisLspSegmentRoutingCapabilityStateFlagsEnum = "ipv6-mpls"

    // When set, the router is capable of processing
    // the IPv6 Segment Routing Header on all
    // interfaces.
    OpenconfigIsisLspSegmentRoutingCapabilityStateFlagsEnum_ipv6_sr OpenconfigIsisLspSegmentRoutingCapabilityStateFlagsEnum = "ipv6-sr"
)

// IsisMetricStyle represents Isis metric style
type IsisMetricStyle string

const (
    // old-style (ISO 10589) metrics
    IsisMetricStyle_isis_metric_style_narrow IsisMetricStyle = "isis-metric-style-narrow"

    // new-style 32-bit metrics
    IsisMetricStyle_isis_metric_style_wide IsisMetricStyle = "isis-metric-style-wide"

    // send/accept both forms of metric
    IsisMetricStyle_isis_metric_style_transition IsisMetricStyle = "isis-metric-style-transition"

    // send old-style (ISO 10589) metrics but accept
    // both
    IsisMetricStyle_isis_metric_style_narrow_transition IsisMetricStyle = "isis-metric-style-narrow-transition"

    // send new-style 32-bit metrics but accept both
    IsisMetricStyle_isis_metric_style_wide_transition IsisMetricStyle = "isis-metric-style-wide-transition"
)

// IsisIfAdvPrefixDisabledReason represents Isis if adv prefix disabled reason
type IsisIfAdvPrefixDisabledReason string

const (
    // isis intf adv prefix disabled if cfg suppressed
    IsisIfAdvPrefixDisabledReason_isis_intf_adv_prefix_disabled_if_cfg_suppressed IsisIfAdvPrefixDisabledReason = "isis-intf-adv-prefix-disabled-if-cfg-suppressed"

    // isis intf adv prefix disabled no topo
    // participate
    IsisIfAdvPrefixDisabledReason_isis_intf_adv_prefix_disabled_no_topo_participate IsisIfAdvPrefixDisabledReason = "isis-intf-adv-prefix-disabled-no-topo-participate"

    // isis intf adv prefix disabled internal error
    IsisIfAdvPrefixDisabledReason_isis_intf_adv_prefix_disabled_internal_error IsisIfAdvPrefixDisabledReason = "isis-intf-adv-prefix-disabled-internal-error"
)

// OpenconfigIsisTypesLevelTypeEnum represents Openconfig isis types level type enum
type OpenconfigIsisTypesLevelTypeEnum string

const (
    // This enum describes ISIS level 1
    OpenconfigIsisTypesLevelTypeEnum_level1 OpenconfigIsisTypesLevelTypeEnum = "level1"

    // This enum describes ISIS level 2
    OpenconfigIsisTypesLevelTypeEnum_level2 OpenconfigIsisTypesLevelTypeEnum = "level2"

    // This enum describes ISIS level 1-2
    OpenconfigIsisTypesLevelTypeEnum_level12 OpenconfigIsisTypesLevelTypeEnum = "level12"
)

// IsisIfAfPrefixUnknownReason represents Isis if af prefix unknown reason
type IsisIfAfPrefixUnknownReason string

const (
    // isis intf af prefix unknown adv suppressed
    IsisIfAfPrefixUnknownReason_isis_intf_af_prefix_unknown_adv_suppressed IsisIfAfPrefixUnknownReason = "isis-intf-af-prefix-unknown-adv-suppressed"

    // isis intf af prefix unknown global addr reg
    // error
    IsisIfAfPrefixUnknownReason_isis_intf_af_prefix_unknown_global_addr_reg_error IsisIfAfPrefixUnknownReason = "isis-intf-af-prefix-unknown-global-addr-reg-error"

    // isis intf af prefix unknown internal error
    IsisIfAfPrefixUnknownReason_isis_intf_af_prefix_unknown_internal_error IsisIfAfPrefixUnknownReason = "isis-intf-af-prefix-unknown-internal-error"
)

// IsisSpfClass represents Types of route calculation
type IsisSpfClass string

const (
    // Remote microloop avoidance SPF
    IsisSpfClass_isis_spf_frr_sr_u_loop IsisSpfClass = "isis-spf-frr-sr-u-loop"

    // FRR per-link SPF
    IsisSpfClass_isis_spf_frr_per_link IsisSpfClass = "isis-spf-frr-per-link"

    // PRC
    IsisSpfClass_isis_spf_partial IsisSpfClass = "isis-spf-partial"

    // FRR per-prefix SPF
    IsisSpfClass_isis_spf_frr_per_prefix IsisSpfClass = "isis-spf-frr-per-prefix"

    // UCMP SPF
    IsisSpfClass_isis_spf_ucmp_calc IsisSpfClass = "isis-spf-ucmp-calc"

    // Flex-Algo SPF
    IsisSpfClass_isis_spf_flex IsisSpfClass = "isis-spf-flex"

    // Next Hop
    IsisSpfClass_isis_spf_next_hop IsisSpfClass = "isis-spf-next-hop"

    // Incremental SPF
    IsisSpfClass_isis_spf_incremental IsisSpfClass = "isis-spf-incremental"

    // Full SPF
    IsisSpfClass_isis_spf_full IsisSpfClass = "isis-spf-full"
)

// IsisSpfTrigger represents Isis spf trigger
type IsisSpfTrigger string

const (
    // Configuration change
    IsisSpfTrigger_isis_spf_trig_config IsisSpfTrigger = "isis-spf-trig-config"

    // NSR FO is done
    IsisSpfTrigger_isis_spf_trig_nsr_fo IsisSpfTrigger = "isis-spf-trig-nsr-fo"

    // Periodic SPF
    IsisSpfTrigger_isis_spf_trig_periodic IsisSpfTrigger = "isis-spf-trig-periodic"

    // Cleared route table
    IsisSpfTrigger_isis_spf_trig_clear IsisSpfTrigger = "isis-spf-trig-clear"

    // New adjacency
    IsisSpfTrigger_isis_spf_trig_newadj IsisSpfTrigger = "isis-spf-trig-newadj"

    // Deleted adjacency
    IsisSpfTrigger_isis_spf_trig_deladj IsisSpfTrigger = "isis-spf-trig-deladj"

    // IP nexthop address change
    IsisSpfTrigger_isis_spf_trig_next_hop IsisSpfTrigger = "isis-spf-trig-next-hop"

    // Changed interface metric
    IsisSpfTrigger_isis_spf_trig_metric IsisSpfTrigger = "isis-spf-trig-metric"

    // Change to elected DIS
    IsisSpfTrigger_isis_spf_trig_dis IsisSpfTrigger = "isis-spf-trig-dis"

    // Change to per-link FRR config
    IsisSpfTrigger_isis_spf_trig_frr_per_link IsisSpfTrigger = "isis-spf-trig-frr-per-link"

    // Change to per-prefix FRR config
    IsisSpfTrigger_isis_spf_trig_frr_per_prefix IsisSpfTrigger = "isis-spf-trig-frr-per-prefix"

    // Change to UCMP config/calculation
    IsisSpfTrigger_isis_spf_trig_ucmp IsisSpfTrigger = "isis-spf-trig-ucmp"

    // New TE Autoroute Tunnel
    IsisSpfTrigger_isis_spf_trig_new_tunnel IsisSpfTrigger = "isis-spf-trig-new-tunnel"

    // Deleted TE Autoroute Tunnel
    IsisSpfTrigger_isis_spf_trig_del_tunnel IsisSpfTrigger = "isis-spf-trig-del-tunnel"

    // Changed TE Autoroute Tunnel
    IsisSpfTrigger_isis_spf_trig_chg_tunnel IsisSpfTrigger = "isis-spf-trig-chg-tunnel"

    // New LSP zero which participates in topology
    IsisSpfTrigger_isis_spf_trig_new_node IsisSpfTrigger = "isis-spf-trig-new-node"

    // New LSP zero which no longer participates in
    // topology
    IsisSpfTrigger_isis_spf_trig_del_node IsisSpfTrigger = "isis-spf-trig-del-node"

    // Previously unseen LSP fragment
    IsisSpfTrigger_isis_spf_trig_newlsp IsisSpfTrigger = "isis-spf-trig-newlsp"

    // LSP expired
    IsisSpfTrigger_isis_spf_trig_lsp_expiry IsisSpfTrigger = "isis-spf-trig-lsp-expiry"

    // Attached bit set
    IsisSpfTrigger_isis_spf_trig_attach_set IsisSpfTrigger = "isis-spf-trig-attach-set"

    // Attached bit cleared
    IsisSpfTrigger_isis_spf_trig_attach_clr IsisSpfTrigger = "isis-spf-trig-attach-clr"

    // Overload bit set
    IsisSpfTrigger_isis_spf_trig_overload_set IsisSpfTrigger = "isis-spf-trig-overload-set"

    // Overload bit cleared
    IsisSpfTrigger_isis_spf_trig_overload_clr IsisSpfTrigger = "isis-spf-trig-overload-clr"

    // Good news link TLV content change
    IsisSpfTrigger_isis_spf_trig_link_good IsisSpfTrigger = "isis-spf-trig-link-good"

    // Bad news link TLV content change
    IsisSpfTrigger_isis_spf_trig_link_bad IsisSpfTrigger = "isis-spf-trig-link-bad"

    // Good news prefix TLV content change
    IsisSpfTrigger_isis_spf_trig_prefix_good IsisSpfTrigger = "isis-spf-trig-prefix-good"

    // Bad news prefix TLV content change
    IsisSpfTrigger_isis_spf_trig_prefix_bad IsisSpfTrigger = "isis-spf-trig-prefix-bad"

    // Neutral (neither good nor bad news) prefix TLV
    // content change
    IsisSpfTrigger_isis_spf_trig_prefix IsisSpfTrigger = "isis-spf-trig-prefix"

    // Area address TLV content change
    IsisSpfTrigger_isis_spf_trig_area_addr IsisSpfTrigger = "isis-spf-trig-area-addr"

    // IP address TLV content change
    IsisSpfTrigger_isis_spf_trig_ip_addr IsisSpfTrigger = "isis-spf-trig-ip-addr"

    // Router id TLV content change
    IsisSpfTrigger_isis_spf_trig_rtrid IsisSpfTrigger = "isis-spf-trig-rtrid"

    // Flex-Algo support change
    IsisSpfTrigger_isis_spf_trig_flex_algo IsisSpfTrigger = "isis-spf-trig-flex-algo"

    // Prefix policy change
    IsisSpfTrigger_isis_spf_trig_prefix_policy IsisSpfTrigger = "isis-spf-trig-prefix-policy"
)

// IsisIfClnsSnpaUnknownReason represents Isis if clns snpa unknown reason
type IsisIfClnsSnpaUnknownReason string

const (
    // isis intf clns snpa unknown access error
    IsisIfClnsSnpaUnknownReason_isis_intf_clns_snpa_unknown_access_error IsisIfClnsSnpaUnknownReason = "isis-intf-clns-snpa-unknown-access-error"

    // isis intf clns snpa unknown not lan
    IsisIfClnsSnpaUnknownReason_isis_intf_clns_snpa_unknown_not_lan IsisIfClnsSnpaUnknownReason = "isis-intf-clns-snpa-unknown-not-lan"

    // isis intf clns snpa unknown internal error
    IsisIfClnsSnpaUnknownReason_isis_intf_clns_snpa_unknown_internal_error IsisIfClnsSnpaUnknownReason = "isis-intf-clns-snpa-unknown-internal-error"
)

// OpenconfigIsisTypesIsisInterfaceAdjStateEnum represents enum
type OpenconfigIsisTypesIsisInterfaceAdjStateEnum string

const (
    // This state describes that adjacency is
    // established.
    OpenconfigIsisTypesIsisInterfaceAdjStateEnum_up OpenconfigIsisTypesIsisInterfaceAdjStateEnum = "up"

    // This state describes that adjacency is NOT
    // established.
    OpenconfigIsisTypesIsisInterfaceAdjStateEnum_down OpenconfigIsisTypesIsisInterfaceAdjStateEnum = "down"

    // This state describes that adjacency is
    // establishing.
    OpenconfigIsisTypesIsisInterfaceAdjStateEnum_init OpenconfigIsisTypesIsisInterfaceAdjStateEnum = "init"

    // This state describes that adjacency is failed.
    OpenconfigIsisTypesIsisInterfaceAdjStateEnum_failed OpenconfigIsisTypesIsisInterfaceAdjStateEnum = "failed"
)

// IsisReachable represents Isis reachable
type IsisReachable string

const (
    // Unreachable
    IsisReachable_isis_unreachable IsisReachable = "isis-unreachable"

    // Reachable
    IsisReachable_isis_reachable IsisReachable = "isis-reachable"
)

// IsisLspTrigger represents Isis lsp trigger
type IsisLspTrigger string

const (
    // Any configuration change
    IsisLspTrigger_isis_lsp_trig_config IsisLspTrigger = "isis-lsp-trig-config"

    // New adjacency came up
    IsisLspTrigger_isis_lsp_trig_newadj IsisLspTrigger = "isis-lsp-trig-newadj"

    // Adjacency went down
    IsisLspTrigger_isis_lsp_trig_deladj IsisLspTrigger = "isis-lsp-trig-deladj"

    // DIS changed, or pseudonode changed
    IsisLspTrigger_isis_lsp_trig_dr_change IsisLspTrigger = "isis-lsp-trig-dr-change"

    // Active area set changed
    IsisLspTrigger_isis_lsp_trig_area_set IsisLspTrigger = "isis-lsp-trig-area-set"

    // Attached bit changed state
    IsisLspTrigger_isis_lsp_trig_attach IsisLspTrigger = "isis-lsp-trig-attach"

    // LSPDB overload bit changed state
    IsisLspTrigger_isis_lsp_trig_hippity IsisLspTrigger = "isis-lsp-trig-hippity"

    // LSP regeneration
    IsisLspTrigger_isis_lsp_trig_regen IsisLspTrigger = "isis-lsp-trig-regen"

    // Directly connected IP prefix up
    IsisLspTrigger_isis_lsp_trig_ip_if_up IsisLspTrigger = "isis-lsp-trig-ip-if-up"

    // Directly connected IP prefix down
    IsisLspTrigger_isis_lsp_trig_ip_if_down IsisLspTrigger = "isis-lsp-trig-ip-if-down"

    // Interarea IP route appeared or gone
    IsisLspTrigger_isis_lsp_trig_ip_inter_area IsisLspTrigger = "isis-lsp-trig-ip-inter-area"

    // Redistributed IP route appeared or gone
    IsisLspTrigger_isis_lsp_trig_ip_external IsisLspTrigger = "isis-lsp-trig-ip-external"

    // Full IP redistribution
    IsisLspTrigger_isis_lsp_trig_ip_external_full IsisLspTrigger = "isis-lsp-trig-ip-external-full"

    // Default information originate changed
    IsisLspTrigger_isis_lsp_trig_ip_def_orig IsisLspTrigger = "isis-lsp-trig-ip-def-orig"

    // IP interface address changed
    IsisLspTrigger_isis_lsp_trig_ip_addr_chg IsisLspTrigger = "isis-lsp-trig-ip-addr-chg"

    // TE bandwidth resource information
    IsisLspTrigger_isis_lsp_trig_te_info IsisLspTrigger = "isis-lsp-trig-te-info"

    // TE PCE information
    IsisLspTrigger_isis_lsp_trig_te_pce_info IsisLspTrigger = "isis-lsp-trig-te-pce-info"

    // TE forwarding adjacency information
    IsisLspTrigger_isis_lsp_trig_te_fa_info IsisLspTrigger = "isis-lsp-trig-te-fa-info"

    // NSR FO is done
    IsisLspTrigger_isis_lsp_trig_nsr_fo IsisLspTrigger = "isis-lsp-trig-nsr-fo"

    // Pseudo-node generation canceled
    IsisLspTrigger_isis_lsp_trig_pn_cancel IsisLspTrigger = "isis-lsp-trig-pn-cancel"

    // Link-group offset metric change
    IsisLspTrigger_isis_lsp_trig_lkgp IsisLspTrigger = "isis-lsp-trig-lkgp"

    // Proactive Protection metric change
    IsisLspTrigger_isis_lsp_trig_pp IsisLspTrigger = "isis-lsp-trig-pp"

    // Any configuration change that requires all LSPs
    // to be updated
    IsisLspTrigger_isis_lsp_trig_config_force_send IsisLspTrigger = "isis-lsp-trig-config-force-send"

    // Any configuration change that requires the LBD
    // database re-init.
    IsisLspTrigger_isis_lsp_trig_config_force_init IsisLspTrigger = "isis-lsp-trig-config-force-init"

    // Adjacency SID added
    IsisLspTrigger_isis_lsp_trig_adj_sid_add IsisLspTrigger = "isis-lsp-trig-adj-sid-add"

    // Adjacency SID deleted
    IsisLspTrigger_isis_lsp_trig_adj_sid_delete IsisLspTrigger = "isis-lsp-trig-adj-sid-delete"

    // Adjacency SIDs added and/or deleted
    IsisLspTrigger_isis_lsp_trig_adj_sid_change IsisLspTrigger = "isis-lsp-trig-adj-sid-change"

    // Maximum SID depth change
    IsisLspTrigger_isis_lsp_trig_msd IsisLspTrigger = "isis-lsp-trig-msd"

    // Adjacency SID wait timer expired
    IsisLspTrigger_isis_lsp_trig_adj_sid_wait_timer IsisLspTrigger = "isis-lsp-trig-adj-sid-wait-timer"

    // Direct LSP generation
    IsisLspTrigger_isis_lsp_trig_direct_gen IsisLspTrigger = "isis-lsp-trig-direct-gen"

    // Flex-Algo Enable/Disable
    IsisLspTrigger_isis_lsp_trig_flex_algo_enable_disable IsisLspTrigger = "isis-lsp-trig-flex-algo-enable-disable"

    // Link delay/loss changed
    IsisLspTrigger_isis_lsp_trig_pm_delay_loss IsisLspTrigger = "isis-lsp-trig-pm-delay-loss"

    // Link bandwidth utilization changed
    IsisLspTrigger_isis_lsp_trig_pm_bw_util IsisLspTrigger = "isis-lsp-trig-pm-bw-util"
)

// IsisUloopAvoidance represents Isis uloop avoidance
type IsisUloopAvoidance string

const (
    // No MicroLoop avoidance
    IsisUloopAvoidance_isis_u_loop_avoidance_type_none IsisUloopAvoidance = "isis-u-loop-avoidance-type-none"

    // Apply MicroLoop avoidance for all prefixes
    IsisUloopAvoidance_isis_u_loop_avoidance_type_all IsisUloopAvoidance = "isis-u-loop-avoidance-type-all"

    // Apply MicroLoop avoidance only for protected
    // prefixes
    IsisUloopAvoidance_isis_u_loop_avoidance_type_protected IsisUloopAvoidance = "isis-u-loop-avoidance-type-protected"

    // Segment Routing MicroLoop avoidance for All
    // single-link changes
    IsisUloopAvoidance_isis_u_loop_avoidance_type_sr IsisUloopAvoidance = "isis-u-loop-avoidance-type-sr"
)

// Srv6EndFunction represents SRv6 End Function Type
type Srv6EndFunction string

const (
    // Unknown
    Srv6EndFunction_unknown Srv6EndFunction = "unknown"

    // End (no PSP/USP)
    Srv6EndFunction_end Srv6EndFunction = "end"

    // End with PSP
    Srv6EndFunction_end_with_psp Srv6EndFunction = "end-with-psp"

    // End with USP
    Srv6EndFunction_end_with_usp Srv6EndFunction = "end-with-usp"

    // End with PSP/USP
    Srv6EndFunction_end_with_psp_usp Srv6EndFunction = "end-with-psp-usp"

    // End.X (no PSP/USP)
    Srv6EndFunction_end_x Srv6EndFunction = "end-x"

    // End.X with PSP
    Srv6EndFunction_end_x_with_psp Srv6EndFunction = "end-x-with-psp"

    // End.X with USP
    Srv6EndFunction_end_x_with_usp Srv6EndFunction = "end-x-with-usp"

    // End.X with PSP/USP
    Srv6EndFunction_end_x_with_psp_usp Srv6EndFunction = "end-x-with-psp-usp"

    // End.T (no PSP/USP)
    Srv6EndFunction_end_tn Srv6EndFunction = "end-tn"

    // End.T with PSP
    Srv6EndFunction_end_t_with_psp Srv6EndFunction = "end-t-with-psp"

    // End.T with USP
    Srv6EndFunction_end_t_with_usp Srv6EndFunction = "end-t-with-usp"

    // End.T with PSP/USP
    Srv6EndFunction_end_t_with_psp_usp Srv6EndFunction = "end-t-with-psp-usp"

    // End.B6
    Srv6EndFunction_end_b6 Srv6EndFunction = "end-b6"

    // End.B6.Encaps
    Srv6EndFunction_end_b6_encaps Srv6EndFunction = "end-b6-encaps"

    // End.BM
    Srv6EndFunction_end_bm Srv6EndFunction = "end-bm"

    // End.DX6
    Srv6EndFunction_end_dx6 Srv6EndFunction = "end-dx6"

    // End.DX4
    Srv6EndFunction_end_dx4 Srv6EndFunction = "end-dx4"

    // End.DT6
    Srv6EndFunction_end_dt6 Srv6EndFunction = "end-dt6"

    // End.DT4
    Srv6EndFunction_end_dt4 Srv6EndFunction = "end-dt4"

    // End.DT46
    Srv6EndFunction_end_dt46 Srv6EndFunction = "end-dt46"

    // End.DX2
    Srv6EndFunction_end_dx2 Srv6EndFunction = "end-dx2"

    // End.DX2V
    Srv6EndFunction_end_dx2v Srv6EndFunction = "end-dx2v"

    // End.DX2U
    Srv6EndFunction_end_dx2u Srv6EndFunction = "end-dx2u"

    // End.DX2M
    Srv6EndFunction_end_dx2m Srv6EndFunction = "end-dx2m"

    // End.OTP
    Srv6EndFunction_end_otp Srv6EndFunction = "end-otp"

    // End.S
    Srv6EndFunction_end_s Srv6EndFunction = "end-s"
)

// IsisPrefixOrigin represents Isis prefix origin
type IsisPrefixOrigin string

const (
    // Level 1 Summary Null Route
    IsisPrefixOrigin_isis_prefix_origin_l1_summary_null IsisPrefixOrigin = "isis-prefix-origin-l1-summary-null"

    // Level 1 Route
    IsisPrefixOrigin_isis_prefix_origin_l1 IsisPrefixOrigin = "isis-prefix-origin-l1"

    // Level 2 Summary Null Route
    IsisPrefixOrigin_isis_prefix_origin_l2_summary_null IsisPrefixOrigin = "isis-prefix-origin-l2-summary-null"

    // Level 2 Route
    IsisPrefixOrigin_isis_prefix_origin_l2 IsisPrefixOrigin = "isis-prefix-origin-l2"

    // Level 1 Interarea Summary Null Route
    IsisPrefixOrigin_isis_prefix_origin_inter_area_summary_null IsisPrefixOrigin = "isis-prefix-origin-inter-area-summary-null"

    // Level 1 Interarea Route
    IsisPrefixOrigin_isis_prefix_origin_inter_area IsisPrefixOrigin = "isis-prefix-origin-inter-area"

    // Nearest Attached Default Route
    IsisPrefixOrigin_isis_prefix_origin_default_nearest_attached IsisPrefixOrigin = "isis-prefix-origin-default-nearest-attached"
)

// OpenconfigIsisLspAttributesEnum represents Openconfig isis lsp attributes enum
type OpenconfigIsisLspAttributesEnum string

const (
    // When set, node is overloaded, still part of the
    // topology but cannot be used for transit.
    OpenconfigIsisLspAttributesEnum_overload OpenconfigIsisLspAttributesEnum = "overload"

    // When set, node is attached to another area
    // using the referred metric and can be used as
    // default gateway.
    OpenconfigIsisLspAttributesEnum_attached OpenconfigIsisLspAttributesEnum = "attached"
)

// OpenconfigIsisLspPduTypeEnum represents Openconfig isis lsp pdu type enum
type OpenconfigIsisLspPduTypeEnum string

const (
    // This enum describes ISIS level 1 PDU.
    OpenconfigIsisLspPduTypeEnum_level1 OpenconfigIsisLspPduTypeEnum = "level1"

    // This enum describes ISIS level 2 PDU.
    OpenconfigIsisLspPduTypeEnum_level2 OpenconfigIsisLspPduTypeEnum = "level2"
)

// OcniIsis
// An OpenConfig description of a network-instance
type OcniIsis struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network instances configured on the local system.
    NetworkInstances OcniIsis_NetworkInstances
}

func (ocniIsis *OcniIsis) GetEntityData() *types.CommonEntityData {
    ocniIsis.EntityData.YFilter = ocniIsis.YFilter
    ocniIsis.EntityData.YangName = "ocni-isis"
    ocniIsis.EntityData.BundleName = "cisco_ios_xr"
    ocniIsis.EntityData.ParentYangName = "Cisco-IOS-XR-clns-isis-oper"
    ocniIsis.EntityData.SegmentPath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis"
    ocniIsis.EntityData.AbsolutePath = ocniIsis.EntityData.SegmentPath
    ocniIsis.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ocniIsis.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ocniIsis.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ocniIsis.EntityData.Children = types.NewOrderedMap()
    ocniIsis.EntityData.Children.Append("network-instances", types.YChild{"NetworkInstances", &ocniIsis.NetworkInstances})
    ocniIsis.EntityData.Leafs = types.NewOrderedMap()

    ocniIsis.EntityData.YListKeys = []string {}

    return &(ocniIsis.EntityData)
}

// OcniIsis_NetworkInstances
// Network instances configured on the local system
type OcniIsis_NetworkInstances struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network instances configured on the local system. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance.
    NetworkInstance []*OcniIsis_NetworkInstances_NetworkInstance
}

func (networkInstances *OcniIsis_NetworkInstances) GetEntityData() *types.CommonEntityData {
    networkInstances.EntityData.YFilter = networkInstances.YFilter
    networkInstances.EntityData.YangName = "network-instances"
    networkInstances.EntityData.BundleName = "cisco_ios_xr"
    networkInstances.EntityData.ParentYangName = "ocni-isis"
    networkInstances.EntityData.SegmentPath = "network-instances"
    networkInstances.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/" + networkInstances.EntityData.SegmentPath
    networkInstances.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    networkInstances.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    networkInstances.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    networkInstances.EntityData.Children = types.NewOrderedMap()
    networkInstances.EntityData.Children.Append("network-instance", types.YChild{"NetworkInstance", nil})
    for i := range networkInstances.NetworkInstance {
        networkInstances.EntityData.Children.Append(types.GetSegmentPath(networkInstances.NetworkInstance[i]), types.YChild{"NetworkInstance", networkInstances.NetworkInstance[i]})
    }
    networkInstances.EntityData.Leafs = types.NewOrderedMap()

    networkInstances.EntityData.YListKeys = []string {}

    return &(networkInstances.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance
// Network instances configured on the local
// system
type OcniIsis_NetworkInstances_NetworkInstance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. A unique name identifying the network instance.
    // The type is string.
    Name interface{}

    // An interface associated with the network instance.
    Interfaces OcniIsis_NetworkInstances_NetworkInstance_Interfaces

    // A process (instance) of a routing protocol.
    Protocols OcniIsis_NetworkInstances_NetworkInstance_Protocols

    // Operational state parameters relating to a network instance.
    State OcniIsis_NetworkInstances_NetworkInstance_State
}

func (networkInstance *OcniIsis_NetworkInstances_NetworkInstance) GetEntityData() *types.CommonEntityData {
    networkInstance.EntityData.YFilter = networkInstance.YFilter
    networkInstance.EntityData.YangName = "network-instance"
    networkInstance.EntityData.BundleName = "cisco_ios_xr"
    networkInstance.EntityData.ParentYangName = "network-instances"
    networkInstance.EntityData.SegmentPath = "network-instance" + types.AddKeyToken(networkInstance.Name, "name")
    networkInstance.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/" + networkInstance.EntityData.SegmentPath
    networkInstance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    networkInstance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    networkInstance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    networkInstance.EntityData.Children = types.NewOrderedMap()
    networkInstance.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &networkInstance.Interfaces})
    networkInstance.EntityData.Children.Append("protocols", types.YChild{"Protocols", &networkInstance.Protocols})
    networkInstance.EntityData.Children.Append("state", types.YChild{"State", &networkInstance.State})
    networkInstance.EntityData.Leafs = types.NewOrderedMap()
    networkInstance.EntityData.Leafs.Append("name", types.YLeaf{"Name", networkInstance.Name})

    networkInstance.EntityData.YListKeys = []string {"Name"}

    return &(networkInstance.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Interfaces
// An interface associated with the network
// instance
type OcniIsis_NetworkInstances_NetworkInstance_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An interface associated with the network instance. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Interfaces_Interface.
    Interface []*OcniIsis_NetworkInstances_NetworkInstance_Interfaces_Interface
}

func (interfaces *OcniIsis_NetworkInstances_NetworkInstance_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "cisco_ios_xr"
    interfaces.EntityData.ParentYangName = "network-instance"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/" + interfaces.EntityData.SegmentPath
    interfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaces.Interface {
        interfaces.EntityData.Children.Append(types.GetSegmentPath(interfaces.Interface[i]), types.YChild{"Interface", interfaces.Interface[i]})
    }
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Interfaces_Interface
// An interface associated with the network
// instance
type OcniIsis_NetworkInstances_NetworkInstance_Interfaces_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. A reference to an identifier for this interface
    // which acts as a key for this list. The type is string.
    Id interface{}

    // Operational state parameters relating to the associated interface.
    State OcniIsis_NetworkInstances_NetworkInstance_Interfaces_Interface_State
}

func (self *OcniIsis_NetworkInstances_NetworkInstance_Interfaces_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interfaces"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.Id, "id")
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/interfaces/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("state", types.YChild{"State", &self.State})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("id", types.YLeaf{"Id", self.Id})

    self.EntityData.YListKeys = []string {"Id"}

    return &(self.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Interfaces_Interface_State
// Operational state parameters relating to the
// associated interface
type OcniIsis_NetworkInstances_NetworkInstance_Interfaces_Interface_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique identifier for this interface - this is expressed as a free-text
    // string. The type is string.
    Id interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Interfaces_Interface_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "interface"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/interfaces/interface/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("id", types.YLeaf{"Id", state.Id})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols
// A process (instance) of a routing protocol
type OcniIsis_NetworkInstances_NetworkInstance_Protocols struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A process (instance) of a routing protocol. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol.
    Protocol []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol
}

func (protocols *OcniIsis_NetworkInstances_NetworkInstance_Protocols) GetEntityData() *types.CommonEntityData {
    protocols.EntityData.YFilter = protocols.YFilter
    protocols.EntityData.YangName = "protocols"
    protocols.EntityData.BundleName = "cisco_ios_xr"
    protocols.EntityData.ParentYangName = "network-instance"
    protocols.EntityData.SegmentPath = "protocols"
    protocols.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/" + protocols.EntityData.SegmentPath
    protocols.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocols.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocols.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocols.EntityData.Children = types.NewOrderedMap()
    protocols.EntityData.Children.Append("protocol", types.YChild{"Protocol", nil})
    for i := range protocols.Protocol {
        types.SetYListKey(protocols.Protocol[i], i)
        protocols.EntityData.Children.Append(types.GetSegmentPath(protocols.Protocol[i]), types.YChild{"Protocol", protocols.Protocol[i]})
    }
    protocols.EntityData.Leafs = types.NewOrderedMap()

    protocols.EntityData.YListKeys = []string {}

    return &(protocols.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol
// A process (instance) of a routing protocol
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The protocol name for the routing or forwarding protocol to be
    // instantiated. The type is string.
    Identifier interface{}

    // An operator-assigned identifier for the routing or forwarding protocol. The
    // type is string.
    Name interface{}

    // State parameters relating to the routing protocol instance.
    ProtocolsState OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_ProtocolsState

    // This container defines top-level ISIS configuration and state information.
    Isis OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis
}

func (protocol *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol) GetEntityData() *types.CommonEntityData {
    protocol.EntityData.YFilter = protocol.YFilter
    protocol.EntityData.YangName = "protocol"
    protocol.EntityData.BundleName = "cisco_ios_xr"
    protocol.EntityData.ParentYangName = "protocols"
    protocol.EntityData.SegmentPath = "protocol" + types.AddNoKeyToken(protocol)
    protocol.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/" + protocol.EntityData.SegmentPath
    protocol.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocol.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocol.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocol.EntityData.Children = types.NewOrderedMap()
    protocol.EntityData.Children.Append("protocols-state", types.YChild{"ProtocolsState", &protocol.ProtocolsState})
    protocol.EntityData.Children.Append("isis", types.YChild{"Isis", &protocol.Isis})
    protocol.EntityData.Leafs = types.NewOrderedMap()
    protocol.EntityData.Leafs.Append("identifier", types.YLeaf{"Identifier", protocol.Identifier})
    protocol.EntityData.Leafs.Append("name", types.YLeaf{"Name", protocol.Name})

    protocol.EntityData.YListKeys = []string {}

    return &(protocol.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_ProtocolsState
// State parameters relating to the routing
// protocol instance
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_ProtocolsState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The protocol identifier for the instance. The type is string.
    Identifier interface{}

    // A unique name for the protocol instance. The type is string.
    Name interface{}
}

func (protocolsState *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_ProtocolsState) GetEntityData() *types.CommonEntityData {
    protocolsState.EntityData.YFilter = protocolsState.YFilter
    protocolsState.EntityData.YangName = "protocols-state"
    protocolsState.EntityData.BundleName = "cisco_ios_xr"
    protocolsState.EntityData.ParentYangName = "protocol"
    protocolsState.EntityData.SegmentPath = "protocols-state"
    protocolsState.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/" + protocolsState.EntityData.SegmentPath
    protocolsState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolsState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolsState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolsState.EntityData.Children = types.NewOrderedMap()
    protocolsState.EntityData.Leafs = types.NewOrderedMap()
    protocolsState.EntityData.Leafs.Append("identifier", types.YLeaf{"Identifier", protocolsState.Identifier})
    protocolsState.EntityData.Leafs.Append("name", types.YLeaf{"Name", protocolsState.Name})

    protocolsState.EntityData.YListKeys = []string {}

    return &(protocolsState.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis
// This container defines top-level ISIS
// configuration and state information
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list contains ISIS interfaces.
    IsisInterfaces OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces

    // This container defines global ISIS configuration and state information.
    Global OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global

    // Configuration and operational state parameters related to a particular
    // level within the IS-IS protocol instance.
    Levels OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels
}

func (isis *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis) GetEntityData() *types.CommonEntityData {
    isis.EntityData.YFilter = isis.YFilter
    isis.EntityData.YangName = "isis"
    isis.EntityData.BundleName = "cisco_ios_xr"
    isis.EntityData.ParentYangName = "protocol"
    isis.EntityData.SegmentPath = "isis"
    isis.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/" + isis.EntityData.SegmentPath
    isis.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isis.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isis.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isis.EntityData.Children = types.NewOrderedMap()
    isis.EntityData.Children.Append("isis-interfaces", types.YChild{"IsisInterfaces", &isis.IsisInterfaces})
    isis.EntityData.Children.Append("global", types.YChild{"Global", &isis.Global})
    isis.EntityData.Children.Append("levels", types.YChild{"Levels", &isis.Levels})
    isis.EntityData.Leafs = types.NewOrderedMap()

    isis.EntityData.YListKeys = []string {}

    return &(isis.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces
// This list contains ISIS interfaces
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list contains ISIS interfaces. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface.
    IsisInterface []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface
}

func (isisInterfaces *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces) GetEntityData() *types.CommonEntityData {
    isisInterfaces.EntityData.YFilter = isisInterfaces.YFilter
    isisInterfaces.EntityData.YangName = "isis-interfaces"
    isisInterfaces.EntityData.BundleName = "cisco_ios_xr"
    isisInterfaces.EntityData.ParentYangName = "isis"
    isisInterfaces.EntityData.SegmentPath = "isis-interfaces"
    isisInterfaces.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/" + isisInterfaces.EntityData.SegmentPath
    isisInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isisInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isisInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isisInterfaces.EntityData.Children = types.NewOrderedMap()
    isisInterfaces.EntityData.Children.Append("isis-interface", types.YChild{"IsisInterface", nil})
    for i := range isisInterfaces.IsisInterface {
        isisInterfaces.EntityData.Children.Append(types.GetSegmentPath(isisInterfaces.IsisInterface[i]), types.YChild{"IsisInterface", isisInterfaces.IsisInterface[i]})
    }
    isisInterfaces.EntityData.Leafs = types.NewOrderedMap()

    isisInterfaces.EntityData.YListKeys = []string {}

    return &(isisInterfaces.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface
// This list contains ISIS interfaces
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to interface-id. The type is string.
    InterfaceId interface{}

    // Address-family/Subsequent Address-family list.
    InterfacesAfiSafis OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesAfiSafis

    // This container defines state information for ISIS interfaces.
    InterfacesState OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesState

    // Configuration and operational state parameters related to a particular
    // level on an IS-IS enabled interface.
    InterfacesLevels OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels

    // This container defines state information for ISIS circuit counters.
    CircuitCounters OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_CircuitCounters

    // This container defines ISIS authentication.
    InterfacesAuthentication OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesAuthentication

    // This container describes ISIS interface timers configuration.
    InterfacesTimers OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesTimers
}

func (isisInterface *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface) GetEntityData() *types.CommonEntityData {
    isisInterface.EntityData.YFilter = isisInterface.YFilter
    isisInterface.EntityData.YangName = "isis-interface"
    isisInterface.EntityData.BundleName = "cisco_ios_xr"
    isisInterface.EntityData.ParentYangName = "isis-interfaces"
    isisInterface.EntityData.SegmentPath = "isis-interface" + types.AddKeyToken(isisInterface.InterfaceId, "interface-id")
    isisInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/" + isisInterface.EntityData.SegmentPath
    isisInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isisInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isisInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isisInterface.EntityData.Children = types.NewOrderedMap()
    isisInterface.EntityData.Children.Append("interfaces-afi-safis", types.YChild{"InterfacesAfiSafis", &isisInterface.InterfacesAfiSafis})
    isisInterface.EntityData.Children.Append("interfaces-state", types.YChild{"InterfacesState", &isisInterface.InterfacesState})
    isisInterface.EntityData.Children.Append("interfaces-levels", types.YChild{"InterfacesLevels", &isisInterface.InterfacesLevels})
    isisInterface.EntityData.Children.Append("circuit-counters", types.YChild{"CircuitCounters", &isisInterface.CircuitCounters})
    isisInterface.EntityData.Children.Append("interfaces-authentication", types.YChild{"InterfacesAuthentication", &isisInterface.InterfacesAuthentication})
    isisInterface.EntityData.Children.Append("interfaces-timers", types.YChild{"InterfacesTimers", &isisInterface.InterfacesTimers})
    isisInterface.EntityData.Leafs = types.NewOrderedMap()
    isisInterface.EntityData.Leafs.Append("interface-id", types.YLeaf{"InterfaceId", isisInterface.InterfaceId})

    isisInterface.EntityData.YListKeys = []string {"InterfaceId"}

    return &(isisInterface.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesAfiSafis
// Address-family/Subsequent Address-family
// list
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesAfiSafis struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family/Subsequent Address-family list. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesAfiSafis_InterfacesAfiSafi.
    InterfacesAfiSafi []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesAfiSafis_InterfacesAfiSafi
}

func (interfacesAfiSafis *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesAfiSafis) GetEntityData() *types.CommonEntityData {
    interfacesAfiSafis.EntityData.YFilter = interfacesAfiSafis.YFilter
    interfacesAfiSafis.EntityData.YangName = "interfaces-afi-safis"
    interfacesAfiSafis.EntityData.BundleName = "cisco_ios_xr"
    interfacesAfiSafis.EntityData.ParentYangName = "isis-interface"
    interfacesAfiSafis.EntityData.SegmentPath = "interfaces-afi-safis"
    interfacesAfiSafis.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/" + interfacesAfiSafis.EntityData.SegmentPath
    interfacesAfiSafis.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfacesAfiSafis.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfacesAfiSafis.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfacesAfiSafis.EntityData.Children = types.NewOrderedMap()
    interfacesAfiSafis.EntityData.Children.Append("interfaces-afi-safi", types.YChild{"InterfacesAfiSafi", nil})
    for i := range interfacesAfiSafis.InterfacesAfiSafi {
        types.SetYListKey(interfacesAfiSafis.InterfacesAfiSafi[i], i)
        interfacesAfiSafis.EntityData.Children.Append(types.GetSegmentPath(interfacesAfiSafis.InterfacesAfiSafi[i]), types.YChild{"InterfacesAfiSafi", interfacesAfiSafis.InterfacesAfiSafi[i]})
    }
    interfacesAfiSafis.EntityData.Leafs = types.NewOrderedMap()

    interfacesAfiSafis.EntityData.YListKeys = []string {}

    return &(interfacesAfiSafis.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesAfiSafis_InterfacesAfiSafi
// Address-family/Subsequent Address-family
// list
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesAfiSafis_InterfacesAfiSafi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Reference to address-family type. The type is string.
    AfiName interface{}

    // Reference to subsequent address-family type. The type is string.
    SafiName interface{}

    // This container defines AFI-SAFI State information.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesAfiSafis_InterfacesAfiSafi_State
}

func (interfacesAfiSafi *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesAfiSafis_InterfacesAfiSafi) GetEntityData() *types.CommonEntityData {
    interfacesAfiSafi.EntityData.YFilter = interfacesAfiSafi.YFilter
    interfacesAfiSafi.EntityData.YangName = "interfaces-afi-safi"
    interfacesAfiSafi.EntityData.BundleName = "cisco_ios_xr"
    interfacesAfiSafi.EntityData.ParentYangName = "interfaces-afi-safis"
    interfacesAfiSafi.EntityData.SegmentPath = "interfaces-afi-safi" + types.AddNoKeyToken(interfacesAfiSafi)
    interfacesAfiSafi.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-afi-safis/" + interfacesAfiSafi.EntityData.SegmentPath
    interfacesAfiSafi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfacesAfiSafi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfacesAfiSafi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfacesAfiSafi.EntityData.Children = types.NewOrderedMap()
    interfacesAfiSafi.EntityData.Children.Append("state", types.YChild{"State", &interfacesAfiSafi.State})
    interfacesAfiSafi.EntityData.Leafs = types.NewOrderedMap()
    interfacesAfiSafi.EntityData.Leafs.Append("afi-name", types.YLeaf{"AfiName", interfacesAfiSafi.AfiName})
    interfacesAfiSafi.EntityData.Leafs.Append("safi-name", types.YLeaf{"SafiName", interfacesAfiSafi.SafiName})

    interfacesAfiSafi.EntityData.YListKeys = []string {}

    return &(interfacesAfiSafi.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesAfiSafis_InterfacesAfiSafi_State
// This container defines AFI-SAFI State
// information
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesAfiSafis_InterfacesAfiSafi_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family type. The type is string.
    AfiName interface{}

    // Subsequent address-family type. The type is string.
    SafiName interface{}

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool.
    Enabled interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesAfiSafis_InterfacesAfiSafi_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "interfaces-afi-safi"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-afi-safis/interfaces-afi-safi/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("afi-name", types.YLeaf{"AfiName", state.AfiName})
    state.EntityData.Leafs.Append("safi-name", types.YLeaf{"SafiName", state.SafiName})
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesState
// This container defines state information
// for ISIS interfaces
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool.
    Enabled interface{}

    // Interface for which ISIS configuration is to be applied. The type is
    // string.
    InterfaceId interface{}

    // When set to true, the referenced interface is a passive interface such that
    // it is not eligible to establish adjacencies with other systems, but is
    // advertised into the IS-IS topology. The type is bool.
    Passive interface{}

    // This leaf controls padding type for IS-IS Hello PDUs. The type is
    // OpenconfigIsisTypesHelloPaddingTypeEnum.
    HelloPadding interface{}

    // ISIS circuit type (p2p, broadcast). The type is
    // OpenconfigIsisTypesCircuitTypeEnum.
    CircuitType interface{}
}

func (interfacesState *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesState) GetEntityData() *types.CommonEntityData {
    interfacesState.EntityData.YFilter = interfacesState.YFilter
    interfacesState.EntityData.YangName = "interfaces-state"
    interfacesState.EntityData.BundleName = "cisco_ios_xr"
    interfacesState.EntityData.ParentYangName = "isis-interface"
    interfacesState.EntityData.SegmentPath = "interfaces-state"
    interfacesState.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/" + interfacesState.EntityData.SegmentPath
    interfacesState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfacesState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfacesState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfacesState.EntityData.Children = types.NewOrderedMap()
    interfacesState.EntityData.Leafs = types.NewOrderedMap()
    interfacesState.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", interfacesState.Enabled})
    interfacesState.EntityData.Leafs.Append("interface-id", types.YLeaf{"InterfaceId", interfacesState.InterfaceId})
    interfacesState.EntityData.Leafs.Append("passive", types.YLeaf{"Passive", interfacesState.Passive})
    interfacesState.EntityData.Leafs.Append("hello-padding", types.YLeaf{"HelloPadding", interfacesState.HelloPadding})
    interfacesState.EntityData.Leafs.Append("circuit-type", types.YLeaf{"CircuitType", interfacesState.CircuitType})

    interfacesState.EntityData.YListKeys = []string {}

    return &(interfacesState.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels
// Configuration and operational state
// parameters related to a particular level
// on an IS-IS enabled interface
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration and operational state parameters related to a particular
    // level on an IS-IS enabled interface. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel.
    InterfacesLevel []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel
}

func (interfacesLevels *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels) GetEntityData() *types.CommonEntityData {
    interfacesLevels.EntityData.YFilter = interfacesLevels.YFilter
    interfacesLevels.EntityData.YangName = "interfaces-levels"
    interfacesLevels.EntityData.BundleName = "cisco_ios_xr"
    interfacesLevels.EntityData.ParentYangName = "isis-interface"
    interfacesLevels.EntityData.SegmentPath = "interfaces-levels"
    interfacesLevels.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/" + interfacesLevels.EntityData.SegmentPath
    interfacesLevels.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfacesLevels.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfacesLevels.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfacesLevels.EntityData.Children = types.NewOrderedMap()
    interfacesLevels.EntityData.Children.Append("interfaces-level", types.YChild{"InterfacesLevel", nil})
    for i := range interfacesLevels.InterfacesLevel {
        interfacesLevels.EntityData.Children.Append(types.GetSegmentPath(interfacesLevels.InterfacesLevel[i]), types.YChild{"InterfacesLevel", interfacesLevels.InterfacesLevel[i]})
    }
    interfacesLevels.EntityData.Leafs = types.NewOrderedMap()

    interfacesLevels.EntityData.YListKeys = []string {}

    return &(interfacesLevels.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel
// Configuration and operational state
// parameters related to a particular level
// on an IS-IS enabled interface
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to ISIS level-number. The type is
    // interface{} with range: 0..4294967295.
    LevelNumber interface{}

    // This container defines ISIS authentication.
    HelloAuthentication OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_HelloAuthentication

    // This container defines interface ISIS level state information.
    InterfacesLevelsState OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_InterfacesLevelsState

    // This container defines ISIS interface packet counters.
    PacketCounters OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters

    // List of the local system's IS-IS adjacencies.
    Adjacencies OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_Adjacencies

    // This container defines ISIS timers.
    LevelsTimers OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsTimers

    // Address-family/Subsequent Address-family list.
    LevelsAfiSafis OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis
}

func (interfacesLevel *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel) GetEntityData() *types.CommonEntityData {
    interfacesLevel.EntityData.YFilter = interfacesLevel.YFilter
    interfacesLevel.EntityData.YangName = "interfaces-level"
    interfacesLevel.EntityData.BundleName = "cisco_ios_xr"
    interfacesLevel.EntityData.ParentYangName = "interfaces-levels"
    interfacesLevel.EntityData.SegmentPath = "interfaces-level" + types.AddKeyToken(interfacesLevel.LevelNumber, "level-number")
    interfacesLevel.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-levels/" + interfacesLevel.EntityData.SegmentPath
    interfacesLevel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfacesLevel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfacesLevel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfacesLevel.EntityData.Children = types.NewOrderedMap()
    interfacesLevel.EntityData.Children.Append("hello-authentication", types.YChild{"HelloAuthentication", &interfacesLevel.HelloAuthentication})
    interfacesLevel.EntityData.Children.Append("interfaces-levels-state", types.YChild{"InterfacesLevelsState", &interfacesLevel.InterfacesLevelsState})
    interfacesLevel.EntityData.Children.Append("packet-counters", types.YChild{"PacketCounters", &interfacesLevel.PacketCounters})
    interfacesLevel.EntityData.Children.Append("adjacencies", types.YChild{"Adjacencies", &interfacesLevel.Adjacencies})
    interfacesLevel.EntityData.Children.Append("levels-timers", types.YChild{"LevelsTimers", &interfacesLevel.LevelsTimers})
    interfacesLevel.EntityData.Children.Append("levels-afi-safis", types.YChild{"LevelsAfiSafis", &interfacesLevel.LevelsAfiSafis})
    interfacesLevel.EntityData.Leafs = types.NewOrderedMap()
    interfacesLevel.EntityData.Leafs.Append("level-number", types.YLeaf{"LevelNumber", interfacesLevel.LevelNumber})

    interfacesLevel.EntityData.YListKeys = []string {"LevelNumber"}

    return &(interfacesLevel.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_HelloAuthentication
// This container defines ISIS
// authentication
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_HelloAuthentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS authentication key.
    Key OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_HelloAuthentication_Key
}

func (helloAuthentication *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_HelloAuthentication) GetEntityData() *types.CommonEntityData {
    helloAuthentication.EntityData.YFilter = helloAuthentication.YFilter
    helloAuthentication.EntityData.YangName = "hello-authentication"
    helloAuthentication.EntityData.BundleName = "cisco_ios_xr"
    helloAuthentication.EntityData.ParentYangName = "interfaces-level"
    helloAuthentication.EntityData.SegmentPath = "hello-authentication"
    helloAuthentication.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-levels/interfaces-level/" + helloAuthentication.EntityData.SegmentPath
    helloAuthentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloAuthentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloAuthentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloAuthentication.EntityData.Children = types.NewOrderedMap()
    helloAuthentication.EntityData.Children.Append("key", types.YChild{"Key", &helloAuthentication.Key})
    helloAuthentication.EntityData.Leafs = types.NewOrderedMap()

    helloAuthentication.EntityData.YListKeys = []string {}

    return &(helloAuthentication.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_HelloAuthentication_Key
// This container defines ISIS authentication key
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_HelloAuthentication_Key struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS authentication key state.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_HelloAuthentication_Key_State
}

func (key *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_HelloAuthentication_Key) GetEntityData() *types.CommonEntityData {
    key.EntityData.YFilter = key.YFilter
    key.EntityData.YangName = "key"
    key.EntityData.BundleName = "cisco_ios_xr"
    key.EntityData.ParentYangName = "hello-authentication"
    key.EntityData.SegmentPath = "key"
    key.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-levels/interfaces-level/hello-authentication/" + key.EntityData.SegmentPath
    key.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    key.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    key.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    key.EntityData.Children = types.NewOrderedMap()
    key.EntityData.Children.Append("state", types.YChild{"State", &key.State})
    key.EntityData.Leafs = types.NewOrderedMap()

    key.EntityData.YListKeys = []string {}

    return &(key.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_HelloAuthentication_Key_State
// This container defines ISIS authentication key
// state
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_HelloAuthentication_Key_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key string. The type is string.
    AuthPassword interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_HelloAuthentication_Key_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "key"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-levels/interfaces-level/hello-authentication/key/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("auth-password", types.YLeaf{"AuthPassword", state.AuthPassword})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_InterfacesLevelsState
// This container defines interface ISIS
// level state information
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_InterfacesLevelsState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS level number(level-1, level-2). The type is interface{} with range:
    // 0..255.
    LevelNumber interface{}

    // ISIS neighbor priority(LAN hello PDU only). The type is interface{} with
    // range: 0..255.
    Priority interface{}
}

func (interfacesLevelsState *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_InterfacesLevelsState) GetEntityData() *types.CommonEntityData {
    interfacesLevelsState.EntityData.YFilter = interfacesLevelsState.YFilter
    interfacesLevelsState.EntityData.YangName = "interfaces-levels-state"
    interfacesLevelsState.EntityData.BundleName = "cisco_ios_xr"
    interfacesLevelsState.EntityData.ParentYangName = "interfaces-level"
    interfacesLevelsState.EntityData.SegmentPath = "interfaces-levels-state"
    interfacesLevelsState.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-levels/interfaces-level/" + interfacesLevelsState.EntityData.SegmentPath
    interfacesLevelsState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfacesLevelsState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfacesLevelsState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfacesLevelsState.EntityData.Children = types.NewOrderedMap()
    interfacesLevelsState.EntityData.Leafs = types.NewOrderedMap()
    interfacesLevelsState.EntityData.Leafs.Append("level-number", types.YLeaf{"LevelNumber", interfacesLevelsState.LevelNumber})
    interfacesLevelsState.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", interfacesLevelsState.Priority})

    interfacesLevelsState.EntityData.YListKeys = []string {}

    return &(interfacesLevelsState.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters
// This container defines ISIS interface
// packet counters
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines LSP packet counters.
    Lsp OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Lsp

    // This container defines IIH packet counters.
    Iih OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Iih

    // This container defines PSNP packet counters.
    Psnp OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Psnp

    // Operational state parameters relating to CNSPs.
    Cnsp OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Cnsp
}

func (packetCounters *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters) GetEntityData() *types.CommonEntityData {
    packetCounters.EntityData.YFilter = packetCounters.YFilter
    packetCounters.EntityData.YangName = "packet-counters"
    packetCounters.EntityData.BundleName = "cisco_ios_xr"
    packetCounters.EntityData.ParentYangName = "interfaces-level"
    packetCounters.EntityData.SegmentPath = "packet-counters"
    packetCounters.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-levels/interfaces-level/" + packetCounters.EntityData.SegmentPath
    packetCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    packetCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    packetCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    packetCounters.EntityData.Children = types.NewOrderedMap()
    packetCounters.EntityData.Children.Append("lsp", types.YChild{"Lsp", &packetCounters.Lsp})
    packetCounters.EntityData.Children.Append("iih", types.YChild{"Iih", &packetCounters.Iih})
    packetCounters.EntityData.Children.Append("psnp", types.YChild{"Psnp", &packetCounters.Psnp})
    packetCounters.EntityData.Children.Append("cnsp", types.YChild{"Cnsp", &packetCounters.Cnsp})
    packetCounters.EntityData.Leafs = types.NewOrderedMap()

    packetCounters.EntityData.YListKeys = []string {}

    return &(packetCounters.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Lsp
// This container defines LSP packet counters
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Lsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines LSP PDU counters.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Lsp_State
}

func (lsp *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Lsp) GetEntityData() *types.CommonEntityData {
    lsp.EntityData.YFilter = lsp.YFilter
    lsp.EntityData.YangName = "lsp"
    lsp.EntityData.BundleName = "cisco_ios_xr"
    lsp.EntityData.ParentYangName = "packet-counters"
    lsp.EntityData.SegmentPath = "lsp"
    lsp.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-levels/interfaces-level/packet-counters/" + lsp.EntityData.SegmentPath
    lsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsp.EntityData.Children = types.NewOrderedMap()
    lsp.EntityData.Children.Append("state", types.YChild{"State", &lsp.State})
    lsp.EntityData.Leafs = types.NewOrderedMap()

    lsp.EntityData.YListKeys = []string {}

    return &(lsp.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Lsp_State
// This container defines LSP PDU counters
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Lsp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The number of the specified type of PDU received on the interface. The type
    // is interface{} with range: 0..4294967295.
    Received interface{}

    // The number of the specified type of PDU received on the interface that have
    // been processed by the local system. The type is interface{} with range:
    // 0..4294967295.
    Processed interface{}

    // The number of the specified type of PDU that have been sent by the local
    // system on the interface. The type is interface{} with range: 0..4294967295.
    Sent interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Lsp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "lsp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-levels/interfaces-level/packet-counters/lsp/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("received", types.YLeaf{"Received", state.Received})
    state.EntityData.Leafs.Append("processed", types.YLeaf{"Processed", state.Processed})
    state.EntityData.Leafs.Append("sent", types.YLeaf{"Sent", state.Sent})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Iih
// This container defines IIH packet counters
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Iih struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational counters relating to IIH PDUs.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Iih_State
}

func (iih *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Iih) GetEntityData() *types.CommonEntityData {
    iih.EntityData.YFilter = iih.YFilter
    iih.EntityData.YangName = "iih"
    iih.EntityData.BundleName = "cisco_ios_xr"
    iih.EntityData.ParentYangName = "packet-counters"
    iih.EntityData.SegmentPath = "iih"
    iih.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-levels/interfaces-level/packet-counters/" + iih.EntityData.SegmentPath
    iih.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iih.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iih.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iih.EntityData.Children = types.NewOrderedMap()
    iih.EntityData.Children.Append("state", types.YChild{"State", &iih.State})
    iih.EntityData.Leafs = types.NewOrderedMap()

    iih.EntityData.YListKeys = []string {}

    return &(iih.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Iih_State
// Operational counters relating to IIH PDUs
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Iih_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The number of the specified type of PDU received on the interface. The type
    // is interface{} with range: 0..4294967295.
    Received interface{}

    // The number of the specified type of PDU received on the interface that have
    // been processed by the local system. The type is interface{} with range:
    // 0..4294967295.
    Processed interface{}

    // The number of the specified type of PDU that have been sent by the local
    // system on the interface. The type is interface{} with range: 0..4294967295.
    Sent interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Iih_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "iih"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-levels/interfaces-level/packet-counters/iih/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("received", types.YLeaf{"Received", state.Received})
    state.EntityData.Leafs.Append("processed", types.YLeaf{"Processed", state.Processed})
    state.EntityData.Leafs.Append("sent", types.YLeaf{"Sent", state.Sent})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Psnp
// This container defines PSNP packet counters
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Psnp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Packet counters relating to PSNPs.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Psnp_State
}

func (psnp *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Psnp) GetEntityData() *types.CommonEntityData {
    psnp.EntityData.YFilter = psnp.YFilter
    psnp.EntityData.YangName = "psnp"
    psnp.EntityData.BundleName = "cisco_ios_xr"
    psnp.EntityData.ParentYangName = "packet-counters"
    psnp.EntityData.SegmentPath = "psnp"
    psnp.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-levels/interfaces-level/packet-counters/" + psnp.EntityData.SegmentPath
    psnp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    psnp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    psnp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    psnp.EntityData.Children = types.NewOrderedMap()
    psnp.EntityData.Children.Append("state", types.YChild{"State", &psnp.State})
    psnp.EntityData.Leafs = types.NewOrderedMap()

    psnp.EntityData.YListKeys = []string {}

    return &(psnp.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Psnp_State
// Packet counters relating to PSNPs
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Psnp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The number of the specified type of PDU received on the interface. The type
    // is interface{} with range: 0..4294967295.
    Received interface{}

    // The number of the specified type of PDU received on the interface that have
    // been processed by the local system. The type is interface{} with range:
    // 0..4294967295.
    Processed interface{}

    // The number of the specified type of PDU that have been sent by the local
    // system on the interface. The type is interface{} with range: 0..4294967295.
    Sent interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Psnp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "psnp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-levels/interfaces-level/packet-counters/psnp/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("received", types.YLeaf{"Received", state.Received})
    state.EntityData.Leafs.Append("processed", types.YLeaf{"Processed", state.Processed})
    state.EntityData.Leafs.Append("sent", types.YLeaf{"Sent", state.Sent})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Cnsp
// Operational state parameters relating to CNSPs
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Cnsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Packet counters relating to CNSPs.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Cnsp_State
}

func (cnsp *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Cnsp) GetEntityData() *types.CommonEntityData {
    cnsp.EntityData.YFilter = cnsp.YFilter
    cnsp.EntityData.YangName = "cnsp"
    cnsp.EntityData.BundleName = "cisco_ios_xr"
    cnsp.EntityData.ParentYangName = "packet-counters"
    cnsp.EntityData.SegmentPath = "cnsp"
    cnsp.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-levels/interfaces-level/packet-counters/" + cnsp.EntityData.SegmentPath
    cnsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cnsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cnsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cnsp.EntityData.Children = types.NewOrderedMap()
    cnsp.EntityData.Children.Append("state", types.YChild{"State", &cnsp.State})
    cnsp.EntityData.Leafs = types.NewOrderedMap()

    cnsp.EntityData.YListKeys = []string {}

    return &(cnsp.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Cnsp_State
// Packet counters relating to CNSPs
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Cnsp_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The number of the specified type of PDU received on the interface. The type
    // is interface{} with range: 0..4294967295.
    Received interface{}

    // The number of the specified type of PDU received on the interface that have
    // been processed by the local system. The type is interface{} with range:
    // 0..4294967295.
    Processed interface{}

    // The number of the specified type of PDU that have been sent by the local
    // system on the interface. The type is interface{} with range: 0..4294967295.
    Sent interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_PacketCounters_Cnsp_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "cnsp"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-levels/interfaces-level/packet-counters/cnsp/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("received", types.YLeaf{"Received", state.Received})
    state.EntityData.Leafs.Append("processed", types.YLeaf{"Processed", state.Processed})
    state.EntityData.Leafs.Append("sent", types.YLeaf{"Sent", state.Sent})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_Adjacencies
// List of the local system's IS-IS
// adjacencies
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_Adjacencies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the local system's IS-IS adjacencies. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_Adjacencies_Adjacency.
    Adjacency []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_Adjacencies_Adjacency
}

func (adjacencies *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_Adjacencies) GetEntityData() *types.CommonEntityData {
    adjacencies.EntityData.YFilter = adjacencies.YFilter
    adjacencies.EntityData.YangName = "adjacencies"
    adjacencies.EntityData.BundleName = "cisco_ios_xr"
    adjacencies.EntityData.ParentYangName = "interfaces-level"
    adjacencies.EntityData.SegmentPath = "adjacencies"
    adjacencies.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-levels/interfaces-level/" + adjacencies.EntityData.SegmentPath
    adjacencies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencies.EntityData.Children = types.NewOrderedMap()
    adjacencies.EntityData.Children.Append("adjacency", types.YChild{"Adjacency", nil})
    for i := range adjacencies.Adjacency {
        adjacencies.EntityData.Children.Append(types.GetSegmentPath(adjacencies.Adjacency[i]), types.YChild{"Adjacency", adjacencies.Adjacency[i]})
    }
    adjacencies.EntityData.Leafs = types.NewOrderedMap()

    adjacencies.EntityData.YListKeys = []string {}

    return &(adjacencies.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_Adjacencies_Adjacency
// List of the local system's IS-IS
// adjacencies
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_Adjacencies_Adjacency struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the IS neighbor. The type is string.
    SystemId interface{}

    // Operational state relating to the IS-IS adjacency with the remote system.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_Adjacencies_Adjacency_State
}

func (adjacency *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_Adjacencies_Adjacency) GetEntityData() *types.CommonEntityData {
    adjacency.EntityData.YFilter = adjacency.YFilter
    adjacency.EntityData.YangName = "adjacency"
    adjacency.EntityData.BundleName = "cisco_ios_xr"
    adjacency.EntityData.ParentYangName = "adjacencies"
    adjacency.EntityData.SegmentPath = "adjacency" + types.AddKeyToken(adjacency.SystemId, "system-id")
    adjacency.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-levels/interfaces-level/adjacencies/" + adjacency.EntityData.SegmentPath
    adjacency.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacency.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacency.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacency.EntityData.Children = types.NewOrderedMap()
    adjacency.EntityData.Children.Append("state", types.YChild{"State", &adjacency.State})
    adjacency.EntityData.Leafs = types.NewOrderedMap()
    adjacency.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", adjacency.SystemId})

    adjacency.EntityData.YListKeys = []string {"SystemId"}

    return &(adjacency.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_Adjacencies_Adjacency_State
// Operational state relating to the IS-IS
// adjacency with the remote system
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_Adjacencies_Adjacency_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS neighbor system-id. The type is string.
    SystemId interface{}

    // ISIS Neighbor IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborIpv4Address interface{}

    // ISIS Neighbor IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborIpv6Address interface{}

    // ISIS neighbor SNPA. The type is string.
    NeighborSnpa interface{}

    // Local extended circuit ID. The type is interface{} with range:
    // 0..4294967295.
    LocalExtendedCircuitId interface{}

    // ISIS neighbor extended circuit ID. The type is interface{} with range:
    // 0..4294967295.
    NeighborExtendedCircuitId interface{}

    // Priority of the neighboring IS(LAN Hello only). The type is interface{}
    // with range: 0..255.
    Priority interface{}

    // DIS System ID(LAN hello only). The type is string.
    DisSystemId interface{}

    // Received ISIS circuit type (level-1, level-2, level-1-2). The type is
    // OpenconfigIsisTypesLevelTypeEnum.
    NeighborCircuitType interface{}

    // Formed ISIS adjacency type(level-1, level-2, level-1-2). The type is
    // OpenconfigIsisTypesLevelTypeEnum.
    AdjacencyType interface{}

    // P2P 3-way ISIS adjacency state(up, down, init, failed). The type is
    // OpenconfigIsisTypesIsisInterfaceAdjStateEnum.
    AdjacencyState interface{}

    // Holding time in seconds for adjacency. The type is interface{} with range:
    // 0..65535. Units are second.
    RemainingHoldTime interface{}

    // Adjacency up time. The type is interface{} with range: 0..4294967295.
    UpTime interface{}

    // When set to true, Graceful-restart signaling is supported. The type is
    // bool.
    RestartSupport interface{}

    // When set to true, adjacency is not advertised. The type is bool.
    RestartSuppress interface{}

    // When set to true, neighbor is being helped. The type is bool.
    RestartStatus interface{}

    // ISIS topology type support(ipv4-unicast, ipv6-unicast, ipv4-multicast,
    // ipv6-multicast). The type is slice of string.
    Topology []interface{}

    // List of ISIS area-address(es). The type is slice of string.
    AreaAddress []interface{}

    // Supported Protocol. The type is slice of
    // OpenconfigIsisAdjacencyStateNlpidEnum.
    Nlpid []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_Adjacencies_Adjacency_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "adjacency"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-levels/interfaces-level/adjacencies/adjacency/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", state.SystemId})
    state.EntityData.Leafs.Append("neighbor-ipv4-address", types.YLeaf{"NeighborIpv4Address", state.NeighborIpv4Address})
    state.EntityData.Leafs.Append("neighbor-ipv6-address", types.YLeaf{"NeighborIpv6Address", state.NeighborIpv6Address})
    state.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", state.NeighborSnpa})
    state.EntityData.Leafs.Append("local-extended-circuit-id", types.YLeaf{"LocalExtendedCircuitId", state.LocalExtendedCircuitId})
    state.EntityData.Leafs.Append("neighbor-extended-circuit-id", types.YLeaf{"NeighborExtendedCircuitId", state.NeighborExtendedCircuitId})
    state.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", state.Priority})
    state.EntityData.Leafs.Append("dis-system-id", types.YLeaf{"DisSystemId", state.DisSystemId})
    state.EntityData.Leafs.Append("neighbor-circuit-type", types.YLeaf{"NeighborCircuitType", state.NeighborCircuitType})
    state.EntityData.Leafs.Append("adjacency-type", types.YLeaf{"AdjacencyType", state.AdjacencyType})
    state.EntityData.Leafs.Append("adjacency-state", types.YLeaf{"AdjacencyState", state.AdjacencyState})
    state.EntityData.Leafs.Append("remaining-hold-time", types.YLeaf{"RemainingHoldTime", state.RemainingHoldTime})
    state.EntityData.Leafs.Append("up-time", types.YLeaf{"UpTime", state.UpTime})
    state.EntityData.Leafs.Append("restart-support", types.YLeaf{"RestartSupport", state.RestartSupport})
    state.EntityData.Leafs.Append("restart-suppress", types.YLeaf{"RestartSuppress", state.RestartSuppress})
    state.EntityData.Leafs.Append("restart-status", types.YLeaf{"RestartStatus", state.RestartStatus})
    state.EntityData.Leafs.Append("topology", types.YLeaf{"Topology", state.Topology})
    state.EntityData.Leafs.Append("area-address", types.YLeaf{"AreaAddress", state.AreaAddress})
    state.EntityData.Leafs.Append("nlpid", types.YLeaf{"Nlpid", state.Nlpid})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsTimers
// This container defines ISIS timers
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsTimers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS interface hello-timers state.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsTimers_State
}

func (levelsTimers *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsTimers) GetEntityData() *types.CommonEntityData {
    levelsTimers.EntityData.YFilter = levelsTimers.YFilter
    levelsTimers.EntityData.YangName = "levels-timers"
    levelsTimers.EntityData.BundleName = "cisco_ios_xr"
    levelsTimers.EntityData.ParentYangName = "interfaces-level"
    levelsTimers.EntityData.SegmentPath = "levels-timers"
    levelsTimers.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-levels/interfaces-level/" + levelsTimers.EntityData.SegmentPath
    levelsTimers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    levelsTimers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    levelsTimers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    levelsTimers.EntityData.Children = types.NewOrderedMap()
    levelsTimers.EntityData.Children.Append("state", types.YChild{"State", &levelsTimers.State})
    levelsTimers.EntityData.Leafs = types.NewOrderedMap()

    levelsTimers.EntityData.YListKeys = []string {}

    return &(levelsTimers.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsTimers_State
// This container defines ISIS interface
// hello-timers state
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsTimers_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS hello-interval value. The type is interface{} with range:
    // 0..4294967295.
    HelloInterval interface{}

    // ISIS hello-multiplier value. The type is interface{} with range: 0..255.
    HelloMultiplier interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsTimers_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "levels-timers"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-levels/interfaces-level/levels-timers/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", state.HelloInterval})
    state.EntityData.Leafs.Append("hello-multiplier", types.YLeaf{"HelloMultiplier", state.HelloMultiplier})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis
// Address-family/Subsequent
// Address-family list
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family/Subsequent Address-family list. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis_LevelsAfiSafi.
    LevelsAfiSafi []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis_LevelsAfiSafi
}

func (levelsAfiSafis *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis) GetEntityData() *types.CommonEntityData {
    levelsAfiSafis.EntityData.YFilter = levelsAfiSafis.YFilter
    levelsAfiSafis.EntityData.YangName = "levels-afi-safis"
    levelsAfiSafis.EntityData.BundleName = "cisco_ios_xr"
    levelsAfiSafis.EntityData.ParentYangName = "interfaces-level"
    levelsAfiSafis.EntityData.SegmentPath = "levels-afi-safis"
    levelsAfiSafis.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-levels/interfaces-level/" + levelsAfiSafis.EntityData.SegmentPath
    levelsAfiSafis.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    levelsAfiSafis.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    levelsAfiSafis.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    levelsAfiSafis.EntityData.Children = types.NewOrderedMap()
    levelsAfiSafis.EntityData.Children.Append("levels-afi-safi", types.YChild{"LevelsAfiSafi", nil})
    for i := range levelsAfiSafis.LevelsAfiSafi {
        types.SetYListKey(levelsAfiSafis.LevelsAfiSafi[i], i)
        levelsAfiSafis.EntityData.Children.Append(types.GetSegmentPath(levelsAfiSafis.LevelsAfiSafi[i]), types.YChild{"LevelsAfiSafi", levelsAfiSafis.LevelsAfiSafi[i]})
    }
    levelsAfiSafis.EntityData.Leafs = types.NewOrderedMap()

    levelsAfiSafis.EntityData.YListKeys = []string {}

    return &(levelsAfiSafis.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis_LevelsAfiSafi
// Address-family/Subsequent
// Address-family list
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis_LevelsAfiSafi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Reference to address-family type. The type is string.
    AfiName interface{}

    // Reference to subsequent address-family type. The type is string.
    SafiName interface{}

    // This container defines AFI-SAFI State information.
    AfiSafiState OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis_LevelsAfiSafi_AfiSafiState

    // Configuration and operatioanl state parameters relating to segment routing
    // for an interface within the IGP.
    AfiSafiSegmentRouting OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis_LevelsAfiSafi_AfiSafiSegmentRouting
}

func (levelsAfiSafi *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis_LevelsAfiSafi) GetEntityData() *types.CommonEntityData {
    levelsAfiSafi.EntityData.YFilter = levelsAfiSafi.YFilter
    levelsAfiSafi.EntityData.YangName = "levels-afi-safi"
    levelsAfiSafi.EntityData.BundleName = "cisco_ios_xr"
    levelsAfiSafi.EntityData.ParentYangName = "levels-afi-safis"
    levelsAfiSafi.EntityData.SegmentPath = "levels-afi-safi" + types.AddNoKeyToken(levelsAfiSafi)
    levelsAfiSafi.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-levels/interfaces-level/levels-afi-safis/" + levelsAfiSafi.EntityData.SegmentPath
    levelsAfiSafi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    levelsAfiSafi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    levelsAfiSafi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    levelsAfiSafi.EntityData.Children = types.NewOrderedMap()
    levelsAfiSafi.EntityData.Children.Append("afi-safi-state", types.YChild{"AfiSafiState", &levelsAfiSafi.AfiSafiState})
    levelsAfiSafi.EntityData.Children.Append("afi-safi-segment-routing", types.YChild{"AfiSafiSegmentRouting", &levelsAfiSafi.AfiSafiSegmentRouting})
    levelsAfiSafi.EntityData.Leafs = types.NewOrderedMap()
    levelsAfiSafi.EntityData.Leafs.Append("afi-name", types.YLeaf{"AfiName", levelsAfiSafi.AfiName})
    levelsAfiSafi.EntityData.Leafs.Append("safi-name", types.YLeaf{"SafiName", levelsAfiSafi.SafiName})

    levelsAfiSafi.EntityData.YListKeys = []string {}

    return &(levelsAfiSafi.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis_LevelsAfiSafi_AfiSafiState
// This container defines AFI-SAFI State
// information
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis_LevelsAfiSafi_AfiSafiState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family type. The type is string.
    AfiName interface{}

    // Subsequent address-family type. The type is string.
    SafiName interface{}

    // ISIS metric value(default=10). The type is interface{} with range:
    // 0..4294967295.
    Metric interface{}
}

func (afiSafiState *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis_LevelsAfiSafi_AfiSafiState) GetEntityData() *types.CommonEntityData {
    afiSafiState.EntityData.YFilter = afiSafiState.YFilter
    afiSafiState.EntityData.YangName = "afi-safi-state"
    afiSafiState.EntityData.BundleName = "cisco_ios_xr"
    afiSafiState.EntityData.ParentYangName = "levels-afi-safi"
    afiSafiState.EntityData.SegmentPath = "afi-safi-state"
    afiSafiState.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-levels/interfaces-level/levels-afi-safis/levels-afi-safi/" + afiSafiState.EntityData.SegmentPath
    afiSafiState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    afiSafiState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    afiSafiState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    afiSafiState.EntityData.Children = types.NewOrderedMap()
    afiSafiState.EntityData.Leafs = types.NewOrderedMap()
    afiSafiState.EntityData.Leafs.Append("afi-name", types.YLeaf{"AfiName", afiSafiState.AfiName})
    afiSafiState.EntityData.Leafs.Append("safi-name", types.YLeaf{"SafiName", afiSafiState.SafiName})
    afiSafiState.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", afiSafiState.Metric})

    afiSafiState.EntityData.YListKeys = []string {}

    return &(afiSafiState.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis_LevelsAfiSafi_AfiSafiSegmentRouting
// Configuration and operatioanl state
// parameters relating to segment
// routing for an interface within the
// IGP
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis_LevelsAfiSafi_AfiSafiSegmentRouting struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An IGP prefix that should have a segment routing IGP-Prefix SID allocated
    // to it.
    SegmentRoutingPrefixSids OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis_LevelsAfiSafi_AfiSafiSegmentRouting_SegmentRoutingPrefixSids
}

func (afiSafiSegmentRouting *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis_LevelsAfiSafi_AfiSafiSegmentRouting) GetEntityData() *types.CommonEntityData {
    afiSafiSegmentRouting.EntityData.YFilter = afiSafiSegmentRouting.YFilter
    afiSafiSegmentRouting.EntityData.YangName = "afi-safi-segment-routing"
    afiSafiSegmentRouting.EntityData.BundleName = "cisco_ios_xr"
    afiSafiSegmentRouting.EntityData.ParentYangName = "levels-afi-safi"
    afiSafiSegmentRouting.EntityData.SegmentPath = "afi-safi-segment-routing"
    afiSafiSegmentRouting.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-levels/interfaces-level/levels-afi-safis/levels-afi-safi/" + afiSafiSegmentRouting.EntityData.SegmentPath
    afiSafiSegmentRouting.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    afiSafiSegmentRouting.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    afiSafiSegmentRouting.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    afiSafiSegmentRouting.EntityData.Children = types.NewOrderedMap()
    afiSafiSegmentRouting.EntityData.Children.Append("segment-routing-prefix-sids", types.YChild{"SegmentRoutingPrefixSids", &afiSafiSegmentRouting.SegmentRoutingPrefixSids})
    afiSafiSegmentRouting.EntityData.Leafs = types.NewOrderedMap()

    afiSafiSegmentRouting.EntityData.YListKeys = []string {}

    return &(afiSafiSegmentRouting.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis_LevelsAfiSafi_AfiSafiSegmentRouting_SegmentRoutingPrefixSids
// An IGP prefix that should have a
// segment routing IGP-Prefix SID
// allocated to it
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis_LevelsAfiSafi_AfiSafiSegmentRouting_SegmentRoutingPrefixSids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An IGP prefix that should have a segment routing IGP-Prefix SID allocated
    // to it. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis_LevelsAfiSafi_AfiSafiSegmentRouting_SegmentRoutingPrefixSids_SegmentRoutingPrefixSid.
    SegmentRoutingPrefixSid []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis_LevelsAfiSafi_AfiSafiSegmentRouting_SegmentRoutingPrefixSids_SegmentRoutingPrefixSid
}

func (segmentRoutingPrefixSids *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis_LevelsAfiSafi_AfiSafiSegmentRouting_SegmentRoutingPrefixSids) GetEntityData() *types.CommonEntityData {
    segmentRoutingPrefixSids.EntityData.YFilter = segmentRoutingPrefixSids.YFilter
    segmentRoutingPrefixSids.EntityData.YangName = "segment-routing-prefix-sids"
    segmentRoutingPrefixSids.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingPrefixSids.EntityData.ParentYangName = "afi-safi-segment-routing"
    segmentRoutingPrefixSids.EntityData.SegmentPath = "segment-routing-prefix-sids"
    segmentRoutingPrefixSids.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-levels/interfaces-level/levels-afi-safis/levels-afi-safi/afi-safi-segment-routing/" + segmentRoutingPrefixSids.EntityData.SegmentPath
    segmentRoutingPrefixSids.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingPrefixSids.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingPrefixSids.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingPrefixSids.EntityData.Children = types.NewOrderedMap()
    segmentRoutingPrefixSids.EntityData.Children.Append("segment-routing-prefix-sid", types.YChild{"SegmentRoutingPrefixSid", nil})
    for i := range segmentRoutingPrefixSids.SegmentRoutingPrefixSid {
        segmentRoutingPrefixSids.EntityData.Children.Append(types.GetSegmentPath(segmentRoutingPrefixSids.SegmentRoutingPrefixSid[i]), types.YChild{"SegmentRoutingPrefixSid", segmentRoutingPrefixSids.SegmentRoutingPrefixSid[i]})
    }
    segmentRoutingPrefixSids.EntityData.Leafs = types.NewOrderedMap()

    segmentRoutingPrefixSids.EntityData.YListKeys = []string {}

    return &(segmentRoutingPrefixSids.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis_LevelsAfiSafi_AfiSafiSegmentRouting_SegmentRoutingPrefixSids_SegmentRoutingPrefixSid
// An IGP prefix that should have a
// segment routing IGP-Prefix SID
// allocated to it
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis_LevelsAfiSafi_AfiSafiSegmentRouting_SegmentRoutingPrefixSids_SegmentRoutingPrefixSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the prefix for which the IGP-Prefix
    // SID is to be advertised. The type is string.
    Prefix interface{}

    // Operational state parameters for the IGP-Prefix SID.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis_LevelsAfiSafi_AfiSafiSegmentRouting_SegmentRoutingPrefixSids_SegmentRoutingPrefixSid_State
}

func (segmentRoutingPrefixSid *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis_LevelsAfiSafi_AfiSafiSegmentRouting_SegmentRoutingPrefixSids_SegmentRoutingPrefixSid) GetEntityData() *types.CommonEntityData {
    segmentRoutingPrefixSid.EntityData.YFilter = segmentRoutingPrefixSid.YFilter
    segmentRoutingPrefixSid.EntityData.YangName = "segment-routing-prefix-sid"
    segmentRoutingPrefixSid.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingPrefixSid.EntityData.ParentYangName = "segment-routing-prefix-sids"
    segmentRoutingPrefixSid.EntityData.SegmentPath = "segment-routing-prefix-sid" + types.AddKeyToken(segmentRoutingPrefixSid.Prefix, "prefix")
    segmentRoutingPrefixSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-levels/interfaces-level/levels-afi-safis/levels-afi-safi/afi-safi-segment-routing/segment-routing-prefix-sids/" + segmentRoutingPrefixSid.EntityData.SegmentPath
    segmentRoutingPrefixSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingPrefixSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingPrefixSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingPrefixSid.EntityData.Children = types.NewOrderedMap()
    segmentRoutingPrefixSid.EntityData.Children.Append("state", types.YChild{"State", &segmentRoutingPrefixSid.State})
    segmentRoutingPrefixSid.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingPrefixSid.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", segmentRoutingPrefixSid.Prefix})

    segmentRoutingPrefixSid.EntityData.YListKeys = []string {"Prefix"}

    return &(segmentRoutingPrefixSid.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis_LevelsAfiSafi_AfiSafiSegmentRouting_SegmentRoutingPrefixSids_SegmentRoutingPrefixSid_State
// Operational state parameters for the IGP-Prefix
// SID
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis_LevelsAfiSafi_AfiSafiSegmentRouting_SegmentRoutingPrefixSids_SegmentRoutingPrefixSid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The IP prefix for which the IGP prefix SID should be advertised. The type
    // is string.
    Prefix interface{}

    // The Segment Identifier to be used when advertising the IGP Prefix SID. The
    // type is string.
    SidId interface{}

    // The options associated with the IGP prefix SID for MPLS. The type is
    // OpenconfigSegmentRoutingLabelOptionsEnum.
    LabelOptions interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesLevels_InterfacesLevel_LevelsAfiSafis_LevelsAfiSafi_AfiSafiSegmentRouting_SegmentRoutingPrefixSids_SegmentRoutingPrefixSid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "segment-routing-prefix-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-levels/interfaces-level/levels-afi-safis/levels-afi-safi/afi-safi-segment-routing/segment-routing-prefix-sids/segment-routing-prefix-sid/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", state.Prefix})
    state.EntityData.Leafs.Append("sid-id", types.YLeaf{"SidId", state.SidId})
    state.EntityData.Leafs.Append("label-options", types.YLeaf{"LabelOptions", state.LabelOptions})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_CircuitCounters
// This container defines state information
// for ISIS circuit counters
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_CircuitCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The container defines a list of counters for IS circuit.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_CircuitCounters_State
}

func (circuitCounters *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_CircuitCounters) GetEntityData() *types.CommonEntityData {
    circuitCounters.EntityData.YFilter = circuitCounters.YFilter
    circuitCounters.EntityData.YangName = "circuit-counters"
    circuitCounters.EntityData.BundleName = "cisco_ios_xr"
    circuitCounters.EntityData.ParentYangName = "isis-interface"
    circuitCounters.EntityData.SegmentPath = "circuit-counters"
    circuitCounters.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/" + circuitCounters.EntityData.SegmentPath
    circuitCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    circuitCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    circuitCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    circuitCounters.EntityData.Children = types.NewOrderedMap()
    circuitCounters.EntityData.Children.Append("state", types.YChild{"State", &circuitCounters.State})
    circuitCounters.EntityData.Leafs = types.NewOrderedMap()

    circuitCounters.EntityData.YListKeys = []string {}

    return &(circuitCounters.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_CircuitCounters_State
// The container defines a list of counters for IS
// circuit
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_CircuitCounters_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of times an adjacency state change has occurred on this circuit. The
    // type is interface{} with range: 0..4294967295.
    AdjChanges interface{}

    // Number of times an adjacency has been rejected on this circuit. The type is
    // interface{} with range: 0..4294967295.
    RejectedAdj interface{}

    // Number of times an IS-IS control PDU with an ID field length different from
    // that for this system has been received. The type is interface{} with range:
    // 0..4294967295.
    IdFieldLenMismatches interface{}

    // Number of times an IS-IS control PDU with a max area address field
    // different from that for this system has been received. The type is
    // interface{} with range: 0..4294967295.
    MaxAreaAddressMismatches interface{}

    // Number of times an IS-IS control PDU with the correct auth type has failed
    // to pass authentication validation. The type is interface{} with range:
    // 0..4294967295.
    AuthFails interface{}

    // Number of times the Designated IS has changed on this circuit at this
    // level. The type is interface{} with range: 0..4294967295.
    LanDisChanges interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_CircuitCounters_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "circuit-counters"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/circuit-counters/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("adj-changes", types.YLeaf{"AdjChanges", state.AdjChanges})
    state.EntityData.Leafs.Append("rejected-adj", types.YLeaf{"RejectedAdj", state.RejectedAdj})
    state.EntityData.Leafs.Append("id-field-len-mismatches", types.YLeaf{"IdFieldLenMismatches", state.IdFieldLenMismatches})
    state.EntityData.Leafs.Append("max-area-address-mismatches", types.YLeaf{"MaxAreaAddressMismatches", state.MaxAreaAddressMismatches})
    state.EntityData.Leafs.Append("auth-fails", types.YLeaf{"AuthFails", state.AuthFails})
    state.EntityData.Leafs.Append("lan-dis-changes", types.YLeaf{"LanDisChanges", state.LanDisChanges})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesAuthentication
// This container defines ISIS
// authentication
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesAuthentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS authentication key.
    Key OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesAuthentication_Key
}

func (interfacesAuthentication *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesAuthentication) GetEntityData() *types.CommonEntityData {
    interfacesAuthentication.EntityData.YFilter = interfacesAuthentication.YFilter
    interfacesAuthentication.EntityData.YangName = "interfaces-authentication"
    interfacesAuthentication.EntityData.BundleName = "cisco_ios_xr"
    interfacesAuthentication.EntityData.ParentYangName = "isis-interface"
    interfacesAuthentication.EntityData.SegmentPath = "interfaces-authentication"
    interfacesAuthentication.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/" + interfacesAuthentication.EntityData.SegmentPath
    interfacesAuthentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfacesAuthentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfacesAuthentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfacesAuthentication.EntityData.Children = types.NewOrderedMap()
    interfacesAuthentication.EntityData.Children.Append("key", types.YChild{"Key", &interfacesAuthentication.Key})
    interfacesAuthentication.EntityData.Leafs = types.NewOrderedMap()

    interfacesAuthentication.EntityData.YListKeys = []string {}

    return &(interfacesAuthentication.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesAuthentication_Key
// This container defines ISIS authentication key
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesAuthentication_Key struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS authentication key state.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesAuthentication_Key_State
}

func (key *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesAuthentication_Key) GetEntityData() *types.CommonEntityData {
    key.EntityData.YFilter = key.YFilter
    key.EntityData.YangName = "key"
    key.EntityData.BundleName = "cisco_ios_xr"
    key.EntityData.ParentYangName = "interfaces-authentication"
    key.EntityData.SegmentPath = "key"
    key.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-authentication/" + key.EntityData.SegmentPath
    key.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    key.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    key.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    key.EntityData.Children = types.NewOrderedMap()
    key.EntityData.Children.Append("state", types.YChild{"State", &key.State})
    key.EntityData.Leafs = types.NewOrderedMap()

    key.EntityData.YListKeys = []string {}

    return &(key.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesAuthentication_Key_State
// This container defines ISIS authentication key
// state
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesAuthentication_Key_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key string. The type is string.
    AuthPassword interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesAuthentication_Key_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "key"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-authentication/key/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("auth-password", types.YLeaf{"AuthPassword", state.AuthPassword})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesTimers
// This container describes ISIS interface
// timers configuration
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesTimers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines state information for ISIS interface timers.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesTimers_State
}

func (interfacesTimers *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesTimers) GetEntityData() *types.CommonEntityData {
    interfacesTimers.EntityData.YFilter = interfacesTimers.YFilter
    interfacesTimers.EntityData.YangName = "interfaces-timers"
    interfacesTimers.EntityData.BundleName = "cisco_ios_xr"
    interfacesTimers.EntityData.ParentYangName = "isis-interface"
    interfacesTimers.EntityData.SegmentPath = "interfaces-timers"
    interfacesTimers.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/" + interfacesTimers.EntityData.SegmentPath
    interfacesTimers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfacesTimers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfacesTimers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfacesTimers.EntityData.Children = types.NewOrderedMap()
    interfacesTimers.EntityData.Children.Append("state", types.YChild{"State", &interfacesTimers.State})
    interfacesTimers.EntityData.Leafs = types.NewOrderedMap()

    interfacesTimers.EntityData.YListKeys = []string {}

    return &(interfacesTimers.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesTimers_State
// This container defines state information for
// ISIS interface timers
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesTimers_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The interval, specified in seconds, at which periodic CSNP packets should
    // be transmitted by the local IS. The type is interface{} with range:
    // 0..65535. Units are second.
    CsnpInterval interface{}

    // The interval interval in milliseconds between the detection of topology
    // change and when the SPF algorithm runs. The type is interface{} with range:
    // 0..18446744073709551615. Units are millisecond.
    LspPacingInterval interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_IsisInterfaces_IsisInterface_InterfacesTimers_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "interfaces-timers"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/isis-interfaces/isis-interface/interfaces-timers/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("csnp-interval", types.YLeaf{"CsnpInterval", state.CsnpInterval})
    state.EntityData.Leafs.Append("lsp-pacing-interval", types.YLeaf{"LspPacingInterval", state.LspPacingInterval})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global
// This container defines global ISIS
// configuration and state information
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration and operational state relating to segment routing.
    SegmentRouting OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting

    // This container defines ISIS LSP Operational Bits.
    LspBit OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit

    // This container defines ISIS Non-Stop Routing.
    Nsr OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr

    // This container defines ISIS Graceful Restart.
    GracefulRestart OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart

    // This container defines state for ISIS global router.
    GlobalState OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GlobalState

    // Policies to propagate prefixes between IS-IS levels.
    InterLevelPropagationPolicies OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies

    // Address-family/Subsequent Address-family list.
    AfiSafis OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafis

    // This container defines ISIS timers.
    Timers OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers

    // This container defines ISIS transport.
    Transport OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport
}

func (global *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global) GetEntityData() *types.CommonEntityData {
    global.EntityData.YFilter = global.YFilter
    global.EntityData.YangName = "global"
    global.EntityData.BundleName = "cisco_ios_xr"
    global.EntityData.ParentYangName = "isis"
    global.EntityData.SegmentPath = "global"
    global.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/" + global.EntityData.SegmentPath
    global.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    global.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    global.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    global.EntityData.Children = types.NewOrderedMap()
    global.EntityData.Children.Append("segment-routing", types.YChild{"SegmentRouting", &global.SegmentRouting})
    global.EntityData.Children.Append("lsp-bit", types.YChild{"LspBit", &global.LspBit})
    global.EntityData.Children.Append("nsr", types.YChild{"Nsr", &global.Nsr})
    global.EntityData.Children.Append("graceful-restart", types.YChild{"GracefulRestart", &global.GracefulRestart})
    global.EntityData.Children.Append("global-state", types.YChild{"GlobalState", &global.GlobalState})
    global.EntityData.Children.Append("inter-level-propagation-policies", types.YChild{"InterLevelPropagationPolicies", &global.InterLevelPropagationPolicies})
    global.EntityData.Children.Append("afi-safis", types.YChild{"AfiSafis", &global.AfiSafis})
    global.EntityData.Children.Append("timers", types.YChild{"Timers", &global.Timers})
    global.EntityData.Children.Append("transport", types.YChild{"Transport", &global.Transport})
    global.EntityData.Leafs = types.NewOrderedMap()

    global.EntityData.YListKeys = []string {}

    return &(global.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting
// Configuration and operational state
// relating to segment routing
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational state parameters relating to segment routing for the IGP
    // instance.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting_State
}

func (segmentRouting *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting) GetEntityData() *types.CommonEntityData {
    segmentRouting.EntityData.YFilter = segmentRouting.YFilter
    segmentRouting.EntityData.YangName = "segment-routing"
    segmentRouting.EntityData.BundleName = "cisco_ios_xr"
    segmentRouting.EntityData.ParentYangName = "global"
    segmentRouting.EntityData.SegmentPath = "segment-routing"
    segmentRouting.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/" + segmentRouting.EntityData.SegmentPath
    segmentRouting.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouting.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouting.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouting.EntityData.Children = types.NewOrderedMap()
    segmentRouting.EntityData.Children.Append("state", types.YChild{"State", &segmentRouting.State})
    segmentRouting.EntityData.Leafs = types.NewOrderedMap()

    segmentRouting.EntityData.YListKeys = []string {}

    return &(segmentRouting.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting_State
// Operational state parameters relating to segment
// routing for the IGP instance
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When this leaf is set to true, the segment routing extensions are utilised
    // within the IGP. The type is bool.
    Enabled interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_SegmentRouting_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "segment-routing"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit
// This container defines ISIS LSP
// Operational Bits
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines Overload Bit configuration.
    OverloadBit OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit

    // This container defines Attached Bit.
    AttachedBit OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit
}

func (lspBit *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit) GetEntityData() *types.CommonEntityData {
    lspBit.EntityData.YFilter = lspBit.YFilter
    lspBit.EntityData.YangName = "lsp-bit"
    lspBit.EntityData.BundleName = "cisco_ios_xr"
    lspBit.EntityData.ParentYangName = "global"
    lspBit.EntityData.SegmentPath = "lsp-bit"
    lspBit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/" + lspBit.EntityData.SegmentPath
    lspBit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lspBit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lspBit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lspBit.EntityData.Children = types.NewOrderedMap()
    lspBit.EntityData.Children.Append("overload-bit", types.YChild{"OverloadBit", &lspBit.OverloadBit})
    lspBit.EntityData.Children.Append("attached-bit", types.YChild{"AttachedBit", &lspBit.AttachedBit})
    lspBit.EntityData.Leafs = types.NewOrderedMap()

    lspBit.EntityData.YListKeys = []string {}

    return &(lspBit.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit
// This container defines Overload Bit
// configuration
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines state for ISIS Overload Bit.
    OverloadBitState OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_OverloadBitState

    // This list describes ISIS Overload reset trigger reasons.
    ResetTriggers OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers
}

func (overloadBit *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit) GetEntityData() *types.CommonEntityData {
    overloadBit.EntityData.YFilter = overloadBit.YFilter
    overloadBit.EntityData.YangName = "overload-bit"
    overloadBit.EntityData.BundleName = "cisco_ios_xr"
    overloadBit.EntityData.ParentYangName = "lsp-bit"
    overloadBit.EntityData.SegmentPath = "overload-bit"
    overloadBit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/" + overloadBit.EntityData.SegmentPath
    overloadBit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    overloadBit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    overloadBit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    overloadBit.EntityData.Children = types.NewOrderedMap()
    overloadBit.EntityData.Children.Append("overload-bit-state", types.YChild{"OverloadBitState", &overloadBit.OverloadBitState})
    overloadBit.EntityData.Children.Append("reset-triggers", types.YChild{"ResetTriggers", &overloadBit.ResetTriggers})
    overloadBit.EntityData.Leafs = types.NewOrderedMap()

    overloadBit.EntityData.YListKeys = []string {}

    return &(overloadBit.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_OverloadBitState
// This container defines state for ISIS
// Overload Bit
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_OverloadBitState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, IS-IS overload bit is set. The type is bool.
    SetBit interface{}

    // When set to true, the IS-IS overload bit is set on system boot. The type is
    // bool.
    SetBitOnBoot interface{}

    // When set to true, the local IS advertises links with the highest available
    // metric regardless of their configured metric. The type is bool.
    AdvertiseHighMetric interface{}
}

func (overloadBitState *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_OverloadBitState) GetEntityData() *types.CommonEntityData {
    overloadBitState.EntityData.YFilter = overloadBitState.YFilter
    overloadBitState.EntityData.YangName = "overload-bit-state"
    overloadBitState.EntityData.BundleName = "cisco_ios_xr"
    overloadBitState.EntityData.ParentYangName = "overload-bit"
    overloadBitState.EntityData.SegmentPath = "overload-bit-state"
    overloadBitState.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/" + overloadBitState.EntityData.SegmentPath
    overloadBitState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    overloadBitState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    overloadBitState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    overloadBitState.EntityData.Children = types.NewOrderedMap()
    overloadBitState.EntityData.Leafs = types.NewOrderedMap()
    overloadBitState.EntityData.Leafs.Append("set-bit", types.YLeaf{"SetBit", overloadBitState.SetBit})
    overloadBitState.EntityData.Leafs.Append("set-bit-on-boot", types.YLeaf{"SetBitOnBoot", overloadBitState.SetBitOnBoot})
    overloadBitState.EntityData.Leafs.Append("advertise-high-metric", types.YLeaf{"AdvertiseHighMetric", overloadBitState.AdvertiseHighMetric})

    overloadBitState.EntityData.YListKeys = []string {}

    return &(overloadBitState.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers
// This list describes ISIS Overload reset
// trigger reasons
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list describes ISIS Overload reset trigger reasons. The type is slice
    // of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger.
    ResetTrigger []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger
}

func (resetTriggers *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers) GetEntityData() *types.CommonEntityData {
    resetTriggers.EntityData.YFilter = resetTriggers.YFilter
    resetTriggers.EntityData.YangName = "reset-triggers"
    resetTriggers.EntityData.BundleName = "cisco_ios_xr"
    resetTriggers.EntityData.ParentYangName = "overload-bit"
    resetTriggers.EntityData.SegmentPath = "reset-triggers"
    resetTriggers.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/" + resetTriggers.EntityData.SegmentPath
    resetTriggers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    resetTriggers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    resetTriggers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    resetTriggers.EntityData.Children = types.NewOrderedMap()
    resetTriggers.EntityData.Children.Append("reset-trigger", types.YChild{"ResetTrigger", nil})
    for i := range resetTriggers.ResetTrigger {
        resetTriggers.EntityData.Children.Append(types.GetSegmentPath(resetTriggers.ResetTrigger[i]), types.YChild{"ResetTrigger", resetTriggers.ResetTrigger[i]})
    }
    resetTriggers.EntityData.Leafs = types.NewOrderedMap()

    resetTriggers.EntityData.YListKeys = []string {}

    return &(resetTriggers.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger
// This list describes ISIS Overload reset
// trigger reasons
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the reset trigger reason. The type is
    // string.
    ResetTrigger interface{}

    // This container defines state for ISIS Overload Bit reset triggers.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger_State
}

func (resetTrigger *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger) GetEntityData() *types.CommonEntityData {
    resetTrigger.EntityData.YFilter = resetTrigger.YFilter
    resetTrigger.EntityData.YangName = "reset-trigger"
    resetTrigger.EntityData.BundleName = "cisco_ios_xr"
    resetTrigger.EntityData.ParentYangName = "reset-triggers"
    resetTrigger.EntityData.SegmentPath = "reset-trigger" + types.AddKeyToken(resetTrigger.ResetTrigger, "reset-trigger")
    resetTrigger.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/" + resetTrigger.EntityData.SegmentPath
    resetTrigger.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    resetTrigger.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    resetTrigger.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    resetTrigger.EntityData.Children = types.NewOrderedMap()
    resetTrigger.EntityData.Children.Append("state", types.YChild{"State", &resetTrigger.State})
    resetTrigger.EntityData.Leafs = types.NewOrderedMap()
    resetTrigger.EntityData.Leafs.Append("reset-trigger", types.YLeaf{"ResetTrigger", resetTrigger.ResetTrigger})

    resetTrigger.EntityData.YListKeys = []string {"ResetTrigger"}

    return &(resetTrigger.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger_State
// This container defines state for ISIS Overload
// Bit reset triggers
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // In the case that the system sets the overload bit on start, the system
    // should reset the bit (i. The type is string.
    ResetTrigger interface{}

    // If a reset trigger is specified, the system should delay resetting the
    // overload bit for the specified number of seconds after the trigger occurs.
    // The type is interface{} with range: 0..65535. Units are second.
    Delay interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggers_ResetTrigger_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "reset-trigger"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("reset-trigger", types.YLeaf{"ResetTrigger", state.ResetTrigger})
    state.EntityData.Leafs.Append("delay", types.YLeaf{"Delay", state.Delay})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit
// This container defines Attached Bit
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines state for Link State PDU Bit.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit_State
}

func (attachedBit *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit) GetEntityData() *types.CommonEntityData {
    attachedBit.EntityData.YFilter = attachedBit.YFilter
    attachedBit.EntityData.YangName = "attached-bit"
    attachedBit.EntityData.BundleName = "cisco_ios_xr"
    attachedBit.EntityData.ParentYangName = "lsp-bit"
    attachedBit.EntityData.SegmentPath = "attached-bit"
    attachedBit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/" + attachedBit.EntityData.SegmentPath
    attachedBit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attachedBit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attachedBit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attachedBit.EntityData.Children = types.NewOrderedMap()
    attachedBit.EntityData.Children.Append("state", types.YChild{"State", &attachedBit.State})
    attachedBit.EntityData.Leafs = types.NewOrderedMap()

    attachedBit.EntityData.YListKeys = []string {}

    return &(attachedBit.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit_State
// This container defines state for Link State PDU
// Bit
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, if the attached bit is set on an incoming Level 1 IS-IS,
    // the local system ignores it. The type is bool.
    IgnoreBit interface{}

    // When set to true, if the local IS acts as a L1L2 router, then the attached
    // bit is not advertised in locally generated PDUs. The type is bool.
    SuppressBit interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_LspBit_AttachedBit_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "attached-bit"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/attached-bit/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ignore-bit", types.YLeaf{"IgnoreBit", state.IgnoreBit})
    state.EntityData.Leafs.Append("suppress-bit", types.YLeaf{"SuppressBit", state.SuppressBit})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr
// This container defines ISIS Non-Stop
// Routing
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines state for Non-Stop-Routing.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr_State
}

func (nsr *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr) GetEntityData() *types.CommonEntityData {
    nsr.EntityData.YFilter = nsr.YFilter
    nsr.EntityData.YangName = "nsr"
    nsr.EntityData.BundleName = "cisco_ios_xr"
    nsr.EntityData.ParentYangName = "global"
    nsr.EntityData.SegmentPath = "nsr"
    nsr.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/" + nsr.EntityData.SegmentPath
    nsr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsr.EntityData.Children = types.NewOrderedMap()
    nsr.EntityData.Children.Append("state", types.YChild{"State", &nsr.State})
    nsr.EntityData.Leafs = types.NewOrderedMap()

    nsr.EntityData.YListKeys = []string {}

    return &(nsr.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr_State
// This container defines state for
// Non-Stop-Routing
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool.
    Enabled interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Nsr_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "nsr"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/nsr/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart
// This container defines ISIS Graceful
// Restart
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines state information for ISIS graceful-restart.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart_State
}

func (gracefulRestart *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart) GetEntityData() *types.CommonEntityData {
    gracefulRestart.EntityData.YFilter = gracefulRestart.YFilter
    gracefulRestart.EntityData.YangName = "graceful-restart"
    gracefulRestart.EntityData.BundleName = "cisco_ios_xr"
    gracefulRestart.EntityData.ParentYangName = "global"
    gracefulRestart.EntityData.SegmentPath = "graceful-restart"
    gracefulRestart.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/" + gracefulRestart.EntityData.SegmentPath
    gracefulRestart.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulRestart.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulRestart.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulRestart.EntityData.Children = types.NewOrderedMap()
    gracefulRestart.EntityData.Children.Append("state", types.YChild{"State", &gracefulRestart.State})
    gracefulRestart.EntityData.Leafs = types.NewOrderedMap()

    gracefulRestart.EntityData.YListKeys = []string {}

    return &(gracefulRestart.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart_State
// This container defines state information for
// ISIS graceful-restart
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool.
    Enabled interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GracefulRestart_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "graceful-restart"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GlobalState
// This container defines state for ISIS
// global router
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GlobalState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, reject all ISIS protocol PDUs that either have a mismatch
    // in authentication-type or authentication-key. The type is bool.
    AuthenticationCheck interface{}

    // ISIS Instance. The type is string.
    Instance interface{}

    // ISIS level capability(level-1, level-2 ,vlevel-1-2). The type is
    // OpenconfigIsisTypesLevelTypeEnum.
    LevelCapability interface{}

    // ISIS max-paths count. The type is interface{} with range: 0..255.
    MaxEcmpPaths interface{}

    // ISIS Instance Identifier TLV. The type is bool.
    IidTlv interface{}

    // When set to true, IS will always flood the LSP that triggered an SPF before
    // the router actually runs the SPF computation. The type is bool.
    FastFlooding interface{}

    // ISIS network entity title (NET). The type is slice of string.
    Net []interface{}
}

func (globalState *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_GlobalState) GetEntityData() *types.CommonEntityData {
    globalState.EntityData.YFilter = globalState.YFilter
    globalState.EntityData.YangName = "global-state"
    globalState.EntityData.BundleName = "cisco_ios_xr"
    globalState.EntityData.ParentYangName = "global"
    globalState.EntityData.SegmentPath = "global-state"
    globalState.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/" + globalState.EntityData.SegmentPath
    globalState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalState.EntityData.Children = types.NewOrderedMap()
    globalState.EntityData.Leafs = types.NewOrderedMap()
    globalState.EntityData.Leafs.Append("authentication-check", types.YLeaf{"AuthenticationCheck", globalState.AuthenticationCheck})
    globalState.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", globalState.Instance})
    globalState.EntityData.Leafs.Append("level-capability", types.YLeaf{"LevelCapability", globalState.LevelCapability})
    globalState.EntityData.Leafs.Append("max-ecmp-paths", types.YLeaf{"MaxEcmpPaths", globalState.MaxEcmpPaths})
    globalState.EntityData.Leafs.Append("iid-tlv", types.YLeaf{"IidTlv", globalState.IidTlv})
    globalState.EntityData.Leafs.Append("fast-flooding", types.YLeaf{"FastFlooding", globalState.FastFlooding})
    globalState.EntityData.Leafs.Append("net", types.YLeaf{"Net", globalState.Net})

    globalState.EntityData.YListKeys = []string {}

    return &(globalState.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies
// Policies to propagate prefixes between
// IS-IS levels
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Policies relating to prefixes to be propagated from Level 1 to Level 2.
    Level1ToLevel2 OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2

    // Policies relating to prefixes to be propagated from Level2 to Level 1.
    Level2ToLevel1 OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1
}

func (interLevelPropagationPolicies *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies) GetEntityData() *types.CommonEntityData {
    interLevelPropagationPolicies.EntityData.YFilter = interLevelPropagationPolicies.YFilter
    interLevelPropagationPolicies.EntityData.YangName = "inter-level-propagation-policies"
    interLevelPropagationPolicies.EntityData.BundleName = "cisco_ios_xr"
    interLevelPropagationPolicies.EntityData.ParentYangName = "global"
    interLevelPropagationPolicies.EntityData.SegmentPath = "inter-level-propagation-policies"
    interLevelPropagationPolicies.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/" + interLevelPropagationPolicies.EntityData.SegmentPath
    interLevelPropagationPolicies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interLevelPropagationPolicies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interLevelPropagationPolicies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interLevelPropagationPolicies.EntityData.Children = types.NewOrderedMap()
    interLevelPropagationPolicies.EntityData.Children.Append("level1-to-level2", types.YChild{"Level1ToLevel2", &interLevelPropagationPolicies.Level1ToLevel2})
    interLevelPropagationPolicies.EntityData.Children.Append("level2-to-level1", types.YChild{"Level2ToLevel1", &interLevelPropagationPolicies.Level2ToLevel1})
    interLevelPropagationPolicies.EntityData.Leafs = types.NewOrderedMap()

    interLevelPropagationPolicies.EntityData.YListKeys = []string {}

    return &(interLevelPropagationPolicies.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2
// Policies relating to prefixes to be propagated
// from Level 1 to Level 2
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational state parameters relating to the propagation of prefixes from
    // IS-IS Level 1 to Level 2.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_State
}

func (level1ToLevel2 *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2) GetEntityData() *types.CommonEntityData {
    level1ToLevel2.EntityData.YFilter = level1ToLevel2.YFilter
    level1ToLevel2.EntityData.YangName = "level1-to-level2"
    level1ToLevel2.EntityData.BundleName = "cisco_ios_xr"
    level1ToLevel2.EntityData.ParentYangName = "inter-level-propagation-policies"
    level1ToLevel2.EntityData.SegmentPath = "level1-to-level2"
    level1ToLevel2.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/" + level1ToLevel2.EntityData.SegmentPath
    level1ToLevel2.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    level1ToLevel2.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    level1ToLevel2.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    level1ToLevel2.EntityData.Children = types.NewOrderedMap()
    level1ToLevel2.EntityData.Children.Append("state", types.YChild{"State", &level1ToLevel2.State})
    level1ToLevel2.EntityData.Leafs = types.NewOrderedMap()

    level1ToLevel2.EntityData.YListKeys = []string {}

    return &(level1ToLevel2.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_State
// Operational state parameters relating to the
// propagation of prefixes from IS-IS Level 1 to
// Level 2
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e. The type is slice of string.
    ImportPolicy []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "level1-to-level2"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level1-to-level2/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("import-policy", types.YLeaf{"ImportPolicy", state.ImportPolicy})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1
// Policies relating to prefixes to be propagated
// from Level2 to Level 1
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational state parameters relating to the propagation of prefixes from
    // IS-IS Level 2 to Level 1.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_State
}

func (level2ToLevel1 *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1) GetEntityData() *types.CommonEntityData {
    level2ToLevel1.EntityData.YFilter = level2ToLevel1.YFilter
    level2ToLevel1.EntityData.YangName = "level2-to-level1"
    level2ToLevel1.EntityData.BundleName = "cisco_ios_xr"
    level2ToLevel1.EntityData.ParentYangName = "inter-level-propagation-policies"
    level2ToLevel1.EntityData.SegmentPath = "level2-to-level1"
    level2ToLevel1.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/" + level2ToLevel1.EntityData.SegmentPath
    level2ToLevel1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    level2ToLevel1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    level2ToLevel1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    level2ToLevel1.EntityData.Children = types.NewOrderedMap()
    level2ToLevel1.EntityData.Children.Append("state", types.YChild{"State", &level2ToLevel1.State})
    level2ToLevel1.EntityData.Leafs = types.NewOrderedMap()

    level2ToLevel1.EntityData.YListKeys = []string {}

    return &(level2ToLevel1.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_State
// Operational state parameters relating to the
// propagation of prefixes from IS-IS Level 2 to
// Level 1
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // list of policy names in sequence to be applied on receiving a routing
    // update in the current context, e. The type is slice of string.
    ImportPolicy []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "level2-to-level1"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level2-to-level1/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("import-policy", types.YLeaf{"ImportPolicy", state.ImportPolicy})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafis
// Address-family/Subsequent Address-family
// list
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafis struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family/Subsequent Address-family list. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafis_AfiSafi.
    AfiSafi []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafis_AfiSafi
}

func (afiSafis *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafis) GetEntityData() *types.CommonEntityData {
    afiSafis.EntityData.YFilter = afiSafis.YFilter
    afiSafis.EntityData.YangName = "afi-safis"
    afiSafis.EntityData.BundleName = "cisco_ios_xr"
    afiSafis.EntityData.ParentYangName = "global"
    afiSafis.EntityData.SegmentPath = "afi-safis"
    afiSafis.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/" + afiSafis.EntityData.SegmentPath
    afiSafis.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    afiSafis.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    afiSafis.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    afiSafis.EntityData.Children = types.NewOrderedMap()
    afiSafis.EntityData.Children.Append("afi-safi", types.YChild{"AfiSafi", nil})
    for i := range afiSafis.AfiSafi {
        types.SetYListKey(afiSafis.AfiSafi[i], i)
        afiSafis.EntityData.Children.Append(types.GetSegmentPath(afiSafis.AfiSafi[i]), types.YChild{"AfiSafi", afiSafis.AfiSafi[i]})
    }
    afiSafis.EntityData.Leafs = types.NewOrderedMap()

    afiSafis.EntityData.YListKeys = []string {}

    return &(afiSafis.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafis_AfiSafi
// Address-family/Subsequent Address-family
// list
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafis_AfiSafi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Reference to address-family type. The type is string.
    AfiName interface{}

    // Reference to subsequent address-family type. The type is string.
    SafiName interface{}

    // This container defines AFI-SAFI State information.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafis_AfiSafi_State

    // This container defines multi-topology address-family configuration and
    // state information.
    MultiTopology OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafis_AfiSafi_MultiTopology
}

func (afiSafi *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafis_AfiSafi) GetEntityData() *types.CommonEntityData {
    afiSafi.EntityData.YFilter = afiSafi.YFilter
    afiSafi.EntityData.YangName = "afi-safi"
    afiSafi.EntityData.BundleName = "cisco_ios_xr"
    afiSafi.EntityData.ParentYangName = "afi-safis"
    afiSafi.EntityData.SegmentPath = "afi-safi" + types.AddNoKeyToken(afiSafi)
    afiSafi.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/afi-safis/" + afiSafi.EntityData.SegmentPath
    afiSafi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    afiSafi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    afiSafi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    afiSafi.EntityData.Children = types.NewOrderedMap()
    afiSafi.EntityData.Children.Append("state", types.YChild{"State", &afiSafi.State})
    afiSafi.EntityData.Children.Append("multi-topology", types.YChild{"MultiTopology", &afiSafi.MultiTopology})
    afiSafi.EntityData.Leafs = types.NewOrderedMap()
    afiSafi.EntityData.Leafs.Append("afi-name", types.YLeaf{"AfiName", afiSafi.AfiName})
    afiSafi.EntityData.Leafs.Append("safi-name", types.YLeaf{"SafiName", afiSafi.SafiName})

    afiSafi.EntityData.YListKeys = []string {}

    return &(afiSafi.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafis_AfiSafi_State
// This container defines AFI-SAFI State
// information
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafis_AfiSafi_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family type. The type is string.
    AfiName interface{}

    // Subsequent address-family type. The type is string.
    SafiName interface{}

    // ISIS metric value(default=10). The type is interface{} with range:
    // 0..4294967295.
    Metric interface{}

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool.
    Enabled interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafis_AfiSafi_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "afi-safi"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/afi-safis/afi-safi/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("afi-name", types.YLeaf{"AfiName", state.AfiName})
    state.EntityData.Leafs.Append("safi-name", types.YLeaf{"SafiName", state.SafiName})
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafis_AfiSafi_MultiTopology
// This container defines multi-topology
// address-family configuration and state
// information
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafis_AfiSafi_MultiTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines AFI-SAFI multi-topology state information.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafis_AfiSafi_MultiTopology_State
}

func (multiTopology *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafis_AfiSafi_MultiTopology) GetEntityData() *types.CommonEntityData {
    multiTopology.EntityData.YFilter = multiTopology.YFilter
    multiTopology.EntityData.YangName = "multi-topology"
    multiTopology.EntityData.BundleName = "cisco_ios_xr"
    multiTopology.EntityData.ParentYangName = "afi-safi"
    multiTopology.EntityData.SegmentPath = "multi-topology"
    multiTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/afi-safis/afi-safi/" + multiTopology.EntityData.SegmentPath
    multiTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multiTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multiTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multiTopology.EntityData.Children = types.NewOrderedMap()
    multiTopology.EntityData.Children.Append("state", types.YChild{"State", &multiTopology.State})
    multiTopology.EntityData.Leafs = types.NewOrderedMap()

    multiTopology.EntityData.YListKeys = []string {}

    return &(multiTopology.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafis_AfiSafi_MultiTopology_State
// This container defines AFI-SAFI multi-topology
// state information
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafis_AfiSafi_MultiTopology_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address-family type. The type is string.
    AfiName interface{}

    // Subsequent address-family type. The type is string.
    SafiName interface{}

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool.
    Enabled interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_AfiSafis_AfiSafi_MultiTopology_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "multi-topology"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/afi-safis/afi-safi/multi-topology/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("afi-name", types.YLeaf{"AfiName", state.AfiName})
    state.EntityData.Leafs.Append("safi-name", types.YLeaf{"SafiName", state.SafiName})
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers
// This container defines ISIS timers
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines state information for ISIS global timers.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_State

    // This container defines ISIS SPF timer settings.
    Spf OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf

    // This container defines ISIS LSP Generation.
    LspGeneration OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration
}

func (timers *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers) GetEntityData() *types.CommonEntityData {
    timers.EntityData.YFilter = timers.YFilter
    timers.EntityData.YangName = "timers"
    timers.EntityData.BundleName = "cisco_ios_xr"
    timers.EntityData.ParentYangName = "global"
    timers.EntityData.SegmentPath = "timers"
    timers.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/" + timers.EntityData.SegmentPath
    timers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timers.EntityData.Children = types.NewOrderedMap()
    timers.EntityData.Children.Append("state", types.YChild{"State", &timers.State})
    timers.EntityData.Children.Append("spf", types.YChild{"Spf", &timers.Spf})
    timers.EntityData.Children.Append("lsp-generation", types.YChild{"LspGeneration", &timers.LspGeneration})
    timers.EntityData.Leafs = types.NewOrderedMap()

    timers.EntityData.YListKeys = []string {}

    return &(timers.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_State
// This container defines state information for
// ISIS global timers
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time interval in seconds that specifies how long an LSP remains in LSDB
    // without being refreshed. The type is interface{} with range: 0..65535.
    // Units are second.
    LspLifetimeInterval interface{}

    // Time interval in seconds that specifies how often route topology that a
    // device originates is transmitted in LSPs. The type is interface{} with
    // range: 0..65535. Units are second.
    LspRefreshInterval interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "timers"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/timers/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("lsp-lifetime-interval", types.YLeaf{"LspLifetimeInterval", state.LspLifetimeInterval})
    state.EntityData.Leafs.Append("lsp-refresh-interval", types.YLeaf{"LspRefreshInterval", state.LspRefreshInterval})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf
// This container defines ISIS SPF timer settings
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines state information for ISIS SPF timers.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf_State
}

func (spf *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf) GetEntityData() *types.CommonEntityData {
    spf.EntityData.YFilter = spf.YFilter
    spf.EntityData.YangName = "spf"
    spf.EntityData.BundleName = "cisco_ios_xr"
    spf.EntityData.ParentYangName = "timers"
    spf.EntityData.SegmentPath = "spf"
    spf.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/timers/" + spf.EntityData.SegmentPath
    spf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spf.EntityData.Children = types.NewOrderedMap()
    spf.EntityData.Children.Append("state", types.YChild{"State", &spf.State})
    spf.EntityData.Leafs = types.NewOrderedMap()

    spf.EntityData.YListKeys = []string {}

    return &(spf.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf_State
// This container defines state information for
// ISIS SPF timers
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SPF Hold Down time interval in milliseconds. The type is interface{} with
    // range: 0..18446744073709551615. Units are millisecond.
    SpfHoldInterval interface{}

    // Time interval in milliseconds between the detection of topology change and
    // when the SPF algorithm runs. The type is interface{} with range:
    // 0..18446744073709551615. Units are millisecond.
    SpfFirstInterval interface{}

    // Time interval in milliseconds between the first and second SPF calculation.
    // The type is interface{} with range: 0..18446744073709551615. Units are
    // millisecond.
    SpfSecondInterval interface{}

    // ISIS adaptive timer types (linear, exponential). The type is
    // OpenconfigIsisTypesAdaptiveTimerTypeEnum.
    AdaptiveTimer interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_Spf_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "spf"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("spf-hold-interval", types.YLeaf{"SpfHoldInterval", state.SpfHoldInterval})
    state.EntityData.Leafs.Append("spf-first-interval", types.YLeaf{"SpfFirstInterval", state.SpfFirstInterval})
    state.EntityData.Leafs.Append("spf-second-interval", types.YLeaf{"SpfSecondInterval", state.SpfSecondInterval})
    state.EntityData.Leafs.Append("adaptive-timer", types.YLeaf{"AdaptiveTimer", state.AdaptiveTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration
// This container defines ISIS LSP Generation
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines state information for ISIS LSP Generation timers.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration_State
}

func (lspGeneration *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration) GetEntityData() *types.CommonEntityData {
    lspGeneration.EntityData.YFilter = lspGeneration.YFilter
    lspGeneration.EntityData.YangName = "lsp-generation"
    lspGeneration.EntityData.BundleName = "cisco_ios_xr"
    lspGeneration.EntityData.ParentYangName = "timers"
    lspGeneration.EntityData.SegmentPath = "lsp-generation"
    lspGeneration.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/timers/" + lspGeneration.EntityData.SegmentPath
    lspGeneration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lspGeneration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lspGeneration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lspGeneration.EntityData.Children = types.NewOrderedMap()
    lspGeneration.EntityData.Children.Append("state", types.YChild{"State", &lspGeneration.State})
    lspGeneration.EntityData.Leafs = types.NewOrderedMap()

    lspGeneration.EntityData.YListKeys = []string {}

    return &(lspGeneration.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration_State
// This container defines state information for
// ISIS LSP Generation timers
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time interval in milliseconds that specifies max interval between two
    // consecutive occurrences of an LSP being generated. The type is interface{}
    // with range: 0..18446744073709551615. Units are millisecond.
    LspMaxWaitInterval interface{}

    // Time interval in milliseconds that specifies the first LSP generation
    // delay. The type is interface{} with range: 0..18446744073709551615. Units
    // are millisecond.
    LspFirstWaitInterval interface{}

    // Time interval in milliseconds that specifies the millisecond LSP generation
    // delay. The type is interface{} with range: 0..18446744073709551615. Units
    // are millisecond.
    LspSecondWaitInterval interface{}

    // ISIS adaptive timer types (linear, exponential). The type is
    // OpenconfigIsisTypesAdaptiveTimerTypeEnum.
    AdaptiveTimer interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Timers_LspGeneration_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "lsp-generation"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("lsp-max-wait-interval", types.YLeaf{"LspMaxWaitInterval", state.LspMaxWaitInterval})
    state.EntityData.Leafs.Append("lsp-first-wait-interval", types.YLeaf{"LspFirstWaitInterval", state.LspFirstWaitInterval})
    state.EntityData.Leafs.Append("lsp-second-wait-interval", types.YLeaf{"LspSecondWaitInterval", state.LspSecondWaitInterval})
    state.EntityData.Leafs.Append("adaptive-timer", types.YLeaf{"AdaptiveTimer", state.AdaptiveTimer})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport
// This container defines ISIS transport
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines state information for ISIS transport parameters.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport_State
}

func (transport *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport) GetEntityData() *types.CommonEntityData {
    transport.EntityData.YFilter = transport.YFilter
    transport.EntityData.YangName = "transport"
    transport.EntityData.BundleName = "cisco_ios_xr"
    transport.EntityData.ParentYangName = "global"
    transport.EntityData.SegmentPath = "transport"
    transport.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/" + transport.EntityData.SegmentPath
    transport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    transport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    transport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    transport.EntityData.Children = types.NewOrderedMap()
    transport.EntityData.Children.Append("state", types.YChild{"State", &transport.State})
    transport.EntityData.Leafs = types.NewOrderedMap()

    transport.EntityData.YListKeys = []string {}

    return &(transport.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport_State
// This container defines state information for
// ISIS transport parameters
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum size in bytes of an IS-IS Link state PDU. The type is
    // interface{} with range: 0..65535. Units are byte.
    LspMtuSize interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Global_Transport_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "transport"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/global/transport/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("lsp-mtu-size", types.YLeaf{"LspMtuSize", state.LspMtuSize})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels
// Configuration and operational state
// parameters related to a particular level
// within the IS-IS protocol instance
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration and operational state parameters related to a particular
    // level within the IS-IS protocol instance. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level.
    Level []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level
}

func (levels *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels) GetEntityData() *types.CommonEntityData {
    levels.EntityData.YFilter = levels.YFilter
    levels.EntityData.YangName = "levels"
    levels.EntityData.BundleName = "cisco_ios_xr"
    levels.EntityData.ParentYangName = "isis"
    levels.EntityData.SegmentPath = "levels"
    levels.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/" + levels.EntityData.SegmentPath
    levels.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    levels.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    levels.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    levels.EntityData.Children = types.NewOrderedMap()
    levels.EntityData.Children.Append("level", types.YChild{"Level", nil})
    for i := range levels.Level {
        levels.EntityData.Children.Append(types.GetSegmentPath(levels.Level[i]), types.YChild{"Level", levels.Level[i]})
    }
    levels.EntityData.Leafs = types.NewOrderedMap()

    levels.EntityData.YListKeys = []string {}

    return &(levels.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level
// Configuration and operational state
// parameters related to a particular level
// within the IS-IS protocol instance
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to ISIS level-number. The type is
    // interface{} with range: 0..4294967295.
    LevelNumber interface{}

    // This container defines Administrative Distance (or preference) assigned to
    // ISIS routes (level1 internal, level2 internal, level1 external, level2
    // external).
    RoutePreference OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference

    // This container defines ISIS level state information.
    LevelsState OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LevelsState

    // This container defines ISIS TE.
    TrafficEngineering OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering

    // This container defines ISIS authentication.
    LevelsAuthentication OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LevelsAuthentication

    // This container defines ISIS system level counters.
    SystemLevelCounters OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_SystemLevelCounters

    // This list describes LSPs in the LSDB.
    LinkStateDatabases OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases
}

func (level *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level) GetEntityData() *types.CommonEntityData {
    level.EntityData.YFilter = level.YFilter
    level.EntityData.YangName = "level"
    level.EntityData.BundleName = "cisco_ios_xr"
    level.EntityData.ParentYangName = "levels"
    level.EntityData.SegmentPath = "level" + types.AddKeyToken(level.LevelNumber, "level-number")
    level.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/" + level.EntityData.SegmentPath
    level.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    level.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    level.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    level.EntityData.Children = types.NewOrderedMap()
    level.EntityData.Children.Append("route-preference", types.YChild{"RoutePreference", &level.RoutePreference})
    level.EntityData.Children.Append("levels-state", types.YChild{"LevelsState", &level.LevelsState})
    level.EntityData.Children.Append("traffic-engineering", types.YChild{"TrafficEngineering", &level.TrafficEngineering})
    level.EntityData.Children.Append("levels-authentication", types.YChild{"LevelsAuthentication", &level.LevelsAuthentication})
    level.EntityData.Children.Append("system-level-counters", types.YChild{"SystemLevelCounters", &level.SystemLevelCounters})
    level.EntityData.Children.Append("link-state-databases", types.YChild{"LinkStateDatabases", &level.LinkStateDatabases})
    level.EntityData.Leafs = types.NewOrderedMap()
    level.EntityData.Leafs.Append("level-number", types.YLeaf{"LevelNumber", level.LevelNumber})

    level.EntityData.YListKeys = []string {"LevelNumber"}

    return &(level.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference
// This container defines Administrative
// Distance (or preference) assigned to ISIS
// routes (level1 internal, level2 internal,
// level1 external, level2 external)
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS route preference state information.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference_State
}

func (routePreference *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference) GetEntityData() *types.CommonEntityData {
    routePreference.EntityData.YFilter = routePreference.YFilter
    routePreference.EntityData.YangName = "route-preference"
    routePreference.EntityData.BundleName = "cisco_ios_xr"
    routePreference.EntityData.ParentYangName = "level"
    routePreference.EntityData.SegmentPath = "route-preference"
    routePreference.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/" + routePreference.EntityData.SegmentPath
    routePreference.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePreference.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePreference.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePreference.EntityData.Children = types.NewOrderedMap()
    routePreference.EntityData.Children.Append("state", types.YChild{"State", &routePreference.State})
    routePreference.EntityData.Leafs = types.NewOrderedMap()

    routePreference.EntityData.YListKeys = []string {}

    return &(routePreference.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference_State
// This container defines ISIS route preference
// state information
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Administrative Distance(preference) for external ISIS routes. The type is
    // interface{} with range: 0..255.
    ExternalRoutePreference interface{}

    // Administrative Distance(preference) for internal ISIS routes. The type is
    // interface{} with range: 0..255.
    InternalRoutePreference interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_RoutePreference_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "route-preference"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/route-preference/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("external-route-preference", types.YLeaf{"ExternalRoutePreference", state.ExternalRoutePreference})
    state.EntityData.Leafs.Append("internal-route-preference", types.YLeaf{"InternalRoutePreference", state.InternalRoutePreference})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LevelsState
// This container defines ISIS level state
// information
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LevelsState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS level number (level-1, level-2). The type is interface{} with range:
    // 0..255.
    LevelNumber interface{}

    // ISIS metric style types(narrow, wide). The type is
    // OpenconfigIsisTypesMetricStyleEnum.
    MetricStyle interface{}

    // When set to true, reject all ISIS protocol PDUs that either have a mismatch
    // in authentication-type or authentication-key. The type is bool.
    AuthenticationCheck interface{}
}

func (levelsState *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LevelsState) GetEntityData() *types.CommonEntityData {
    levelsState.EntityData.YFilter = levelsState.YFilter
    levelsState.EntityData.YangName = "levels-state"
    levelsState.EntityData.BundleName = "cisco_ios_xr"
    levelsState.EntityData.ParentYangName = "level"
    levelsState.EntityData.SegmentPath = "levels-state"
    levelsState.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/" + levelsState.EntityData.SegmentPath
    levelsState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    levelsState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    levelsState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    levelsState.EntityData.Children = types.NewOrderedMap()
    levelsState.EntityData.Leafs = types.NewOrderedMap()
    levelsState.EntityData.Leafs.Append("level-number", types.YLeaf{"LevelNumber", levelsState.LevelNumber})
    levelsState.EntityData.Leafs.Append("metric-style", types.YLeaf{"MetricStyle", levelsState.MetricStyle})
    levelsState.EntityData.Leafs.Append("authentication-check", types.YLeaf{"AuthenticationCheck", levelsState.AuthenticationCheck})

    levelsState.EntityData.YListKeys = []string {}

    return &(levelsState.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering
// This container defines ISIS TE
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS TE state information.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering_State
}

func (trafficEngineering *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering) GetEntityData() *types.CommonEntityData {
    trafficEngineering.EntityData.YFilter = trafficEngineering.YFilter
    trafficEngineering.EntityData.YangName = "traffic-engineering"
    trafficEngineering.EntityData.BundleName = "cisco_ios_xr"
    trafficEngineering.EntityData.ParentYangName = "level"
    trafficEngineering.EntityData.SegmentPath = "traffic-engineering"
    trafficEngineering.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/" + trafficEngineering.EntityData.SegmentPath
    trafficEngineering.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trafficEngineering.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trafficEngineering.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trafficEngineering.EntityData.Children = types.NewOrderedMap()
    trafficEngineering.EntityData.Children.Append("state", types.YChild{"State", &trafficEngineering.State})
    trafficEngineering.EntityData.Leafs = types.NewOrderedMap()

    trafficEngineering.EntityData.YListKeys = []string {}

    return &(trafficEngineering.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering_State
// This container defines ISIS TE state information
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When set to true, the functionality within which this leaf is defined is
    // enabled, when set to false it is explicitly disabled. The type is bool.
    Enabled interface{}

    // IPv4 MPLS Traffic Engineering Router-ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4RouterId interface{}

    // IPv6 MPLS Traffic Engineering Router-ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6RouterId interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_TrafficEngineering_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "traffic-engineering"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/traffic-engineering/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})
    state.EntityData.Leafs.Append("ipv4-router-id", types.YLeaf{"Ipv4RouterId", state.Ipv4RouterId})
    state.EntityData.Leafs.Append("ipv6-router-id", types.YLeaf{"Ipv6RouterId", state.Ipv6RouterId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LevelsAuthentication
// This container defines ISIS
// authentication
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LevelsAuthentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS authentication key.
    Key OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LevelsAuthentication_Key
}

func (levelsAuthentication *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LevelsAuthentication) GetEntityData() *types.CommonEntityData {
    levelsAuthentication.EntityData.YFilter = levelsAuthentication.YFilter
    levelsAuthentication.EntityData.YangName = "levels-authentication"
    levelsAuthentication.EntityData.BundleName = "cisco_ios_xr"
    levelsAuthentication.EntityData.ParentYangName = "level"
    levelsAuthentication.EntityData.SegmentPath = "levels-authentication"
    levelsAuthentication.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/" + levelsAuthentication.EntityData.SegmentPath
    levelsAuthentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    levelsAuthentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    levelsAuthentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    levelsAuthentication.EntityData.Children = types.NewOrderedMap()
    levelsAuthentication.EntityData.Children.Append("key", types.YChild{"Key", &levelsAuthentication.Key})
    levelsAuthentication.EntityData.Leafs = types.NewOrderedMap()

    levelsAuthentication.EntityData.YListKeys = []string {}

    return &(levelsAuthentication.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LevelsAuthentication_Key
// This container defines ISIS authentication key
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LevelsAuthentication_Key struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container defines ISIS authentication key state.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LevelsAuthentication_Key_State
}

func (key *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LevelsAuthentication_Key) GetEntityData() *types.CommonEntityData {
    key.EntityData.YFilter = key.YFilter
    key.EntityData.YangName = "key"
    key.EntityData.BundleName = "cisco_ios_xr"
    key.EntityData.ParentYangName = "levels-authentication"
    key.EntityData.SegmentPath = "key"
    key.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/levels-authentication/" + key.EntityData.SegmentPath
    key.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    key.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    key.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    key.EntityData.Children = types.NewOrderedMap()
    key.EntityData.Children.Append("state", types.YChild{"State", &key.State})
    key.EntityData.Leafs = types.NewOrderedMap()

    key.EntityData.YListKeys = []string {}

    return &(key.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LevelsAuthentication_Key_State
// This container defines ISIS authentication key
// state
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LevelsAuthentication_Key_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key string. The type is string.
    AuthPassword interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LevelsAuthentication_Key_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "key"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/levels-authentication/key/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("auth-password", types.YLeaf{"AuthPassword", state.AuthPassword})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_SystemLevelCounters
// This container defines ISIS system level
// counters
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_SystemLevelCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The container defines a list of system counters for the IS.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_SystemLevelCounters_State
}

func (systemLevelCounters *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_SystemLevelCounters) GetEntityData() *types.CommonEntityData {
    systemLevelCounters.EntityData.YFilter = systemLevelCounters.YFilter
    systemLevelCounters.EntityData.YangName = "system-level-counters"
    systemLevelCounters.EntityData.BundleName = "cisco_ios_xr"
    systemLevelCounters.EntityData.ParentYangName = "level"
    systemLevelCounters.EntityData.SegmentPath = "system-level-counters"
    systemLevelCounters.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/" + systemLevelCounters.EntityData.SegmentPath
    systemLevelCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemLevelCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemLevelCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemLevelCounters.EntityData.Children = types.NewOrderedMap()
    systemLevelCounters.EntityData.Children.Append("state", types.YChild{"State", &systemLevelCounters.State})
    systemLevelCounters.EntityData.Leafs = types.NewOrderedMap()

    systemLevelCounters.EntityData.YListKeys = []string {}

    return &(systemLevelCounters.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_SystemLevelCounters_State
// The container defines a list of system counters
// for the IS
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_SystemLevelCounters_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of corrupted in-memory LSPs detected. The type is interface{} with
    // range: 0..4294967295.
    CorruptedLsps interface{}

    // Number of times the database has become overloaded. The type is interface{}
    // with range: 0..4294967295.
    DatabaseOverloads interface{}

    // The number of times the system has attempted to exceed the maximum sequence
    // number. The type is interface{} with range: 0..4294967295.
    ExceedMaxSeqNums interface{}

    // Number of times a sequence number skip has occurred. The type is
    // interface{} with range: 0..4294967295.
    SeqNumSkips interface{}

    // Number of times a zero-aged copy of the system's own LSP is received from
    // some other node. The type is interface{} with range: 0..4294967295.
    OwnLspPurges interface{}

    // Number of times a PDU is received with a different value for ID field
    // length from that of the receiving system. The type is interface{} with
    // range: 0..4294967295.
    IdLenMismatch interface{}

    // Number of times a PDU is received with a different value for
    // MaximumAreaAddresses from that of the receiving system. The type is
    // interface{} with range: 0..4294967295.
    MaxAreaAddressMismatches interface{}

    // The number of times SPF was ran at this level. The type is interface{} with
    // range: 0..4294967295.
    SpfRuns interface{}

    // The number of received LSPs with errors. The type is interface{} with
    // range: 0..4294967295.
    LspErrors interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_SystemLevelCounters_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "system-level-counters"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/system-level-counters/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("corrupted-lsps", types.YLeaf{"CorruptedLsps", state.CorruptedLsps})
    state.EntityData.Leafs.Append("database-overloads", types.YLeaf{"DatabaseOverloads", state.DatabaseOverloads})
    state.EntityData.Leafs.Append("exceed-max-seq-nums", types.YLeaf{"ExceedMaxSeqNums", state.ExceedMaxSeqNums})
    state.EntityData.Leafs.Append("seq-num-skips", types.YLeaf{"SeqNumSkips", state.SeqNumSkips})
    state.EntityData.Leafs.Append("own-lsp-purges", types.YLeaf{"OwnLspPurges", state.OwnLspPurges})
    state.EntityData.Leafs.Append("id-len-mismatch", types.YLeaf{"IdLenMismatch", state.IdLenMismatch})
    state.EntityData.Leafs.Append("max-area-address-mismatches", types.YLeaf{"MaxAreaAddressMismatches", state.MaxAreaAddressMismatches})
    state.EntityData.Leafs.Append("spf-runs", types.YLeaf{"SpfRuns", state.SpfRuns})
    state.EntityData.Leafs.Append("lsp-errors", types.YLeaf{"LspErrors", state.LspErrors})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases
// This list describes LSPs in the LSDB
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list describes LSPs in the LSDB. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase.
    LinkStateDatabase []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase
}

func (linkStateDatabases *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases) GetEntityData() *types.CommonEntityData {
    linkStateDatabases.EntityData.YFilter = linkStateDatabases.YFilter
    linkStateDatabases.EntityData.YangName = "link-state-databases"
    linkStateDatabases.EntityData.BundleName = "cisco_ios_xr"
    linkStateDatabases.EntityData.ParentYangName = "level"
    linkStateDatabases.EntityData.SegmentPath = "link-state-databases"
    linkStateDatabases.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/" + linkStateDatabases.EntityData.SegmentPath
    linkStateDatabases.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkStateDatabases.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkStateDatabases.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkStateDatabases.EntityData.Children = types.NewOrderedMap()
    linkStateDatabases.EntityData.Children.Append("link-state-database", types.YChild{"LinkStateDatabase", nil})
    for i := range linkStateDatabases.LinkStateDatabase {
        linkStateDatabases.EntityData.Children.Append(types.GetSegmentPath(linkStateDatabases.LinkStateDatabase[i]), types.YChild{"LinkStateDatabase", linkStateDatabases.LinkStateDatabase[i]})
    }
    linkStateDatabases.EntityData.Leafs = types.NewOrderedMap()

    linkStateDatabases.EntityData.YListKeys = []string {}

    return &(linkStateDatabases.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase
// This list describes LSPs in the LSDB
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. A reference to the Link State PDU ID. The type is
    // string.
    LspId interface{}

    // List of TLVs that are not defined within the model, or are not recognised
    // by the system.
    UndefinedTlvs OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_UndefinedTlvs

    // State parameters of Link State PDU.
    LinkStateDatabaseState OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_LinkStateDatabaseState

    // List of TLV types in the LSDB for the specified LSP.
    Tlvses OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses
}

func (linkStateDatabase *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase) GetEntityData() *types.CommonEntityData {
    linkStateDatabase.EntityData.YFilter = linkStateDatabase.YFilter
    linkStateDatabase.EntityData.YangName = "link-state-database"
    linkStateDatabase.EntityData.BundleName = "cisco_ios_xr"
    linkStateDatabase.EntityData.ParentYangName = "link-state-databases"
    linkStateDatabase.EntityData.SegmentPath = "link-state-database" + types.AddKeyToken(linkStateDatabase.LspId, "lsp-id")
    linkStateDatabase.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/" + linkStateDatabase.EntityData.SegmentPath
    linkStateDatabase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkStateDatabase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkStateDatabase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkStateDatabase.EntityData.Children = types.NewOrderedMap()
    linkStateDatabase.EntityData.Children.Append("undefined-tlvs", types.YChild{"UndefinedTlvs", &linkStateDatabase.UndefinedTlvs})
    linkStateDatabase.EntityData.Children.Append("link-state-database-state", types.YChild{"LinkStateDatabaseState", &linkStateDatabase.LinkStateDatabaseState})
    linkStateDatabase.EntityData.Children.Append("tlvses", types.YChild{"Tlvses", &linkStateDatabase.Tlvses})
    linkStateDatabase.EntityData.Leafs = types.NewOrderedMap()
    linkStateDatabase.EntityData.Leafs.Append("lsp-id", types.YLeaf{"LspId", linkStateDatabase.LspId})

    linkStateDatabase.EntityData.YListKeys = []string {"LspId"}

    return &(linkStateDatabase.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_UndefinedTlvs
// List of TLVs that are not defined
// within the model, or are not recognised
// by the system
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_UndefinedTlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of TLVs that are not defined within the model, or are not recognised
    // by the system. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_UndefinedTlvs_UndefinedTlv.
    UndefinedTlv []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_UndefinedTlvs_UndefinedTlv
}

func (undefinedTlvs *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_UndefinedTlvs) GetEntityData() *types.CommonEntityData {
    undefinedTlvs.EntityData.YFilter = undefinedTlvs.YFilter
    undefinedTlvs.EntityData.YangName = "undefined-tlvs"
    undefinedTlvs.EntityData.BundleName = "cisco_ios_xr"
    undefinedTlvs.EntityData.ParentYangName = "link-state-database"
    undefinedTlvs.EntityData.SegmentPath = "undefined-tlvs"
    undefinedTlvs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/" + undefinedTlvs.EntityData.SegmentPath
    undefinedTlvs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    undefinedTlvs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    undefinedTlvs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    undefinedTlvs.EntityData.Children = types.NewOrderedMap()
    undefinedTlvs.EntityData.Children.Append("undefined-tlv", types.YChild{"UndefinedTlv", nil})
    for i := range undefinedTlvs.UndefinedTlv {
        undefinedTlvs.EntityData.Children.Append(types.GetSegmentPath(undefinedTlvs.UndefinedTlv[i]), types.YChild{"UndefinedTlv", undefinedTlvs.UndefinedTlv[i]})
    }
    undefinedTlvs.EntityData.Leafs = types.NewOrderedMap()

    undefinedTlvs.EntityData.YListKeys = []string {}

    return &(undefinedTlvs.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_UndefinedTlvs_UndefinedTlv
// List of TLVs that are not defined
// within the model, or are not
// recognised by the system
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_UndefinedTlvs_UndefinedTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the undefined TLV's type. The type is
    // interface{} with range: 0..4294967295.
    Type interface{}

    // State parameters of the undefined TLV.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_UndefinedTlvs_UndefinedTlv_State
}

func (undefinedTlv *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_UndefinedTlvs_UndefinedTlv) GetEntityData() *types.CommonEntityData {
    undefinedTlv.EntityData.YFilter = undefinedTlv.YFilter
    undefinedTlv.EntityData.YangName = "undefined-tlv"
    undefinedTlv.EntityData.BundleName = "cisco_ios_xr"
    undefinedTlv.EntityData.ParentYangName = "undefined-tlvs"
    undefinedTlv.EntityData.SegmentPath = "undefined-tlv" + types.AddKeyToken(undefinedTlv.Type, "type")
    undefinedTlv.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/undefined-tlvs/" + undefinedTlv.EntityData.SegmentPath
    undefinedTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    undefinedTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    undefinedTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    undefinedTlv.EntityData.Children = types.NewOrderedMap()
    undefinedTlv.EntityData.Children.Append("state", types.YChild{"State", &undefinedTlv.State})
    undefinedTlv.EntityData.Leafs = types.NewOrderedMap()
    undefinedTlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", undefinedTlv.Type})

    undefinedTlv.EntityData.YListKeys = []string {"Type"}

    return &(undefinedTlv.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_UndefinedTlvs_UndefinedTlv_State
// State parameters of the undefined TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_UndefinedTlvs_UndefinedTlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_UndefinedTlvs_UndefinedTlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "undefined-tlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/undefined-tlvs/undefined-tlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("length", types.YLeaf{"Length", state.Length})
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_LinkStateDatabaseState
// State parameters of Link State PDU
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_LinkStateDatabaseState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSP ID of the LSP. The type is string.
    LspId interface{}

    // Number of area addresses permitted for this ISs area. The type is
    // interface{} with range: 0..255.
    MaximumAreaAddresses interface{}

    // PDU version. The type is interface{} with range: 0..255.
    Version interface{}

    // PDU version2. The type is interface{} with range: 0..255.
    Version2 interface{}

    // Length of the ID field of NSAP addresses and NETs used in this routing
    // domain. The type is interface{} with range: 0..255.
    IdLength interface{}

    // Link State PDU type. The type is OpenconfigIsisLspPduTypeEnum.
    PduType interface{}

    // Remaining lifetime in seconds before the LSP expiration. The type is
    // interface{} with range: 0..65535. Units are second.
    RemainingLifetime interface{}

    // Sequence number of the LSP. The type is interface{} with range:
    // 0..4294967295.
    SequenceNumber interface{}

    // Checksum of the LSP. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // Total length of the LSP. The type is interface{} with range: 0..65535.
    PduLength interface{}

    // Type of neighboring system. The type is interface{} with range: 0..255.
    IsType interface{}

    // LSP Type-Block flags. The type is slice of OpenconfigIsisLspFlagsEnum.
    Flags []interface{}
}

func (linkStateDatabaseState *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_LinkStateDatabaseState) GetEntityData() *types.CommonEntityData {
    linkStateDatabaseState.EntityData.YFilter = linkStateDatabaseState.YFilter
    linkStateDatabaseState.EntityData.YangName = "link-state-database-state"
    linkStateDatabaseState.EntityData.BundleName = "cisco_ios_xr"
    linkStateDatabaseState.EntityData.ParentYangName = "link-state-database"
    linkStateDatabaseState.EntityData.SegmentPath = "link-state-database-state"
    linkStateDatabaseState.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/" + linkStateDatabaseState.EntityData.SegmentPath
    linkStateDatabaseState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkStateDatabaseState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkStateDatabaseState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkStateDatabaseState.EntityData.Children = types.NewOrderedMap()
    linkStateDatabaseState.EntityData.Leafs = types.NewOrderedMap()
    linkStateDatabaseState.EntityData.Leafs.Append("lsp-id", types.YLeaf{"LspId", linkStateDatabaseState.LspId})
    linkStateDatabaseState.EntityData.Leafs.Append("maximum-area-addresses", types.YLeaf{"MaximumAreaAddresses", linkStateDatabaseState.MaximumAreaAddresses})
    linkStateDatabaseState.EntityData.Leafs.Append("version", types.YLeaf{"Version", linkStateDatabaseState.Version})
    linkStateDatabaseState.EntityData.Leafs.Append("version2", types.YLeaf{"Version2", linkStateDatabaseState.Version2})
    linkStateDatabaseState.EntityData.Leafs.Append("id-length", types.YLeaf{"IdLength", linkStateDatabaseState.IdLength})
    linkStateDatabaseState.EntityData.Leafs.Append("pdu-type", types.YLeaf{"PduType", linkStateDatabaseState.PduType})
    linkStateDatabaseState.EntityData.Leafs.Append("remaining-lifetime", types.YLeaf{"RemainingLifetime", linkStateDatabaseState.RemainingLifetime})
    linkStateDatabaseState.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", linkStateDatabaseState.SequenceNumber})
    linkStateDatabaseState.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", linkStateDatabaseState.Checksum})
    linkStateDatabaseState.EntityData.Leafs.Append("pdu-length", types.YLeaf{"PduLength", linkStateDatabaseState.PduLength})
    linkStateDatabaseState.EntityData.Leafs.Append("is-type", types.YLeaf{"IsType", linkStateDatabaseState.IsType})
    linkStateDatabaseState.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", linkStateDatabaseState.Flags})

    linkStateDatabaseState.EntityData.YListKeys = []string {}

    return &(linkStateDatabaseState.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses
// List of TLV types in the LSDB for the
// specified LSP
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of TLV types in the LSDB for the specified LSP. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs.
    Tlvs []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs
}

func (tlvses *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses) GetEntityData() *types.CommonEntityData {
    tlvses.EntityData.YFilter = tlvses.YFilter
    tlvses.EntityData.YangName = "tlvses"
    tlvses.EntityData.BundleName = "cisco_ios_xr"
    tlvses.EntityData.ParentYangName = "link-state-database"
    tlvses.EntityData.SegmentPath = "tlvses"
    tlvses.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/" + tlvses.EntityData.SegmentPath
    tlvses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tlvses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tlvses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tlvses.EntityData.Children = types.NewOrderedMap()
    tlvses.EntityData.Children.Append("tlvs", types.YChild{"Tlvs", nil})
    for i := range tlvses.Tlvs {
        tlvses.EntityData.Children.Append(types.GetSegmentPath(tlvses.Tlvs[i]), types.YChild{"Tlvs", tlvses.Tlvs[i]})
    }
    tlvses.EntityData.Leafs = types.NewOrderedMap()

    tlvses.EntityData.YListKeys = []string {}

    return &(tlvses.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs
// List of TLV types in the LSDB for the
// specified LSP
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the TLV's type. The type is string.
    Type interface{}

    // This container defines TLV 1.
    AreaAddress OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_AreaAddress

    // This container defines authentication information of the node.
    Authentication OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Authentication

    // This container defines TLV 132.
    Ipv4InterfaceAddresses OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InterfaceAddresses

    // This list describes IS Router capabilities.
    RouterCapabilities OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities

    // This container defines list of IPv4 reachability Information in
    // multi-topology environment.
    MtIpv4Reachability OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability

    // This container defines list of ISIS multi-topology neighbors.
    MtIsn OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn

    // Instance of the IPv6 SRLG TLV.
    Ipv6Srlgs OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Srlgs

    // Operational state parameters relating to the specified LSP.
    TlvsState OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_TlvsState

    // This container defines ISIS purge TLV.
    PurgeOi OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_PurgeOi

    // This container defines TLV 137.
    HostName OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_HostName

    // This container defines list of IPv6 reachability information.
    Ipv6Reachability OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability

    // This container defines TLV 140.
    Ipv6TeRouterId OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6TeRouterId

    // This container defines list of IPv4 internal reachability information.
    Ipv4InternalReachability OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability

    // This container defines TLV 232.
    Ipv6InterfaceAddresses OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6InterfaceAddresses

    // This container defines list of ISIS extended reachability neighbors.
    ExtendedIsReachability OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability

    // A list of instance IDs received within TLV 7 within an IS-IS LSP.
    InstanceIds OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_InstanceIds

    // Instance of the IPv4 SRLG TLV.
    Ipv4Srlgs OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4Srlgs

    // This container describes list of ISIS neighbors and attributes.
    IsReachability OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability

    // This container defines TLV 134.
    Ipv4TeRouterId OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4TeRouterId

    // This container defines TLV 129.
    Nlpid OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Nlpid

    // This container defines list of IPv4 extended reachability information.
    ExtendedIpv4Reachability OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability

    // This container defines the topology supported.
    MultiTopology OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MultiTopology

    // This container defines list of IPv4 external reachability information.
    Ipv4ExternalReachability OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability

    // This container defines list of IPv6 reachability information in multi -
    // topology environment.
    MtIpv6Reachability OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability
}

func (tlvs *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs) GetEntityData() *types.CommonEntityData {
    tlvs.EntityData.YFilter = tlvs.YFilter
    tlvs.EntityData.YangName = "tlvs"
    tlvs.EntityData.BundleName = "cisco_ios_xr"
    tlvs.EntityData.ParentYangName = "tlvses"
    tlvs.EntityData.SegmentPath = "tlvs" + types.AddKeyToken(tlvs.Type, "type")
    tlvs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/" + tlvs.EntityData.SegmentPath
    tlvs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tlvs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tlvs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tlvs.EntityData.Children = types.NewOrderedMap()
    tlvs.EntityData.Children.Append("area-address", types.YChild{"AreaAddress", &tlvs.AreaAddress})
    tlvs.EntityData.Children.Append("authentication", types.YChild{"Authentication", &tlvs.Authentication})
    tlvs.EntityData.Children.Append("ipv4-interface-addresses", types.YChild{"Ipv4InterfaceAddresses", &tlvs.Ipv4InterfaceAddresses})
    tlvs.EntityData.Children.Append("router-capabilities", types.YChild{"RouterCapabilities", &tlvs.RouterCapabilities})
    tlvs.EntityData.Children.Append("mt-ipv4-reachability", types.YChild{"MtIpv4Reachability", &tlvs.MtIpv4Reachability})
    tlvs.EntityData.Children.Append("mt-isn", types.YChild{"MtIsn", &tlvs.MtIsn})
    tlvs.EntityData.Children.Append("ipv6-srlgs", types.YChild{"Ipv6Srlgs", &tlvs.Ipv6Srlgs})
    tlvs.EntityData.Children.Append("tlvs-state", types.YChild{"TlvsState", &tlvs.TlvsState})
    tlvs.EntityData.Children.Append("purge-oi", types.YChild{"PurgeOi", &tlvs.PurgeOi})
    tlvs.EntityData.Children.Append("host-name", types.YChild{"HostName", &tlvs.HostName})
    tlvs.EntityData.Children.Append("ipv6-reachability", types.YChild{"Ipv6Reachability", &tlvs.Ipv6Reachability})
    tlvs.EntityData.Children.Append("ipv6-te-router-id", types.YChild{"Ipv6TeRouterId", &tlvs.Ipv6TeRouterId})
    tlvs.EntityData.Children.Append("ipv4-internal-reachability", types.YChild{"Ipv4InternalReachability", &tlvs.Ipv4InternalReachability})
    tlvs.EntityData.Children.Append("ipv6-interface-addresses", types.YChild{"Ipv6InterfaceAddresses", &tlvs.Ipv6InterfaceAddresses})
    tlvs.EntityData.Children.Append("extended-is-reachability", types.YChild{"ExtendedIsReachability", &tlvs.ExtendedIsReachability})
    tlvs.EntityData.Children.Append("instance-ids", types.YChild{"InstanceIds", &tlvs.InstanceIds})
    tlvs.EntityData.Children.Append("ipv4-srlgs", types.YChild{"Ipv4Srlgs", &tlvs.Ipv4Srlgs})
    tlvs.EntityData.Children.Append("is-reachability", types.YChild{"IsReachability", &tlvs.IsReachability})
    tlvs.EntityData.Children.Append("ipv4-te-router-id", types.YChild{"Ipv4TeRouterId", &tlvs.Ipv4TeRouterId})
    tlvs.EntityData.Children.Append("nlpid", types.YChild{"Nlpid", &tlvs.Nlpid})
    tlvs.EntityData.Children.Append("extended-ipv4-reachability", types.YChild{"ExtendedIpv4Reachability", &tlvs.ExtendedIpv4Reachability})
    tlvs.EntityData.Children.Append("multi-topology", types.YChild{"MultiTopology", &tlvs.MultiTopology})
    tlvs.EntityData.Children.Append("ipv4-external-reachability", types.YChild{"Ipv4ExternalReachability", &tlvs.Ipv4ExternalReachability})
    tlvs.EntityData.Children.Append("mt-ipv6-reachability", types.YChild{"MtIpv6Reachability", &tlvs.MtIpv6Reachability})
    tlvs.EntityData.Leafs = types.NewOrderedMap()
    tlvs.EntityData.Leafs.Append("type", types.YLeaf{"Type", tlvs.Type})

    tlvs.EntityData.YListKeys = []string {"Type"}

    return &(tlvs.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_AreaAddress
// This container defines TLV 1
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_AreaAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of ISIS TLV 1.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_AreaAddress_State
}

func (areaAddress *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_AreaAddress) GetEntityData() *types.CommonEntityData {
    areaAddress.EntityData.YFilter = areaAddress.YFilter
    areaAddress.EntityData.YangName = "area-address"
    areaAddress.EntityData.BundleName = "cisco_ios_xr"
    areaAddress.EntityData.ParentYangName = "tlvs"
    areaAddress.EntityData.SegmentPath = "area-address"
    areaAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/" + areaAddress.EntityData.SegmentPath
    areaAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaAddress.EntityData.Children = types.NewOrderedMap()
    areaAddress.EntityData.Children.Append("state", types.YChild{"State", &areaAddress.State})
    areaAddress.EntityData.Leafs = types.NewOrderedMap()

    areaAddress.EntityData.YListKeys = []string {}

    return &(areaAddress.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_AreaAddress_State
// State parameters of ISIS TLV 1
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_AreaAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area adress(es) of the IS. The type is slice of string.
    AreaAddress []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_AreaAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "area-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/area-address/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("area-address", types.YLeaf{"AreaAddress", state.AreaAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Authentication
// This container defines authentication
// information of the node
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of TLV 10.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Authentication_State
}

func (authentication *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "cisco_ios_xr"
    authentication.EntityData.ParentYangName = "tlvs"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/" + authentication.EntityData.SegmentPath
    authentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authentication.EntityData.Children = types.NewOrderedMap()
    authentication.EntityData.Children.Append("state", types.YChild{"State", &authentication.State})
    authentication.EntityData.Leafs = types.NewOrderedMap()

    authentication.EntityData.YListKeys = []string {}

    return &(authentication.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Authentication_State
// State parameters of TLV 10
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Authentication_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication type to be used. The type is
    // OpenconfigIsisLspCryptoTypeEnum.
    CryptoType interface{}

    // Authentication key to be used. The type is string.
    AuthenticationKey interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Authentication_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "authentication"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/authentication/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("crypto-type", types.YLeaf{"CryptoType", state.CryptoType})
    state.EntityData.Leafs.Append("authentication-key", types.YLeaf{"AuthenticationKey", state.AuthenticationKey})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InterfaceAddresses
// This container defines TLV 132
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InterfaceAddresses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of ISIS TLV 132.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InterfaceAddresses_State
}

func (ipv4InterfaceAddresses *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InterfaceAddresses) GetEntityData() *types.CommonEntityData {
    ipv4InterfaceAddresses.EntityData.YFilter = ipv4InterfaceAddresses.YFilter
    ipv4InterfaceAddresses.EntityData.YangName = "ipv4-interface-addresses"
    ipv4InterfaceAddresses.EntityData.BundleName = "cisco_ios_xr"
    ipv4InterfaceAddresses.EntityData.ParentYangName = "tlvs"
    ipv4InterfaceAddresses.EntityData.SegmentPath = "ipv4-interface-addresses"
    ipv4InterfaceAddresses.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/" + ipv4InterfaceAddresses.EntityData.SegmentPath
    ipv4InterfaceAddresses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4InterfaceAddresses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4InterfaceAddresses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4InterfaceAddresses.EntityData.Children = types.NewOrderedMap()
    ipv4InterfaceAddresses.EntityData.Children.Append("state", types.YChild{"State", &ipv4InterfaceAddresses.State})
    ipv4InterfaceAddresses.EntityData.Leafs = types.NewOrderedMap()

    ipv4InterfaceAddresses.EntityData.YListKeys = []string {}

    return &(ipv4InterfaceAddresses.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InterfaceAddresses_State
// State parameters of ISIS TLV 132
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InterfaceAddresses_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 address(es) of the interface corresponding to the SNPA over which this
    // PDU is to be transmitted. The type is slice of string.
    Ipv4InterfaceAddress []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InterfaceAddresses_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "ipv4-interface-addresses"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv4-interface-addresses/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv4-interface-address", types.YLeaf{"Ipv4InterfaceAddress", state.Ipv4InterfaceAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities
// This list describes IS Router
// capabilities
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list describes IS Router capabilities. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability.
    RouterCapability []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability
}

func (routerCapabilities *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities) GetEntityData() *types.CommonEntityData {
    routerCapabilities.EntityData.YFilter = routerCapabilities.YFilter
    routerCapabilities.EntityData.YangName = "router-capabilities"
    routerCapabilities.EntityData.BundleName = "cisco_ios_xr"
    routerCapabilities.EntityData.ParentYangName = "tlvs"
    routerCapabilities.EntityData.SegmentPath = "router-capabilities"
    routerCapabilities.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/" + routerCapabilities.EntityData.SegmentPath
    routerCapabilities.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routerCapabilities.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routerCapabilities.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routerCapabilities.EntityData.Children = types.NewOrderedMap()
    routerCapabilities.EntityData.Children.Append("router-capability", types.YChild{"RouterCapability", nil})
    for i := range routerCapabilities.RouterCapability {
        routerCapabilities.EntityData.Children.Append(types.GetSegmentPath(routerCapabilities.RouterCapability[i]), types.YChild{"RouterCapability", routerCapabilities.RouterCapability[i]})
    }
    routerCapabilities.EntityData.Leafs = types.NewOrderedMap()

    routerCapabilities.EntityData.YListKeys = []string {}

    return &(routerCapabilities.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability
// This list describes IS Router
// capabilities
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the instance number of the router
    // capability TLV. The type is interface{} with range: 0..4294967295.
    InstanceNumber interface{}

    // State parameters of TLV 242.
    RouterCapabilitiesState OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_RouterCapabilitiesState

    // Sub-TLVs that are not defined in the model or not recognised by system.
    UndefinedSubtlvs OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_UndefinedSubtlvs

    // List of subTLV types in the LSDB for the specified TLV.
    Subtlvs OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs
}

func (routerCapability *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability) GetEntityData() *types.CommonEntityData {
    routerCapability.EntityData.YFilter = routerCapability.YFilter
    routerCapability.EntityData.YangName = "router-capability"
    routerCapability.EntityData.BundleName = "cisco_ios_xr"
    routerCapability.EntityData.ParentYangName = "router-capabilities"
    routerCapability.EntityData.SegmentPath = "router-capability" + types.AddKeyToken(routerCapability.InstanceNumber, "instance-number")
    routerCapability.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/router-capabilities/" + routerCapability.EntityData.SegmentPath
    routerCapability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routerCapability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routerCapability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routerCapability.EntityData.Children = types.NewOrderedMap()
    routerCapability.EntityData.Children.Append("router-capabilities-state", types.YChild{"RouterCapabilitiesState", &routerCapability.RouterCapabilitiesState})
    routerCapability.EntityData.Children.Append("undefined-subtlvs", types.YChild{"UndefinedSubtlvs", &routerCapability.UndefinedSubtlvs})
    routerCapability.EntityData.Children.Append("subtlvs", types.YChild{"Subtlvs", &routerCapability.Subtlvs})
    routerCapability.EntityData.Leafs = types.NewOrderedMap()
    routerCapability.EntityData.Leafs.Append("instance-number", types.YLeaf{"InstanceNumber", routerCapability.InstanceNumber})

    routerCapability.EntityData.YListKeys = []string {"InstanceNumber"}

    return &(routerCapability.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_RouterCapabilitiesState
// State parameters of TLV 242
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_RouterCapabilitiesState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A unique instance number for the instance of the router capabilities TLV.
    // The type is interface{} with range: 0..4294967295.
    InstanceNumber interface{}

    // IPv4 router-id. The type is string.
    RouterId interface{}

    // Router capability flags. The type is slice of
    // OpenconfigIsisLspRouterCapabilityStateFlagsEnum.
    Flags []interface{}
}

func (routerCapabilitiesState *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_RouterCapabilitiesState) GetEntityData() *types.CommonEntityData {
    routerCapabilitiesState.EntityData.YFilter = routerCapabilitiesState.YFilter
    routerCapabilitiesState.EntityData.YangName = "router-capabilities-state"
    routerCapabilitiesState.EntityData.BundleName = "cisco_ios_xr"
    routerCapabilitiesState.EntityData.ParentYangName = "router-capability"
    routerCapabilitiesState.EntityData.SegmentPath = "router-capabilities-state"
    routerCapabilitiesState.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/router-capabilities/router-capability/" + routerCapabilitiesState.EntityData.SegmentPath
    routerCapabilitiesState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routerCapabilitiesState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routerCapabilitiesState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routerCapabilitiesState.EntityData.Children = types.NewOrderedMap()
    routerCapabilitiesState.EntityData.Leafs = types.NewOrderedMap()
    routerCapabilitiesState.EntityData.Leafs.Append("instance-number", types.YLeaf{"InstanceNumber", routerCapabilitiesState.InstanceNumber})
    routerCapabilitiesState.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", routerCapabilitiesState.RouterId})
    routerCapabilitiesState.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", routerCapabilitiesState.Flags})

    routerCapabilitiesState.EntityData.YListKeys = []string {}

    return &(routerCapabilitiesState.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_UndefinedSubtlvs
// Sub-TLVs that are not defined in
// the model or not recognised by
// system
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_UndefinedSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub-TLVs that are not defined in the model or not recognised by system. The
    // type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv.
    UndefinedSubtlv []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv
}

func (undefinedSubtlvs *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_UndefinedSubtlvs) GetEntityData() *types.CommonEntityData {
    undefinedSubtlvs.EntityData.YFilter = undefinedSubtlvs.YFilter
    undefinedSubtlvs.EntityData.YangName = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.BundleName = "cisco_ios_xr"
    undefinedSubtlvs.EntityData.ParentYangName = "router-capability"
    undefinedSubtlvs.EntityData.SegmentPath = "undefined-subtlvs"
    undefinedSubtlvs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/router-capabilities/router-capability/" + undefinedSubtlvs.EntityData.SegmentPath
    undefinedSubtlvs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    undefinedSubtlvs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    undefinedSubtlvs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    undefinedSubtlvs.EntityData.Children = types.NewOrderedMap()
    undefinedSubtlvs.EntityData.Children.Append("undefined-subtlv", types.YChild{"UndefinedSubtlv", nil})
    for i := range undefinedSubtlvs.UndefinedSubtlv {
        undefinedSubtlvs.EntityData.Children.Append(types.GetSegmentPath(undefinedSubtlvs.UndefinedSubtlv[i]), types.YChild{"UndefinedSubtlv", undefinedSubtlvs.UndefinedSubtlv[i]})
    }
    undefinedSubtlvs.EntityData.Leafs = types.NewOrderedMap()

    undefinedSubtlvs.EntityData.YListKeys = []string {}

    return &(undefinedSubtlvs.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv
// Sub-TLVs that are not defined in
// the model or not recognised by
// system
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the type of the undefined sub-TLV.
    // The type is interface{} with range: 0..4294967295.
    Type interface{}

    // State parameters of the undefined sub-TLV.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv_State
}

func (undefinedSubtlv *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv) GetEntityData() *types.CommonEntityData {
    undefinedSubtlv.EntityData.YFilter = undefinedSubtlv.YFilter
    undefinedSubtlv.EntityData.YangName = "undefined-subtlv"
    undefinedSubtlv.EntityData.BundleName = "cisco_ios_xr"
    undefinedSubtlv.EntityData.ParentYangName = "undefined-subtlvs"
    undefinedSubtlv.EntityData.SegmentPath = "undefined-subtlv" + types.AddKeyToken(undefinedSubtlv.Type, "type")
    undefinedSubtlv.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/router-capabilities/router-capability/undefined-subtlvs/" + undefinedSubtlv.EntityData.SegmentPath
    undefinedSubtlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    undefinedSubtlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    undefinedSubtlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    undefinedSubtlv.EntityData.Children = types.NewOrderedMap()
    undefinedSubtlv.EntityData.Children.Append("state", types.YChild{"State", &undefinedSubtlv.State})
    undefinedSubtlv.EntityData.Leafs = types.NewOrderedMap()
    undefinedSubtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", undefinedSubtlv.Type})

    undefinedSubtlv.EntityData.YListKeys = []string {"Type"}

    return &(undefinedSubtlv.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv_State
// State parameters of the undefined sub-TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_UndefinedSubtlvs_UndefinedSubtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "undefined-subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/router-capabilities/router-capability/undefined-subtlvs/undefined-subtlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("length", types.YLeaf{"Length", state.Length})
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs
// List of subTLV types in the LSDB
// for the specified TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of subTLV types in the LSDB for the specified TLV. The type is slice
    // of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv.
    Subtlv []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv
}

func (subtlvs *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs) GetEntityData() *types.CommonEntityData {
    subtlvs.EntityData.YFilter = subtlvs.YFilter
    subtlvs.EntityData.YangName = "subtlvs"
    subtlvs.EntityData.BundleName = "cisco_ios_xr"
    subtlvs.EntityData.ParentYangName = "router-capability"
    subtlvs.EntityData.SegmentPath = "subtlvs"
    subtlvs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/router-capabilities/router-capability/" + subtlvs.EntityData.SegmentPath
    subtlvs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvs.EntityData.Children = types.NewOrderedMap()
    subtlvs.EntityData.Children.Append("subtlv", types.YChild{"Subtlv", nil})
    for i := range subtlvs.Subtlv {
        subtlvs.EntityData.Children.Append(types.GetSegmentPath(subtlvs.Subtlv[i]), types.YChild{"Subtlv", subtlvs.Subtlv[i]})
    }
    subtlvs.EntityData.Leafs = types.NewOrderedMap()

    subtlvs.EntityData.YListKeys = []string {}

    return &(subtlvs.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv
// List of subTLV types in the LSDB
// for the specified TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the sub-TLV type. The type is string.
    Type interface{}

    // State parameters of IS Router Capabilities.
    SubtlvsState OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SubtlvsState

    // List of the segment routing algorithsm advertised within the TLV.
    SegmentRoutingAlgorithms OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms

    // This container defines SR Capability sub-TLV 2.
    SegmentRoutingCapability OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability
}

func (subtlv *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv) GetEntityData() *types.CommonEntityData {
    subtlv.EntityData.YFilter = subtlv.YFilter
    subtlv.EntityData.YangName = "subtlv"
    subtlv.EntityData.BundleName = "cisco_ios_xr"
    subtlv.EntityData.ParentYangName = "subtlvs"
    subtlv.EntityData.SegmentPath = "subtlv" + types.AddKeyToken(subtlv.Type, "type")
    subtlv.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/router-capabilities/router-capability/subtlvs/" + subtlv.EntityData.SegmentPath
    subtlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlv.EntityData.Children = types.NewOrderedMap()
    subtlv.EntityData.Children.Append("subtlvs-state", types.YChild{"SubtlvsState", &subtlv.SubtlvsState})
    subtlv.EntityData.Children.Append("segment-routing-algorithms", types.YChild{"SegmentRoutingAlgorithms", &subtlv.SegmentRoutingAlgorithms})
    subtlv.EntityData.Children.Append("segment-routing-capability", types.YChild{"SegmentRoutingCapability", &subtlv.SegmentRoutingCapability})
    subtlv.EntityData.Leafs = types.NewOrderedMap()
    subtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", subtlv.Type})

    subtlv.EntityData.YListKeys = []string {"Type"}

    return &(subtlv.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SubtlvsState
// State parameters of IS Router
// Capabilities
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SubtlvsState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type is string.
    Type interface{}
}

func (subtlvsState *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SubtlvsState) GetEntityData() *types.CommonEntityData {
    subtlvsState.EntityData.YFilter = subtlvsState.YFilter
    subtlvsState.EntityData.YangName = "subtlvs-state"
    subtlvsState.EntityData.BundleName = "cisco_ios_xr"
    subtlvsState.EntityData.ParentYangName = "subtlv"
    subtlvsState.EntityData.SegmentPath = "subtlvs-state"
    subtlvsState.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/router-capabilities/router-capability/subtlvs/subtlv/" + subtlvsState.EntityData.SegmentPath
    subtlvsState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvsState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvsState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvsState.EntityData.Children = types.NewOrderedMap()
    subtlvsState.EntityData.Leafs = types.NewOrderedMap()
    subtlvsState.EntityData.Leafs.Append("type", types.YLeaf{"Type", subtlvsState.Type})

    subtlvsState.EntityData.YListKeys = []string {}

    return &(subtlvsState.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms
// List of the segment routing
// algorithsm advertised within the
// TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the segment routing algorithsm advertised within the TLV. The type
    // is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm.
    SegmentRoutingAlgorithm []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm
}

func (segmentRoutingAlgorithms *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms) GetEntityData() *types.CommonEntityData {
    segmentRoutingAlgorithms.EntityData.YFilter = segmentRoutingAlgorithms.YFilter
    segmentRoutingAlgorithms.EntityData.YangName = "segment-routing-algorithms"
    segmentRoutingAlgorithms.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingAlgorithms.EntityData.ParentYangName = "subtlv"
    segmentRoutingAlgorithms.EntityData.SegmentPath = "segment-routing-algorithms"
    segmentRoutingAlgorithms.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/router-capabilities/router-capability/subtlvs/subtlv/" + segmentRoutingAlgorithms.EntityData.SegmentPath
    segmentRoutingAlgorithms.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingAlgorithms.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingAlgorithms.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingAlgorithms.EntityData.Children = types.NewOrderedMap()
    segmentRoutingAlgorithms.EntityData.Children.Append("segment-routing-algorithm", types.YChild{"SegmentRoutingAlgorithm", nil})
    for i := range segmentRoutingAlgorithms.SegmentRoutingAlgorithm {
        segmentRoutingAlgorithms.EntityData.Children.Append(types.GetSegmentPath(segmentRoutingAlgorithms.SegmentRoutingAlgorithm[i]), types.YChild{"SegmentRoutingAlgorithm", segmentRoutingAlgorithms.SegmentRoutingAlgorithm[i]})
    }
    segmentRoutingAlgorithms.EntityData.Leafs = types.NewOrderedMap()

    segmentRoutingAlgorithms.EntityData.YListKeys = []string {}

    return &(segmentRoutingAlgorithms.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm
// List of the segment routing
// algorithsm advertised within the
// TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the SR algorithm that the subTLV
    // describes. The type is Algorithm.
    Algorithm interface{}

    // State parameters of sub-TLV 19 - Segment Routing Algorithm.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_State
}

func (segmentRoutingAlgorithm *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm) GetEntityData() *types.CommonEntityData {
    segmentRoutingAlgorithm.EntityData.YFilter = segmentRoutingAlgorithm.YFilter
    segmentRoutingAlgorithm.EntityData.YangName = "segment-routing-algorithm"
    segmentRoutingAlgorithm.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingAlgorithm.EntityData.ParentYangName = "segment-routing-algorithms"
    segmentRoutingAlgorithm.EntityData.SegmentPath = "segment-routing-algorithm" + types.AddKeyToken(segmentRoutingAlgorithm.Algorithm, "algorithm")
    segmentRoutingAlgorithm.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/router-capabilities/router-capability/subtlvs/subtlv/segment-routing-algorithms/" + segmentRoutingAlgorithm.EntityData.SegmentPath
    segmentRoutingAlgorithm.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingAlgorithm.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingAlgorithm.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingAlgorithm.EntityData.Children = types.NewOrderedMap()
    segmentRoutingAlgorithm.EntityData.Children.Append("state", types.YChild{"State", &segmentRoutingAlgorithm.State})
    segmentRoutingAlgorithm.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingAlgorithm.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", segmentRoutingAlgorithm.Algorithm})

    segmentRoutingAlgorithm.EntityData.YListKeys = []string {"Algorithm"}

    return &(segmentRoutingAlgorithm.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_State
// State parameters of sub-TLV 19 - Segment Routing
// Algorithm
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Segment Routing algorithm that is described by the TLV. The type is
    // OpenconfigIsisLspAlgorithmEnum.
    Algorithm interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "segment-routing-algorithm"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/router-capabilities/router-capability/subtlvs/subtlv/segment-routing-algorithms/segment-routing-algorithm/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", state.Algorithm})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_Algorithm represents that the subTLV describes
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_Algorithm string

const (
    // Shortest Path First (SPF)
    // algorithm based on link
    // metric.  This is the
    // well-known shortest path
    // algorithm as computed by the
    // IS-IS Decision process.
    // Consistent with the deployed
    // practice for link- state
    // protocols, algorithm 0
    // permits any node to overwrite
    // the SPF path with a different
    // path based on local policy.
    OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_Algorithm_spf OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_Algorithm = "spf"

    // Strict Shortest Path First
    // (SPF) algorithm based on link
    // metric. The algorithm is
    // identical to algorithm 0 but
    // algorithm 1 requires that all
    // nodes along the path will
    // honor the SPF routing
    // decision. Local policy MUST
    // NOT alter the forwarding
    // decision computed by
    // algorithm 1 at the node
    // claiming to support algorithm
    // 1.
    OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_Algorithm_strict_spf OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingAlgorithms_SegmentRoutingAlgorithm_Algorithm = "strict-spf"
)

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability
// This container defines SR
// Capability sub-TLV 2
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of IS SR Router Capability.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State

    // SRGB Descriptors included within the SR capability sub-TLV.
    SrgbDescriptors OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors
}

func (segmentRoutingCapability *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability) GetEntityData() *types.CommonEntityData {
    segmentRoutingCapability.EntityData.YFilter = segmentRoutingCapability.YFilter
    segmentRoutingCapability.EntityData.YangName = "segment-routing-capability"
    segmentRoutingCapability.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingCapability.EntityData.ParentYangName = "subtlv"
    segmentRoutingCapability.EntityData.SegmentPath = "segment-routing-capability"
    segmentRoutingCapability.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/router-capabilities/router-capability/subtlvs/subtlv/" + segmentRoutingCapability.EntityData.SegmentPath
    segmentRoutingCapability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingCapability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingCapability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingCapability.EntityData.Children = types.NewOrderedMap()
    segmentRoutingCapability.EntityData.Children.Append("state", types.YChild{"State", &segmentRoutingCapability.State})
    segmentRoutingCapability.EntityData.Children.Append("srgb-descriptors", types.YChild{"SrgbDescriptors", &segmentRoutingCapability.SrgbDescriptors})
    segmentRoutingCapability.EntityData.Leafs = types.NewOrderedMap()

    segmentRoutingCapability.EntityData.YListKeys = []string {}

    return &(segmentRoutingCapability.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State
// State parameters of IS SR Router Capability
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Segment Routing Capability Flags. The type is slice of
    // OpenconfigIsisLspSegmentRoutingCapabilityStateFlagsEnum.
    Flags []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "segment-routing-capability"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/router-capabilities/router-capability/subtlvs/subtlv/segment-routing-capability/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors
// SRGB Descriptors included within the SR
// capability sub-TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Descriptor entry within the SR capabilty sub-TLV. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor.
    SrgbDescriptor []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor
}

func (srgbDescriptors *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors) GetEntityData() *types.CommonEntityData {
    srgbDescriptors.EntityData.YFilter = srgbDescriptors.YFilter
    srgbDescriptors.EntityData.YangName = "srgb-descriptors"
    srgbDescriptors.EntityData.BundleName = "cisco_ios_xr"
    srgbDescriptors.EntityData.ParentYangName = "segment-routing-capability"
    srgbDescriptors.EntityData.SegmentPath = "srgb-descriptors"
    srgbDescriptors.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/router-capabilities/router-capability/subtlvs/subtlv/segment-routing-capability/" + srgbDescriptors.EntityData.SegmentPath
    srgbDescriptors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srgbDescriptors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srgbDescriptors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srgbDescriptors.EntityData.Children = types.NewOrderedMap()
    srgbDescriptors.EntityData.Children.Append("srgb-descriptor", types.YChild{"SrgbDescriptor", nil})
    for i := range srgbDescriptors.SrgbDescriptor {
        types.SetYListKey(srgbDescriptors.SrgbDescriptor[i], i)
        srgbDescriptors.EntityData.Children.Append(types.GetSegmentPath(srgbDescriptors.SrgbDescriptor[i]), types.YChild{"SrgbDescriptor", srgbDescriptors.SrgbDescriptor[i]})
    }
    srgbDescriptors.EntityData.Leafs = types.NewOrderedMap()

    srgbDescriptors.EntityData.YListKeys = []string {}

    return &(srgbDescriptors.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor
// Descriptor entry within the SR capabilty sub-TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // State parameters of the SR range.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State
}

func (srgbDescriptor *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor) GetEntityData() *types.CommonEntityData {
    srgbDescriptor.EntityData.YFilter = srgbDescriptor.YFilter
    srgbDescriptor.EntityData.YangName = "srgb-descriptor"
    srgbDescriptor.EntityData.BundleName = "cisco_ios_xr"
    srgbDescriptor.EntityData.ParentYangName = "srgb-descriptors"
    srgbDescriptor.EntityData.SegmentPath = "srgb-descriptor" + types.AddNoKeyToken(srgbDescriptor)
    srgbDescriptor.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/router-capabilities/router-capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/" + srgbDescriptor.EntityData.SegmentPath
    srgbDescriptor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srgbDescriptor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srgbDescriptor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srgbDescriptor.EntityData.Children = types.NewOrderedMap()
    srgbDescriptor.EntityData.Children.Append("state", types.YChild{"State", &srgbDescriptor.State})
    srgbDescriptor.EntityData.Leafs = types.NewOrderedMap()

    srgbDescriptor.EntityData.YListKeys = []string {}

    return &(srgbDescriptor.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State
// State parameters of the SR range
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of SRGB elements. The type is interface{} with range: 0..4294967295.
    Range interface{}

    // The first value of the SRGB when expressed as an MPLS label. The type is
    // string.
    Label interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_RouterCapabilities_RouterCapability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "srgb-descriptor"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/router-capabilities/router-capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("range", types.YLeaf{"Range", state.Range})
    state.EntityData.Leafs.Append("label", types.YLeaf{"Label", state.Label})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability
// This container defines list of IPv4
// reachability Information in
// multi-topology environment
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 prefixes that are contained within MT reachability TLV.
    MtIpv4ReachabilityPrefixes OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes
}

func (mtIpv4Reachability *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability) GetEntityData() *types.CommonEntityData {
    mtIpv4Reachability.EntityData.YFilter = mtIpv4Reachability.YFilter
    mtIpv4Reachability.EntityData.YangName = "mt-ipv4-reachability"
    mtIpv4Reachability.EntityData.BundleName = "cisco_ios_xr"
    mtIpv4Reachability.EntityData.ParentYangName = "tlvs"
    mtIpv4Reachability.EntityData.SegmentPath = "mt-ipv4-reachability"
    mtIpv4Reachability.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/" + mtIpv4Reachability.EntityData.SegmentPath
    mtIpv4Reachability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIpv4Reachability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIpv4Reachability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIpv4Reachability.EntityData.Children = types.NewOrderedMap()
    mtIpv4Reachability.EntityData.Children.Append("mt-ipv4-reachability-prefixes", types.YChild{"MtIpv4ReachabilityPrefixes", &mtIpv4Reachability.MtIpv4ReachabilityPrefixes})
    mtIpv4Reachability.EntityData.Leafs = types.NewOrderedMap()

    mtIpv4Reachability.EntityData.YListKeys = []string {}

    return &(mtIpv4Reachability.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes
// IPv4 prefixes that are contained
// within MT reachability TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 prefixes that are contained within MT reachability TLV. The type is
    // slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe.
    MtIpv4ReachabilityPrefixe []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe
}

func (mtIpv4ReachabilityPrefixes *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes) GetEntityData() *types.CommonEntityData {
    mtIpv4ReachabilityPrefixes.EntityData.YFilter = mtIpv4ReachabilityPrefixes.YFilter
    mtIpv4ReachabilityPrefixes.EntityData.YangName = "mt-ipv4-reachability-prefixes"
    mtIpv4ReachabilityPrefixes.EntityData.BundleName = "cisco_ios_xr"
    mtIpv4ReachabilityPrefixes.EntityData.ParentYangName = "mt-ipv4-reachability"
    mtIpv4ReachabilityPrefixes.EntityData.SegmentPath = "mt-ipv4-reachability-prefixes"
    mtIpv4ReachabilityPrefixes.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv4-reachability/" + mtIpv4ReachabilityPrefixes.EntityData.SegmentPath
    mtIpv4ReachabilityPrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIpv4ReachabilityPrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIpv4ReachabilityPrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIpv4ReachabilityPrefixes.EntityData.Children = types.NewOrderedMap()
    mtIpv4ReachabilityPrefixes.EntityData.Children.Append("mt-ipv4-reachability-prefixe", types.YChild{"MtIpv4ReachabilityPrefixe", nil})
    for i := range mtIpv4ReachabilityPrefixes.MtIpv4ReachabilityPrefixe {
        types.SetYListKey(mtIpv4ReachabilityPrefixes.MtIpv4ReachabilityPrefixe[i], i)
        mtIpv4ReachabilityPrefixes.EntityData.Children.Append(types.GetSegmentPath(mtIpv4ReachabilityPrefixes.MtIpv4ReachabilityPrefixe[i]), types.YChild{"MtIpv4ReachabilityPrefixe", mtIpv4ReachabilityPrefixes.MtIpv4ReachabilityPrefixe[i]})
    }
    mtIpv4ReachabilityPrefixes.EntityData.Leafs = types.NewOrderedMap()

    mtIpv4ReachabilityPrefixes.EntityData.YListKeys = []string {}

    return &(mtIpv4ReachabilityPrefixes.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe
// IPv4 prefixes that are contained
// within MT reachability TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Reference to the topology ID of the topology that the prefix is within. The
    // type is interface{} with range: 0..4294967295.
    MtId interface{}

    // Reference to the prefix to which reachability is being advertised. The type
    // is string.
    Prefix interface{}

    // State parameters of an IPv4 extended prefix.
    MtIpv4ReachabilityPrefixesState OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesState

    // Sub-TLVs that are not defined in the model or not recognised by system.
    MtIpv4ReachabilityPrefixesUndefinedSubtlvs OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesUndefinedSubtlvs

    // List of subTLV types in the LSDB for the specified TLV.
    MtIpv4ReachabilityPrefixesSubtlvs OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs
}

func (mtIpv4ReachabilityPrefixe *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe) GetEntityData() *types.CommonEntityData {
    mtIpv4ReachabilityPrefixe.EntityData.YFilter = mtIpv4ReachabilityPrefixe.YFilter
    mtIpv4ReachabilityPrefixe.EntityData.YangName = "mt-ipv4-reachability-prefixe"
    mtIpv4ReachabilityPrefixe.EntityData.BundleName = "cisco_ios_xr"
    mtIpv4ReachabilityPrefixe.EntityData.ParentYangName = "mt-ipv4-reachability-prefixes"
    mtIpv4ReachabilityPrefixe.EntityData.SegmentPath = "mt-ipv4-reachability-prefixe" + types.AddNoKeyToken(mtIpv4ReachabilityPrefixe)
    mtIpv4ReachabilityPrefixe.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv4-reachability/mt-ipv4-reachability-prefixes/" + mtIpv4ReachabilityPrefixe.EntityData.SegmentPath
    mtIpv4ReachabilityPrefixe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIpv4ReachabilityPrefixe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIpv4ReachabilityPrefixe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIpv4ReachabilityPrefixe.EntityData.Children = types.NewOrderedMap()
    mtIpv4ReachabilityPrefixe.EntityData.Children.Append("mt-ipv4-reachability-prefixes-state", types.YChild{"MtIpv4ReachabilityPrefixesState", &mtIpv4ReachabilityPrefixe.MtIpv4ReachabilityPrefixesState})
    mtIpv4ReachabilityPrefixe.EntityData.Children.Append("mt-ipv4-reachability-prefixes-undefined-subtlvs", types.YChild{"MtIpv4ReachabilityPrefixesUndefinedSubtlvs", &mtIpv4ReachabilityPrefixe.MtIpv4ReachabilityPrefixesUndefinedSubtlvs})
    mtIpv4ReachabilityPrefixe.EntityData.Children.Append("mt-ipv4-reachability-prefixes-subtlvs", types.YChild{"MtIpv4ReachabilityPrefixesSubtlvs", &mtIpv4ReachabilityPrefixe.MtIpv4ReachabilityPrefixesSubtlvs})
    mtIpv4ReachabilityPrefixe.EntityData.Leafs = types.NewOrderedMap()
    mtIpv4ReachabilityPrefixe.EntityData.Leafs.Append("mt-id", types.YLeaf{"MtId", mtIpv4ReachabilityPrefixe.MtId})
    mtIpv4ReachabilityPrefixe.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", mtIpv4ReachabilityPrefixe.Prefix})

    mtIpv4ReachabilityPrefixe.EntityData.YListKeys = []string {}

    return &(mtIpv4ReachabilityPrefixe.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesState
// State parameters of an IPv4
// extended prefix
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The up/down bit. The type is bool.
    UpDown interface{}

    // The Sub-TLV present bit. The type is bool.
    Sbit interface{}

    // IPv4 prefix contained within extended reachability TLVs. The type is
    // string.
    Prefix interface{}

    // ISIS metric value. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multi-topology ID. The type is interface{} with range: 0..65535.
    MtId interface{}
}

func (mtIpv4ReachabilityPrefixesState *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesState) GetEntityData() *types.CommonEntityData {
    mtIpv4ReachabilityPrefixesState.EntityData.YFilter = mtIpv4ReachabilityPrefixesState.YFilter
    mtIpv4ReachabilityPrefixesState.EntityData.YangName = "mt-ipv4-reachability-prefixes-state"
    mtIpv4ReachabilityPrefixesState.EntityData.BundleName = "cisco_ios_xr"
    mtIpv4ReachabilityPrefixesState.EntityData.ParentYangName = "mt-ipv4-reachability-prefixe"
    mtIpv4ReachabilityPrefixesState.EntityData.SegmentPath = "mt-ipv4-reachability-prefixes-state"
    mtIpv4ReachabilityPrefixesState.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv4-reachability/mt-ipv4-reachability-prefixes/mt-ipv4-reachability-prefixe/" + mtIpv4ReachabilityPrefixesState.EntityData.SegmentPath
    mtIpv4ReachabilityPrefixesState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIpv4ReachabilityPrefixesState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIpv4ReachabilityPrefixesState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIpv4ReachabilityPrefixesState.EntityData.Children = types.NewOrderedMap()
    mtIpv4ReachabilityPrefixesState.EntityData.Leafs = types.NewOrderedMap()
    mtIpv4ReachabilityPrefixesState.EntityData.Leafs.Append("up-down", types.YLeaf{"UpDown", mtIpv4ReachabilityPrefixesState.UpDown})
    mtIpv4ReachabilityPrefixesState.EntityData.Leafs.Append("sbit", types.YLeaf{"Sbit", mtIpv4ReachabilityPrefixesState.Sbit})
    mtIpv4ReachabilityPrefixesState.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", mtIpv4ReachabilityPrefixesState.Prefix})
    mtIpv4ReachabilityPrefixesState.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", mtIpv4ReachabilityPrefixesState.Metric})
    mtIpv4ReachabilityPrefixesState.EntityData.Leafs.Append("mt-id", types.YLeaf{"MtId", mtIpv4ReachabilityPrefixesState.MtId})

    mtIpv4ReachabilityPrefixesState.EntityData.YListKeys = []string {}

    return &(mtIpv4ReachabilityPrefixesState.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesUndefinedSubtlvs
// Sub-TLVs that are not defined in
// the model or not recognised by
// system
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesUndefinedSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub-TLVs that are not defined in the model or not recognised by system. The
    // type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesUndefinedSubtlvs_MtIpv4ReachabilityPrefixesUndefinedSubtlv.
    MtIpv4ReachabilityPrefixesUndefinedSubtlv []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesUndefinedSubtlvs_MtIpv4ReachabilityPrefixesUndefinedSubtlv
}

func (mtIpv4ReachabilityPrefixesUndefinedSubtlvs *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesUndefinedSubtlvs) GetEntityData() *types.CommonEntityData {
    mtIpv4ReachabilityPrefixesUndefinedSubtlvs.EntityData.YFilter = mtIpv4ReachabilityPrefixesUndefinedSubtlvs.YFilter
    mtIpv4ReachabilityPrefixesUndefinedSubtlvs.EntityData.YangName = "mt-ipv4-reachability-prefixes-undefined-subtlvs"
    mtIpv4ReachabilityPrefixesUndefinedSubtlvs.EntityData.BundleName = "cisco_ios_xr"
    mtIpv4ReachabilityPrefixesUndefinedSubtlvs.EntityData.ParentYangName = "mt-ipv4-reachability-prefixe"
    mtIpv4ReachabilityPrefixesUndefinedSubtlvs.EntityData.SegmentPath = "mt-ipv4-reachability-prefixes-undefined-subtlvs"
    mtIpv4ReachabilityPrefixesUndefinedSubtlvs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv4-reachability/mt-ipv4-reachability-prefixes/mt-ipv4-reachability-prefixe/" + mtIpv4ReachabilityPrefixesUndefinedSubtlvs.EntityData.SegmentPath
    mtIpv4ReachabilityPrefixesUndefinedSubtlvs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIpv4ReachabilityPrefixesUndefinedSubtlvs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIpv4ReachabilityPrefixesUndefinedSubtlvs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIpv4ReachabilityPrefixesUndefinedSubtlvs.EntityData.Children = types.NewOrderedMap()
    mtIpv4ReachabilityPrefixesUndefinedSubtlvs.EntityData.Children.Append("mt-ipv4-reachability-prefixes-undefined-subtlv", types.YChild{"MtIpv4ReachabilityPrefixesUndefinedSubtlv", nil})
    for i := range mtIpv4ReachabilityPrefixesUndefinedSubtlvs.MtIpv4ReachabilityPrefixesUndefinedSubtlv {
        mtIpv4ReachabilityPrefixesUndefinedSubtlvs.EntityData.Children.Append(types.GetSegmentPath(mtIpv4ReachabilityPrefixesUndefinedSubtlvs.MtIpv4ReachabilityPrefixesUndefinedSubtlv[i]), types.YChild{"MtIpv4ReachabilityPrefixesUndefinedSubtlv", mtIpv4ReachabilityPrefixesUndefinedSubtlvs.MtIpv4ReachabilityPrefixesUndefinedSubtlv[i]})
    }
    mtIpv4ReachabilityPrefixesUndefinedSubtlvs.EntityData.Leafs = types.NewOrderedMap()

    mtIpv4ReachabilityPrefixesUndefinedSubtlvs.EntityData.YListKeys = []string {}

    return &(mtIpv4ReachabilityPrefixesUndefinedSubtlvs.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesUndefinedSubtlvs_MtIpv4ReachabilityPrefixesUndefinedSubtlv
// Sub-TLVs that are not defined in
// the model or not recognised by
// system
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesUndefinedSubtlvs_MtIpv4ReachabilityPrefixesUndefinedSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the type of the undefined sub-TLV.
    // The type is interface{} with range: 0..4294967295.
    Type interface{}

    // State parameters of the undefined sub-TLV.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesUndefinedSubtlvs_MtIpv4ReachabilityPrefixesUndefinedSubtlv_State
}

func (mtIpv4ReachabilityPrefixesUndefinedSubtlv *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesUndefinedSubtlvs_MtIpv4ReachabilityPrefixesUndefinedSubtlv) GetEntityData() *types.CommonEntityData {
    mtIpv4ReachabilityPrefixesUndefinedSubtlv.EntityData.YFilter = mtIpv4ReachabilityPrefixesUndefinedSubtlv.YFilter
    mtIpv4ReachabilityPrefixesUndefinedSubtlv.EntityData.YangName = "mt-ipv4-reachability-prefixes-undefined-subtlv"
    mtIpv4ReachabilityPrefixesUndefinedSubtlv.EntityData.BundleName = "cisco_ios_xr"
    mtIpv4ReachabilityPrefixesUndefinedSubtlv.EntityData.ParentYangName = "mt-ipv4-reachability-prefixes-undefined-subtlvs"
    mtIpv4ReachabilityPrefixesUndefinedSubtlv.EntityData.SegmentPath = "mt-ipv4-reachability-prefixes-undefined-subtlv" + types.AddKeyToken(mtIpv4ReachabilityPrefixesUndefinedSubtlv.Type, "type")
    mtIpv4ReachabilityPrefixesUndefinedSubtlv.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv4-reachability/mt-ipv4-reachability-prefixes/mt-ipv4-reachability-prefixe/mt-ipv4-reachability-prefixes-undefined-subtlvs/" + mtIpv4ReachabilityPrefixesUndefinedSubtlv.EntityData.SegmentPath
    mtIpv4ReachabilityPrefixesUndefinedSubtlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIpv4ReachabilityPrefixesUndefinedSubtlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIpv4ReachabilityPrefixesUndefinedSubtlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIpv4ReachabilityPrefixesUndefinedSubtlv.EntityData.Children = types.NewOrderedMap()
    mtIpv4ReachabilityPrefixesUndefinedSubtlv.EntityData.Children.Append("state", types.YChild{"State", &mtIpv4ReachabilityPrefixesUndefinedSubtlv.State})
    mtIpv4ReachabilityPrefixesUndefinedSubtlv.EntityData.Leafs = types.NewOrderedMap()
    mtIpv4ReachabilityPrefixesUndefinedSubtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", mtIpv4ReachabilityPrefixesUndefinedSubtlv.Type})

    mtIpv4ReachabilityPrefixesUndefinedSubtlv.EntityData.YListKeys = []string {"Type"}

    return &(mtIpv4ReachabilityPrefixesUndefinedSubtlv.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesUndefinedSubtlvs_MtIpv4ReachabilityPrefixesUndefinedSubtlv_State
// State parameters of the undefined sub-TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesUndefinedSubtlvs_MtIpv4ReachabilityPrefixesUndefinedSubtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesUndefinedSubtlvs_MtIpv4ReachabilityPrefixesUndefinedSubtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "mt-ipv4-reachability-prefixes-undefined-subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv4-reachability/mt-ipv4-reachability-prefixes/mt-ipv4-reachability-prefixe/mt-ipv4-reachability-prefixes-undefined-subtlvs/mt-ipv4-reachability-prefixes-undefined-subtlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("length", types.YLeaf{"Length", state.Length})
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs
// List of subTLV types in the LSDB
// for the specified TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of subTLV types in the LSDB for the specified TLV. The type is slice
    // of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv.
    MtIpv4ReachabilityPrefixesSubtlv []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv
}

func (mtIpv4ReachabilityPrefixesSubtlvs *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs) GetEntityData() *types.CommonEntityData {
    mtIpv4ReachabilityPrefixesSubtlvs.EntityData.YFilter = mtIpv4ReachabilityPrefixesSubtlvs.YFilter
    mtIpv4ReachabilityPrefixesSubtlvs.EntityData.YangName = "mt-ipv4-reachability-prefixes-subtlvs"
    mtIpv4ReachabilityPrefixesSubtlvs.EntityData.BundleName = "cisco_ios_xr"
    mtIpv4ReachabilityPrefixesSubtlvs.EntityData.ParentYangName = "mt-ipv4-reachability-prefixe"
    mtIpv4ReachabilityPrefixesSubtlvs.EntityData.SegmentPath = "mt-ipv4-reachability-prefixes-subtlvs"
    mtIpv4ReachabilityPrefixesSubtlvs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv4-reachability/mt-ipv4-reachability-prefixes/mt-ipv4-reachability-prefixe/" + mtIpv4ReachabilityPrefixesSubtlvs.EntityData.SegmentPath
    mtIpv4ReachabilityPrefixesSubtlvs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIpv4ReachabilityPrefixesSubtlvs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIpv4ReachabilityPrefixesSubtlvs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIpv4ReachabilityPrefixesSubtlvs.EntityData.Children = types.NewOrderedMap()
    mtIpv4ReachabilityPrefixesSubtlvs.EntityData.Children.Append("mt-ipv4-reachability-prefixes-subtlv", types.YChild{"MtIpv4ReachabilityPrefixesSubtlv", nil})
    for i := range mtIpv4ReachabilityPrefixesSubtlvs.MtIpv4ReachabilityPrefixesSubtlv {
        mtIpv4ReachabilityPrefixesSubtlvs.EntityData.Children.Append(types.GetSegmentPath(mtIpv4ReachabilityPrefixesSubtlvs.MtIpv4ReachabilityPrefixesSubtlv[i]), types.YChild{"MtIpv4ReachabilityPrefixesSubtlv", mtIpv4ReachabilityPrefixesSubtlvs.MtIpv4ReachabilityPrefixesSubtlv[i]})
    }
    mtIpv4ReachabilityPrefixesSubtlvs.EntityData.Leafs = types.NewOrderedMap()

    mtIpv4ReachabilityPrefixesSubtlvs.EntityData.YListKeys = []string {}

    return &(mtIpv4ReachabilityPrefixesSubtlvs.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv
// List of subTLV types in the LSDB
// for the specified TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the sub-TLV type. The type is string.
    Type interface{}

    // This container defines sub-TLV 2.
    PrefixesSubtlvsTag64 OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsTag64

    // This container defines sub-TLV 1.
    PrefixesSubtlvsTag OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsTag

    // State parameters for a prefix.
    MtIpv4ReachabilityPrefixesSubtlvsState OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_MtIpv4ReachabilityPrefixesSubtlvsState

    // This container defines sub-TLV 11.
    PrefixesSubtlvsIpv4SourceRouterId OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsIpv4SourceRouterId

    // This container defines sub-TLV 12.
    PrefixesSubtlvsIpv6SourceRouterId OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsIpv6SourceRouterId

    // Prefix Segment-ID list.
    PrefixesSubtlvsPrefixSids OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsPrefixSids

    // This container defines sub-TLV 4.
    PrefixesSubtlvsFlags OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsFlags
}

func (mtIpv4ReachabilityPrefixesSubtlv *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv) GetEntityData() *types.CommonEntityData {
    mtIpv4ReachabilityPrefixesSubtlv.EntityData.YFilter = mtIpv4ReachabilityPrefixesSubtlv.YFilter
    mtIpv4ReachabilityPrefixesSubtlv.EntityData.YangName = "mt-ipv4-reachability-prefixes-subtlv"
    mtIpv4ReachabilityPrefixesSubtlv.EntityData.BundleName = "cisco_ios_xr"
    mtIpv4ReachabilityPrefixesSubtlv.EntityData.ParentYangName = "mt-ipv4-reachability-prefixes-subtlvs"
    mtIpv4ReachabilityPrefixesSubtlv.EntityData.SegmentPath = "mt-ipv4-reachability-prefixes-subtlv" + types.AddKeyToken(mtIpv4ReachabilityPrefixesSubtlv.Type, "type")
    mtIpv4ReachabilityPrefixesSubtlv.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv4-reachability/mt-ipv4-reachability-prefixes/mt-ipv4-reachability-prefixe/mt-ipv4-reachability-prefixes-subtlvs/" + mtIpv4ReachabilityPrefixesSubtlv.EntityData.SegmentPath
    mtIpv4ReachabilityPrefixesSubtlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIpv4ReachabilityPrefixesSubtlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIpv4ReachabilityPrefixesSubtlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIpv4ReachabilityPrefixesSubtlv.EntityData.Children = types.NewOrderedMap()
    mtIpv4ReachabilityPrefixesSubtlv.EntityData.Children.Append("prefixes-subtlvs-tag64", types.YChild{"PrefixesSubtlvsTag64", &mtIpv4ReachabilityPrefixesSubtlv.PrefixesSubtlvsTag64})
    mtIpv4ReachabilityPrefixesSubtlv.EntityData.Children.Append("prefixes-subtlvs-tag", types.YChild{"PrefixesSubtlvsTag", &mtIpv4ReachabilityPrefixesSubtlv.PrefixesSubtlvsTag})
    mtIpv4ReachabilityPrefixesSubtlv.EntityData.Children.Append("mt-ipv4-reachability-prefixes-subtlvs-state", types.YChild{"MtIpv4ReachabilityPrefixesSubtlvsState", &mtIpv4ReachabilityPrefixesSubtlv.MtIpv4ReachabilityPrefixesSubtlvsState})
    mtIpv4ReachabilityPrefixesSubtlv.EntityData.Children.Append("prefixes-subtlvs-ipv4-source-router-id", types.YChild{"PrefixesSubtlvsIpv4SourceRouterId", &mtIpv4ReachabilityPrefixesSubtlv.PrefixesSubtlvsIpv4SourceRouterId})
    mtIpv4ReachabilityPrefixesSubtlv.EntityData.Children.Append("prefixes-subtlvs-ipv6-source-router-id", types.YChild{"PrefixesSubtlvsIpv6SourceRouterId", &mtIpv4ReachabilityPrefixesSubtlv.PrefixesSubtlvsIpv6SourceRouterId})
    mtIpv4ReachabilityPrefixesSubtlv.EntityData.Children.Append("prefixes-subtlvs-prefix-sids", types.YChild{"PrefixesSubtlvsPrefixSids", &mtIpv4ReachabilityPrefixesSubtlv.PrefixesSubtlvsPrefixSids})
    mtIpv4ReachabilityPrefixesSubtlv.EntityData.Children.Append("prefixes-subtlvs-flags", types.YChild{"PrefixesSubtlvsFlags", &mtIpv4ReachabilityPrefixesSubtlv.PrefixesSubtlvsFlags})
    mtIpv4ReachabilityPrefixesSubtlv.EntityData.Leafs = types.NewOrderedMap()
    mtIpv4ReachabilityPrefixesSubtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", mtIpv4ReachabilityPrefixesSubtlv.Type})

    mtIpv4ReachabilityPrefixesSubtlv.EntityData.YListKeys = []string {"Type"}

    return &(mtIpv4ReachabilityPrefixesSubtlv.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsTag64
// This container defines sub-TLV 2
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsTag64 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 2.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsTag64_State
}

func (prefixesSubtlvsTag64 *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsTag64) GetEntityData() *types.CommonEntityData {
    prefixesSubtlvsTag64.EntityData.YFilter = prefixesSubtlvsTag64.YFilter
    prefixesSubtlvsTag64.EntityData.YangName = "prefixes-subtlvs-tag64"
    prefixesSubtlvsTag64.EntityData.BundleName = "cisco_ios_xr"
    prefixesSubtlvsTag64.EntityData.ParentYangName = "mt-ipv4-reachability-prefixes-subtlv"
    prefixesSubtlvsTag64.EntityData.SegmentPath = "prefixes-subtlvs-tag64"
    prefixesSubtlvsTag64.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv4-reachability/mt-ipv4-reachability-prefixes/mt-ipv4-reachability-prefixe/mt-ipv4-reachability-prefixes-subtlvs/mt-ipv4-reachability-prefixes-subtlv/" + prefixesSubtlvsTag64.EntityData.SegmentPath
    prefixesSubtlvsTag64.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixesSubtlvsTag64.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixesSubtlvsTag64.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixesSubtlvsTag64.EntityData.Children = types.NewOrderedMap()
    prefixesSubtlvsTag64.EntityData.Children.Append("state", types.YChild{"State", &prefixesSubtlvsTag64.State})
    prefixesSubtlvsTag64.EntityData.Leafs = types.NewOrderedMap()

    prefixesSubtlvsTag64.EntityData.YListKeys = []string {}

    return &(prefixesSubtlvsTag64.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsTag64_State
// State parameters of sub-TLV 2
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsTag64_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of 64-bit tags associated with the prefix. The type is slice of
    // interface{} with range: 0..18446744073709551615.
    Tag64 []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsTag64_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "prefixes-subtlvs-tag64"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv4-reachability/mt-ipv4-reachability-prefixes/mt-ipv4-reachability-prefixe/mt-ipv4-reachability-prefixes-subtlvs/mt-ipv4-reachability-prefixes-subtlv/prefixes-subtlvs-tag64/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("tag64", types.YLeaf{"Tag64", state.Tag64})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsTag
// This container defines sub-TLV 1
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsTag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 1.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsTag_State
}

func (prefixesSubtlvsTag *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsTag) GetEntityData() *types.CommonEntityData {
    prefixesSubtlvsTag.EntityData.YFilter = prefixesSubtlvsTag.YFilter
    prefixesSubtlvsTag.EntityData.YangName = "prefixes-subtlvs-tag"
    prefixesSubtlvsTag.EntityData.BundleName = "cisco_ios_xr"
    prefixesSubtlvsTag.EntityData.ParentYangName = "mt-ipv4-reachability-prefixes-subtlv"
    prefixesSubtlvsTag.EntityData.SegmentPath = "prefixes-subtlvs-tag"
    prefixesSubtlvsTag.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv4-reachability/mt-ipv4-reachability-prefixes/mt-ipv4-reachability-prefixe/mt-ipv4-reachability-prefixes-subtlvs/mt-ipv4-reachability-prefixes-subtlv/" + prefixesSubtlvsTag.EntityData.SegmentPath
    prefixesSubtlvsTag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixesSubtlvsTag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixesSubtlvsTag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixesSubtlvsTag.EntityData.Children = types.NewOrderedMap()
    prefixesSubtlvsTag.EntityData.Children.Append("state", types.YChild{"State", &prefixesSubtlvsTag.State})
    prefixesSubtlvsTag.EntityData.Leafs = types.NewOrderedMap()

    prefixesSubtlvsTag.EntityData.YListKeys = []string {}

    return &(prefixesSubtlvsTag.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsTag_State
// State parameters of sub-TLV 1
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsTag_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of 32-bit tags associated with the prefix. The type is slice of
    // interface{} with range: 0..4294967295.
    Tag32 []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsTag_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "prefixes-subtlvs-tag"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv4-reachability/mt-ipv4-reachability-prefixes/mt-ipv4-reachability-prefixe/mt-ipv4-reachability-prefixes-subtlvs/mt-ipv4-reachability-prefixes-subtlv/prefixes-subtlvs-tag/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("tag32", types.YLeaf{"Tag32", state.Tag32})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_MtIpv4ReachabilityPrefixesSubtlvsState
// State parameters for a prefix
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_MtIpv4ReachabilityPrefixesSubtlvsState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type is string.
    Type interface{}
}

func (mtIpv4ReachabilityPrefixesSubtlvsState *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_MtIpv4ReachabilityPrefixesSubtlvsState) GetEntityData() *types.CommonEntityData {
    mtIpv4ReachabilityPrefixesSubtlvsState.EntityData.YFilter = mtIpv4ReachabilityPrefixesSubtlvsState.YFilter
    mtIpv4ReachabilityPrefixesSubtlvsState.EntityData.YangName = "mt-ipv4-reachability-prefixes-subtlvs-state"
    mtIpv4ReachabilityPrefixesSubtlvsState.EntityData.BundleName = "cisco_ios_xr"
    mtIpv4ReachabilityPrefixesSubtlvsState.EntityData.ParentYangName = "mt-ipv4-reachability-prefixes-subtlv"
    mtIpv4ReachabilityPrefixesSubtlvsState.EntityData.SegmentPath = "mt-ipv4-reachability-prefixes-subtlvs-state"
    mtIpv4ReachabilityPrefixesSubtlvsState.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv4-reachability/mt-ipv4-reachability-prefixes/mt-ipv4-reachability-prefixe/mt-ipv4-reachability-prefixes-subtlvs/mt-ipv4-reachability-prefixes-subtlv/" + mtIpv4ReachabilityPrefixesSubtlvsState.EntityData.SegmentPath
    mtIpv4ReachabilityPrefixesSubtlvsState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIpv4ReachabilityPrefixesSubtlvsState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIpv4ReachabilityPrefixesSubtlvsState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIpv4ReachabilityPrefixesSubtlvsState.EntityData.Children = types.NewOrderedMap()
    mtIpv4ReachabilityPrefixesSubtlvsState.EntityData.Leafs = types.NewOrderedMap()
    mtIpv4ReachabilityPrefixesSubtlvsState.EntityData.Leafs.Append("type", types.YLeaf{"Type", mtIpv4ReachabilityPrefixesSubtlvsState.Type})

    mtIpv4ReachabilityPrefixesSubtlvsState.EntityData.YListKeys = []string {}

    return &(mtIpv4ReachabilityPrefixesSubtlvsState.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsIpv4SourceRouterId
// This container defines sub-TLV
// 11
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsIpv4SourceRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 11.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsIpv4SourceRouterId_State
}

func (prefixesSubtlvsIpv4SourceRouterId *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsIpv4SourceRouterId) GetEntityData() *types.CommonEntityData {
    prefixesSubtlvsIpv4SourceRouterId.EntityData.YFilter = prefixesSubtlvsIpv4SourceRouterId.YFilter
    prefixesSubtlvsIpv4SourceRouterId.EntityData.YangName = "prefixes-subtlvs-ipv4-source-router-id"
    prefixesSubtlvsIpv4SourceRouterId.EntityData.BundleName = "cisco_ios_xr"
    prefixesSubtlvsIpv4SourceRouterId.EntityData.ParentYangName = "mt-ipv4-reachability-prefixes-subtlv"
    prefixesSubtlvsIpv4SourceRouterId.EntityData.SegmentPath = "prefixes-subtlvs-ipv4-source-router-id"
    prefixesSubtlvsIpv4SourceRouterId.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv4-reachability/mt-ipv4-reachability-prefixes/mt-ipv4-reachability-prefixe/mt-ipv4-reachability-prefixes-subtlvs/mt-ipv4-reachability-prefixes-subtlv/" + prefixesSubtlvsIpv4SourceRouterId.EntityData.SegmentPath
    prefixesSubtlvsIpv4SourceRouterId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixesSubtlvsIpv4SourceRouterId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixesSubtlvsIpv4SourceRouterId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixesSubtlvsIpv4SourceRouterId.EntityData.Children = types.NewOrderedMap()
    prefixesSubtlvsIpv4SourceRouterId.EntityData.Children.Append("state", types.YChild{"State", &prefixesSubtlvsIpv4SourceRouterId.State})
    prefixesSubtlvsIpv4SourceRouterId.EntityData.Leafs = types.NewOrderedMap()

    prefixesSubtlvsIpv4SourceRouterId.EntityData.YListKeys = []string {}

    return &(prefixesSubtlvsIpv4SourceRouterId.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsIpv4SourceRouterId_State
// State parameters of sub-TLV 11
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsIpv4SourceRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type is string.
    Type interface{}

    // IPv4 Source router ID address. The type is string.
    Ipv4SourceRouterId interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsIpv4SourceRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "prefixes-subtlvs-ipv4-source-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv4-reachability/mt-ipv4-reachability-prefixes/mt-ipv4-reachability-prefixe/mt-ipv4-reachability-prefixes-subtlvs/mt-ipv4-reachability-prefixes-subtlv/prefixes-subtlvs-ipv4-source-router-id/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("ipv4-source-router-id", types.YLeaf{"Ipv4SourceRouterId", state.Ipv4SourceRouterId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsIpv6SourceRouterId
// This container defines sub-TLV
// 12
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsIpv6SourceRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 12.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsIpv6SourceRouterId_State
}

func (prefixesSubtlvsIpv6SourceRouterId *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsIpv6SourceRouterId) GetEntityData() *types.CommonEntityData {
    prefixesSubtlvsIpv6SourceRouterId.EntityData.YFilter = prefixesSubtlvsIpv6SourceRouterId.YFilter
    prefixesSubtlvsIpv6SourceRouterId.EntityData.YangName = "prefixes-subtlvs-ipv6-source-router-id"
    prefixesSubtlvsIpv6SourceRouterId.EntityData.BundleName = "cisco_ios_xr"
    prefixesSubtlvsIpv6SourceRouterId.EntityData.ParentYangName = "mt-ipv4-reachability-prefixes-subtlv"
    prefixesSubtlvsIpv6SourceRouterId.EntityData.SegmentPath = "prefixes-subtlvs-ipv6-source-router-id"
    prefixesSubtlvsIpv6SourceRouterId.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv4-reachability/mt-ipv4-reachability-prefixes/mt-ipv4-reachability-prefixe/mt-ipv4-reachability-prefixes-subtlvs/mt-ipv4-reachability-prefixes-subtlv/" + prefixesSubtlvsIpv6SourceRouterId.EntityData.SegmentPath
    prefixesSubtlvsIpv6SourceRouterId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixesSubtlvsIpv6SourceRouterId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixesSubtlvsIpv6SourceRouterId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixesSubtlvsIpv6SourceRouterId.EntityData.Children = types.NewOrderedMap()
    prefixesSubtlvsIpv6SourceRouterId.EntityData.Children.Append("state", types.YChild{"State", &prefixesSubtlvsIpv6SourceRouterId.State})
    prefixesSubtlvsIpv6SourceRouterId.EntityData.Leafs = types.NewOrderedMap()

    prefixesSubtlvsIpv6SourceRouterId.EntityData.YListKeys = []string {}

    return &(prefixesSubtlvsIpv6SourceRouterId.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsIpv6SourceRouterId_State
// State parameters of sub-TLV 12
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsIpv6SourceRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type is string.
    Type interface{}

    // IPv6 Source router ID address. The type is string.
    Ipv6SourceRouterId interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsIpv6SourceRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "prefixes-subtlvs-ipv6-source-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv4-reachability/mt-ipv4-reachability-prefixes/mt-ipv4-reachability-prefixe/mt-ipv4-reachability-prefixes-subtlvs/mt-ipv4-reachability-prefixes-subtlv/prefixes-subtlvs-ipv6-source-router-id/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("ipv6-source-router-id", types.YLeaf{"Ipv6SourceRouterId", state.Ipv6SourceRouterId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsPrefixSids
// Prefix Segment-ID list
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsPrefixSids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix Segment-ID list. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsPrefixSids_PrefixesSubtlvsPrefixSid.
    PrefixesSubtlvsPrefixSid []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsPrefixSids_PrefixesSubtlvsPrefixSid
}

func (prefixesSubtlvsPrefixSids *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsPrefixSids) GetEntityData() *types.CommonEntityData {
    prefixesSubtlvsPrefixSids.EntityData.YFilter = prefixesSubtlvsPrefixSids.YFilter
    prefixesSubtlvsPrefixSids.EntityData.YangName = "prefixes-subtlvs-prefix-sids"
    prefixesSubtlvsPrefixSids.EntityData.BundleName = "cisco_ios_xr"
    prefixesSubtlvsPrefixSids.EntityData.ParentYangName = "mt-ipv4-reachability-prefixes-subtlv"
    prefixesSubtlvsPrefixSids.EntityData.SegmentPath = "prefixes-subtlvs-prefix-sids"
    prefixesSubtlvsPrefixSids.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv4-reachability/mt-ipv4-reachability-prefixes/mt-ipv4-reachability-prefixe/mt-ipv4-reachability-prefixes-subtlvs/mt-ipv4-reachability-prefixes-subtlv/" + prefixesSubtlvsPrefixSids.EntityData.SegmentPath
    prefixesSubtlvsPrefixSids.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixesSubtlvsPrefixSids.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixesSubtlvsPrefixSids.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixesSubtlvsPrefixSids.EntityData.Children = types.NewOrderedMap()
    prefixesSubtlvsPrefixSids.EntityData.Children.Append("prefixes-subtlvs-prefix-sid", types.YChild{"PrefixesSubtlvsPrefixSid", nil})
    for i := range prefixesSubtlvsPrefixSids.PrefixesSubtlvsPrefixSid {
        prefixesSubtlvsPrefixSids.EntityData.Children.Append(types.GetSegmentPath(prefixesSubtlvsPrefixSids.PrefixesSubtlvsPrefixSid[i]), types.YChild{"PrefixesSubtlvsPrefixSid", prefixesSubtlvsPrefixSids.PrefixesSubtlvsPrefixSid[i]})
    }
    prefixesSubtlvsPrefixSids.EntityData.Leafs = types.NewOrderedMap()

    prefixesSubtlvsPrefixSids.EntityData.YListKeys = []string {}

    return &(prefixesSubtlvsPrefixSids.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsPrefixSids_PrefixesSubtlvsPrefixSid
// Prefix Segment-ID list
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsPrefixSids_PrefixesSubtlvsPrefixSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the value of the prefix SID. The type
    // is interface{} with range: 0..4294967295.
    Value interface{}

    // State parameters for Prefix-SID.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsPrefixSids_PrefixesSubtlvsPrefixSid_State
}

func (prefixesSubtlvsPrefixSid *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsPrefixSids_PrefixesSubtlvsPrefixSid) GetEntityData() *types.CommonEntityData {
    prefixesSubtlvsPrefixSid.EntityData.YFilter = prefixesSubtlvsPrefixSid.YFilter
    prefixesSubtlvsPrefixSid.EntityData.YangName = "prefixes-subtlvs-prefix-sid"
    prefixesSubtlvsPrefixSid.EntityData.BundleName = "cisco_ios_xr"
    prefixesSubtlvsPrefixSid.EntityData.ParentYangName = "prefixes-subtlvs-prefix-sids"
    prefixesSubtlvsPrefixSid.EntityData.SegmentPath = "prefixes-subtlvs-prefix-sid" + types.AddKeyToken(prefixesSubtlvsPrefixSid.Value, "value")
    prefixesSubtlvsPrefixSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv4-reachability/mt-ipv4-reachability-prefixes/mt-ipv4-reachability-prefixe/mt-ipv4-reachability-prefixes-subtlvs/mt-ipv4-reachability-prefixes-subtlv/prefixes-subtlvs-prefix-sids/" + prefixesSubtlvsPrefixSid.EntityData.SegmentPath
    prefixesSubtlvsPrefixSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixesSubtlvsPrefixSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixesSubtlvsPrefixSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixesSubtlvsPrefixSid.EntityData.Children = types.NewOrderedMap()
    prefixesSubtlvsPrefixSid.EntityData.Children.Append("state", types.YChild{"State", &prefixesSubtlvsPrefixSid.State})
    prefixesSubtlvsPrefixSid.EntityData.Leafs = types.NewOrderedMap()
    prefixesSubtlvsPrefixSid.EntityData.Leafs.Append("value", types.YLeaf{"Value", prefixesSubtlvsPrefixSid.Value})

    prefixesSubtlvsPrefixSid.EntityData.YListKeys = []string {"Value"}

    return &(prefixesSubtlvsPrefixSid.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsPrefixSids_PrefixesSubtlvsPrefixSid_State
// State parameters for Prefix-SID
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsPrefixSids_PrefixesSubtlvsPrefixSid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGP Prefix-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Prefix-SID algorithm to be used for path computation. The type is
    // interface{} with range: 0..255.
    Algorithm interface{}

    // Flags associated with Prefix Segment-ID. The type is slice of
    // OpenconfigIsisLspPrefixSidStateFlagsEnum.
    Flags []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsPrefixSids_PrefixesSubtlvsPrefixSid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "prefixes-subtlvs-prefix-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv4-reachability/mt-ipv4-reachability-prefixes/mt-ipv4-reachability-prefixe/mt-ipv4-reachability-prefixes-subtlvs/mt-ipv4-reachability-prefixes-subtlv/prefixes-subtlvs-prefix-sids/prefixes-subtlvs-prefix-sid/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})
    state.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", state.Algorithm})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsFlags
// This container defines sub-TLV 4
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 4.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsFlags_State
}

func (prefixesSubtlvsFlags *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsFlags) GetEntityData() *types.CommonEntityData {
    prefixesSubtlvsFlags.EntityData.YFilter = prefixesSubtlvsFlags.YFilter
    prefixesSubtlvsFlags.EntityData.YangName = "prefixes-subtlvs-flags"
    prefixesSubtlvsFlags.EntityData.BundleName = "cisco_ios_xr"
    prefixesSubtlvsFlags.EntityData.ParentYangName = "mt-ipv4-reachability-prefixes-subtlv"
    prefixesSubtlvsFlags.EntityData.SegmentPath = "prefixes-subtlvs-flags"
    prefixesSubtlvsFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv4-reachability/mt-ipv4-reachability-prefixes/mt-ipv4-reachability-prefixe/mt-ipv4-reachability-prefixes-subtlvs/mt-ipv4-reachability-prefixes-subtlv/" + prefixesSubtlvsFlags.EntityData.SegmentPath
    prefixesSubtlvsFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixesSubtlvsFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixesSubtlvsFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixesSubtlvsFlags.EntityData.Children = types.NewOrderedMap()
    prefixesSubtlvsFlags.EntityData.Children.Append("state", types.YChild{"State", &prefixesSubtlvsFlags.State})
    prefixesSubtlvsFlags.EntityData.Leafs = types.NewOrderedMap()

    prefixesSubtlvsFlags.EntityData.YListKeys = []string {}

    return &(prefixesSubtlvsFlags.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsFlags_State
// State parameters of sub-TLV 4
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsFlags_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type is string.
    Type interface{}

    // Additional prefix reachability flags. The type is slice of
    // OpenconfigIsisLspFlagsStateFlagsEnum.
    Flags []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv4Reachability_MtIpv4ReachabilityPrefixes_MtIpv4ReachabilityPrefixe_MtIpv4ReachabilityPrefixesSubtlvs_MtIpv4ReachabilityPrefixesSubtlv_PrefixesSubtlvsFlags_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "prefixes-subtlvs-flags"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv4-reachability/mt-ipv4-reachability-prefixes/mt-ipv4-reachability-prefixe/mt-ipv4-reachability-prefixes-subtlvs/mt-ipv4-reachability-prefixes-subtlv/prefixes-subtlvs-flags/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn
// This container defines list of ISIS
// multi-topology neighbors
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container describes IS neighbors.
    MtIsnNeighbors OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors
}

func (mtIsn *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn) GetEntityData() *types.CommonEntityData {
    mtIsn.EntityData.YFilter = mtIsn.YFilter
    mtIsn.EntityData.YangName = "mt-isn"
    mtIsn.EntityData.BundleName = "cisco_ios_xr"
    mtIsn.EntityData.ParentYangName = "tlvs"
    mtIsn.EntityData.SegmentPath = "mt-isn"
    mtIsn.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/" + mtIsn.EntityData.SegmentPath
    mtIsn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIsn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIsn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIsn.EntityData.Children = types.NewOrderedMap()
    mtIsn.EntityData.Children.Append("mt-isn-neighbors", types.YChild{"MtIsnNeighbors", &mtIsn.MtIsnNeighbors})
    mtIsn.EntityData.Leafs = types.NewOrderedMap()

    mtIsn.EntityData.YListKeys = []string {}

    return &(mtIsn.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors
// This container describes IS
// neighbors
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This container describes IS neighbors. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor.
    MtIsnNeighbor []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor
}

func (mtIsnNeighbors *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors) GetEntityData() *types.CommonEntityData {
    mtIsnNeighbors.EntityData.YFilter = mtIsnNeighbors.YFilter
    mtIsnNeighbors.EntityData.YangName = "mt-isn-neighbors"
    mtIsnNeighbors.EntityData.BundleName = "cisco_ios_xr"
    mtIsnNeighbors.EntityData.ParentYangName = "mt-isn"
    mtIsnNeighbors.EntityData.SegmentPath = "mt-isn-neighbors"
    mtIsnNeighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/" + mtIsnNeighbors.EntityData.SegmentPath
    mtIsnNeighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIsnNeighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIsnNeighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIsnNeighbors.EntityData.Children = types.NewOrderedMap()
    mtIsnNeighbors.EntityData.Children.Append("mt-isn-neighbor", types.YChild{"MtIsnNeighbor", nil})
    for i := range mtIsnNeighbors.MtIsnNeighbor {
        types.SetYListKey(mtIsnNeighbors.MtIsnNeighbor[i], i)
        mtIsnNeighbors.EntityData.Children.Append(types.GetSegmentPath(mtIsnNeighbors.MtIsnNeighbor[i]), types.YChild{"MtIsnNeighbor", mtIsnNeighbors.MtIsnNeighbor[i]})
    }
    mtIsnNeighbors.EntityData.Leafs = types.NewOrderedMap()

    mtIsnNeighbors.EntityData.YListKeys = []string {}

    return &(mtIsnNeighbors.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor
// This container describes IS
// neighbors
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Reference to the topology that the neighbor is within. The type is
    // interface{} with range: 0..4294967295.
    MtId interface{}

    // Reference to the System ID of the neighbor. The type is string.
    SystemId interface{}

    // List of subTLV types in the LSDB for the specified TLV.
    MtIsnNeighborsSubtlvs OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs

    // State parameters of MT neighbor.
    MtIsnNeighborsState OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsState

    // Sub-TLVs that are not defined in the model or not recognised by system.
    MtIsnNeighborsUndefinedSubtlvs OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsUndefinedSubtlvs
}

func (mtIsnNeighbor *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor) GetEntityData() *types.CommonEntityData {
    mtIsnNeighbor.EntityData.YFilter = mtIsnNeighbor.YFilter
    mtIsnNeighbor.EntityData.YangName = "mt-isn-neighbor"
    mtIsnNeighbor.EntityData.BundleName = "cisco_ios_xr"
    mtIsnNeighbor.EntityData.ParentYangName = "mt-isn-neighbors"
    mtIsnNeighbor.EntityData.SegmentPath = "mt-isn-neighbor" + types.AddNoKeyToken(mtIsnNeighbor)
    mtIsnNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/" + mtIsnNeighbor.EntityData.SegmentPath
    mtIsnNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIsnNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIsnNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIsnNeighbor.EntityData.Children = types.NewOrderedMap()
    mtIsnNeighbor.EntityData.Children.Append("mt-isn-neighbors-subtlvs", types.YChild{"MtIsnNeighborsSubtlvs", &mtIsnNeighbor.MtIsnNeighborsSubtlvs})
    mtIsnNeighbor.EntityData.Children.Append("mt-isn-neighbors-state", types.YChild{"MtIsnNeighborsState", &mtIsnNeighbor.MtIsnNeighborsState})
    mtIsnNeighbor.EntityData.Children.Append("mt-isn-neighbors-undefined-subtlvs", types.YChild{"MtIsnNeighborsUndefinedSubtlvs", &mtIsnNeighbor.MtIsnNeighborsUndefinedSubtlvs})
    mtIsnNeighbor.EntityData.Leafs = types.NewOrderedMap()
    mtIsnNeighbor.EntityData.Leafs.Append("mt-id", types.YLeaf{"MtId", mtIsnNeighbor.MtId})
    mtIsnNeighbor.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", mtIsnNeighbor.SystemId})

    mtIsnNeighbor.EntityData.YListKeys = []string {}

    return &(mtIsnNeighbor.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs
// List of subTLV types in the LSDB
// for the specified TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of subTLV types in the LSDB for the specified TLV. The type is slice
    // of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv.
    MtIsnNeighborsSubtlv []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv
}

func (mtIsnNeighborsSubtlvs *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs) GetEntityData() *types.CommonEntityData {
    mtIsnNeighborsSubtlvs.EntityData.YFilter = mtIsnNeighborsSubtlvs.YFilter
    mtIsnNeighborsSubtlvs.EntityData.YangName = "mt-isn-neighbors-subtlvs"
    mtIsnNeighborsSubtlvs.EntityData.BundleName = "cisco_ios_xr"
    mtIsnNeighborsSubtlvs.EntityData.ParentYangName = "mt-isn-neighbor"
    mtIsnNeighborsSubtlvs.EntityData.SegmentPath = "mt-isn-neighbors-subtlvs"
    mtIsnNeighborsSubtlvs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/" + mtIsnNeighborsSubtlvs.EntityData.SegmentPath
    mtIsnNeighborsSubtlvs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIsnNeighborsSubtlvs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIsnNeighborsSubtlvs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIsnNeighborsSubtlvs.EntityData.Children = types.NewOrderedMap()
    mtIsnNeighborsSubtlvs.EntityData.Children.Append("mt-isn-neighbors-subtlv", types.YChild{"MtIsnNeighborsSubtlv", nil})
    for i := range mtIsnNeighborsSubtlvs.MtIsnNeighborsSubtlv {
        mtIsnNeighborsSubtlvs.EntityData.Children.Append(types.GetSegmentPath(mtIsnNeighborsSubtlvs.MtIsnNeighborsSubtlv[i]), types.YChild{"MtIsnNeighborsSubtlv", mtIsnNeighborsSubtlvs.MtIsnNeighborsSubtlv[i]})
    }
    mtIsnNeighborsSubtlvs.EntityData.Leafs = types.NewOrderedMap()

    mtIsnNeighborsSubtlvs.EntityData.YListKeys = []string {}

    return &(mtIsnNeighborsSubtlvs.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv
// List of subTLV types in the LSDB
// for the specified TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the sub-TLV type. The type is string.
    Type interface{}

    // This container defines sub-TLV 13.
    SubtlvsIpv6NeighborAddress OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv6NeighborAddress

    // This container defines sub-TLV 6.
    SubtlvsIpv4InterfaceAddress OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv4InterfaceAddress

    // This container defines sub-TLV 10.
    SubtlvsMaxReservableLinkBandwidth OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsMaxReservableLinkBandwidth

    // This container defines sub-TLV 9.
    SubtlvsMaxLinkBandwidth OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsMaxLinkBandwidth

    // Adjacency Segment-IDs List.
    SubtlvsAdjacencySids OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsAdjacencySids

    // List of the Bandwidth Constraints sub-TLV instances present in the TLV.
    SubtlvsBandwidthConstraints OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsBandwidthConstraints

    // Setup priority (0 through 7) for unreserved bandwidth.
    SubtlvsUnreservedBandwidths OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsUnreservedBandwidths

    // This container defines sub-TLV 8.
    SubtlvsIpv4NeighborAddress OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv4NeighborAddress

    // This container defines sub-TLV 18.
    SubtlvsTeDefaultMetric OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsTeDefaultMetric

    // This container defines sub-TLV 12.
    SubtlvsIpv6InterfaceAddress OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv6InterfaceAddress

    // This container defines sub-TLV 3.
    SubtlvsAdminGroup OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsAdminGroup

    // Adjacency Segment-IDs List.
    SubtlvsLanAdjacencySids OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsLanAdjacencySids

    // This container defines sub-TLV 14.
    SubtlvsExtendedAdminGroup OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsExtendedAdminGroup
}

func (mtIsnNeighborsSubtlv *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv) GetEntityData() *types.CommonEntityData {
    mtIsnNeighborsSubtlv.EntityData.YFilter = mtIsnNeighborsSubtlv.YFilter
    mtIsnNeighborsSubtlv.EntityData.YangName = "mt-isn-neighbors-subtlv"
    mtIsnNeighborsSubtlv.EntityData.BundleName = "cisco_ios_xr"
    mtIsnNeighborsSubtlv.EntityData.ParentYangName = "mt-isn-neighbors-subtlvs"
    mtIsnNeighborsSubtlv.EntityData.SegmentPath = "mt-isn-neighbors-subtlv" + types.AddKeyToken(mtIsnNeighborsSubtlv.Type, "type")
    mtIsnNeighborsSubtlv.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/" + mtIsnNeighborsSubtlv.EntityData.SegmentPath
    mtIsnNeighborsSubtlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIsnNeighborsSubtlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIsnNeighborsSubtlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIsnNeighborsSubtlv.EntityData.Children = types.NewOrderedMap()
    mtIsnNeighborsSubtlv.EntityData.Children.Append("subtlvs-ipv6-neighbor-address", types.YChild{"SubtlvsIpv6NeighborAddress", &mtIsnNeighborsSubtlv.SubtlvsIpv6NeighborAddress})
    mtIsnNeighborsSubtlv.EntityData.Children.Append("subtlvs-ipv4-interface-address", types.YChild{"SubtlvsIpv4InterfaceAddress", &mtIsnNeighborsSubtlv.SubtlvsIpv4InterfaceAddress})
    mtIsnNeighborsSubtlv.EntityData.Children.Append("subtlvs-max-reservable-link-bandwidth", types.YChild{"SubtlvsMaxReservableLinkBandwidth", &mtIsnNeighborsSubtlv.SubtlvsMaxReservableLinkBandwidth})
    mtIsnNeighborsSubtlv.EntityData.Children.Append("subtlvs-max-link-bandwidth", types.YChild{"SubtlvsMaxLinkBandwidth", &mtIsnNeighborsSubtlv.SubtlvsMaxLinkBandwidth})
    mtIsnNeighborsSubtlv.EntityData.Children.Append("subtlvs-adjacency-sids", types.YChild{"SubtlvsAdjacencySids", &mtIsnNeighborsSubtlv.SubtlvsAdjacencySids})
    mtIsnNeighborsSubtlv.EntityData.Children.Append("subtlvs-bandwidth-constraints", types.YChild{"SubtlvsBandwidthConstraints", &mtIsnNeighborsSubtlv.SubtlvsBandwidthConstraints})
    mtIsnNeighborsSubtlv.EntityData.Children.Append("subtlvs-unreserved-bandwidths", types.YChild{"SubtlvsUnreservedBandwidths", &mtIsnNeighborsSubtlv.SubtlvsUnreservedBandwidths})
    mtIsnNeighborsSubtlv.EntityData.Children.Append("subtlvs-ipv4-neighbor-address", types.YChild{"SubtlvsIpv4NeighborAddress", &mtIsnNeighborsSubtlv.SubtlvsIpv4NeighborAddress})
    mtIsnNeighborsSubtlv.EntityData.Children.Append("subtlvs-te-default-metric", types.YChild{"SubtlvsTeDefaultMetric", &mtIsnNeighborsSubtlv.SubtlvsTeDefaultMetric})
    mtIsnNeighborsSubtlv.EntityData.Children.Append("subtlvs-ipv6-interface-address", types.YChild{"SubtlvsIpv6InterfaceAddress", &mtIsnNeighborsSubtlv.SubtlvsIpv6InterfaceAddress})
    mtIsnNeighborsSubtlv.EntityData.Children.Append("subtlvs-admin-group", types.YChild{"SubtlvsAdminGroup", &mtIsnNeighborsSubtlv.SubtlvsAdminGroup})
    mtIsnNeighborsSubtlv.EntityData.Children.Append("subtlvs-lan-adjacency-sids", types.YChild{"SubtlvsLanAdjacencySids", &mtIsnNeighborsSubtlv.SubtlvsLanAdjacencySids})
    mtIsnNeighborsSubtlv.EntityData.Children.Append("subtlvs-extended-admin-group", types.YChild{"SubtlvsExtendedAdminGroup", &mtIsnNeighborsSubtlv.SubtlvsExtendedAdminGroup})
    mtIsnNeighborsSubtlv.EntityData.Leafs = types.NewOrderedMap()
    mtIsnNeighborsSubtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", mtIsnNeighborsSubtlv.Type})

    mtIsnNeighborsSubtlv.EntityData.YListKeys = []string {"Type"}

    return &(mtIsnNeighborsSubtlv.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv6NeighborAddress
// This container defines sub-TLV
// 13
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv6NeighborAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 13.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv6NeighborAddress_State
}

func (subtlvsIpv6NeighborAddress *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv6NeighborAddress) GetEntityData() *types.CommonEntityData {
    subtlvsIpv6NeighborAddress.EntityData.YFilter = subtlvsIpv6NeighborAddress.YFilter
    subtlvsIpv6NeighborAddress.EntityData.YangName = "subtlvs-ipv6-neighbor-address"
    subtlvsIpv6NeighborAddress.EntityData.BundleName = "cisco_ios_xr"
    subtlvsIpv6NeighborAddress.EntityData.ParentYangName = "mt-isn-neighbors-subtlv"
    subtlvsIpv6NeighborAddress.EntityData.SegmentPath = "subtlvs-ipv6-neighbor-address"
    subtlvsIpv6NeighborAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/" + subtlvsIpv6NeighborAddress.EntityData.SegmentPath
    subtlvsIpv6NeighborAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvsIpv6NeighborAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvsIpv6NeighborAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvsIpv6NeighborAddress.EntityData.Children = types.NewOrderedMap()
    subtlvsIpv6NeighborAddress.EntityData.Children.Append("state", types.YChild{"State", &subtlvsIpv6NeighborAddress.State})
    subtlvsIpv6NeighborAddress.EntityData.Leafs = types.NewOrderedMap()

    subtlvsIpv6NeighborAddress.EntityData.YListKeys = []string {}

    return &(subtlvsIpv6NeighborAddress.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv6NeighborAddress_State
// State parameters of sub-TLV 13
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv6NeighborAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Contains a 16-octet IPv6 address for a neighboring router on the link
    // described by the (main) TLV. The type is slice of string.
    Ipv6NeighborAddress []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv6NeighborAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "subtlvs-ipv6-neighbor-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/subtlvs-ipv6-neighbor-address/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv6-neighbor-address", types.YLeaf{"Ipv6NeighborAddress", state.Ipv6NeighborAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv4InterfaceAddress
// This container defines sub-TLV 6
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv4InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 6.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv4InterfaceAddress_State
}

func (subtlvsIpv4InterfaceAddress *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv4InterfaceAddress) GetEntityData() *types.CommonEntityData {
    subtlvsIpv4InterfaceAddress.EntityData.YFilter = subtlvsIpv4InterfaceAddress.YFilter
    subtlvsIpv4InterfaceAddress.EntityData.YangName = "subtlvs-ipv4-interface-address"
    subtlvsIpv4InterfaceAddress.EntityData.BundleName = "cisco_ios_xr"
    subtlvsIpv4InterfaceAddress.EntityData.ParentYangName = "mt-isn-neighbors-subtlv"
    subtlvsIpv4InterfaceAddress.EntityData.SegmentPath = "subtlvs-ipv4-interface-address"
    subtlvsIpv4InterfaceAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/" + subtlvsIpv4InterfaceAddress.EntityData.SegmentPath
    subtlvsIpv4InterfaceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvsIpv4InterfaceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvsIpv4InterfaceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvsIpv4InterfaceAddress.EntityData.Children = types.NewOrderedMap()
    subtlvsIpv4InterfaceAddress.EntityData.Children.Append("state", types.YChild{"State", &subtlvsIpv4InterfaceAddress.State})
    subtlvsIpv4InterfaceAddress.EntityData.Leafs = types.NewOrderedMap()

    subtlvsIpv4InterfaceAddress.EntityData.YListKeys = []string {}

    return &(subtlvsIpv4InterfaceAddress.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv4InterfaceAddress_State
// State parameters of sub-TLV 6
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv4InterfaceAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A 4-octet IPv4 address for the interface described by the (main) TLV. The
    // type is slice of string.
    Ipv4InterfaceAddress []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv4InterfaceAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "subtlvs-ipv4-interface-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/subtlvs-ipv4-interface-address/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv4-interface-address", types.YLeaf{"Ipv4InterfaceAddress", state.Ipv4InterfaceAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsMaxReservableLinkBandwidth
// This container defines sub-TLV
// 10
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsMaxReservableLinkBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 10.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsMaxReservableLinkBandwidth_State
}

func (subtlvsMaxReservableLinkBandwidth *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsMaxReservableLinkBandwidth) GetEntityData() *types.CommonEntityData {
    subtlvsMaxReservableLinkBandwidth.EntityData.YFilter = subtlvsMaxReservableLinkBandwidth.YFilter
    subtlvsMaxReservableLinkBandwidth.EntityData.YangName = "subtlvs-max-reservable-link-bandwidth"
    subtlvsMaxReservableLinkBandwidth.EntityData.BundleName = "cisco_ios_xr"
    subtlvsMaxReservableLinkBandwidth.EntityData.ParentYangName = "mt-isn-neighbors-subtlv"
    subtlvsMaxReservableLinkBandwidth.EntityData.SegmentPath = "subtlvs-max-reservable-link-bandwidth"
    subtlvsMaxReservableLinkBandwidth.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/" + subtlvsMaxReservableLinkBandwidth.EntityData.SegmentPath
    subtlvsMaxReservableLinkBandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvsMaxReservableLinkBandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvsMaxReservableLinkBandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvsMaxReservableLinkBandwidth.EntityData.Children = types.NewOrderedMap()
    subtlvsMaxReservableLinkBandwidth.EntityData.Children.Append("state", types.YChild{"State", &subtlvsMaxReservableLinkBandwidth.State})
    subtlvsMaxReservableLinkBandwidth.EntityData.Leafs = types.NewOrderedMap()

    subtlvsMaxReservableLinkBandwidth.EntityData.YListKeys = []string {}

    return &(subtlvsMaxReservableLinkBandwidth.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsMaxReservableLinkBandwidth_State
// State parameters of sub-TLV 10
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsMaxReservableLinkBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum amount of bandwidth that can be reserved in this direction on
    // this link. The type is string.
    MaxReservableLinkBandwidth interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsMaxReservableLinkBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "subtlvs-max-reservable-link-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/subtlvs-max-reservable-link-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-reservable-link-bandwidth", types.YLeaf{"MaxReservableLinkBandwidth", state.MaxReservableLinkBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsMaxLinkBandwidth
// This container defines sub-TLV 9
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsMaxLinkBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 9.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsMaxLinkBandwidth_State
}

func (subtlvsMaxLinkBandwidth *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsMaxLinkBandwidth) GetEntityData() *types.CommonEntityData {
    subtlvsMaxLinkBandwidth.EntityData.YFilter = subtlvsMaxLinkBandwidth.YFilter
    subtlvsMaxLinkBandwidth.EntityData.YangName = "subtlvs-max-link-bandwidth"
    subtlvsMaxLinkBandwidth.EntityData.BundleName = "cisco_ios_xr"
    subtlvsMaxLinkBandwidth.EntityData.ParentYangName = "mt-isn-neighbors-subtlv"
    subtlvsMaxLinkBandwidth.EntityData.SegmentPath = "subtlvs-max-link-bandwidth"
    subtlvsMaxLinkBandwidth.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/" + subtlvsMaxLinkBandwidth.EntityData.SegmentPath
    subtlvsMaxLinkBandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvsMaxLinkBandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvsMaxLinkBandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvsMaxLinkBandwidth.EntityData.Children = types.NewOrderedMap()
    subtlvsMaxLinkBandwidth.EntityData.Children.Append("state", types.YChild{"State", &subtlvsMaxLinkBandwidth.State})
    subtlvsMaxLinkBandwidth.EntityData.Leafs = types.NewOrderedMap()

    subtlvsMaxLinkBandwidth.EntityData.YListKeys = []string {}

    return &(subtlvsMaxLinkBandwidth.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsMaxLinkBandwidth_State
// State parameters of sub-TLV 9
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsMaxLinkBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum bandwidth that can be used on this link in this direction (from
    // the system originating the LSP to its neighbors). The type is string.
    MaxLinkBandwidth interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsMaxLinkBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "subtlvs-max-link-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/subtlvs-max-link-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-link-bandwidth", types.YLeaf{"MaxLinkBandwidth", state.MaxLinkBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsAdjacencySids
// Adjacency Segment-IDs List
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsAdjacencySids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency Segment-IDs List. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsAdjacencySids_SubtlvsAdjacencySid.
    SubtlvsAdjacencySid []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsAdjacencySids_SubtlvsAdjacencySid
}

func (subtlvsAdjacencySids *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsAdjacencySids) GetEntityData() *types.CommonEntityData {
    subtlvsAdjacencySids.EntityData.YFilter = subtlvsAdjacencySids.YFilter
    subtlvsAdjacencySids.EntityData.YangName = "subtlvs-adjacency-sids"
    subtlvsAdjacencySids.EntityData.BundleName = "cisco_ios_xr"
    subtlvsAdjacencySids.EntityData.ParentYangName = "mt-isn-neighbors-subtlv"
    subtlvsAdjacencySids.EntityData.SegmentPath = "subtlvs-adjacency-sids"
    subtlvsAdjacencySids.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/" + subtlvsAdjacencySids.EntityData.SegmentPath
    subtlvsAdjacencySids.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvsAdjacencySids.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvsAdjacencySids.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvsAdjacencySids.EntityData.Children = types.NewOrderedMap()
    subtlvsAdjacencySids.EntityData.Children.Append("subtlvs-adjacency-sid", types.YChild{"SubtlvsAdjacencySid", nil})
    for i := range subtlvsAdjacencySids.SubtlvsAdjacencySid {
        subtlvsAdjacencySids.EntityData.Children.Append(types.GetSegmentPath(subtlvsAdjacencySids.SubtlvsAdjacencySid[i]), types.YChild{"SubtlvsAdjacencySid", subtlvsAdjacencySids.SubtlvsAdjacencySid[i]})
    }
    subtlvsAdjacencySids.EntityData.Leafs = types.NewOrderedMap()

    subtlvsAdjacencySids.EntityData.YListKeys = []string {}

    return &(subtlvsAdjacencySids.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsAdjacencySids_SubtlvsAdjacencySid
// Adjacency Segment-IDs List
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsAdjacencySids_SubtlvsAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the value of the Adjacency-SID. The
    // type is interface{} with range: 0..4294967295.
    Value interface{}

    // State parameters of Adjacency-SID.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsAdjacencySids_SubtlvsAdjacencySid_State
}

func (subtlvsAdjacencySid *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsAdjacencySids_SubtlvsAdjacencySid) GetEntityData() *types.CommonEntityData {
    subtlvsAdjacencySid.EntityData.YFilter = subtlvsAdjacencySid.YFilter
    subtlvsAdjacencySid.EntityData.YangName = "subtlvs-adjacency-sid"
    subtlvsAdjacencySid.EntityData.BundleName = "cisco_ios_xr"
    subtlvsAdjacencySid.EntityData.ParentYangName = "subtlvs-adjacency-sids"
    subtlvsAdjacencySid.EntityData.SegmentPath = "subtlvs-adjacency-sid" + types.AddKeyToken(subtlvsAdjacencySid.Value, "value")
    subtlvsAdjacencySid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/subtlvs-adjacency-sids/" + subtlvsAdjacencySid.EntityData.SegmentPath
    subtlvsAdjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvsAdjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvsAdjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvsAdjacencySid.EntityData.Children = types.NewOrderedMap()
    subtlvsAdjacencySid.EntityData.Children.Append("state", types.YChild{"State", &subtlvsAdjacencySid.State})
    subtlvsAdjacencySid.EntityData.Leafs = types.NewOrderedMap()
    subtlvsAdjacencySid.EntityData.Leafs.Append("value", types.YLeaf{"Value", subtlvsAdjacencySid.Value})

    subtlvsAdjacencySid.EntityData.YListKeys = []string {"Value"}

    return &(subtlvsAdjacencySid.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsAdjacencySids_SubtlvsAdjacencySid_State
// State parameters of Adjacency-SID
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsAdjacencySids_SubtlvsAdjacencySid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Value that represents the weight of the Adj-SID for the purpose of load
    // balancing. The type is interface{} with range: 0..255.
    Weight interface{}

    // Flags associated with Adj-Segment-ID. The type is slice of
    // OpenconfigIsisLspAdjacencySidStateFlagsEnum.
    Flags []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsAdjacencySids_SubtlvsAdjacencySid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "subtlvs-adjacency-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/subtlvs-adjacency-sids/subtlvs-adjacency-sid/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})
    state.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", state.Weight})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsBandwidthConstraints
// List of the Bandwidth
// Constraints sub-TLV instances
// present in the TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsBandwidthConstraints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the Bandwidth Constraints sub-TLV instances present in the TLV. The
    // type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsBandwidthConstraints_SubtlvsBandwidthConstraint.
    SubtlvsBandwidthConstraint []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsBandwidthConstraints_SubtlvsBandwidthConstraint
}

func (subtlvsBandwidthConstraints *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsBandwidthConstraints) GetEntityData() *types.CommonEntityData {
    subtlvsBandwidthConstraints.EntityData.YFilter = subtlvsBandwidthConstraints.YFilter
    subtlvsBandwidthConstraints.EntityData.YangName = "subtlvs-bandwidth-constraints"
    subtlvsBandwidthConstraints.EntityData.BundleName = "cisco_ios_xr"
    subtlvsBandwidthConstraints.EntityData.ParentYangName = "mt-isn-neighbors-subtlv"
    subtlvsBandwidthConstraints.EntityData.SegmentPath = "subtlvs-bandwidth-constraints"
    subtlvsBandwidthConstraints.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/" + subtlvsBandwidthConstraints.EntityData.SegmentPath
    subtlvsBandwidthConstraints.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvsBandwidthConstraints.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvsBandwidthConstraints.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvsBandwidthConstraints.EntityData.Children = types.NewOrderedMap()
    subtlvsBandwidthConstraints.EntityData.Children.Append("subtlvs-bandwidth-constraint", types.YChild{"SubtlvsBandwidthConstraint", nil})
    for i := range subtlvsBandwidthConstraints.SubtlvsBandwidthConstraint {
        subtlvsBandwidthConstraints.EntityData.Children.Append(types.GetSegmentPath(subtlvsBandwidthConstraints.SubtlvsBandwidthConstraint[i]), types.YChild{"SubtlvsBandwidthConstraint", subtlvsBandwidthConstraints.SubtlvsBandwidthConstraint[i]})
    }
    subtlvsBandwidthConstraints.EntityData.Leafs = types.NewOrderedMap()

    subtlvsBandwidthConstraints.EntityData.YListKeys = []string {}

    return &(subtlvsBandwidthConstraints.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsBandwidthConstraints_SubtlvsBandwidthConstraint
// List of the Bandwidth
// Constraints sub-TLV instances
// present in the TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsBandwidthConstraints_SubtlvsBandwidthConstraint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the model ID associated with the
    // instance of the Bandwidth Constraints sub-TLV. The type is interface{} with
    // range: 0..4294967295.
    ModelId interface{}

    // List of the constraints within the Bandwidth Constraints sub-TLV.
    BandwidthConstraintsConstraints OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsBandwidthConstraints_SubtlvsBandwidthConstraint_BandwidthConstraintsConstraints

    // State parameters of IS Extended Reachability sub-TLV 22.
    SubtlvsBandwidthConstraintsState OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsBandwidthConstraints_SubtlvsBandwidthConstraint_SubtlvsBandwidthConstraintsState
}

func (subtlvsBandwidthConstraint *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsBandwidthConstraints_SubtlvsBandwidthConstraint) GetEntityData() *types.CommonEntityData {
    subtlvsBandwidthConstraint.EntityData.YFilter = subtlvsBandwidthConstraint.YFilter
    subtlvsBandwidthConstraint.EntityData.YangName = "subtlvs-bandwidth-constraint"
    subtlvsBandwidthConstraint.EntityData.BundleName = "cisco_ios_xr"
    subtlvsBandwidthConstraint.EntityData.ParentYangName = "subtlvs-bandwidth-constraints"
    subtlvsBandwidthConstraint.EntityData.SegmentPath = "subtlvs-bandwidth-constraint" + types.AddKeyToken(subtlvsBandwidthConstraint.ModelId, "model-id")
    subtlvsBandwidthConstraint.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/subtlvs-bandwidth-constraints/" + subtlvsBandwidthConstraint.EntityData.SegmentPath
    subtlvsBandwidthConstraint.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvsBandwidthConstraint.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvsBandwidthConstraint.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvsBandwidthConstraint.EntityData.Children = types.NewOrderedMap()
    subtlvsBandwidthConstraint.EntityData.Children.Append("bandwidth-constraints-constraints", types.YChild{"BandwidthConstraintsConstraints", &subtlvsBandwidthConstraint.BandwidthConstraintsConstraints})
    subtlvsBandwidthConstraint.EntityData.Children.Append("subtlvs-bandwidth-constraints-state", types.YChild{"SubtlvsBandwidthConstraintsState", &subtlvsBandwidthConstraint.SubtlvsBandwidthConstraintsState})
    subtlvsBandwidthConstraint.EntityData.Leafs = types.NewOrderedMap()
    subtlvsBandwidthConstraint.EntityData.Leafs.Append("model-id", types.YLeaf{"ModelId", subtlvsBandwidthConstraint.ModelId})

    subtlvsBandwidthConstraint.EntityData.YListKeys = []string {"ModelId"}

    return &(subtlvsBandwidthConstraint.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsBandwidthConstraints_SubtlvsBandwidthConstraint_BandwidthConstraintsConstraints
// List of the constraints within
// the Bandwidth Constraints
// sub-TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsBandwidthConstraints_SubtlvsBandwidthConstraint_BandwidthConstraintsConstraints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the constraints within the Bandwidth Constraints sub-TLV. The type
    // is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsBandwidthConstraints_SubtlvsBandwidthConstraint_BandwidthConstraintsConstraints_BandwidthConstraintsConstraint.
    BandwidthConstraintsConstraint []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsBandwidthConstraints_SubtlvsBandwidthConstraint_BandwidthConstraintsConstraints_BandwidthConstraintsConstraint
}

func (bandwidthConstraintsConstraints *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsBandwidthConstraints_SubtlvsBandwidthConstraint_BandwidthConstraintsConstraints) GetEntityData() *types.CommonEntityData {
    bandwidthConstraintsConstraints.EntityData.YFilter = bandwidthConstraintsConstraints.YFilter
    bandwidthConstraintsConstraints.EntityData.YangName = "bandwidth-constraints-constraints"
    bandwidthConstraintsConstraints.EntityData.BundleName = "cisco_ios_xr"
    bandwidthConstraintsConstraints.EntityData.ParentYangName = "subtlvs-bandwidth-constraint"
    bandwidthConstraintsConstraints.EntityData.SegmentPath = "bandwidth-constraints-constraints"
    bandwidthConstraintsConstraints.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/subtlvs-bandwidth-constraints/subtlvs-bandwidth-constraint/" + bandwidthConstraintsConstraints.EntityData.SegmentPath
    bandwidthConstraintsConstraints.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bandwidthConstraintsConstraints.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bandwidthConstraintsConstraints.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bandwidthConstraintsConstraints.EntityData.Children = types.NewOrderedMap()
    bandwidthConstraintsConstraints.EntityData.Children.Append("bandwidth-constraints-constraint", types.YChild{"BandwidthConstraintsConstraint", nil})
    for i := range bandwidthConstraintsConstraints.BandwidthConstraintsConstraint {
        bandwidthConstraintsConstraints.EntityData.Children.Append(types.GetSegmentPath(bandwidthConstraintsConstraints.BandwidthConstraintsConstraint[i]), types.YChild{"BandwidthConstraintsConstraint", bandwidthConstraintsConstraints.BandwidthConstraintsConstraint[i]})
    }
    bandwidthConstraintsConstraints.EntityData.Leafs = types.NewOrderedMap()

    bandwidthConstraintsConstraints.EntityData.YListKeys = []string {}

    return &(bandwidthConstraintsConstraints.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsBandwidthConstraints_SubtlvsBandwidthConstraint_BandwidthConstraintsConstraints_BandwidthConstraintsConstraint
// List of the constraints
// within the Bandwidth
// Constraints sub-TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsBandwidthConstraints_SubtlvsBandwidthConstraint_BandwidthConstraintsConstraints_BandwidthConstraintsConstraint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the unique ID for the BCN level. The
    // type is interface{} with range: 0..4294967295.
    ConstraintId interface{}

    // Operational state parameters of the BCN level.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsBandwidthConstraints_SubtlvsBandwidthConstraint_BandwidthConstraintsConstraints_BandwidthConstraintsConstraint_State
}

func (bandwidthConstraintsConstraint *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsBandwidthConstraints_SubtlvsBandwidthConstraint_BandwidthConstraintsConstraints_BandwidthConstraintsConstraint) GetEntityData() *types.CommonEntityData {
    bandwidthConstraintsConstraint.EntityData.YFilter = bandwidthConstraintsConstraint.YFilter
    bandwidthConstraintsConstraint.EntityData.YangName = "bandwidth-constraints-constraint"
    bandwidthConstraintsConstraint.EntityData.BundleName = "cisco_ios_xr"
    bandwidthConstraintsConstraint.EntityData.ParentYangName = "bandwidth-constraints-constraints"
    bandwidthConstraintsConstraint.EntityData.SegmentPath = "bandwidth-constraints-constraint" + types.AddKeyToken(bandwidthConstraintsConstraint.ConstraintId, "constraint-id")
    bandwidthConstraintsConstraint.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/subtlvs-bandwidth-constraints/subtlvs-bandwidth-constraint/bandwidth-constraints-constraints/" + bandwidthConstraintsConstraint.EntityData.SegmentPath
    bandwidthConstraintsConstraint.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bandwidthConstraintsConstraint.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bandwidthConstraintsConstraint.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bandwidthConstraintsConstraint.EntityData.Children = types.NewOrderedMap()
    bandwidthConstraintsConstraint.EntityData.Children.Append("state", types.YChild{"State", &bandwidthConstraintsConstraint.State})
    bandwidthConstraintsConstraint.EntityData.Leafs = types.NewOrderedMap()
    bandwidthConstraintsConstraint.EntityData.Leafs.Append("constraint-id", types.YLeaf{"ConstraintId", bandwidthConstraintsConstraint.ConstraintId})

    bandwidthConstraintsConstraint.EntityData.YListKeys = []string {"ConstraintId"}

    return &(bandwidthConstraintsConstraint.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsBandwidthConstraints_SubtlvsBandwidthConstraint_BandwidthConstraintsConstraints_BandwidthConstraintsConstraint_State
// Operational state parameters of the BCN level
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsBandwidthConstraints_SubtlvsBandwidthConstraint_BandwidthConstraintsConstraints_BandwidthConstraintsConstraint_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unique reference for the bandwidth constraint level. The type is
    // interface{} with range: 0..4294967295.
    ConstraintId interface{}

    // The bandwidth constraint, expressed as a 32-bit IEEE floating point number
    // expressed in bytes per second. The type is string. Units are byte/s.
    Bandwidth interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsBandwidthConstraints_SubtlvsBandwidthConstraint_BandwidthConstraintsConstraints_BandwidthConstraintsConstraint_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "bandwidth-constraints-constraint"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/subtlvs-bandwidth-constraints/subtlvs-bandwidth-constraint/bandwidth-constraints-constraints/bandwidth-constraints-constraint/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("constraint-id", types.YLeaf{"ConstraintId", state.ConstraintId})
    state.EntityData.Leafs.Append("bandwidth", types.YLeaf{"Bandwidth", state.Bandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsBandwidthConstraints_SubtlvsBandwidthConstraint_SubtlvsBandwidthConstraintsState
// State parameters of IS
// Extended Reachability sub-TLV
// 22
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsBandwidthConstraints_SubtlvsBandwidthConstraint_SubtlvsBandwidthConstraintsState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Identifier for the Bandwidth Constraints  Model currently in use by the LSR
    // initiating the IGP advertisement. The type is interface{} with range:
    // 0..255.
    ModelId interface{}
}

func (subtlvsBandwidthConstraintsState *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsBandwidthConstraints_SubtlvsBandwidthConstraint_SubtlvsBandwidthConstraintsState) GetEntityData() *types.CommonEntityData {
    subtlvsBandwidthConstraintsState.EntityData.YFilter = subtlvsBandwidthConstraintsState.YFilter
    subtlvsBandwidthConstraintsState.EntityData.YangName = "subtlvs-bandwidth-constraints-state"
    subtlvsBandwidthConstraintsState.EntityData.BundleName = "cisco_ios_xr"
    subtlvsBandwidthConstraintsState.EntityData.ParentYangName = "subtlvs-bandwidth-constraint"
    subtlvsBandwidthConstraintsState.EntityData.SegmentPath = "subtlvs-bandwidth-constraints-state"
    subtlvsBandwidthConstraintsState.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/subtlvs-bandwidth-constraints/subtlvs-bandwidth-constraint/" + subtlvsBandwidthConstraintsState.EntityData.SegmentPath
    subtlvsBandwidthConstraintsState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvsBandwidthConstraintsState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvsBandwidthConstraintsState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvsBandwidthConstraintsState.EntityData.Children = types.NewOrderedMap()
    subtlvsBandwidthConstraintsState.EntityData.Leafs = types.NewOrderedMap()
    subtlvsBandwidthConstraintsState.EntityData.Leafs.Append("model-id", types.YLeaf{"ModelId", subtlvsBandwidthConstraintsState.ModelId})

    subtlvsBandwidthConstraintsState.EntityData.YListKeys = []string {}

    return &(subtlvsBandwidthConstraintsState.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsUnreservedBandwidths
// Setup priority (0 through 7) for
// unreserved bandwidth
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsUnreservedBandwidths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Setup priority (0 through 7) for unreserved bandwidth. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsUnreservedBandwidths_SubtlvsUnreservedBandwidth.
    SubtlvsUnreservedBandwidth []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsUnreservedBandwidths_SubtlvsUnreservedBandwidth
}

func (subtlvsUnreservedBandwidths *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsUnreservedBandwidths) GetEntityData() *types.CommonEntityData {
    subtlvsUnreservedBandwidths.EntityData.YFilter = subtlvsUnreservedBandwidths.YFilter
    subtlvsUnreservedBandwidths.EntityData.YangName = "subtlvs-unreserved-bandwidths"
    subtlvsUnreservedBandwidths.EntityData.BundleName = "cisco_ios_xr"
    subtlvsUnreservedBandwidths.EntityData.ParentYangName = "mt-isn-neighbors-subtlv"
    subtlvsUnreservedBandwidths.EntityData.SegmentPath = "subtlvs-unreserved-bandwidths"
    subtlvsUnreservedBandwidths.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/" + subtlvsUnreservedBandwidths.EntityData.SegmentPath
    subtlvsUnreservedBandwidths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvsUnreservedBandwidths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvsUnreservedBandwidths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvsUnreservedBandwidths.EntityData.Children = types.NewOrderedMap()
    subtlvsUnreservedBandwidths.EntityData.Children.Append("subtlvs-unreserved-bandwidth", types.YChild{"SubtlvsUnreservedBandwidth", nil})
    for i := range subtlvsUnreservedBandwidths.SubtlvsUnreservedBandwidth {
        subtlvsUnreservedBandwidths.EntityData.Children.Append(types.GetSegmentPath(subtlvsUnreservedBandwidths.SubtlvsUnreservedBandwidth[i]), types.YChild{"SubtlvsUnreservedBandwidth", subtlvsUnreservedBandwidths.SubtlvsUnreservedBandwidth[i]})
    }
    subtlvsUnreservedBandwidths.EntityData.Leafs = types.NewOrderedMap()

    subtlvsUnreservedBandwidths.EntityData.YListKeys = []string {}

    return &(subtlvsUnreservedBandwidths.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsUnreservedBandwidths_SubtlvsUnreservedBandwidth
// Setup priority (0 through 7)
// for unreserved bandwidth
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsUnreservedBandwidths_SubtlvsUnreservedBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the setup priority to which the
    // unreserved bandwidth corresponds. The type is interface{} with range:
    // 0..4294967295.
    Priority interface{}

    // State parameters of IS Extended Reachability sub-TLV 11.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsUnreservedBandwidths_SubtlvsUnreservedBandwidth_State
}

func (subtlvsUnreservedBandwidth *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsUnreservedBandwidths_SubtlvsUnreservedBandwidth) GetEntityData() *types.CommonEntityData {
    subtlvsUnreservedBandwidth.EntityData.YFilter = subtlvsUnreservedBandwidth.YFilter
    subtlvsUnreservedBandwidth.EntityData.YangName = "subtlvs-unreserved-bandwidth"
    subtlvsUnreservedBandwidth.EntityData.BundleName = "cisco_ios_xr"
    subtlvsUnreservedBandwidth.EntityData.ParentYangName = "subtlvs-unreserved-bandwidths"
    subtlvsUnreservedBandwidth.EntityData.SegmentPath = "subtlvs-unreserved-bandwidth" + types.AddKeyToken(subtlvsUnreservedBandwidth.Priority, "priority")
    subtlvsUnreservedBandwidth.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/subtlvs-unreserved-bandwidths/" + subtlvsUnreservedBandwidth.EntityData.SegmentPath
    subtlvsUnreservedBandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvsUnreservedBandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvsUnreservedBandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvsUnreservedBandwidth.EntityData.Children = types.NewOrderedMap()
    subtlvsUnreservedBandwidth.EntityData.Children.Append("state", types.YChild{"State", &subtlvsUnreservedBandwidth.State})
    subtlvsUnreservedBandwidth.EntityData.Leafs = types.NewOrderedMap()
    subtlvsUnreservedBandwidth.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", subtlvsUnreservedBandwidth.Priority})

    subtlvsUnreservedBandwidth.EntityData.YListKeys = []string {"Priority"}

    return &(subtlvsUnreservedBandwidth.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsUnreservedBandwidths_SubtlvsUnreservedBandwidth_State
// State parameters of IS Extended Reachability
// sub-TLV 11
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsUnreservedBandwidths_SubtlvsUnreservedBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Setup priority level of 0 through 7 to be used by Unreserved Bandwidth
    // sub-TLV 11. The type is interface{} with range: 0..255.
    Priority interface{}

    // The amount of bandwidth reservable in this direction on this link. The type
    // is string.
    UnreservedBandwidth interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsUnreservedBandwidths_SubtlvsUnreservedBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "subtlvs-unreserved-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/subtlvs-unreserved-bandwidths/subtlvs-unreserved-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", state.Priority})
    state.EntityData.Leafs.Append("unreserved-bandwidth", types.YLeaf{"UnreservedBandwidth", state.UnreservedBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv4NeighborAddress
// This container defines sub-TLV 8
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv4NeighborAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 8.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv4NeighborAddress_State
}

func (subtlvsIpv4NeighborAddress *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv4NeighborAddress) GetEntityData() *types.CommonEntityData {
    subtlvsIpv4NeighborAddress.EntityData.YFilter = subtlvsIpv4NeighborAddress.YFilter
    subtlvsIpv4NeighborAddress.EntityData.YangName = "subtlvs-ipv4-neighbor-address"
    subtlvsIpv4NeighborAddress.EntityData.BundleName = "cisco_ios_xr"
    subtlvsIpv4NeighborAddress.EntityData.ParentYangName = "mt-isn-neighbors-subtlv"
    subtlvsIpv4NeighborAddress.EntityData.SegmentPath = "subtlvs-ipv4-neighbor-address"
    subtlvsIpv4NeighborAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/" + subtlvsIpv4NeighborAddress.EntityData.SegmentPath
    subtlvsIpv4NeighborAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvsIpv4NeighborAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvsIpv4NeighborAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvsIpv4NeighborAddress.EntityData.Children = types.NewOrderedMap()
    subtlvsIpv4NeighborAddress.EntityData.Children.Append("state", types.YChild{"State", &subtlvsIpv4NeighborAddress.State})
    subtlvsIpv4NeighborAddress.EntityData.Leafs = types.NewOrderedMap()

    subtlvsIpv4NeighborAddress.EntityData.YListKeys = []string {}

    return &(subtlvsIpv4NeighborAddress.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv4NeighborAddress_State
// State parameters of sub-TLV 8
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv4NeighborAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A single IPv4 address for a neighboring router on this link. The type is
    // slice of string.
    Ipv4NeighborAddress []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv4NeighborAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "subtlvs-ipv4-neighbor-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/subtlvs-ipv4-neighbor-address/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv4-neighbor-address", types.YLeaf{"Ipv4NeighborAddress", state.Ipv4NeighborAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsTeDefaultMetric
// This container defines sub-TLV
// 18
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsTeDefaultMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 18.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsTeDefaultMetric_State
}

func (subtlvsTeDefaultMetric *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsTeDefaultMetric) GetEntityData() *types.CommonEntityData {
    subtlvsTeDefaultMetric.EntityData.YFilter = subtlvsTeDefaultMetric.YFilter
    subtlvsTeDefaultMetric.EntityData.YangName = "subtlvs-te-default-metric"
    subtlvsTeDefaultMetric.EntityData.BundleName = "cisco_ios_xr"
    subtlvsTeDefaultMetric.EntityData.ParentYangName = "mt-isn-neighbors-subtlv"
    subtlvsTeDefaultMetric.EntityData.SegmentPath = "subtlvs-te-default-metric"
    subtlvsTeDefaultMetric.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/" + subtlvsTeDefaultMetric.EntityData.SegmentPath
    subtlvsTeDefaultMetric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvsTeDefaultMetric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvsTeDefaultMetric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvsTeDefaultMetric.EntityData.Children = types.NewOrderedMap()
    subtlvsTeDefaultMetric.EntityData.Children.Append("state", types.YChild{"State", &subtlvsTeDefaultMetric.State})
    subtlvsTeDefaultMetric.EntityData.Leafs = types.NewOrderedMap()

    subtlvsTeDefaultMetric.EntityData.YListKeys = []string {}

    return &(subtlvsTeDefaultMetric.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsTeDefaultMetric_State
// State parameters of sub-TLV 18
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsTeDefaultMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This metric is administratively assigned and can be used to present a
    // differently weighted topology to traffic engineering SPF calculations. The
    // type is interface{} with range: 0..4294967295.
    TeDefaultMetric interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsTeDefaultMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "subtlvs-te-default-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/subtlvs-te-default-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("te-default-metric", types.YLeaf{"TeDefaultMetric", state.TeDefaultMetric})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv6InterfaceAddress
// This container defines sub-TLV
// 12
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv6InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 12.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv6InterfaceAddress_State
}

func (subtlvsIpv6InterfaceAddress *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv6InterfaceAddress) GetEntityData() *types.CommonEntityData {
    subtlvsIpv6InterfaceAddress.EntityData.YFilter = subtlvsIpv6InterfaceAddress.YFilter
    subtlvsIpv6InterfaceAddress.EntityData.YangName = "subtlvs-ipv6-interface-address"
    subtlvsIpv6InterfaceAddress.EntityData.BundleName = "cisco_ios_xr"
    subtlvsIpv6InterfaceAddress.EntityData.ParentYangName = "mt-isn-neighbors-subtlv"
    subtlvsIpv6InterfaceAddress.EntityData.SegmentPath = "subtlvs-ipv6-interface-address"
    subtlvsIpv6InterfaceAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/" + subtlvsIpv6InterfaceAddress.EntityData.SegmentPath
    subtlvsIpv6InterfaceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvsIpv6InterfaceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvsIpv6InterfaceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvsIpv6InterfaceAddress.EntityData.Children = types.NewOrderedMap()
    subtlvsIpv6InterfaceAddress.EntityData.Children.Append("state", types.YChild{"State", &subtlvsIpv6InterfaceAddress.State})
    subtlvsIpv6InterfaceAddress.EntityData.Leafs = types.NewOrderedMap()

    subtlvsIpv6InterfaceAddress.EntityData.YListKeys = []string {}

    return &(subtlvsIpv6InterfaceAddress.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv6InterfaceAddress_State
// State parameters of sub-TLV 12
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv6InterfaceAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Contains a 16-octet IPv6 address for the interface described by the
    // containing  Extended IS Reachability TLV. The type is slice of string.
    Ipv6InterfaceAddress []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsIpv6InterfaceAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "subtlvs-ipv6-interface-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/subtlvs-ipv6-interface-address/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv6-interface-address", types.YLeaf{"Ipv6InterfaceAddress", state.Ipv6InterfaceAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsAdminGroup
// This container defines sub-TLV 3
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsAdminGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 3.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsAdminGroup_State
}

func (subtlvsAdminGroup *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsAdminGroup) GetEntityData() *types.CommonEntityData {
    subtlvsAdminGroup.EntityData.YFilter = subtlvsAdminGroup.YFilter
    subtlvsAdminGroup.EntityData.YangName = "subtlvs-admin-group"
    subtlvsAdminGroup.EntityData.BundleName = "cisco_ios_xr"
    subtlvsAdminGroup.EntityData.ParentYangName = "mt-isn-neighbors-subtlv"
    subtlvsAdminGroup.EntityData.SegmentPath = "subtlvs-admin-group"
    subtlvsAdminGroup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/" + subtlvsAdminGroup.EntityData.SegmentPath
    subtlvsAdminGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvsAdminGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvsAdminGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvsAdminGroup.EntityData.Children = types.NewOrderedMap()
    subtlvsAdminGroup.EntityData.Children.Append("state", types.YChild{"State", &subtlvsAdminGroup.State})
    subtlvsAdminGroup.EntityData.Leafs = types.NewOrderedMap()

    subtlvsAdminGroup.EntityData.YListKeys = []string {}

    return &(subtlvsAdminGroup.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsAdminGroup_State
// State parameters of sub-TLV 3
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsAdminGroup_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The administrative group sub-TLV contains a 4-octet bit mask assigned by
    // the network administrator. The type is slice of interface{} with range:
    // 0..4294967295.
    AdminGroup []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsAdminGroup_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "subtlvs-admin-group"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/subtlvs-admin-group/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("admin-group", types.YLeaf{"AdminGroup", state.AdminGroup})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsLanAdjacencySids
// Adjacency Segment-IDs List
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsLanAdjacencySids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency Segment-IDs List. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsLanAdjacencySids_SubtlvsLanAdjacencySid.
    SubtlvsLanAdjacencySid []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsLanAdjacencySids_SubtlvsLanAdjacencySid
}

func (subtlvsLanAdjacencySids *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsLanAdjacencySids) GetEntityData() *types.CommonEntityData {
    subtlvsLanAdjacencySids.EntityData.YFilter = subtlvsLanAdjacencySids.YFilter
    subtlvsLanAdjacencySids.EntityData.YangName = "subtlvs-lan-adjacency-sids"
    subtlvsLanAdjacencySids.EntityData.BundleName = "cisco_ios_xr"
    subtlvsLanAdjacencySids.EntityData.ParentYangName = "mt-isn-neighbors-subtlv"
    subtlvsLanAdjacencySids.EntityData.SegmentPath = "subtlvs-lan-adjacency-sids"
    subtlvsLanAdjacencySids.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/" + subtlvsLanAdjacencySids.EntityData.SegmentPath
    subtlvsLanAdjacencySids.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvsLanAdjacencySids.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvsLanAdjacencySids.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvsLanAdjacencySids.EntityData.Children = types.NewOrderedMap()
    subtlvsLanAdjacencySids.EntityData.Children.Append("subtlvs-lan-adjacency-sid", types.YChild{"SubtlvsLanAdjacencySid", nil})
    for i := range subtlvsLanAdjacencySids.SubtlvsLanAdjacencySid {
        subtlvsLanAdjacencySids.EntityData.Children.Append(types.GetSegmentPath(subtlvsLanAdjacencySids.SubtlvsLanAdjacencySid[i]), types.YChild{"SubtlvsLanAdjacencySid", subtlvsLanAdjacencySids.SubtlvsLanAdjacencySid[i]})
    }
    subtlvsLanAdjacencySids.EntityData.Leafs = types.NewOrderedMap()

    subtlvsLanAdjacencySids.EntityData.YListKeys = []string {}

    return &(subtlvsLanAdjacencySids.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsLanAdjacencySids_SubtlvsLanAdjacencySid
// Adjacency Segment-IDs List
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsLanAdjacencySids_SubtlvsLanAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the value of the LAN Adjacency-SID.
    // The type is interface{} with range: 0..4294967295.
    Value interface{}

    // State parameters of LAN Adjacency-SID.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsLanAdjacencySids_SubtlvsLanAdjacencySid_State
}

func (subtlvsLanAdjacencySid *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsLanAdjacencySids_SubtlvsLanAdjacencySid) GetEntityData() *types.CommonEntityData {
    subtlvsLanAdjacencySid.EntityData.YFilter = subtlvsLanAdjacencySid.YFilter
    subtlvsLanAdjacencySid.EntityData.YangName = "subtlvs-lan-adjacency-sid"
    subtlvsLanAdjacencySid.EntityData.BundleName = "cisco_ios_xr"
    subtlvsLanAdjacencySid.EntityData.ParentYangName = "subtlvs-lan-adjacency-sids"
    subtlvsLanAdjacencySid.EntityData.SegmentPath = "subtlvs-lan-adjacency-sid" + types.AddKeyToken(subtlvsLanAdjacencySid.Value, "value")
    subtlvsLanAdjacencySid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/subtlvs-lan-adjacency-sids/" + subtlvsLanAdjacencySid.EntityData.SegmentPath
    subtlvsLanAdjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvsLanAdjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvsLanAdjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvsLanAdjacencySid.EntityData.Children = types.NewOrderedMap()
    subtlvsLanAdjacencySid.EntityData.Children.Append("state", types.YChild{"State", &subtlvsLanAdjacencySid.State})
    subtlvsLanAdjacencySid.EntityData.Leafs = types.NewOrderedMap()
    subtlvsLanAdjacencySid.EntityData.Leafs.Append("value", types.YLeaf{"Value", subtlvsLanAdjacencySid.Value})

    subtlvsLanAdjacencySid.EntityData.YListKeys = []string {"Value"}

    return &(subtlvsLanAdjacencySid.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsLanAdjacencySids_SubtlvsLanAdjacencySid_State
// State parameters of LAN Adjacency-SID
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsLanAdjacencySids_SubtlvsLanAdjacencySid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LAN Adjacency-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Value that represents the weight of the Adj-SID for the purpose of load
    // balancing. The type is interface{} with range: 0..255.
    Weight interface{}

    // System ID of the neighbor associated with the LAN- Adj-Segment-ID value.
    // The type is string.
    NeighborId interface{}

    // Flags associated with LAN-Adj-Segment-ID. The type is slice of
    // OpenconfigIsisLspLanAdjacencySidStateFlagsEnum.
    Flags []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsLanAdjacencySids_SubtlvsLanAdjacencySid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "subtlvs-lan-adjacency-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/subtlvs-lan-adjacency-sids/subtlvs-lan-adjacency-sid/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})
    state.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", state.Weight})
    state.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", state.NeighborId})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsExtendedAdminGroup
// This container defines sub-TLV
// 14
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsExtendedAdminGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 14.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsExtendedAdminGroup_State
}

func (subtlvsExtendedAdminGroup *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsExtendedAdminGroup) GetEntityData() *types.CommonEntityData {
    subtlvsExtendedAdminGroup.EntityData.YFilter = subtlvsExtendedAdminGroup.YFilter
    subtlvsExtendedAdminGroup.EntityData.YangName = "subtlvs-extended-admin-group"
    subtlvsExtendedAdminGroup.EntityData.BundleName = "cisco_ios_xr"
    subtlvsExtendedAdminGroup.EntityData.ParentYangName = "mt-isn-neighbors-subtlv"
    subtlvsExtendedAdminGroup.EntityData.SegmentPath = "subtlvs-extended-admin-group"
    subtlvsExtendedAdminGroup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/" + subtlvsExtendedAdminGroup.EntityData.SegmentPath
    subtlvsExtendedAdminGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvsExtendedAdminGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvsExtendedAdminGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvsExtendedAdminGroup.EntityData.Children = types.NewOrderedMap()
    subtlvsExtendedAdminGroup.EntityData.Children.Append("state", types.YChild{"State", &subtlvsExtendedAdminGroup.State})
    subtlvsExtendedAdminGroup.EntityData.Leafs = types.NewOrderedMap()

    subtlvsExtendedAdminGroup.EntityData.YListKeys = []string {}

    return &(subtlvsExtendedAdminGroup.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsExtendedAdminGroup_State
// State parameters of sub-TLV 14
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsExtendedAdminGroup_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The extended-admin-group sub-TLV is used in addition to the Administrative
    // Groups when it is desirable to make more than 32 colors available for
    // advertisement in a network. The type is slice of interface{} with range:
    // 0..4294967295.
    ExtendedAdminGroup []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsSubtlvs_MtIsnNeighborsSubtlv_SubtlvsExtendedAdminGroup_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "subtlvs-extended-admin-group"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-subtlvs/mt-isn-neighbors-subtlv/subtlvs-extended-admin-group/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("extended-admin-group", types.YLeaf{"ExtendedAdminGroup", state.ExtendedAdminGroup})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsState
// State parameters of MT neighbor
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Identifier of a topology being announced. The type is interface{} with
    // range: 0..65535.
    MtId interface{}

    // System-id of the IS neighbor. The type is string.
    SystemId interface{}

    // ISIS metric value. The type is interface{} with range: 0..4294967295.
    Metric interface{}
}

func (mtIsnNeighborsState *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsState) GetEntityData() *types.CommonEntityData {
    mtIsnNeighborsState.EntityData.YFilter = mtIsnNeighborsState.YFilter
    mtIsnNeighborsState.EntityData.YangName = "mt-isn-neighbors-state"
    mtIsnNeighborsState.EntityData.BundleName = "cisco_ios_xr"
    mtIsnNeighborsState.EntityData.ParentYangName = "mt-isn-neighbor"
    mtIsnNeighborsState.EntityData.SegmentPath = "mt-isn-neighbors-state"
    mtIsnNeighborsState.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/" + mtIsnNeighborsState.EntityData.SegmentPath
    mtIsnNeighborsState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIsnNeighborsState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIsnNeighborsState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIsnNeighborsState.EntityData.Children = types.NewOrderedMap()
    mtIsnNeighborsState.EntityData.Leafs = types.NewOrderedMap()
    mtIsnNeighborsState.EntityData.Leafs.Append("mt-id", types.YLeaf{"MtId", mtIsnNeighborsState.MtId})
    mtIsnNeighborsState.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", mtIsnNeighborsState.SystemId})
    mtIsnNeighborsState.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", mtIsnNeighborsState.Metric})

    mtIsnNeighborsState.EntityData.YListKeys = []string {}

    return &(mtIsnNeighborsState.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsUndefinedSubtlvs
// Sub-TLVs that are not defined in
// the model or not recognised by
// system
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsUndefinedSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub-TLVs that are not defined in the model or not recognised by system. The
    // type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsUndefinedSubtlvs_MtIsnNeighborsUndefinedSubtlv.
    MtIsnNeighborsUndefinedSubtlv []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsUndefinedSubtlvs_MtIsnNeighborsUndefinedSubtlv
}

func (mtIsnNeighborsUndefinedSubtlvs *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsUndefinedSubtlvs) GetEntityData() *types.CommonEntityData {
    mtIsnNeighborsUndefinedSubtlvs.EntityData.YFilter = mtIsnNeighborsUndefinedSubtlvs.YFilter
    mtIsnNeighborsUndefinedSubtlvs.EntityData.YangName = "mt-isn-neighbors-undefined-subtlvs"
    mtIsnNeighborsUndefinedSubtlvs.EntityData.BundleName = "cisco_ios_xr"
    mtIsnNeighborsUndefinedSubtlvs.EntityData.ParentYangName = "mt-isn-neighbor"
    mtIsnNeighborsUndefinedSubtlvs.EntityData.SegmentPath = "mt-isn-neighbors-undefined-subtlvs"
    mtIsnNeighborsUndefinedSubtlvs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/" + mtIsnNeighborsUndefinedSubtlvs.EntityData.SegmentPath
    mtIsnNeighborsUndefinedSubtlvs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIsnNeighborsUndefinedSubtlvs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIsnNeighborsUndefinedSubtlvs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIsnNeighborsUndefinedSubtlvs.EntityData.Children = types.NewOrderedMap()
    mtIsnNeighborsUndefinedSubtlvs.EntityData.Children.Append("mt-isn-neighbors-undefined-subtlv", types.YChild{"MtIsnNeighborsUndefinedSubtlv", nil})
    for i := range mtIsnNeighborsUndefinedSubtlvs.MtIsnNeighborsUndefinedSubtlv {
        mtIsnNeighborsUndefinedSubtlvs.EntityData.Children.Append(types.GetSegmentPath(mtIsnNeighborsUndefinedSubtlvs.MtIsnNeighborsUndefinedSubtlv[i]), types.YChild{"MtIsnNeighborsUndefinedSubtlv", mtIsnNeighborsUndefinedSubtlvs.MtIsnNeighborsUndefinedSubtlv[i]})
    }
    mtIsnNeighborsUndefinedSubtlvs.EntityData.Leafs = types.NewOrderedMap()

    mtIsnNeighborsUndefinedSubtlvs.EntityData.YListKeys = []string {}

    return &(mtIsnNeighborsUndefinedSubtlvs.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsUndefinedSubtlvs_MtIsnNeighborsUndefinedSubtlv
// Sub-TLVs that are not defined in
// the model or not recognised by
// system
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsUndefinedSubtlvs_MtIsnNeighborsUndefinedSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the type of the undefined sub-TLV.
    // The type is interface{} with range: 0..4294967295.
    Type interface{}

    // State parameters of the undefined sub-TLV.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsUndefinedSubtlvs_MtIsnNeighborsUndefinedSubtlv_State
}

func (mtIsnNeighborsUndefinedSubtlv *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsUndefinedSubtlvs_MtIsnNeighborsUndefinedSubtlv) GetEntityData() *types.CommonEntityData {
    mtIsnNeighborsUndefinedSubtlv.EntityData.YFilter = mtIsnNeighborsUndefinedSubtlv.YFilter
    mtIsnNeighborsUndefinedSubtlv.EntityData.YangName = "mt-isn-neighbors-undefined-subtlv"
    mtIsnNeighborsUndefinedSubtlv.EntityData.BundleName = "cisco_ios_xr"
    mtIsnNeighborsUndefinedSubtlv.EntityData.ParentYangName = "mt-isn-neighbors-undefined-subtlvs"
    mtIsnNeighborsUndefinedSubtlv.EntityData.SegmentPath = "mt-isn-neighbors-undefined-subtlv" + types.AddKeyToken(mtIsnNeighborsUndefinedSubtlv.Type, "type")
    mtIsnNeighborsUndefinedSubtlv.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-undefined-subtlvs/" + mtIsnNeighborsUndefinedSubtlv.EntityData.SegmentPath
    mtIsnNeighborsUndefinedSubtlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIsnNeighborsUndefinedSubtlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIsnNeighborsUndefinedSubtlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIsnNeighborsUndefinedSubtlv.EntityData.Children = types.NewOrderedMap()
    mtIsnNeighborsUndefinedSubtlv.EntityData.Children.Append("state", types.YChild{"State", &mtIsnNeighborsUndefinedSubtlv.State})
    mtIsnNeighborsUndefinedSubtlv.EntityData.Leafs = types.NewOrderedMap()
    mtIsnNeighborsUndefinedSubtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", mtIsnNeighborsUndefinedSubtlv.Type})

    mtIsnNeighborsUndefinedSubtlv.EntityData.YListKeys = []string {"Type"}

    return &(mtIsnNeighborsUndefinedSubtlv.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsUndefinedSubtlvs_MtIsnNeighborsUndefinedSubtlv_State
// State parameters of the undefined sub-TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsUndefinedSubtlvs_MtIsnNeighborsUndefinedSubtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIsn_MtIsnNeighbors_MtIsnNeighbor_MtIsnNeighborsUndefinedSubtlvs_MtIsnNeighborsUndefinedSubtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "mt-isn-neighbors-undefined-subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-isn/mt-isn-neighbors/mt-isn-neighbor/mt-isn-neighbors-undefined-subtlvs/mt-isn-neighbors-undefined-subtlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("length", types.YLeaf{"Length", state.Length})
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Srlgs
// Instance of the IPv6 SRLG TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Srlgs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Instance of the IPv6 SRLG TLV. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Srlgs_Ipv6Srlg.
    Ipv6Srlg []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Srlgs_Ipv6Srlg
}

func (ipv6Srlgs *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Srlgs) GetEntityData() *types.CommonEntityData {
    ipv6Srlgs.EntityData.YFilter = ipv6Srlgs.YFilter
    ipv6Srlgs.EntityData.YangName = "ipv6-srlgs"
    ipv6Srlgs.EntityData.BundleName = "cisco_ios_xr"
    ipv6Srlgs.EntityData.ParentYangName = "tlvs"
    ipv6Srlgs.EntityData.SegmentPath = "ipv6-srlgs"
    ipv6Srlgs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/" + ipv6Srlgs.EntityData.SegmentPath
    ipv6Srlgs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Srlgs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Srlgs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Srlgs.EntityData.Children = types.NewOrderedMap()
    ipv6Srlgs.EntityData.Children.Append("ipv6-srlg", types.YChild{"Ipv6Srlg", nil})
    for i := range ipv6Srlgs.Ipv6Srlg {
        ipv6Srlgs.EntityData.Children.Append(types.GetSegmentPath(ipv6Srlgs.Ipv6Srlg[i]), types.YChild{"Ipv6Srlg", ipv6Srlgs.Ipv6Srlg[i]})
    }
    ipv6Srlgs.EntityData.Leafs = types.NewOrderedMap()

    ipv6Srlgs.EntityData.YListKeys = []string {}

    return &(ipv6Srlgs.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Srlgs_Ipv6Srlg
// Instance of the IPv6 SRLG TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Srlgs_Ipv6Srlg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the instance number of the IPv6
    // Shared Risk Link Group (SRLG) TLV. The type is interface{} with range:
    // 0..4294967295.
    InstanceNumber interface{}

    // State parameters of TLV 139.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Srlgs_Ipv6Srlg_State
}

func (ipv6Srlg *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Srlgs_Ipv6Srlg) GetEntityData() *types.CommonEntityData {
    ipv6Srlg.EntityData.YFilter = ipv6Srlg.YFilter
    ipv6Srlg.EntityData.YangName = "ipv6-srlg"
    ipv6Srlg.EntityData.BundleName = "cisco_ios_xr"
    ipv6Srlg.EntityData.ParentYangName = "ipv6-srlgs"
    ipv6Srlg.EntityData.SegmentPath = "ipv6-srlg" + types.AddKeyToken(ipv6Srlg.InstanceNumber, "instance-number")
    ipv6Srlg.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv6-srlgs/" + ipv6Srlg.EntityData.SegmentPath
    ipv6Srlg.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Srlg.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Srlg.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Srlg.EntityData.Children = types.NewOrderedMap()
    ipv6Srlg.EntityData.Children.Append("state", types.YChild{"State", &ipv6Srlg.State})
    ipv6Srlg.EntityData.Leafs = types.NewOrderedMap()
    ipv6Srlg.EntityData.Leafs.Append("instance-number", types.YLeaf{"InstanceNumber", ipv6Srlg.InstanceNumber})

    ipv6Srlg.EntityData.YListKeys = []string {"InstanceNumber"}

    return &(ipv6Srlg.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Srlgs_Ipv6Srlg_State
// State parameters of TLV 139
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Srlgs_Ipv6Srlg_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An arbitrary unsigned 32-bit integer used to disambiguate the instance of
    // TLV 138. The type is interface{} with range: 0..4294967295.
    InstanceNumber interface{}

    // Neighbor system ID. The type is string.
    SystemId interface{}

    // Pseudonode number if the neighbor is on a LAN interface. The type is
    // interface{} with range: 0..255.
    PsnNumber interface{}

    // IPv6 interface address or Link Local Identifier. The type is string.
    Ipv6InterfaceAddress interface{}

    // IPv6 neighbor address or Link Remote Identifier. The type is string.
    Ipv6NeighborAddress interface{}

    // IPv6 SRLG flags. The type is slice of
    // OpenconfigIsisLspIpv6SrlgStateFlagsEnum.
    Flags []interface{}

    // SRLG values. The type is slice of interface{} with range: 0..4294967295.
    SrlgValue []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Srlgs_Ipv6Srlg_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "ipv6-srlg"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv6-srlgs/ipv6-srlg/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("instance-number", types.YLeaf{"InstanceNumber", state.InstanceNumber})
    state.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", state.SystemId})
    state.EntityData.Leafs.Append("psn-number", types.YLeaf{"PsnNumber", state.PsnNumber})
    state.EntityData.Leafs.Append("ipv6-interface-address", types.YLeaf{"Ipv6InterfaceAddress", state.Ipv6InterfaceAddress})
    state.EntityData.Leafs.Append("ipv6-neighbor-address", types.YLeaf{"Ipv6NeighborAddress", state.Ipv6NeighborAddress})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})
    state.EntityData.Leafs.Append("srlg-value", types.YLeaf{"SrlgValue", state.SrlgValue})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_TlvsState
// Operational state parameters relating
// to the specified LSP
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_TlvsState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of TLV being described. The type is string.
    Type interface{}
}

func (tlvsState *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_TlvsState) GetEntityData() *types.CommonEntityData {
    tlvsState.EntityData.YFilter = tlvsState.YFilter
    tlvsState.EntityData.YangName = "tlvs-state"
    tlvsState.EntityData.BundleName = "cisco_ios_xr"
    tlvsState.EntityData.ParentYangName = "tlvs"
    tlvsState.EntityData.SegmentPath = "tlvs-state"
    tlvsState.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/" + tlvsState.EntityData.SegmentPath
    tlvsState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tlvsState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tlvsState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tlvsState.EntityData.Children = types.NewOrderedMap()
    tlvsState.EntityData.Leafs = types.NewOrderedMap()
    tlvsState.EntityData.Leafs.Append("type", types.YLeaf{"Type", tlvsState.Type})

    tlvsState.EntityData.YListKeys = []string {}

    return &(tlvsState.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_PurgeOi
// This container defines ISIS purge TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_PurgeOi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of TLV 13.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_PurgeOi_State
}

func (purgeOi *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_PurgeOi) GetEntityData() *types.CommonEntityData {
    purgeOi.EntityData.YFilter = purgeOi.YFilter
    purgeOi.EntityData.YangName = "purge-oi"
    purgeOi.EntityData.BundleName = "cisco_ios_xr"
    purgeOi.EntityData.ParentYangName = "tlvs"
    purgeOi.EntityData.SegmentPath = "purge-oi"
    purgeOi.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/" + purgeOi.EntityData.SegmentPath
    purgeOi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    purgeOi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    purgeOi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    purgeOi.EntityData.Children = types.NewOrderedMap()
    purgeOi.EntityData.Children.Append("state", types.YChild{"State", &purgeOi.State})
    purgeOi.EntityData.Leafs = types.NewOrderedMap()

    purgeOi.EntityData.YListKeys = []string {}

    return &(purgeOi.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_PurgeOi_State
// State parameters of TLV 13
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_PurgeOi_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of system IDs carried in this TLV. The type is interface{} with
    // range: 0..255.
    SystemIdCount interface{}

    // System ID of the Intermediate System that inserted this TLV. The type is
    // string.
    SourceSystemId interface{}

    // System ID of the Intermediate System from which the purge was received. The
    // type is string.
    ReceivedSystemId interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_PurgeOi_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "purge-oi"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/purge-oi/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("system-id-count", types.YLeaf{"SystemIdCount", state.SystemIdCount})
    state.EntityData.Leafs.Append("source-system-id", types.YLeaf{"SourceSystemId", state.SourceSystemId})
    state.EntityData.Leafs.Append("received-system-id", types.YLeaf{"ReceivedSystemId", state.ReceivedSystemId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_HostName
// This container defines TLV 137
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_HostName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of ISIS TLV 137.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_HostName_State
}

func (hostName *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_HostName) GetEntityData() *types.CommonEntityData {
    hostName.EntityData.YFilter = hostName.YFilter
    hostName.EntityData.YangName = "host-name"
    hostName.EntityData.BundleName = "cisco_ios_xr"
    hostName.EntityData.ParentYangName = "tlvs"
    hostName.EntityData.SegmentPath = "host-name"
    hostName.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/" + hostName.EntityData.SegmentPath
    hostName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hostName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hostName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hostName.EntityData.Children = types.NewOrderedMap()
    hostName.EntityData.Children.Append("state", types.YChild{"State", &hostName.State})
    hostName.EntityData.Leafs = types.NewOrderedMap()

    hostName.EntityData.YListKeys = []string {}

    return &(hostName.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_HostName_State
// State parameters of ISIS TLV 137
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_HostName_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name of the node. The type is slice of string.
    HostName []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_HostName_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "host-name"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/host-name/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("host-name", types.YLeaf{"HostName", state.HostName})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability
// This container defines list of IPv6
// reachability information
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list defines IPv6 extended prefix attributes.
    Ipv6ReachabilityPrefixes OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes
}

func (ipv6Reachability *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability) GetEntityData() *types.CommonEntityData {
    ipv6Reachability.EntityData.YFilter = ipv6Reachability.YFilter
    ipv6Reachability.EntityData.YangName = "ipv6-reachability"
    ipv6Reachability.EntityData.BundleName = "cisco_ios_xr"
    ipv6Reachability.EntityData.ParentYangName = "tlvs"
    ipv6Reachability.EntityData.SegmentPath = "ipv6-reachability"
    ipv6Reachability.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/" + ipv6Reachability.EntityData.SegmentPath
    ipv6Reachability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Reachability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Reachability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Reachability.EntityData.Children = types.NewOrderedMap()
    ipv6Reachability.EntityData.Children.Append("ipv6-reachability-prefixes", types.YChild{"Ipv6ReachabilityPrefixes", &ipv6Reachability.Ipv6ReachabilityPrefixes})
    ipv6Reachability.EntityData.Leafs = types.NewOrderedMap()

    ipv6Reachability.EntityData.YListKeys = []string {}

    return &(ipv6Reachability.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes
// This list defines IPv6 extended
// prefix attributes
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list defines IPv6 extended prefix attributes. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe.
    Ipv6ReachabilityPrefixe []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe
}

func (ipv6ReachabilityPrefixes *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes) GetEntityData() *types.CommonEntityData {
    ipv6ReachabilityPrefixes.EntityData.YFilter = ipv6ReachabilityPrefixes.YFilter
    ipv6ReachabilityPrefixes.EntityData.YangName = "ipv6-reachability-prefixes"
    ipv6ReachabilityPrefixes.EntityData.BundleName = "cisco_ios_xr"
    ipv6ReachabilityPrefixes.EntityData.ParentYangName = "ipv6-reachability"
    ipv6ReachabilityPrefixes.EntityData.SegmentPath = "ipv6-reachability-prefixes"
    ipv6ReachabilityPrefixes.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv6-reachability/" + ipv6ReachabilityPrefixes.EntityData.SegmentPath
    ipv6ReachabilityPrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6ReachabilityPrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6ReachabilityPrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6ReachabilityPrefixes.EntityData.Children = types.NewOrderedMap()
    ipv6ReachabilityPrefixes.EntityData.Children.Append("ipv6-reachability-prefixe", types.YChild{"Ipv6ReachabilityPrefixe", nil})
    for i := range ipv6ReachabilityPrefixes.Ipv6ReachabilityPrefixe {
        ipv6ReachabilityPrefixes.EntityData.Children.Append(types.GetSegmentPath(ipv6ReachabilityPrefixes.Ipv6ReachabilityPrefixe[i]), types.YChild{"Ipv6ReachabilityPrefixe", ipv6ReachabilityPrefixes.Ipv6ReachabilityPrefixe[i]})
    }
    ipv6ReachabilityPrefixes.EntityData.Leafs = types.NewOrderedMap()

    ipv6ReachabilityPrefixes.EntityData.YListKeys = []string {}

    return &(ipv6ReachabilityPrefixes.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe
// This list defines IPv6 extended
// prefix attributes
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the IPv6 prefix that the TLV
    // corresponds to. The type is string.
    Prefix interface{}

    // State parameters of IPv6 prefix attributes.
    Ipv6ReachabilityPrefixesState OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesState

    // List of subTLV types in the LSDB for the specified TLV.
    Ipv6ReachabilityPrefixesSubtlvs OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs

    // Sub-TLVs that are not defined in the model or not recognised by system.
    Ipv6ReachabilityPrefixesUndefinedSubtlvs OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesUndefinedSubtlvs
}

func (ipv6ReachabilityPrefixe *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe) GetEntityData() *types.CommonEntityData {
    ipv6ReachabilityPrefixe.EntityData.YFilter = ipv6ReachabilityPrefixe.YFilter
    ipv6ReachabilityPrefixe.EntityData.YangName = "ipv6-reachability-prefixe"
    ipv6ReachabilityPrefixe.EntityData.BundleName = "cisco_ios_xr"
    ipv6ReachabilityPrefixe.EntityData.ParentYangName = "ipv6-reachability-prefixes"
    ipv6ReachabilityPrefixe.EntityData.SegmentPath = "ipv6-reachability-prefixe" + types.AddKeyToken(ipv6ReachabilityPrefixe.Prefix, "prefix")
    ipv6ReachabilityPrefixe.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv6-reachability/ipv6-reachability-prefixes/" + ipv6ReachabilityPrefixe.EntityData.SegmentPath
    ipv6ReachabilityPrefixe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6ReachabilityPrefixe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6ReachabilityPrefixe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6ReachabilityPrefixe.EntityData.Children = types.NewOrderedMap()
    ipv6ReachabilityPrefixe.EntityData.Children.Append("ipv6-reachability-prefixes-state", types.YChild{"Ipv6ReachabilityPrefixesState", &ipv6ReachabilityPrefixe.Ipv6ReachabilityPrefixesState})
    ipv6ReachabilityPrefixe.EntityData.Children.Append("ipv6-reachability-prefixes-subtlvs", types.YChild{"Ipv6ReachabilityPrefixesSubtlvs", &ipv6ReachabilityPrefixe.Ipv6ReachabilityPrefixesSubtlvs})
    ipv6ReachabilityPrefixe.EntityData.Children.Append("ipv6-reachability-prefixes-undefined-subtlvs", types.YChild{"Ipv6ReachabilityPrefixesUndefinedSubtlvs", &ipv6ReachabilityPrefixe.Ipv6ReachabilityPrefixesUndefinedSubtlvs})
    ipv6ReachabilityPrefixe.EntityData.Leafs = types.NewOrderedMap()
    ipv6ReachabilityPrefixe.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6ReachabilityPrefixe.Prefix})

    ipv6ReachabilityPrefixe.EntityData.YListKeys = []string {"Prefix"}

    return &(ipv6ReachabilityPrefixe.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesState
// State parameters of IPv6 prefix
// attributes
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The up/down bit. The type is bool.
    UpDown interface{}

    // The Sub-TLV present bit. The type is bool.
    Sbit interface{}

    // IPv4 prefix contained within extended reachability TLVs. The type is
    // string.
    Prefix interface{}

    // ISIS metric value. The type is interface{} with range: 0..4294967295.
    Metric interface{}
}

func (ipv6ReachabilityPrefixesState *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesState) GetEntityData() *types.CommonEntityData {
    ipv6ReachabilityPrefixesState.EntityData.YFilter = ipv6ReachabilityPrefixesState.YFilter
    ipv6ReachabilityPrefixesState.EntityData.YangName = "ipv6-reachability-prefixes-state"
    ipv6ReachabilityPrefixesState.EntityData.BundleName = "cisco_ios_xr"
    ipv6ReachabilityPrefixesState.EntityData.ParentYangName = "ipv6-reachability-prefixe"
    ipv6ReachabilityPrefixesState.EntityData.SegmentPath = "ipv6-reachability-prefixes-state"
    ipv6ReachabilityPrefixesState.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv6-reachability/ipv6-reachability-prefixes/ipv6-reachability-prefixe/" + ipv6ReachabilityPrefixesState.EntityData.SegmentPath
    ipv6ReachabilityPrefixesState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6ReachabilityPrefixesState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6ReachabilityPrefixesState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6ReachabilityPrefixesState.EntityData.Children = types.NewOrderedMap()
    ipv6ReachabilityPrefixesState.EntityData.Leafs = types.NewOrderedMap()
    ipv6ReachabilityPrefixesState.EntityData.Leafs.Append("up-down", types.YLeaf{"UpDown", ipv6ReachabilityPrefixesState.UpDown})
    ipv6ReachabilityPrefixesState.EntityData.Leafs.Append("sbit", types.YLeaf{"Sbit", ipv6ReachabilityPrefixesState.Sbit})
    ipv6ReachabilityPrefixesState.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6ReachabilityPrefixesState.Prefix})
    ipv6ReachabilityPrefixesState.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6ReachabilityPrefixesState.Metric})

    ipv6ReachabilityPrefixesState.EntityData.YListKeys = []string {}

    return &(ipv6ReachabilityPrefixesState.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs
// List of subTLV types in the LSDB
// for the specified TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of subTLV types in the LSDB for the specified TLV. The type is slice
    // of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv.
    Ipv6ReachabilityPrefixesSubtlv []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv
}

func (ipv6ReachabilityPrefixesSubtlvs *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs) GetEntityData() *types.CommonEntityData {
    ipv6ReachabilityPrefixesSubtlvs.EntityData.YFilter = ipv6ReachabilityPrefixesSubtlvs.YFilter
    ipv6ReachabilityPrefixesSubtlvs.EntityData.YangName = "ipv6-reachability-prefixes-subtlvs"
    ipv6ReachabilityPrefixesSubtlvs.EntityData.BundleName = "cisco_ios_xr"
    ipv6ReachabilityPrefixesSubtlvs.EntityData.ParentYangName = "ipv6-reachability-prefixe"
    ipv6ReachabilityPrefixesSubtlvs.EntityData.SegmentPath = "ipv6-reachability-prefixes-subtlvs"
    ipv6ReachabilityPrefixesSubtlvs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv6-reachability/ipv6-reachability-prefixes/ipv6-reachability-prefixe/" + ipv6ReachabilityPrefixesSubtlvs.EntityData.SegmentPath
    ipv6ReachabilityPrefixesSubtlvs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6ReachabilityPrefixesSubtlvs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6ReachabilityPrefixesSubtlvs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6ReachabilityPrefixesSubtlvs.EntityData.Children = types.NewOrderedMap()
    ipv6ReachabilityPrefixesSubtlvs.EntityData.Children.Append("ipv6-reachability-prefixes-subtlv", types.YChild{"Ipv6ReachabilityPrefixesSubtlv", nil})
    for i := range ipv6ReachabilityPrefixesSubtlvs.Ipv6ReachabilityPrefixesSubtlv {
        ipv6ReachabilityPrefixesSubtlvs.EntityData.Children.Append(types.GetSegmentPath(ipv6ReachabilityPrefixesSubtlvs.Ipv6ReachabilityPrefixesSubtlv[i]), types.YChild{"Ipv6ReachabilityPrefixesSubtlv", ipv6ReachabilityPrefixesSubtlvs.Ipv6ReachabilityPrefixesSubtlv[i]})
    }
    ipv6ReachabilityPrefixesSubtlvs.EntityData.Leafs = types.NewOrderedMap()

    ipv6ReachabilityPrefixesSubtlvs.EntityData.YListKeys = []string {}

    return &(ipv6ReachabilityPrefixesSubtlvs.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv
// List of subTLV types in the LSDB
// for the specified TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the sub-TLV type. The type is string.
    Type interface{}

    // This container defines sub-TLV 1.
    SubtlvsTag OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsTag

    // This container defines sub-TLV 2.
    SubtlvsTag64 OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsTag64

    // Prefix Segment-ID list.
    SubtlvsPrefixSids OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsPrefixSids

    // This container defines sub-TLV 11.
    SubtlvsIpv4SourceRouterId OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsIpv4SourceRouterId

    // State parameters for a prefix.
    Ipv6ReachabilityPrefixesSubtlvsState OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_Ipv6ReachabilityPrefixesSubtlvsState

    // This container defines sub-TLV 12.
    SubtlvsIpv6SourceRouterId OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsIpv6SourceRouterId

    // This container defines sub-TLV 4.
    SubtlvsFlags OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsFlags
}

func (ipv6ReachabilityPrefixesSubtlv *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv) GetEntityData() *types.CommonEntityData {
    ipv6ReachabilityPrefixesSubtlv.EntityData.YFilter = ipv6ReachabilityPrefixesSubtlv.YFilter
    ipv6ReachabilityPrefixesSubtlv.EntityData.YangName = "ipv6-reachability-prefixes-subtlv"
    ipv6ReachabilityPrefixesSubtlv.EntityData.BundleName = "cisco_ios_xr"
    ipv6ReachabilityPrefixesSubtlv.EntityData.ParentYangName = "ipv6-reachability-prefixes-subtlvs"
    ipv6ReachabilityPrefixesSubtlv.EntityData.SegmentPath = "ipv6-reachability-prefixes-subtlv" + types.AddKeyToken(ipv6ReachabilityPrefixesSubtlv.Type, "type")
    ipv6ReachabilityPrefixesSubtlv.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv6-reachability/ipv6-reachability-prefixes/ipv6-reachability-prefixe/ipv6-reachability-prefixes-subtlvs/" + ipv6ReachabilityPrefixesSubtlv.EntityData.SegmentPath
    ipv6ReachabilityPrefixesSubtlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6ReachabilityPrefixesSubtlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6ReachabilityPrefixesSubtlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6ReachabilityPrefixesSubtlv.EntityData.Children = types.NewOrderedMap()
    ipv6ReachabilityPrefixesSubtlv.EntityData.Children.Append("subtlvs-tag", types.YChild{"SubtlvsTag", &ipv6ReachabilityPrefixesSubtlv.SubtlvsTag})
    ipv6ReachabilityPrefixesSubtlv.EntityData.Children.Append("subtlvs-tag64", types.YChild{"SubtlvsTag64", &ipv6ReachabilityPrefixesSubtlv.SubtlvsTag64})
    ipv6ReachabilityPrefixesSubtlv.EntityData.Children.Append("subtlvs-prefix-sids", types.YChild{"SubtlvsPrefixSids", &ipv6ReachabilityPrefixesSubtlv.SubtlvsPrefixSids})
    ipv6ReachabilityPrefixesSubtlv.EntityData.Children.Append("subtlvs-ipv4-source-router-id", types.YChild{"SubtlvsIpv4SourceRouterId", &ipv6ReachabilityPrefixesSubtlv.SubtlvsIpv4SourceRouterId})
    ipv6ReachabilityPrefixesSubtlv.EntityData.Children.Append("ipv6-reachability-prefixes-subtlvs-state", types.YChild{"Ipv6ReachabilityPrefixesSubtlvsState", &ipv6ReachabilityPrefixesSubtlv.Ipv6ReachabilityPrefixesSubtlvsState})
    ipv6ReachabilityPrefixesSubtlv.EntityData.Children.Append("subtlvs-ipv6-source-router-id", types.YChild{"SubtlvsIpv6SourceRouterId", &ipv6ReachabilityPrefixesSubtlv.SubtlvsIpv6SourceRouterId})
    ipv6ReachabilityPrefixesSubtlv.EntityData.Children.Append("subtlvs-flags", types.YChild{"SubtlvsFlags", &ipv6ReachabilityPrefixesSubtlv.SubtlvsFlags})
    ipv6ReachabilityPrefixesSubtlv.EntityData.Leafs = types.NewOrderedMap()
    ipv6ReachabilityPrefixesSubtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", ipv6ReachabilityPrefixesSubtlv.Type})

    ipv6ReachabilityPrefixesSubtlv.EntityData.YListKeys = []string {"Type"}

    return &(ipv6ReachabilityPrefixesSubtlv.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsTag
// This container defines sub-TLV 1
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsTag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 1.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsTag_State
}

func (subtlvsTag *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsTag) GetEntityData() *types.CommonEntityData {
    subtlvsTag.EntityData.YFilter = subtlvsTag.YFilter
    subtlvsTag.EntityData.YangName = "subtlvs-tag"
    subtlvsTag.EntityData.BundleName = "cisco_ios_xr"
    subtlvsTag.EntityData.ParentYangName = "ipv6-reachability-prefixes-subtlv"
    subtlvsTag.EntityData.SegmentPath = "subtlvs-tag"
    subtlvsTag.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv6-reachability/ipv6-reachability-prefixes/ipv6-reachability-prefixe/ipv6-reachability-prefixes-subtlvs/ipv6-reachability-prefixes-subtlv/" + subtlvsTag.EntityData.SegmentPath
    subtlvsTag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvsTag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvsTag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvsTag.EntityData.Children = types.NewOrderedMap()
    subtlvsTag.EntityData.Children.Append("state", types.YChild{"State", &subtlvsTag.State})
    subtlvsTag.EntityData.Leafs = types.NewOrderedMap()

    subtlvsTag.EntityData.YListKeys = []string {}

    return &(subtlvsTag.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsTag_State
// State parameters of sub-TLV 1
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsTag_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of 32-bit tags associated with the prefix. The type is slice of
    // interface{} with range: 0..4294967295.
    Tag32 []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsTag_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "subtlvs-tag"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv6-reachability/ipv6-reachability-prefixes/ipv6-reachability-prefixe/ipv6-reachability-prefixes-subtlvs/ipv6-reachability-prefixes-subtlv/subtlvs-tag/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("tag32", types.YLeaf{"Tag32", state.Tag32})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsTag64
// This container defines sub-TLV 2
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsTag64 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 2.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsTag64_State
}

func (subtlvsTag64 *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsTag64) GetEntityData() *types.CommonEntityData {
    subtlvsTag64.EntityData.YFilter = subtlvsTag64.YFilter
    subtlvsTag64.EntityData.YangName = "subtlvs-tag64"
    subtlvsTag64.EntityData.BundleName = "cisco_ios_xr"
    subtlvsTag64.EntityData.ParentYangName = "ipv6-reachability-prefixes-subtlv"
    subtlvsTag64.EntityData.SegmentPath = "subtlvs-tag64"
    subtlvsTag64.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv6-reachability/ipv6-reachability-prefixes/ipv6-reachability-prefixe/ipv6-reachability-prefixes-subtlvs/ipv6-reachability-prefixes-subtlv/" + subtlvsTag64.EntityData.SegmentPath
    subtlvsTag64.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvsTag64.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvsTag64.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvsTag64.EntityData.Children = types.NewOrderedMap()
    subtlvsTag64.EntityData.Children.Append("state", types.YChild{"State", &subtlvsTag64.State})
    subtlvsTag64.EntityData.Leafs = types.NewOrderedMap()

    subtlvsTag64.EntityData.YListKeys = []string {}

    return &(subtlvsTag64.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsTag64_State
// State parameters of sub-TLV 2
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsTag64_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of 64-bit tags associated with the prefix. The type is slice of
    // interface{} with range: 0..18446744073709551615.
    Tag64 []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsTag64_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "subtlvs-tag64"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv6-reachability/ipv6-reachability-prefixes/ipv6-reachability-prefixe/ipv6-reachability-prefixes-subtlvs/ipv6-reachability-prefixes-subtlv/subtlvs-tag64/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("tag64", types.YLeaf{"Tag64", state.Tag64})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsPrefixSids
// Prefix Segment-ID list
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsPrefixSids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix Segment-ID list. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsPrefixSids_SubtlvsPrefixSid.
    SubtlvsPrefixSid []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsPrefixSids_SubtlvsPrefixSid
}

func (subtlvsPrefixSids *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsPrefixSids) GetEntityData() *types.CommonEntityData {
    subtlvsPrefixSids.EntityData.YFilter = subtlvsPrefixSids.YFilter
    subtlvsPrefixSids.EntityData.YangName = "subtlvs-prefix-sids"
    subtlvsPrefixSids.EntityData.BundleName = "cisco_ios_xr"
    subtlvsPrefixSids.EntityData.ParentYangName = "ipv6-reachability-prefixes-subtlv"
    subtlvsPrefixSids.EntityData.SegmentPath = "subtlvs-prefix-sids"
    subtlvsPrefixSids.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv6-reachability/ipv6-reachability-prefixes/ipv6-reachability-prefixe/ipv6-reachability-prefixes-subtlvs/ipv6-reachability-prefixes-subtlv/" + subtlvsPrefixSids.EntityData.SegmentPath
    subtlvsPrefixSids.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvsPrefixSids.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvsPrefixSids.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvsPrefixSids.EntityData.Children = types.NewOrderedMap()
    subtlvsPrefixSids.EntityData.Children.Append("subtlvs-prefix-sid", types.YChild{"SubtlvsPrefixSid", nil})
    for i := range subtlvsPrefixSids.SubtlvsPrefixSid {
        subtlvsPrefixSids.EntityData.Children.Append(types.GetSegmentPath(subtlvsPrefixSids.SubtlvsPrefixSid[i]), types.YChild{"SubtlvsPrefixSid", subtlvsPrefixSids.SubtlvsPrefixSid[i]})
    }
    subtlvsPrefixSids.EntityData.Leafs = types.NewOrderedMap()

    subtlvsPrefixSids.EntityData.YListKeys = []string {}

    return &(subtlvsPrefixSids.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsPrefixSids_SubtlvsPrefixSid
// Prefix Segment-ID list
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsPrefixSids_SubtlvsPrefixSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the value of the prefix SID. The type
    // is interface{} with range: 0..4294967295.
    Value interface{}

    // State parameters for Prefix-SID.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsPrefixSids_SubtlvsPrefixSid_State
}

func (subtlvsPrefixSid *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsPrefixSids_SubtlvsPrefixSid) GetEntityData() *types.CommonEntityData {
    subtlvsPrefixSid.EntityData.YFilter = subtlvsPrefixSid.YFilter
    subtlvsPrefixSid.EntityData.YangName = "subtlvs-prefix-sid"
    subtlvsPrefixSid.EntityData.BundleName = "cisco_ios_xr"
    subtlvsPrefixSid.EntityData.ParentYangName = "subtlvs-prefix-sids"
    subtlvsPrefixSid.EntityData.SegmentPath = "subtlvs-prefix-sid" + types.AddKeyToken(subtlvsPrefixSid.Value, "value")
    subtlvsPrefixSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv6-reachability/ipv6-reachability-prefixes/ipv6-reachability-prefixe/ipv6-reachability-prefixes-subtlvs/ipv6-reachability-prefixes-subtlv/subtlvs-prefix-sids/" + subtlvsPrefixSid.EntityData.SegmentPath
    subtlvsPrefixSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvsPrefixSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvsPrefixSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvsPrefixSid.EntityData.Children = types.NewOrderedMap()
    subtlvsPrefixSid.EntityData.Children.Append("state", types.YChild{"State", &subtlvsPrefixSid.State})
    subtlvsPrefixSid.EntityData.Leafs = types.NewOrderedMap()
    subtlvsPrefixSid.EntityData.Leafs.Append("value", types.YLeaf{"Value", subtlvsPrefixSid.Value})

    subtlvsPrefixSid.EntityData.YListKeys = []string {"Value"}

    return &(subtlvsPrefixSid.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsPrefixSids_SubtlvsPrefixSid_State
// State parameters for Prefix-SID
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsPrefixSids_SubtlvsPrefixSid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGP Prefix-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Prefix-SID algorithm to be used for path computation. The type is
    // interface{} with range: 0..255.
    Algorithm interface{}

    // Flags associated with Prefix Segment-ID. The type is slice of
    // OpenconfigIsisLspPrefixSidStateFlagsEnum.
    Flags []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsPrefixSids_SubtlvsPrefixSid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "subtlvs-prefix-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv6-reachability/ipv6-reachability-prefixes/ipv6-reachability-prefixe/ipv6-reachability-prefixes-subtlvs/ipv6-reachability-prefixes-subtlv/subtlvs-prefix-sids/subtlvs-prefix-sid/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})
    state.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", state.Algorithm})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsIpv4SourceRouterId
// This container defines sub-TLV
// 11
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsIpv4SourceRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 11.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsIpv4SourceRouterId_State
}

func (subtlvsIpv4SourceRouterId *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsIpv4SourceRouterId) GetEntityData() *types.CommonEntityData {
    subtlvsIpv4SourceRouterId.EntityData.YFilter = subtlvsIpv4SourceRouterId.YFilter
    subtlvsIpv4SourceRouterId.EntityData.YangName = "subtlvs-ipv4-source-router-id"
    subtlvsIpv4SourceRouterId.EntityData.BundleName = "cisco_ios_xr"
    subtlvsIpv4SourceRouterId.EntityData.ParentYangName = "ipv6-reachability-prefixes-subtlv"
    subtlvsIpv4SourceRouterId.EntityData.SegmentPath = "subtlvs-ipv4-source-router-id"
    subtlvsIpv4SourceRouterId.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv6-reachability/ipv6-reachability-prefixes/ipv6-reachability-prefixe/ipv6-reachability-prefixes-subtlvs/ipv6-reachability-prefixes-subtlv/" + subtlvsIpv4SourceRouterId.EntityData.SegmentPath
    subtlvsIpv4SourceRouterId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvsIpv4SourceRouterId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvsIpv4SourceRouterId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvsIpv4SourceRouterId.EntityData.Children = types.NewOrderedMap()
    subtlvsIpv4SourceRouterId.EntityData.Children.Append("state", types.YChild{"State", &subtlvsIpv4SourceRouterId.State})
    subtlvsIpv4SourceRouterId.EntityData.Leafs = types.NewOrderedMap()

    subtlvsIpv4SourceRouterId.EntityData.YListKeys = []string {}

    return &(subtlvsIpv4SourceRouterId.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsIpv4SourceRouterId_State
// State parameters of sub-TLV 11
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsIpv4SourceRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type is string.
    Type interface{}

    // IPv4 Source router ID address. The type is string.
    Ipv4SourceRouterId interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsIpv4SourceRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "subtlvs-ipv4-source-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv6-reachability/ipv6-reachability-prefixes/ipv6-reachability-prefixe/ipv6-reachability-prefixes-subtlvs/ipv6-reachability-prefixes-subtlv/subtlvs-ipv4-source-router-id/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("ipv4-source-router-id", types.YLeaf{"Ipv4SourceRouterId", state.Ipv4SourceRouterId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_Ipv6ReachabilityPrefixesSubtlvsState
// State parameters for a prefix
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_Ipv6ReachabilityPrefixesSubtlvsState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type is string.
    Type interface{}
}

func (ipv6ReachabilityPrefixesSubtlvsState *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_Ipv6ReachabilityPrefixesSubtlvsState) GetEntityData() *types.CommonEntityData {
    ipv6ReachabilityPrefixesSubtlvsState.EntityData.YFilter = ipv6ReachabilityPrefixesSubtlvsState.YFilter
    ipv6ReachabilityPrefixesSubtlvsState.EntityData.YangName = "ipv6-reachability-prefixes-subtlvs-state"
    ipv6ReachabilityPrefixesSubtlvsState.EntityData.BundleName = "cisco_ios_xr"
    ipv6ReachabilityPrefixesSubtlvsState.EntityData.ParentYangName = "ipv6-reachability-prefixes-subtlv"
    ipv6ReachabilityPrefixesSubtlvsState.EntityData.SegmentPath = "ipv6-reachability-prefixes-subtlvs-state"
    ipv6ReachabilityPrefixesSubtlvsState.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv6-reachability/ipv6-reachability-prefixes/ipv6-reachability-prefixe/ipv6-reachability-prefixes-subtlvs/ipv6-reachability-prefixes-subtlv/" + ipv6ReachabilityPrefixesSubtlvsState.EntityData.SegmentPath
    ipv6ReachabilityPrefixesSubtlvsState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6ReachabilityPrefixesSubtlvsState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6ReachabilityPrefixesSubtlvsState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6ReachabilityPrefixesSubtlvsState.EntityData.Children = types.NewOrderedMap()
    ipv6ReachabilityPrefixesSubtlvsState.EntityData.Leafs = types.NewOrderedMap()
    ipv6ReachabilityPrefixesSubtlvsState.EntityData.Leafs.Append("type", types.YLeaf{"Type", ipv6ReachabilityPrefixesSubtlvsState.Type})

    ipv6ReachabilityPrefixesSubtlvsState.EntityData.YListKeys = []string {}

    return &(ipv6ReachabilityPrefixesSubtlvsState.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsIpv6SourceRouterId
// This container defines sub-TLV
// 12
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsIpv6SourceRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 12.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsIpv6SourceRouterId_State
}

func (subtlvsIpv6SourceRouterId *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsIpv6SourceRouterId) GetEntityData() *types.CommonEntityData {
    subtlvsIpv6SourceRouterId.EntityData.YFilter = subtlvsIpv6SourceRouterId.YFilter
    subtlvsIpv6SourceRouterId.EntityData.YangName = "subtlvs-ipv6-source-router-id"
    subtlvsIpv6SourceRouterId.EntityData.BundleName = "cisco_ios_xr"
    subtlvsIpv6SourceRouterId.EntityData.ParentYangName = "ipv6-reachability-prefixes-subtlv"
    subtlvsIpv6SourceRouterId.EntityData.SegmentPath = "subtlvs-ipv6-source-router-id"
    subtlvsIpv6SourceRouterId.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv6-reachability/ipv6-reachability-prefixes/ipv6-reachability-prefixe/ipv6-reachability-prefixes-subtlvs/ipv6-reachability-prefixes-subtlv/" + subtlvsIpv6SourceRouterId.EntityData.SegmentPath
    subtlvsIpv6SourceRouterId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvsIpv6SourceRouterId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvsIpv6SourceRouterId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvsIpv6SourceRouterId.EntityData.Children = types.NewOrderedMap()
    subtlvsIpv6SourceRouterId.EntityData.Children.Append("state", types.YChild{"State", &subtlvsIpv6SourceRouterId.State})
    subtlvsIpv6SourceRouterId.EntityData.Leafs = types.NewOrderedMap()

    subtlvsIpv6SourceRouterId.EntityData.YListKeys = []string {}

    return &(subtlvsIpv6SourceRouterId.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsIpv6SourceRouterId_State
// State parameters of sub-TLV 12
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsIpv6SourceRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type is string.
    Type interface{}

    // IPv6 Source router ID address. The type is string.
    Ipv6SourceRouterId interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsIpv6SourceRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "subtlvs-ipv6-source-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv6-reachability/ipv6-reachability-prefixes/ipv6-reachability-prefixe/ipv6-reachability-prefixes-subtlvs/ipv6-reachability-prefixes-subtlv/subtlvs-ipv6-source-router-id/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("ipv6-source-router-id", types.YLeaf{"Ipv6SourceRouterId", state.Ipv6SourceRouterId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsFlags
// This container defines sub-TLV 4
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 4.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsFlags_State
}

func (subtlvsFlags *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsFlags) GetEntityData() *types.CommonEntityData {
    subtlvsFlags.EntityData.YFilter = subtlvsFlags.YFilter
    subtlvsFlags.EntityData.YangName = "subtlvs-flags"
    subtlvsFlags.EntityData.BundleName = "cisco_ios_xr"
    subtlvsFlags.EntityData.ParentYangName = "ipv6-reachability-prefixes-subtlv"
    subtlvsFlags.EntityData.SegmentPath = "subtlvs-flags"
    subtlvsFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv6-reachability/ipv6-reachability-prefixes/ipv6-reachability-prefixe/ipv6-reachability-prefixes-subtlvs/ipv6-reachability-prefixes-subtlv/" + subtlvsFlags.EntityData.SegmentPath
    subtlvsFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subtlvsFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subtlvsFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subtlvsFlags.EntityData.Children = types.NewOrderedMap()
    subtlvsFlags.EntityData.Children.Append("state", types.YChild{"State", &subtlvsFlags.State})
    subtlvsFlags.EntityData.Leafs = types.NewOrderedMap()

    subtlvsFlags.EntityData.YListKeys = []string {}

    return &(subtlvsFlags.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsFlags_State
// State parameters of sub-TLV 4
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsFlags_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type is string.
    Type interface{}

    // Additional prefix reachability flags. The type is slice of
    // OpenconfigIsisLspFlagsStateFlagsEnum.
    Flags []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesSubtlvs_Ipv6ReachabilityPrefixesSubtlv_SubtlvsFlags_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "subtlvs-flags"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv6-reachability/ipv6-reachability-prefixes/ipv6-reachability-prefixe/ipv6-reachability-prefixes-subtlvs/ipv6-reachability-prefixes-subtlv/subtlvs-flags/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesUndefinedSubtlvs
// Sub-TLVs that are not defined in
// the model or not recognised by
// system
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesUndefinedSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub-TLVs that are not defined in the model or not recognised by system. The
    // type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesUndefinedSubtlvs_Ipv6ReachabilityPrefixesUndefinedSubtlv.
    Ipv6ReachabilityPrefixesUndefinedSubtlv []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesUndefinedSubtlvs_Ipv6ReachabilityPrefixesUndefinedSubtlv
}

func (ipv6ReachabilityPrefixesUndefinedSubtlvs *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesUndefinedSubtlvs) GetEntityData() *types.CommonEntityData {
    ipv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.YFilter = ipv6ReachabilityPrefixesUndefinedSubtlvs.YFilter
    ipv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.YangName = "ipv6-reachability-prefixes-undefined-subtlvs"
    ipv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.BundleName = "cisco_ios_xr"
    ipv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.ParentYangName = "ipv6-reachability-prefixe"
    ipv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.SegmentPath = "ipv6-reachability-prefixes-undefined-subtlvs"
    ipv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv6-reachability/ipv6-reachability-prefixes/ipv6-reachability-prefixe/" + ipv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.SegmentPath
    ipv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.Children = types.NewOrderedMap()
    ipv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.Children.Append("ipv6-reachability-prefixes-undefined-subtlv", types.YChild{"Ipv6ReachabilityPrefixesUndefinedSubtlv", nil})
    for i := range ipv6ReachabilityPrefixesUndefinedSubtlvs.Ipv6ReachabilityPrefixesUndefinedSubtlv {
        ipv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.Children.Append(types.GetSegmentPath(ipv6ReachabilityPrefixesUndefinedSubtlvs.Ipv6ReachabilityPrefixesUndefinedSubtlv[i]), types.YChild{"Ipv6ReachabilityPrefixesUndefinedSubtlv", ipv6ReachabilityPrefixesUndefinedSubtlvs.Ipv6ReachabilityPrefixesUndefinedSubtlv[i]})
    }
    ipv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.Leafs = types.NewOrderedMap()

    ipv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.YListKeys = []string {}

    return &(ipv6ReachabilityPrefixesUndefinedSubtlvs.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesUndefinedSubtlvs_Ipv6ReachabilityPrefixesUndefinedSubtlv
// Sub-TLVs that are not defined in
// the model or not recognised by
// system
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesUndefinedSubtlvs_Ipv6ReachabilityPrefixesUndefinedSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the type of the undefined sub-TLV.
    // The type is interface{} with range: 0..4294967295.
    Type interface{}

    // State parameters of the undefined sub-TLV.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesUndefinedSubtlvs_Ipv6ReachabilityPrefixesUndefinedSubtlv_State
}

func (ipv6ReachabilityPrefixesUndefinedSubtlv *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesUndefinedSubtlvs_Ipv6ReachabilityPrefixesUndefinedSubtlv) GetEntityData() *types.CommonEntityData {
    ipv6ReachabilityPrefixesUndefinedSubtlv.EntityData.YFilter = ipv6ReachabilityPrefixesUndefinedSubtlv.YFilter
    ipv6ReachabilityPrefixesUndefinedSubtlv.EntityData.YangName = "ipv6-reachability-prefixes-undefined-subtlv"
    ipv6ReachabilityPrefixesUndefinedSubtlv.EntityData.BundleName = "cisco_ios_xr"
    ipv6ReachabilityPrefixesUndefinedSubtlv.EntityData.ParentYangName = "ipv6-reachability-prefixes-undefined-subtlvs"
    ipv6ReachabilityPrefixesUndefinedSubtlv.EntityData.SegmentPath = "ipv6-reachability-prefixes-undefined-subtlv" + types.AddKeyToken(ipv6ReachabilityPrefixesUndefinedSubtlv.Type, "type")
    ipv6ReachabilityPrefixesUndefinedSubtlv.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv6-reachability/ipv6-reachability-prefixes/ipv6-reachability-prefixe/ipv6-reachability-prefixes-undefined-subtlvs/" + ipv6ReachabilityPrefixesUndefinedSubtlv.EntityData.SegmentPath
    ipv6ReachabilityPrefixesUndefinedSubtlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6ReachabilityPrefixesUndefinedSubtlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6ReachabilityPrefixesUndefinedSubtlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6ReachabilityPrefixesUndefinedSubtlv.EntityData.Children = types.NewOrderedMap()
    ipv6ReachabilityPrefixesUndefinedSubtlv.EntityData.Children.Append("state", types.YChild{"State", &ipv6ReachabilityPrefixesUndefinedSubtlv.State})
    ipv6ReachabilityPrefixesUndefinedSubtlv.EntityData.Leafs = types.NewOrderedMap()
    ipv6ReachabilityPrefixesUndefinedSubtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", ipv6ReachabilityPrefixesUndefinedSubtlv.Type})

    ipv6ReachabilityPrefixesUndefinedSubtlv.EntityData.YListKeys = []string {"Type"}

    return &(ipv6ReachabilityPrefixesUndefinedSubtlv.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesUndefinedSubtlvs_Ipv6ReachabilityPrefixesUndefinedSubtlv_State
// State parameters of the undefined sub-TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesUndefinedSubtlvs_Ipv6ReachabilityPrefixesUndefinedSubtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6Reachability_Ipv6ReachabilityPrefixes_Ipv6ReachabilityPrefixe_Ipv6ReachabilityPrefixesUndefinedSubtlvs_Ipv6ReachabilityPrefixesUndefinedSubtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "ipv6-reachability-prefixes-undefined-subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv6-reachability/ipv6-reachability-prefixes/ipv6-reachability-prefixe/ipv6-reachability-prefixes-undefined-subtlvs/ipv6-reachability-prefixes-undefined-subtlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("length", types.YLeaf{"Length", state.Length})
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6TeRouterId
// This container defines TLV 140
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6TeRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of ISIS TLV 140.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6TeRouterId_State
}

func (ipv6TeRouterId *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6TeRouterId) GetEntityData() *types.CommonEntityData {
    ipv6TeRouterId.EntityData.YFilter = ipv6TeRouterId.YFilter
    ipv6TeRouterId.EntityData.YangName = "ipv6-te-router-id"
    ipv6TeRouterId.EntityData.BundleName = "cisco_ios_xr"
    ipv6TeRouterId.EntityData.ParentYangName = "tlvs"
    ipv6TeRouterId.EntityData.SegmentPath = "ipv6-te-router-id"
    ipv6TeRouterId.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/" + ipv6TeRouterId.EntityData.SegmentPath
    ipv6TeRouterId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6TeRouterId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6TeRouterId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6TeRouterId.EntityData.Children = types.NewOrderedMap()
    ipv6TeRouterId.EntityData.Children.Append("state", types.YChild{"State", &ipv6TeRouterId.State})
    ipv6TeRouterId.EntityData.Leafs = types.NewOrderedMap()

    ipv6TeRouterId.EntityData.YListKeys = []string {}

    return &(ipv6TeRouterId.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6TeRouterId_State
// State parameters of ISIS TLV 140
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6TeRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 Traffic Engineering router ID of the node. The type is slice of
    // string.
    RouterId []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6TeRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "ipv6-te-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv6-te-router-id/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", state.RouterId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability
// This container defines list of IPv4
// internal reachability information
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 prefixes and internal reachability attributes.
    Prefixes OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes
}

func (ipv4InternalReachability *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability) GetEntityData() *types.CommonEntityData {
    ipv4InternalReachability.EntityData.YFilter = ipv4InternalReachability.YFilter
    ipv4InternalReachability.EntityData.YangName = "ipv4-internal-reachability"
    ipv4InternalReachability.EntityData.BundleName = "cisco_ios_xr"
    ipv4InternalReachability.EntityData.ParentYangName = "tlvs"
    ipv4InternalReachability.EntityData.SegmentPath = "ipv4-internal-reachability"
    ipv4InternalReachability.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/" + ipv4InternalReachability.EntityData.SegmentPath
    ipv4InternalReachability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4InternalReachability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4InternalReachability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4InternalReachability.EntityData.Children = types.NewOrderedMap()
    ipv4InternalReachability.EntityData.Children.Append("prefixes", types.YChild{"Prefixes", &ipv4InternalReachability.Prefixes})
    ipv4InternalReachability.EntityData.Leafs = types.NewOrderedMap()

    ipv4InternalReachability.EntityData.YListKeys = []string {}

    return &(ipv4InternalReachability.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes
// IPv4 prefixes and internal
// reachability attributes
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 prefixes and internal reachability attributes. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe.
    Prefixe []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe
}

func (prefixes *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes) GetEntityData() *types.CommonEntityData {
    prefixes.EntityData.YFilter = prefixes.YFilter
    prefixes.EntityData.YangName = "prefixes"
    prefixes.EntityData.BundleName = "cisco_ios_xr"
    prefixes.EntityData.ParentYangName = "ipv4-internal-reachability"
    prefixes.EntityData.SegmentPath = "prefixes"
    prefixes.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv4-internal-reachability/" + prefixes.EntityData.SegmentPath
    prefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixes.EntityData.Children = types.NewOrderedMap()
    prefixes.EntityData.Children.Append("prefixe", types.YChild{"Prefixe", nil})
    for i := range prefixes.Prefixe {
        prefixes.EntityData.Children.Append(types.GetSegmentPath(prefixes.Prefixe[i]), types.YChild{"Prefixe", prefixes.Prefixe[i]})
    }
    prefixes.EntityData.Leafs = types.NewOrderedMap()

    prefixes.EntityData.YListKeys = []string {}

    return &(prefixes.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe
// IPv4 prefixes and internal
// reachability attributes
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the IPv4 prefix. The type is string.
    Prefix interface{}

    // State parameters of IPv4 standard prefix.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_State

    // This container defines ISIS Default Metric.
    DefaultMetric OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_DefaultMetric

    // This container defines the ISIS delay metric.
    DelayMetric OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_DelayMetric

    // This container defines the ISIS expense metric.
    ExpenseMetric OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_ExpenseMetric

    // This container defines the ISIS error metric.
    ErrorMetric OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_ErrorMetric
}

func (prefixe *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe) GetEntityData() *types.CommonEntityData {
    prefixe.EntityData.YFilter = prefixe.YFilter
    prefixe.EntityData.YangName = "prefixe"
    prefixe.EntityData.BundleName = "cisco_ios_xr"
    prefixe.EntityData.ParentYangName = "prefixes"
    prefixe.EntityData.SegmentPath = "prefixe" + types.AddKeyToken(prefixe.Prefix, "prefix")
    prefixe.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv4-internal-reachability/prefixes/" + prefixe.EntityData.SegmentPath
    prefixe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixe.EntityData.Children = types.NewOrderedMap()
    prefixe.EntityData.Children.Append("state", types.YChild{"State", &prefixe.State})
    prefixe.EntityData.Children.Append("default-metric", types.YChild{"DefaultMetric", &prefixe.DefaultMetric})
    prefixe.EntityData.Children.Append("delay-metric", types.YChild{"DelayMetric", &prefixe.DelayMetric})
    prefixe.EntityData.Children.Append("expense-metric", types.YChild{"ExpenseMetric", &prefixe.ExpenseMetric})
    prefixe.EntityData.Children.Append("error-metric", types.YChild{"ErrorMetric", &prefixe.ErrorMetric})
    prefixe.EntityData.Leafs = types.NewOrderedMap()
    prefixe.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", prefixe.Prefix})

    prefixe.EntityData.YListKeys = []string {"Prefix"}

    return &(prefixe.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_State
// State parameters of IPv4 standard prefix
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The up/down bit. The type is bool.
    UpDown interface{}

    // IPv4 prefix contained within reachability TLVs. The type is string.
    Prefix interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "prefixe"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv4-internal-reachability/prefixes/prefixe/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("up-down", types.YLeaf{"UpDown", state.UpDown})
    state.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", state.Prefix})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_DefaultMetric
// This container defines ISIS Default Metric
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_DefaultMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters for default-metric.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_DefaultMetric_State
}

func (defaultMetric *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_DefaultMetric) GetEntityData() *types.CommonEntityData {
    defaultMetric.EntityData.YFilter = defaultMetric.YFilter
    defaultMetric.EntityData.YangName = "default-metric"
    defaultMetric.EntityData.BundleName = "cisco_ios_xr"
    defaultMetric.EntityData.ParentYangName = "prefixe"
    defaultMetric.EntityData.SegmentPath = "default-metric"
    defaultMetric.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv4-internal-reachability/prefixes/prefixe/" + defaultMetric.EntityData.SegmentPath
    defaultMetric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultMetric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultMetric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultMetric.EntityData.Children = types.NewOrderedMap()
    defaultMetric.EntityData.Children.Append("state", types.YChild{"State", &defaultMetric.State})
    defaultMetric.EntityData.Leafs = types.NewOrderedMap()

    defaultMetric.EntityData.YListKeys = []string {}

    return &(defaultMetric.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_DefaultMetric_State
// State parameters for default-metric
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_DefaultMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS Default-Metric Flags. The type is
    // OpenconfigIsisLspDefaultMetricStateFlagsEnum.
    Flags interface{}

    // ISIS default metric value. The type is interface{} with range: 0..255.
    DefaultMetric interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_DefaultMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "default-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv4-internal-reachability/prefixes/prefixe/default-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})
    state.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", state.DefaultMetric})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_DelayMetric
// This container defines the ISIS delay metric
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_DelayMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of delay-metric.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_DelayMetric_State
}

func (delayMetric *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_DelayMetric) GetEntityData() *types.CommonEntityData {
    delayMetric.EntityData.YFilter = delayMetric.YFilter
    delayMetric.EntityData.YangName = "delay-metric"
    delayMetric.EntityData.BundleName = "cisco_ios_xr"
    delayMetric.EntityData.ParentYangName = "prefixe"
    delayMetric.EntityData.SegmentPath = "delay-metric"
    delayMetric.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv4-internal-reachability/prefixes/prefixe/" + delayMetric.EntityData.SegmentPath
    delayMetric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    delayMetric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    delayMetric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    delayMetric.EntityData.Children = types.NewOrderedMap()
    delayMetric.EntityData.Children.Append("state", types.YChild{"State", &delayMetric.State})
    delayMetric.EntityData.Leafs = types.NewOrderedMap()

    delayMetric.EntityData.YListKeys = []string {}

    return &(delayMetric.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_DelayMetric_State
// State parameters of delay-metric
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_DelayMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS delay metric value. The type is interface{} with range: 0..255.
    Metric interface{}

    // ISIS Delay Metric Flags. The type is slice of
    // OpenconfigIsisLspIsisMetricFlagsEnum.
    Flags []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_DelayMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "delay-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv4-internal-reachability/prefixes/prefixe/delay-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_ExpenseMetric
// This container defines the ISIS expense metric
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_ExpenseMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of expense-metric.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_ExpenseMetric_State
}

func (expenseMetric *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_ExpenseMetric) GetEntityData() *types.CommonEntityData {
    expenseMetric.EntityData.YFilter = expenseMetric.YFilter
    expenseMetric.EntityData.YangName = "expense-metric"
    expenseMetric.EntityData.BundleName = "cisco_ios_xr"
    expenseMetric.EntityData.ParentYangName = "prefixe"
    expenseMetric.EntityData.SegmentPath = "expense-metric"
    expenseMetric.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv4-internal-reachability/prefixes/prefixe/" + expenseMetric.EntityData.SegmentPath
    expenseMetric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    expenseMetric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    expenseMetric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    expenseMetric.EntityData.Children = types.NewOrderedMap()
    expenseMetric.EntityData.Children.Append("state", types.YChild{"State", &expenseMetric.State})
    expenseMetric.EntityData.Leafs = types.NewOrderedMap()

    expenseMetric.EntityData.YListKeys = []string {}

    return &(expenseMetric.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_ExpenseMetric_State
// State parameters of expense-metric
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_ExpenseMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS expense metric value. The type is interface{} with range: 0..255.
    Metric interface{}

    // ISIS Expense Metric Flags. The type is slice of
    // OpenconfigIsisLspIsisMetricFlagsEnum.
    Flags []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_ExpenseMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "expense-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv4-internal-reachability/prefixes/prefixe/expense-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_ErrorMetric
// This container defines the ISIS error metric
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_ErrorMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of error-metric.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_ErrorMetric_State
}

func (errorMetric *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_ErrorMetric) GetEntityData() *types.CommonEntityData {
    errorMetric.EntityData.YFilter = errorMetric.YFilter
    errorMetric.EntityData.YangName = "error-metric"
    errorMetric.EntityData.BundleName = "cisco_ios_xr"
    errorMetric.EntityData.ParentYangName = "prefixe"
    errorMetric.EntityData.SegmentPath = "error-metric"
    errorMetric.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv4-internal-reachability/prefixes/prefixe/" + errorMetric.EntityData.SegmentPath
    errorMetric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    errorMetric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    errorMetric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    errorMetric.EntityData.Children = types.NewOrderedMap()
    errorMetric.EntityData.Children.Append("state", types.YChild{"State", &errorMetric.State})
    errorMetric.EntityData.Leafs = types.NewOrderedMap()

    errorMetric.EntityData.YListKeys = []string {}

    return &(errorMetric.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_ErrorMetric_State
// State parameters of error-metric
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_ErrorMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS error metric value. The type is interface{} with range: 0..255.
    Metric interface{}

    // IS-IS error metric flags. The type is slice of
    // OpenconfigIsisLspIsisMetricFlagsEnum.
    Flags []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4InternalReachability_Prefixes_Prefixe_ErrorMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "error-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv4-internal-reachability/prefixes/prefixe/error-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6InterfaceAddresses
// This container defines TLV 232
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6InterfaceAddresses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of ISIS TLV 232.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6InterfaceAddresses_State
}

func (ipv6InterfaceAddresses *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6InterfaceAddresses) GetEntityData() *types.CommonEntityData {
    ipv6InterfaceAddresses.EntityData.YFilter = ipv6InterfaceAddresses.YFilter
    ipv6InterfaceAddresses.EntityData.YangName = "ipv6-interface-addresses"
    ipv6InterfaceAddresses.EntityData.BundleName = "cisco_ios_xr"
    ipv6InterfaceAddresses.EntityData.ParentYangName = "tlvs"
    ipv6InterfaceAddresses.EntityData.SegmentPath = "ipv6-interface-addresses"
    ipv6InterfaceAddresses.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/" + ipv6InterfaceAddresses.EntityData.SegmentPath
    ipv6InterfaceAddresses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6InterfaceAddresses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6InterfaceAddresses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6InterfaceAddresses.EntityData.Children = types.NewOrderedMap()
    ipv6InterfaceAddresses.EntityData.Children.Append("state", types.YChild{"State", &ipv6InterfaceAddresses.State})
    ipv6InterfaceAddresses.EntityData.Leafs = types.NewOrderedMap()

    ipv6InterfaceAddresses.EntityData.YListKeys = []string {}

    return &(ipv6InterfaceAddresses.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6InterfaceAddresses_State
// State parameters of ISIS TLV 232
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6InterfaceAddresses_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 interface addresses of the node. The type is slice of string.
    Ipv6InterfaceAddress []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv6InterfaceAddresses_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "ipv6-interface-addresses"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv6-interface-addresses/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv6-interface-address", types.YLeaf{"Ipv6InterfaceAddress", state.Ipv6InterfaceAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability
// This container defines list of ISIS
// extended reachability neighbors
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list describes ISIS extended neigbors and reachability attributes.
    ExtendedIsReachabilityNeighbors OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors
}

func (extendedIsReachability *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability) GetEntityData() *types.CommonEntityData {
    extendedIsReachability.EntityData.YFilter = extendedIsReachability.YFilter
    extendedIsReachability.EntityData.YangName = "extended-is-reachability"
    extendedIsReachability.EntityData.BundleName = "cisco_ios_xr"
    extendedIsReachability.EntityData.ParentYangName = "tlvs"
    extendedIsReachability.EntityData.SegmentPath = "extended-is-reachability"
    extendedIsReachability.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/" + extendedIsReachability.EntityData.SegmentPath
    extendedIsReachability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extendedIsReachability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extendedIsReachability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extendedIsReachability.EntityData.Children = types.NewOrderedMap()
    extendedIsReachability.EntityData.Children.Append("extended-is-reachability-neighbors", types.YChild{"ExtendedIsReachabilityNeighbors", &extendedIsReachability.ExtendedIsReachabilityNeighbors})
    extendedIsReachability.EntityData.Leafs = types.NewOrderedMap()

    extendedIsReachability.EntityData.YListKeys = []string {}

    return &(extendedIsReachability.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors
// This list describes ISIS extended
// neigbors and reachability attributes
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list describes ISIS extended neigbors and reachability attributes. The
    // type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor.
    ExtendedIsReachabilityNeighbor []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor
}

func (extendedIsReachabilityNeighbors *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors) GetEntityData() *types.CommonEntityData {
    extendedIsReachabilityNeighbors.EntityData.YFilter = extendedIsReachabilityNeighbors.YFilter
    extendedIsReachabilityNeighbors.EntityData.YangName = "extended-is-reachability-neighbors"
    extendedIsReachabilityNeighbors.EntityData.BundleName = "cisco_ios_xr"
    extendedIsReachabilityNeighbors.EntityData.ParentYangName = "extended-is-reachability"
    extendedIsReachabilityNeighbors.EntityData.SegmentPath = "extended-is-reachability-neighbors"
    extendedIsReachabilityNeighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/" + extendedIsReachabilityNeighbors.EntityData.SegmentPath
    extendedIsReachabilityNeighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extendedIsReachabilityNeighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extendedIsReachabilityNeighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extendedIsReachabilityNeighbors.EntityData.Children = types.NewOrderedMap()
    extendedIsReachabilityNeighbors.EntityData.Children.Append("extended-is-reachability-neighbor", types.YChild{"ExtendedIsReachabilityNeighbor", nil})
    for i := range extendedIsReachabilityNeighbors.ExtendedIsReachabilityNeighbor {
        extendedIsReachabilityNeighbors.EntityData.Children.Append(types.GetSegmentPath(extendedIsReachabilityNeighbors.ExtendedIsReachabilityNeighbor[i]), types.YChild{"ExtendedIsReachabilityNeighbor", extendedIsReachabilityNeighbors.ExtendedIsReachabilityNeighbor[i]})
    }
    extendedIsReachabilityNeighbors.EntityData.Leafs = types.NewOrderedMap()

    extendedIsReachabilityNeighbors.EntityData.YListKeys = []string {}

    return &(extendedIsReachabilityNeighbors.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor
// This list describes ISIS extended
// neigbors and reachability
// attributes
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the neighboring system's system ID.
    // The type is string.
    SystemId interface{}

    // List of subTLV types in the LSDB for the specified TLV.
    NeighborsSubtlvs OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs

    // Sub-TLVs that are not defined in the model or not recognised by system.
    NeighborsUndefinedSubtlvs OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsUndefinedSubtlvs

    // State parameters of extended neighbor.
    NeighborsState OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsState
}

func (extendedIsReachabilityNeighbor *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor) GetEntityData() *types.CommonEntityData {
    extendedIsReachabilityNeighbor.EntityData.YFilter = extendedIsReachabilityNeighbor.YFilter
    extendedIsReachabilityNeighbor.EntityData.YangName = "extended-is-reachability-neighbor"
    extendedIsReachabilityNeighbor.EntityData.BundleName = "cisco_ios_xr"
    extendedIsReachabilityNeighbor.EntityData.ParentYangName = "extended-is-reachability-neighbors"
    extendedIsReachabilityNeighbor.EntityData.SegmentPath = "extended-is-reachability-neighbor" + types.AddKeyToken(extendedIsReachabilityNeighbor.SystemId, "system-id")
    extendedIsReachabilityNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/" + extendedIsReachabilityNeighbor.EntityData.SegmentPath
    extendedIsReachabilityNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extendedIsReachabilityNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extendedIsReachabilityNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extendedIsReachabilityNeighbor.EntityData.Children = types.NewOrderedMap()
    extendedIsReachabilityNeighbor.EntityData.Children.Append("neighbors-subtlvs", types.YChild{"NeighborsSubtlvs", &extendedIsReachabilityNeighbor.NeighborsSubtlvs})
    extendedIsReachabilityNeighbor.EntityData.Children.Append("neighbors-undefined-subtlvs", types.YChild{"NeighborsUndefinedSubtlvs", &extendedIsReachabilityNeighbor.NeighborsUndefinedSubtlvs})
    extendedIsReachabilityNeighbor.EntityData.Children.Append("neighbors-state", types.YChild{"NeighborsState", &extendedIsReachabilityNeighbor.NeighborsState})
    extendedIsReachabilityNeighbor.EntityData.Leafs = types.NewOrderedMap()
    extendedIsReachabilityNeighbor.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", extendedIsReachabilityNeighbor.SystemId})

    extendedIsReachabilityNeighbor.EntityData.YListKeys = []string {"SystemId"}

    return &(extendedIsReachabilityNeighbor.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs
// List of subTLV types in the LSDB
// for the specified TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of subTLV types in the LSDB for the specified TLV. The type is slice
    // of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv.
    NeighborsSubtlv []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv
}

func (neighborsSubtlvs *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs) GetEntityData() *types.CommonEntityData {
    neighborsSubtlvs.EntityData.YFilter = neighborsSubtlvs.YFilter
    neighborsSubtlvs.EntityData.YangName = "neighbors-subtlvs"
    neighborsSubtlvs.EntityData.BundleName = "cisco_ios_xr"
    neighborsSubtlvs.EntityData.ParentYangName = "extended-is-reachability-neighbor"
    neighborsSubtlvs.EntityData.SegmentPath = "neighbors-subtlvs"
    neighborsSubtlvs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/" + neighborsSubtlvs.EntityData.SegmentPath
    neighborsSubtlvs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborsSubtlvs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborsSubtlvs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborsSubtlvs.EntityData.Children = types.NewOrderedMap()
    neighborsSubtlvs.EntityData.Children.Append("neighbors-subtlv", types.YChild{"NeighborsSubtlv", nil})
    for i := range neighborsSubtlvs.NeighborsSubtlv {
        neighborsSubtlvs.EntityData.Children.Append(types.GetSegmentPath(neighborsSubtlvs.NeighborsSubtlv[i]), types.YChild{"NeighborsSubtlv", neighborsSubtlvs.NeighborsSubtlv[i]})
    }
    neighborsSubtlvs.EntityData.Leafs = types.NewOrderedMap()

    neighborsSubtlvs.EntityData.YListKeys = []string {}

    return &(neighborsSubtlvs.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv
// List of subTLV types in the LSDB
// for the specified TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the sub-TLV type. The type is string.
    Type interface{}

    // This container defines sub-TLV 9.
    MaxLinkBandwidth OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_MaxLinkBandwidth

    // This container defines sub-TLV 13.
    Ipv6NeighborAddress OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv6NeighborAddress

    // This container defines sub-TLV 12.
    Ipv6InterfaceAddress OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv6InterfaceAddress

    // Adjacency Segment-IDs List.
    LanAdjacencySids OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_LanAdjacencySids

    // Adjacency Segment-IDs List.
    AdjacencySids OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_AdjacencySids

    // This container defines sub-TLV 18.
    TeDefaultMetric OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_TeDefaultMetric

    // This container defines sub-TLV 3.
    AdminGroup OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_AdminGroup

    // This container defines sub-TLV 10.
    MaxReservableLinkBandwidth OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_MaxReservableLinkBandwidth

    // This container defines sub-TLV 14.
    ExtendedAdminGroup OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_ExtendedAdminGroup

    // Setup priority (0 through 7) for unreserved bandwidth.
    UnreservedBandwidths OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_UnreservedBandwidths

    // This container defines sub-TLV 6.
    Ipv4InterfaceAddress OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv4InterfaceAddress

    // This container defines sub-TLV 8.
    Ipv4NeighborAddress OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv4NeighborAddress

    // List of the Bandwidth Constraints sub-TLV instances present in the TLV.
    BandwidthConstraints OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_BandwidthConstraints
}

func (neighborsSubtlv *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv) GetEntityData() *types.CommonEntityData {
    neighborsSubtlv.EntityData.YFilter = neighborsSubtlv.YFilter
    neighborsSubtlv.EntityData.YangName = "neighbors-subtlv"
    neighborsSubtlv.EntityData.BundleName = "cisco_ios_xr"
    neighborsSubtlv.EntityData.ParentYangName = "neighbors-subtlvs"
    neighborsSubtlv.EntityData.SegmentPath = "neighbors-subtlv" + types.AddKeyToken(neighborsSubtlv.Type, "type")
    neighborsSubtlv.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/" + neighborsSubtlv.EntityData.SegmentPath
    neighborsSubtlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborsSubtlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborsSubtlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborsSubtlv.EntityData.Children = types.NewOrderedMap()
    neighborsSubtlv.EntityData.Children.Append("max-link-bandwidth", types.YChild{"MaxLinkBandwidth", &neighborsSubtlv.MaxLinkBandwidth})
    neighborsSubtlv.EntityData.Children.Append("ipv6-neighbor-address", types.YChild{"Ipv6NeighborAddress", &neighborsSubtlv.Ipv6NeighborAddress})
    neighborsSubtlv.EntityData.Children.Append("ipv6-interface-address", types.YChild{"Ipv6InterfaceAddress", &neighborsSubtlv.Ipv6InterfaceAddress})
    neighborsSubtlv.EntityData.Children.Append("lan-adjacency-sids", types.YChild{"LanAdjacencySids", &neighborsSubtlv.LanAdjacencySids})
    neighborsSubtlv.EntityData.Children.Append("adjacency-sids", types.YChild{"AdjacencySids", &neighborsSubtlv.AdjacencySids})
    neighborsSubtlv.EntityData.Children.Append("te-default-metric", types.YChild{"TeDefaultMetric", &neighborsSubtlv.TeDefaultMetric})
    neighborsSubtlv.EntityData.Children.Append("admin-group", types.YChild{"AdminGroup", &neighborsSubtlv.AdminGroup})
    neighborsSubtlv.EntityData.Children.Append("max-reservable-link-bandwidth", types.YChild{"MaxReservableLinkBandwidth", &neighborsSubtlv.MaxReservableLinkBandwidth})
    neighborsSubtlv.EntityData.Children.Append("extended-admin-group", types.YChild{"ExtendedAdminGroup", &neighborsSubtlv.ExtendedAdminGroup})
    neighborsSubtlv.EntityData.Children.Append("unreserved-bandwidths", types.YChild{"UnreservedBandwidths", &neighborsSubtlv.UnreservedBandwidths})
    neighborsSubtlv.EntityData.Children.Append("ipv4-interface-address", types.YChild{"Ipv4InterfaceAddress", &neighborsSubtlv.Ipv4InterfaceAddress})
    neighborsSubtlv.EntityData.Children.Append("ipv4-neighbor-address", types.YChild{"Ipv4NeighborAddress", &neighborsSubtlv.Ipv4NeighborAddress})
    neighborsSubtlv.EntityData.Children.Append("bandwidth-constraints", types.YChild{"BandwidthConstraints", &neighborsSubtlv.BandwidthConstraints})
    neighborsSubtlv.EntityData.Leafs = types.NewOrderedMap()
    neighborsSubtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", neighborsSubtlv.Type})

    neighborsSubtlv.EntityData.YListKeys = []string {"Type"}

    return &(neighborsSubtlv.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_MaxLinkBandwidth
// This container defines sub-TLV 9
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_MaxLinkBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 9.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_MaxLinkBandwidth_State
}

func (maxLinkBandwidth *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_MaxLinkBandwidth) GetEntityData() *types.CommonEntityData {
    maxLinkBandwidth.EntityData.YFilter = maxLinkBandwidth.YFilter
    maxLinkBandwidth.EntityData.YangName = "max-link-bandwidth"
    maxLinkBandwidth.EntityData.BundleName = "cisco_ios_xr"
    maxLinkBandwidth.EntityData.ParentYangName = "neighbors-subtlv"
    maxLinkBandwidth.EntityData.SegmentPath = "max-link-bandwidth"
    maxLinkBandwidth.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/" + maxLinkBandwidth.EntityData.SegmentPath
    maxLinkBandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxLinkBandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxLinkBandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxLinkBandwidth.EntityData.Children = types.NewOrderedMap()
    maxLinkBandwidth.EntityData.Children.Append("state", types.YChild{"State", &maxLinkBandwidth.State})
    maxLinkBandwidth.EntityData.Leafs = types.NewOrderedMap()

    maxLinkBandwidth.EntityData.YListKeys = []string {}

    return &(maxLinkBandwidth.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_MaxLinkBandwidth_State
// State parameters of sub-TLV 9
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_MaxLinkBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum bandwidth that can be used on this link in this direction (from
    // the system originating the LSP to its neighbors). The type is string.
    MaxLinkBandwidth interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_MaxLinkBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "max-link-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/max-link-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-link-bandwidth", types.YLeaf{"MaxLinkBandwidth", state.MaxLinkBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv6NeighborAddress
// This container defines sub-TLV
// 13
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv6NeighborAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 13.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv6NeighborAddress_State
}

func (ipv6NeighborAddress *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv6NeighborAddress) GetEntityData() *types.CommonEntityData {
    ipv6NeighborAddress.EntityData.YFilter = ipv6NeighborAddress.YFilter
    ipv6NeighborAddress.EntityData.YangName = "ipv6-neighbor-address"
    ipv6NeighborAddress.EntityData.BundleName = "cisco_ios_xr"
    ipv6NeighborAddress.EntityData.ParentYangName = "neighbors-subtlv"
    ipv6NeighborAddress.EntityData.SegmentPath = "ipv6-neighbor-address"
    ipv6NeighborAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/" + ipv6NeighborAddress.EntityData.SegmentPath
    ipv6NeighborAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6NeighborAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6NeighborAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6NeighborAddress.EntityData.Children = types.NewOrderedMap()
    ipv6NeighborAddress.EntityData.Children.Append("state", types.YChild{"State", &ipv6NeighborAddress.State})
    ipv6NeighborAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv6NeighborAddress.EntityData.YListKeys = []string {}

    return &(ipv6NeighborAddress.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv6NeighborAddress_State
// State parameters of sub-TLV 13
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv6NeighborAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Contains a 16-octet IPv6 address for a neighboring router on the link
    // described by the (main) TLV. The type is slice of string.
    Ipv6NeighborAddress []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv6NeighborAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "ipv6-neighbor-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/ipv6-neighbor-address/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv6-neighbor-address", types.YLeaf{"Ipv6NeighborAddress", state.Ipv6NeighborAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv6InterfaceAddress
// This container defines sub-TLV
// 12
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv6InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 12.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv6InterfaceAddress_State
}

func (ipv6InterfaceAddress *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv6InterfaceAddress) GetEntityData() *types.CommonEntityData {
    ipv6InterfaceAddress.EntityData.YFilter = ipv6InterfaceAddress.YFilter
    ipv6InterfaceAddress.EntityData.YangName = "ipv6-interface-address"
    ipv6InterfaceAddress.EntityData.BundleName = "cisco_ios_xr"
    ipv6InterfaceAddress.EntityData.ParentYangName = "neighbors-subtlv"
    ipv6InterfaceAddress.EntityData.SegmentPath = "ipv6-interface-address"
    ipv6InterfaceAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/" + ipv6InterfaceAddress.EntityData.SegmentPath
    ipv6InterfaceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6InterfaceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6InterfaceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6InterfaceAddress.EntityData.Children = types.NewOrderedMap()
    ipv6InterfaceAddress.EntityData.Children.Append("state", types.YChild{"State", &ipv6InterfaceAddress.State})
    ipv6InterfaceAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv6InterfaceAddress.EntityData.YListKeys = []string {}

    return &(ipv6InterfaceAddress.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv6InterfaceAddress_State
// State parameters of sub-TLV 12
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv6InterfaceAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Contains a 16-octet IPv6 address for the interface described by the
    // containing  Extended IS Reachability TLV. The type is slice of string.
    Ipv6InterfaceAddress []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv6InterfaceAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "ipv6-interface-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/ipv6-interface-address/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv6-interface-address", types.YLeaf{"Ipv6InterfaceAddress", state.Ipv6InterfaceAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_LanAdjacencySids
// Adjacency Segment-IDs List
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_LanAdjacencySids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency Segment-IDs List. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_LanAdjacencySids_LanAdjacencySid.
    LanAdjacencySid []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_LanAdjacencySids_LanAdjacencySid
}

func (lanAdjacencySids *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_LanAdjacencySids) GetEntityData() *types.CommonEntityData {
    lanAdjacencySids.EntityData.YFilter = lanAdjacencySids.YFilter
    lanAdjacencySids.EntityData.YangName = "lan-adjacency-sids"
    lanAdjacencySids.EntityData.BundleName = "cisco_ios_xr"
    lanAdjacencySids.EntityData.ParentYangName = "neighbors-subtlv"
    lanAdjacencySids.EntityData.SegmentPath = "lan-adjacency-sids"
    lanAdjacencySids.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/" + lanAdjacencySids.EntityData.SegmentPath
    lanAdjacencySids.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lanAdjacencySids.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lanAdjacencySids.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lanAdjacencySids.EntityData.Children = types.NewOrderedMap()
    lanAdjacencySids.EntityData.Children.Append("lan-adjacency-sid", types.YChild{"LanAdjacencySid", nil})
    for i := range lanAdjacencySids.LanAdjacencySid {
        lanAdjacencySids.EntityData.Children.Append(types.GetSegmentPath(lanAdjacencySids.LanAdjacencySid[i]), types.YChild{"LanAdjacencySid", lanAdjacencySids.LanAdjacencySid[i]})
    }
    lanAdjacencySids.EntityData.Leafs = types.NewOrderedMap()

    lanAdjacencySids.EntityData.YListKeys = []string {}

    return &(lanAdjacencySids.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_LanAdjacencySids_LanAdjacencySid
// Adjacency Segment-IDs List
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_LanAdjacencySids_LanAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the value of the LAN Adjacency-SID.
    // The type is interface{} with range: 0..4294967295.
    Value interface{}

    // State parameters of LAN Adjacency-SID.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_LanAdjacencySids_LanAdjacencySid_State
}

func (lanAdjacencySid *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_LanAdjacencySids_LanAdjacencySid) GetEntityData() *types.CommonEntityData {
    lanAdjacencySid.EntityData.YFilter = lanAdjacencySid.YFilter
    lanAdjacencySid.EntityData.YangName = "lan-adjacency-sid"
    lanAdjacencySid.EntityData.BundleName = "cisco_ios_xr"
    lanAdjacencySid.EntityData.ParentYangName = "lan-adjacency-sids"
    lanAdjacencySid.EntityData.SegmentPath = "lan-adjacency-sid" + types.AddKeyToken(lanAdjacencySid.Value, "value")
    lanAdjacencySid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/lan-adjacency-sids/" + lanAdjacencySid.EntityData.SegmentPath
    lanAdjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lanAdjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lanAdjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lanAdjacencySid.EntityData.Children = types.NewOrderedMap()
    lanAdjacencySid.EntityData.Children.Append("state", types.YChild{"State", &lanAdjacencySid.State})
    lanAdjacencySid.EntityData.Leafs = types.NewOrderedMap()
    lanAdjacencySid.EntityData.Leafs.Append("value", types.YLeaf{"Value", lanAdjacencySid.Value})

    lanAdjacencySid.EntityData.YListKeys = []string {"Value"}

    return &(lanAdjacencySid.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_LanAdjacencySids_LanAdjacencySid_State
// State parameters of LAN Adjacency-SID
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_LanAdjacencySids_LanAdjacencySid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LAN Adjacency-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Value that represents the weight of the Adj-SID for the purpose of load
    // balancing. The type is interface{} with range: 0..255.
    Weight interface{}

    // System ID of the neighbor associated with the LAN- Adj-Segment-ID value.
    // The type is string.
    NeighborId interface{}

    // Flags associated with LAN-Adj-Segment-ID. The type is slice of
    // OpenconfigIsisLspLanAdjacencySidStateFlagsEnum.
    Flags []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_LanAdjacencySids_LanAdjacencySid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "lan-adjacency-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/lan-adjacency-sids/lan-adjacency-sid/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})
    state.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", state.Weight})
    state.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", state.NeighborId})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_AdjacencySids
// Adjacency Segment-IDs List
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_AdjacencySids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency Segment-IDs List. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_AdjacencySids_AdjacencySid.
    AdjacencySid []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_AdjacencySids_AdjacencySid
}

func (adjacencySids *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_AdjacencySids) GetEntityData() *types.CommonEntityData {
    adjacencySids.EntityData.YFilter = adjacencySids.YFilter
    adjacencySids.EntityData.YangName = "adjacency-sids"
    adjacencySids.EntityData.BundleName = "cisco_ios_xr"
    adjacencySids.EntityData.ParentYangName = "neighbors-subtlv"
    adjacencySids.EntityData.SegmentPath = "adjacency-sids"
    adjacencySids.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/" + adjacencySids.EntityData.SegmentPath
    adjacencySids.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySids.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySids.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySids.EntityData.Children = types.NewOrderedMap()
    adjacencySids.EntityData.Children.Append("adjacency-sid", types.YChild{"AdjacencySid", nil})
    for i := range adjacencySids.AdjacencySid {
        adjacencySids.EntityData.Children.Append(types.GetSegmentPath(adjacencySids.AdjacencySid[i]), types.YChild{"AdjacencySid", adjacencySids.AdjacencySid[i]})
    }
    adjacencySids.EntityData.Leafs = types.NewOrderedMap()

    adjacencySids.EntityData.YListKeys = []string {}

    return &(adjacencySids.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_AdjacencySids_AdjacencySid
// Adjacency Segment-IDs List
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_AdjacencySids_AdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the value of the Adjacency-SID. The
    // type is interface{} with range: 0..4294967295.
    Value interface{}

    // State parameters of Adjacency-SID.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_AdjacencySids_AdjacencySid_State
}

func (adjacencySid *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_AdjacencySids_AdjacencySid) GetEntityData() *types.CommonEntityData {
    adjacencySid.EntityData.YFilter = adjacencySid.YFilter
    adjacencySid.EntityData.YangName = "adjacency-sid"
    adjacencySid.EntityData.BundleName = "cisco_ios_xr"
    adjacencySid.EntityData.ParentYangName = "adjacency-sids"
    adjacencySid.EntityData.SegmentPath = "adjacency-sid" + types.AddKeyToken(adjacencySid.Value, "value")
    adjacencySid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/adjacency-sids/" + adjacencySid.EntityData.SegmentPath
    adjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySid.EntityData.Children = types.NewOrderedMap()
    adjacencySid.EntityData.Children.Append("state", types.YChild{"State", &adjacencySid.State})
    adjacencySid.EntityData.Leafs = types.NewOrderedMap()
    adjacencySid.EntityData.Leafs.Append("value", types.YLeaf{"Value", adjacencySid.Value})

    adjacencySid.EntityData.YListKeys = []string {"Value"}

    return &(adjacencySid.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_AdjacencySids_AdjacencySid_State
// State parameters of Adjacency-SID
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_AdjacencySids_AdjacencySid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Value that represents the weight of the Adj-SID for the purpose of load
    // balancing. The type is interface{} with range: 0..255.
    Weight interface{}

    // Flags associated with Adj-Segment-ID. The type is slice of
    // OpenconfigIsisLspAdjacencySidStateFlagsEnum.
    Flags []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_AdjacencySids_AdjacencySid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "adjacency-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/adjacency-sids/adjacency-sid/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})
    state.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", state.Weight})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_TeDefaultMetric
// This container defines sub-TLV
// 18
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_TeDefaultMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 18.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_TeDefaultMetric_State
}

func (teDefaultMetric *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_TeDefaultMetric) GetEntityData() *types.CommonEntityData {
    teDefaultMetric.EntityData.YFilter = teDefaultMetric.YFilter
    teDefaultMetric.EntityData.YangName = "te-default-metric"
    teDefaultMetric.EntityData.BundleName = "cisco_ios_xr"
    teDefaultMetric.EntityData.ParentYangName = "neighbors-subtlv"
    teDefaultMetric.EntityData.SegmentPath = "te-default-metric"
    teDefaultMetric.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/" + teDefaultMetric.EntityData.SegmentPath
    teDefaultMetric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teDefaultMetric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teDefaultMetric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teDefaultMetric.EntityData.Children = types.NewOrderedMap()
    teDefaultMetric.EntityData.Children.Append("state", types.YChild{"State", &teDefaultMetric.State})
    teDefaultMetric.EntityData.Leafs = types.NewOrderedMap()

    teDefaultMetric.EntityData.YListKeys = []string {}

    return &(teDefaultMetric.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_TeDefaultMetric_State
// State parameters of sub-TLV 18
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_TeDefaultMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This metric is administratively assigned and can be used to present a
    // differently weighted topology to traffic engineering SPF calculations. The
    // type is interface{} with range: 0..4294967295.
    TeDefaultMetric interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_TeDefaultMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "te-default-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/te-default-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("te-default-metric", types.YLeaf{"TeDefaultMetric", state.TeDefaultMetric})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_AdminGroup
// This container defines sub-TLV 3
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_AdminGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 3.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_AdminGroup_State
}

func (adminGroup *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_AdminGroup) GetEntityData() *types.CommonEntityData {
    adminGroup.EntityData.YFilter = adminGroup.YFilter
    adminGroup.EntityData.YangName = "admin-group"
    adminGroup.EntityData.BundleName = "cisco_ios_xr"
    adminGroup.EntityData.ParentYangName = "neighbors-subtlv"
    adminGroup.EntityData.SegmentPath = "admin-group"
    adminGroup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/" + adminGroup.EntityData.SegmentPath
    adminGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adminGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adminGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adminGroup.EntityData.Children = types.NewOrderedMap()
    adminGroup.EntityData.Children.Append("state", types.YChild{"State", &adminGroup.State})
    adminGroup.EntityData.Leafs = types.NewOrderedMap()

    adminGroup.EntityData.YListKeys = []string {}

    return &(adminGroup.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_AdminGroup_State
// State parameters of sub-TLV 3
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_AdminGroup_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The administrative group sub-TLV contains a 4-octet bit mask assigned by
    // the network administrator. The type is slice of interface{} with range:
    // 0..4294967295.
    AdminGroup []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_AdminGroup_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "admin-group"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/admin-group/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("admin-group", types.YLeaf{"AdminGroup", state.AdminGroup})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_MaxReservableLinkBandwidth
// This container defines sub-TLV
// 10
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_MaxReservableLinkBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 10.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_MaxReservableLinkBandwidth_State
}

func (maxReservableLinkBandwidth *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_MaxReservableLinkBandwidth) GetEntityData() *types.CommonEntityData {
    maxReservableLinkBandwidth.EntityData.YFilter = maxReservableLinkBandwidth.YFilter
    maxReservableLinkBandwidth.EntityData.YangName = "max-reservable-link-bandwidth"
    maxReservableLinkBandwidth.EntityData.BundleName = "cisco_ios_xr"
    maxReservableLinkBandwidth.EntityData.ParentYangName = "neighbors-subtlv"
    maxReservableLinkBandwidth.EntityData.SegmentPath = "max-reservable-link-bandwidth"
    maxReservableLinkBandwidth.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/" + maxReservableLinkBandwidth.EntityData.SegmentPath
    maxReservableLinkBandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxReservableLinkBandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxReservableLinkBandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxReservableLinkBandwidth.EntityData.Children = types.NewOrderedMap()
    maxReservableLinkBandwidth.EntityData.Children.Append("state", types.YChild{"State", &maxReservableLinkBandwidth.State})
    maxReservableLinkBandwidth.EntityData.Leafs = types.NewOrderedMap()

    maxReservableLinkBandwidth.EntityData.YListKeys = []string {}

    return &(maxReservableLinkBandwidth.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_MaxReservableLinkBandwidth_State
// State parameters of sub-TLV 10
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_MaxReservableLinkBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum amount of bandwidth that can be reserved in this direction on
    // this link. The type is string.
    MaxReservableLinkBandwidth interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_MaxReservableLinkBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "max-reservable-link-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/max-reservable-link-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("max-reservable-link-bandwidth", types.YLeaf{"MaxReservableLinkBandwidth", state.MaxReservableLinkBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_ExtendedAdminGroup
// This container defines sub-TLV
// 14
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_ExtendedAdminGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 14.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_ExtendedAdminGroup_State
}

func (extendedAdminGroup *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_ExtendedAdminGroup) GetEntityData() *types.CommonEntityData {
    extendedAdminGroup.EntityData.YFilter = extendedAdminGroup.YFilter
    extendedAdminGroup.EntityData.YangName = "extended-admin-group"
    extendedAdminGroup.EntityData.BundleName = "cisco_ios_xr"
    extendedAdminGroup.EntityData.ParentYangName = "neighbors-subtlv"
    extendedAdminGroup.EntityData.SegmentPath = "extended-admin-group"
    extendedAdminGroup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/" + extendedAdminGroup.EntityData.SegmentPath
    extendedAdminGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extendedAdminGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extendedAdminGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extendedAdminGroup.EntityData.Children = types.NewOrderedMap()
    extendedAdminGroup.EntityData.Children.Append("state", types.YChild{"State", &extendedAdminGroup.State})
    extendedAdminGroup.EntityData.Leafs = types.NewOrderedMap()

    extendedAdminGroup.EntityData.YListKeys = []string {}

    return &(extendedAdminGroup.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_ExtendedAdminGroup_State
// State parameters of sub-TLV 14
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_ExtendedAdminGroup_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The extended-admin-group sub-TLV is used in addition to the Administrative
    // Groups when it is desirable to make more than 32 colors available for
    // advertisement in a network. The type is slice of interface{} with range:
    // 0..4294967295.
    ExtendedAdminGroup []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_ExtendedAdminGroup_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "extended-admin-group"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/extended-admin-group/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("extended-admin-group", types.YLeaf{"ExtendedAdminGroup", state.ExtendedAdminGroup})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_UnreservedBandwidths
// Setup priority (0 through 7) for
// unreserved bandwidth
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_UnreservedBandwidths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Setup priority (0 through 7) for unreserved bandwidth. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_UnreservedBandwidths_UnreservedBandwidth.
    UnreservedBandwidth []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_UnreservedBandwidths_UnreservedBandwidth
}

func (unreservedBandwidths *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_UnreservedBandwidths) GetEntityData() *types.CommonEntityData {
    unreservedBandwidths.EntityData.YFilter = unreservedBandwidths.YFilter
    unreservedBandwidths.EntityData.YangName = "unreserved-bandwidths"
    unreservedBandwidths.EntityData.BundleName = "cisco_ios_xr"
    unreservedBandwidths.EntityData.ParentYangName = "neighbors-subtlv"
    unreservedBandwidths.EntityData.SegmentPath = "unreserved-bandwidths"
    unreservedBandwidths.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/" + unreservedBandwidths.EntityData.SegmentPath
    unreservedBandwidths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unreservedBandwidths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unreservedBandwidths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unreservedBandwidths.EntityData.Children = types.NewOrderedMap()
    unreservedBandwidths.EntityData.Children.Append("unreserved-bandwidth", types.YChild{"UnreservedBandwidth", nil})
    for i := range unreservedBandwidths.UnreservedBandwidth {
        unreservedBandwidths.EntityData.Children.Append(types.GetSegmentPath(unreservedBandwidths.UnreservedBandwidth[i]), types.YChild{"UnreservedBandwidth", unreservedBandwidths.UnreservedBandwidth[i]})
    }
    unreservedBandwidths.EntityData.Leafs = types.NewOrderedMap()

    unreservedBandwidths.EntityData.YListKeys = []string {}

    return &(unreservedBandwidths.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_UnreservedBandwidths_UnreservedBandwidth
// Setup priority (0 through 7)
// for unreserved bandwidth
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_UnreservedBandwidths_UnreservedBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the setup priority to which the
    // unreserved bandwidth corresponds. The type is interface{} with range:
    // 0..4294967295.
    Priority interface{}

    // State parameters of IS Extended Reachability sub-TLV 11.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_UnreservedBandwidths_UnreservedBandwidth_State
}

func (unreservedBandwidth *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_UnreservedBandwidths_UnreservedBandwidth) GetEntityData() *types.CommonEntityData {
    unreservedBandwidth.EntityData.YFilter = unreservedBandwidth.YFilter
    unreservedBandwidth.EntityData.YangName = "unreserved-bandwidth"
    unreservedBandwidth.EntityData.BundleName = "cisco_ios_xr"
    unreservedBandwidth.EntityData.ParentYangName = "unreserved-bandwidths"
    unreservedBandwidth.EntityData.SegmentPath = "unreserved-bandwidth" + types.AddKeyToken(unreservedBandwidth.Priority, "priority")
    unreservedBandwidth.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/unreserved-bandwidths/" + unreservedBandwidth.EntityData.SegmentPath
    unreservedBandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unreservedBandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unreservedBandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unreservedBandwidth.EntityData.Children = types.NewOrderedMap()
    unreservedBandwidth.EntityData.Children.Append("state", types.YChild{"State", &unreservedBandwidth.State})
    unreservedBandwidth.EntityData.Leafs = types.NewOrderedMap()
    unreservedBandwidth.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", unreservedBandwidth.Priority})

    unreservedBandwidth.EntityData.YListKeys = []string {"Priority"}

    return &(unreservedBandwidth.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_UnreservedBandwidths_UnreservedBandwidth_State
// State parameters of IS Extended Reachability
// sub-TLV 11
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_UnreservedBandwidths_UnreservedBandwidth_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Setup priority level of 0 through 7 to be used by Unreserved Bandwidth
    // sub-TLV 11. The type is interface{} with range: 0..255.
    Priority interface{}

    // The amount of bandwidth reservable in this direction on this link. The type
    // is string.
    UnreservedBandwidth interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_UnreservedBandwidths_UnreservedBandwidth_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "unreserved-bandwidth"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/unreserved-bandwidths/unreserved-bandwidth/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", state.Priority})
    state.EntityData.Leafs.Append("unreserved-bandwidth", types.YLeaf{"UnreservedBandwidth", state.UnreservedBandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv4InterfaceAddress
// This container defines sub-TLV 6
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv4InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 6.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv4InterfaceAddress_State
}

func (ipv4InterfaceAddress *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv4InterfaceAddress) GetEntityData() *types.CommonEntityData {
    ipv4InterfaceAddress.EntityData.YFilter = ipv4InterfaceAddress.YFilter
    ipv4InterfaceAddress.EntityData.YangName = "ipv4-interface-address"
    ipv4InterfaceAddress.EntityData.BundleName = "cisco_ios_xr"
    ipv4InterfaceAddress.EntityData.ParentYangName = "neighbors-subtlv"
    ipv4InterfaceAddress.EntityData.SegmentPath = "ipv4-interface-address"
    ipv4InterfaceAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/" + ipv4InterfaceAddress.EntityData.SegmentPath
    ipv4InterfaceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4InterfaceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4InterfaceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4InterfaceAddress.EntityData.Children = types.NewOrderedMap()
    ipv4InterfaceAddress.EntityData.Children.Append("state", types.YChild{"State", &ipv4InterfaceAddress.State})
    ipv4InterfaceAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv4InterfaceAddress.EntityData.YListKeys = []string {}

    return &(ipv4InterfaceAddress.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv4InterfaceAddress_State
// State parameters of sub-TLV 6
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv4InterfaceAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A 4-octet IPv4 address for the interface described by the (main) TLV. The
    // type is slice of string.
    Ipv4InterfaceAddress []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv4InterfaceAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "ipv4-interface-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/ipv4-interface-address/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv4-interface-address", types.YLeaf{"Ipv4InterfaceAddress", state.Ipv4InterfaceAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv4NeighborAddress
// This container defines sub-TLV 8
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv4NeighborAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 8.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv4NeighborAddress_State
}

func (ipv4NeighborAddress *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv4NeighborAddress) GetEntityData() *types.CommonEntityData {
    ipv4NeighborAddress.EntityData.YFilter = ipv4NeighborAddress.YFilter
    ipv4NeighborAddress.EntityData.YangName = "ipv4-neighbor-address"
    ipv4NeighborAddress.EntityData.BundleName = "cisco_ios_xr"
    ipv4NeighborAddress.EntityData.ParentYangName = "neighbors-subtlv"
    ipv4NeighborAddress.EntityData.SegmentPath = "ipv4-neighbor-address"
    ipv4NeighborAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/" + ipv4NeighborAddress.EntityData.SegmentPath
    ipv4NeighborAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4NeighborAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4NeighborAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4NeighborAddress.EntityData.Children = types.NewOrderedMap()
    ipv4NeighborAddress.EntityData.Children.Append("state", types.YChild{"State", &ipv4NeighborAddress.State})
    ipv4NeighborAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv4NeighborAddress.EntityData.YListKeys = []string {}

    return &(ipv4NeighborAddress.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv4NeighborAddress_State
// State parameters of sub-TLV 8
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv4NeighborAddress_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A single IPv4 address for a neighboring router on this link. The type is
    // slice of string.
    Ipv4NeighborAddress []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_Ipv4NeighborAddress_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "ipv4-neighbor-address"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/ipv4-neighbor-address/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("ipv4-neighbor-address", types.YLeaf{"Ipv4NeighborAddress", state.Ipv4NeighborAddress})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_BandwidthConstraints
// List of the Bandwidth
// Constraints sub-TLV instances
// present in the TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_BandwidthConstraints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the Bandwidth Constraints sub-TLV instances present in the TLV. The
    // type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_BandwidthConstraints_BandwidthConstraint.
    BandwidthConstraint []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_BandwidthConstraints_BandwidthConstraint
}

func (bandwidthConstraints *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_BandwidthConstraints) GetEntityData() *types.CommonEntityData {
    bandwidthConstraints.EntityData.YFilter = bandwidthConstraints.YFilter
    bandwidthConstraints.EntityData.YangName = "bandwidth-constraints"
    bandwidthConstraints.EntityData.BundleName = "cisco_ios_xr"
    bandwidthConstraints.EntityData.ParentYangName = "neighbors-subtlv"
    bandwidthConstraints.EntityData.SegmentPath = "bandwidth-constraints"
    bandwidthConstraints.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/" + bandwidthConstraints.EntityData.SegmentPath
    bandwidthConstraints.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bandwidthConstraints.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bandwidthConstraints.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bandwidthConstraints.EntityData.Children = types.NewOrderedMap()
    bandwidthConstraints.EntityData.Children.Append("bandwidth-constraint", types.YChild{"BandwidthConstraint", nil})
    for i := range bandwidthConstraints.BandwidthConstraint {
        bandwidthConstraints.EntityData.Children.Append(types.GetSegmentPath(bandwidthConstraints.BandwidthConstraint[i]), types.YChild{"BandwidthConstraint", bandwidthConstraints.BandwidthConstraint[i]})
    }
    bandwidthConstraints.EntityData.Leafs = types.NewOrderedMap()

    bandwidthConstraints.EntityData.YListKeys = []string {}

    return &(bandwidthConstraints.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_BandwidthConstraints_BandwidthConstraint
// List of the Bandwidth
// Constraints sub-TLV instances
// present in the TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_BandwidthConstraints_BandwidthConstraint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the model ID associated with the
    // instance of the Bandwidth Constraints sub-TLV. The type is interface{} with
    // range: 0..4294967295.
    ModelId interface{}

    // List of the constraints within the Bandwidth Constraints sub-TLV.
    Constraints OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_BandwidthConstraints_BandwidthConstraint_Constraints

    // State parameters of IS Extended Reachability sub-TLV 22.
    BandwidthConstraintsState OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_BandwidthConstraints_BandwidthConstraint_BandwidthConstraintsState
}

func (bandwidthConstraint *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_BandwidthConstraints_BandwidthConstraint) GetEntityData() *types.CommonEntityData {
    bandwidthConstraint.EntityData.YFilter = bandwidthConstraint.YFilter
    bandwidthConstraint.EntityData.YangName = "bandwidth-constraint"
    bandwidthConstraint.EntityData.BundleName = "cisco_ios_xr"
    bandwidthConstraint.EntityData.ParentYangName = "bandwidth-constraints"
    bandwidthConstraint.EntityData.SegmentPath = "bandwidth-constraint" + types.AddKeyToken(bandwidthConstraint.ModelId, "model-id")
    bandwidthConstraint.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/bandwidth-constraints/" + bandwidthConstraint.EntityData.SegmentPath
    bandwidthConstraint.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bandwidthConstraint.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bandwidthConstraint.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bandwidthConstraint.EntityData.Children = types.NewOrderedMap()
    bandwidthConstraint.EntityData.Children.Append("constraints", types.YChild{"Constraints", &bandwidthConstraint.Constraints})
    bandwidthConstraint.EntityData.Children.Append("bandwidth-constraints-state", types.YChild{"BandwidthConstraintsState", &bandwidthConstraint.BandwidthConstraintsState})
    bandwidthConstraint.EntityData.Leafs = types.NewOrderedMap()
    bandwidthConstraint.EntityData.Leafs.Append("model-id", types.YLeaf{"ModelId", bandwidthConstraint.ModelId})

    bandwidthConstraint.EntityData.YListKeys = []string {"ModelId"}

    return &(bandwidthConstraint.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_BandwidthConstraints_BandwidthConstraint_Constraints
// List of the constraints within
// the Bandwidth Constraints
// sub-TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_BandwidthConstraints_BandwidthConstraint_Constraints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of the constraints within the Bandwidth Constraints sub-TLV. The type
    // is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint.
    Constraint []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint
}

func (constraints *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_BandwidthConstraints_BandwidthConstraint_Constraints) GetEntityData() *types.CommonEntityData {
    constraints.EntityData.YFilter = constraints.YFilter
    constraints.EntityData.YangName = "constraints"
    constraints.EntityData.BundleName = "cisco_ios_xr"
    constraints.EntityData.ParentYangName = "bandwidth-constraint"
    constraints.EntityData.SegmentPath = "constraints"
    constraints.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/bandwidth-constraints/bandwidth-constraint/" + constraints.EntityData.SegmentPath
    constraints.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    constraints.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    constraints.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    constraints.EntityData.Children = types.NewOrderedMap()
    constraints.EntityData.Children.Append("constraint", types.YChild{"Constraint", nil})
    for i := range constraints.Constraint {
        constraints.EntityData.Children.Append(types.GetSegmentPath(constraints.Constraint[i]), types.YChild{"Constraint", constraints.Constraint[i]})
    }
    constraints.EntityData.Leafs = types.NewOrderedMap()

    constraints.EntityData.YListKeys = []string {}

    return &(constraints.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint
// List of the constraints
// within the Bandwidth
// Constraints sub-TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the unique ID for the BCN level. The
    // type is interface{} with range: 0..4294967295.
    ConstraintId interface{}

    // Operational state parameters of the BCN level.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State
}

func (constraint *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint) GetEntityData() *types.CommonEntityData {
    constraint.EntityData.YFilter = constraint.YFilter
    constraint.EntityData.YangName = "constraint"
    constraint.EntityData.BundleName = "cisco_ios_xr"
    constraint.EntityData.ParentYangName = "constraints"
    constraint.EntityData.SegmentPath = "constraint" + types.AddKeyToken(constraint.ConstraintId, "constraint-id")
    constraint.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/bandwidth-constraints/bandwidth-constraint/constraints/" + constraint.EntityData.SegmentPath
    constraint.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    constraint.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    constraint.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    constraint.EntityData.Children = types.NewOrderedMap()
    constraint.EntityData.Children.Append("state", types.YChild{"State", &constraint.State})
    constraint.EntityData.Leafs = types.NewOrderedMap()
    constraint.EntityData.Leafs.Append("constraint-id", types.YLeaf{"ConstraintId", constraint.ConstraintId})

    constraint.EntityData.YListKeys = []string {"ConstraintId"}

    return &(constraint.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State
// Operational state parameters of the BCN level
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unique reference for the bandwidth constraint level. The type is
    // interface{} with range: 0..4294967295.
    ConstraintId interface{}

    // The bandwidth constraint, expressed as a 32-bit IEEE floating point number
    // expressed in bytes per second. The type is string. Units are byte/s.
    Bandwidth interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_BandwidthConstraints_BandwidthConstraint_Constraints_Constraint_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "constraint"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("constraint-id", types.YLeaf{"ConstraintId", state.ConstraintId})
    state.EntityData.Leafs.Append("bandwidth", types.YLeaf{"Bandwidth", state.Bandwidth})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_BandwidthConstraints_BandwidthConstraint_BandwidthConstraintsState
// State parameters of IS
// Extended Reachability sub-TLV
// 22
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_BandwidthConstraints_BandwidthConstraint_BandwidthConstraintsState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Identifier for the Bandwidth Constraints  Model currently in use by the LSR
    // initiating the IGP advertisement. The type is interface{} with range:
    // 0..255.
    ModelId interface{}
}

func (bandwidthConstraintsState *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsSubtlvs_NeighborsSubtlv_BandwidthConstraints_BandwidthConstraint_BandwidthConstraintsState) GetEntityData() *types.CommonEntityData {
    bandwidthConstraintsState.EntityData.YFilter = bandwidthConstraintsState.YFilter
    bandwidthConstraintsState.EntityData.YangName = "bandwidth-constraints-state"
    bandwidthConstraintsState.EntityData.BundleName = "cisco_ios_xr"
    bandwidthConstraintsState.EntityData.ParentYangName = "bandwidth-constraint"
    bandwidthConstraintsState.EntityData.SegmentPath = "bandwidth-constraints-state"
    bandwidthConstraintsState.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-subtlvs/neighbors-subtlv/bandwidth-constraints/bandwidth-constraint/" + bandwidthConstraintsState.EntityData.SegmentPath
    bandwidthConstraintsState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bandwidthConstraintsState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bandwidthConstraintsState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bandwidthConstraintsState.EntityData.Children = types.NewOrderedMap()
    bandwidthConstraintsState.EntityData.Leafs = types.NewOrderedMap()
    bandwidthConstraintsState.EntityData.Leafs.Append("model-id", types.YLeaf{"ModelId", bandwidthConstraintsState.ModelId})

    bandwidthConstraintsState.EntityData.YListKeys = []string {}

    return &(bandwidthConstraintsState.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsUndefinedSubtlvs
// Sub-TLVs that are not defined in
// the model or not recognised by
// system
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsUndefinedSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub-TLVs that are not defined in the model or not recognised by system. The
    // type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsUndefinedSubtlvs_NeighborsUndefinedSubtlv.
    NeighborsUndefinedSubtlv []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsUndefinedSubtlvs_NeighborsUndefinedSubtlv
}

func (neighborsUndefinedSubtlvs *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsUndefinedSubtlvs) GetEntityData() *types.CommonEntityData {
    neighborsUndefinedSubtlvs.EntityData.YFilter = neighborsUndefinedSubtlvs.YFilter
    neighborsUndefinedSubtlvs.EntityData.YangName = "neighbors-undefined-subtlvs"
    neighborsUndefinedSubtlvs.EntityData.BundleName = "cisco_ios_xr"
    neighborsUndefinedSubtlvs.EntityData.ParentYangName = "extended-is-reachability-neighbor"
    neighborsUndefinedSubtlvs.EntityData.SegmentPath = "neighbors-undefined-subtlvs"
    neighborsUndefinedSubtlvs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/" + neighborsUndefinedSubtlvs.EntityData.SegmentPath
    neighborsUndefinedSubtlvs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborsUndefinedSubtlvs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborsUndefinedSubtlvs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborsUndefinedSubtlvs.EntityData.Children = types.NewOrderedMap()
    neighborsUndefinedSubtlvs.EntityData.Children.Append("neighbors-undefined-subtlv", types.YChild{"NeighborsUndefinedSubtlv", nil})
    for i := range neighborsUndefinedSubtlvs.NeighborsUndefinedSubtlv {
        neighborsUndefinedSubtlvs.EntityData.Children.Append(types.GetSegmentPath(neighborsUndefinedSubtlvs.NeighborsUndefinedSubtlv[i]), types.YChild{"NeighborsUndefinedSubtlv", neighborsUndefinedSubtlvs.NeighborsUndefinedSubtlv[i]})
    }
    neighborsUndefinedSubtlvs.EntityData.Leafs = types.NewOrderedMap()

    neighborsUndefinedSubtlvs.EntityData.YListKeys = []string {}

    return &(neighborsUndefinedSubtlvs.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsUndefinedSubtlvs_NeighborsUndefinedSubtlv
// Sub-TLVs that are not defined in
// the model or not recognised by
// system
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsUndefinedSubtlvs_NeighborsUndefinedSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the type of the undefined sub-TLV.
    // The type is interface{} with range: 0..4294967295.
    Type interface{}

    // State parameters of the undefined sub-TLV.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsUndefinedSubtlvs_NeighborsUndefinedSubtlv_State
}

func (neighborsUndefinedSubtlv *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsUndefinedSubtlvs_NeighborsUndefinedSubtlv) GetEntityData() *types.CommonEntityData {
    neighborsUndefinedSubtlv.EntityData.YFilter = neighborsUndefinedSubtlv.YFilter
    neighborsUndefinedSubtlv.EntityData.YangName = "neighbors-undefined-subtlv"
    neighborsUndefinedSubtlv.EntityData.BundleName = "cisco_ios_xr"
    neighborsUndefinedSubtlv.EntityData.ParentYangName = "neighbors-undefined-subtlvs"
    neighborsUndefinedSubtlv.EntityData.SegmentPath = "neighbors-undefined-subtlv" + types.AddKeyToken(neighborsUndefinedSubtlv.Type, "type")
    neighborsUndefinedSubtlv.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-undefined-subtlvs/" + neighborsUndefinedSubtlv.EntityData.SegmentPath
    neighborsUndefinedSubtlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborsUndefinedSubtlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborsUndefinedSubtlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborsUndefinedSubtlv.EntityData.Children = types.NewOrderedMap()
    neighborsUndefinedSubtlv.EntityData.Children.Append("state", types.YChild{"State", &neighborsUndefinedSubtlv.State})
    neighborsUndefinedSubtlv.EntityData.Leafs = types.NewOrderedMap()
    neighborsUndefinedSubtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", neighborsUndefinedSubtlv.Type})

    neighborsUndefinedSubtlv.EntityData.YListKeys = []string {"Type"}

    return &(neighborsUndefinedSubtlv.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsUndefinedSubtlvs_NeighborsUndefinedSubtlv_State
// State parameters of the undefined sub-TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsUndefinedSubtlvs_NeighborsUndefinedSubtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsUndefinedSubtlvs_NeighborsUndefinedSubtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "neighbors-undefined-subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/neighbors-undefined-subtlvs/neighbors-undefined-subtlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("length", types.YLeaf{"Length", state.Length})
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsState
// State parameters of extended
// neighbor
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // System-id of the neighbor. The type is string.
    SystemId interface{}

    // Metric value. The type is interface{} with range: 0..4294967295.
    Metric interface{}
}

func (neighborsState *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIsReachability_ExtendedIsReachabilityNeighbors_ExtendedIsReachabilityNeighbor_NeighborsState) GetEntityData() *types.CommonEntityData {
    neighborsState.EntityData.YFilter = neighborsState.YFilter
    neighborsState.EntityData.YangName = "neighbors-state"
    neighborsState.EntityData.BundleName = "cisco_ios_xr"
    neighborsState.EntityData.ParentYangName = "extended-is-reachability-neighbor"
    neighborsState.EntityData.SegmentPath = "neighbors-state"
    neighborsState.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-is-reachability/extended-is-reachability-neighbors/extended-is-reachability-neighbor/" + neighborsState.EntityData.SegmentPath
    neighborsState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborsState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborsState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborsState.EntityData.Children = types.NewOrderedMap()
    neighborsState.EntityData.Leafs = types.NewOrderedMap()
    neighborsState.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", neighborsState.SystemId})
    neighborsState.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", neighborsState.Metric})

    neighborsState.EntityData.YListKeys = []string {}

    return &(neighborsState.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_InstanceIds
// A list of instance IDs received
// within TLV 7 within an IS-IS LSP
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_InstanceIds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A list of instance IDs received within TLV 7 within an IS-IS LSP. The type
    // is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_InstanceIds_InstanceId.
    InstanceId []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_InstanceIds_InstanceId
}

func (instanceIds *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_InstanceIds) GetEntityData() *types.CommonEntityData {
    instanceIds.EntityData.YFilter = instanceIds.YFilter
    instanceIds.EntityData.YangName = "instance-ids"
    instanceIds.EntityData.BundleName = "cisco_ios_xr"
    instanceIds.EntityData.ParentYangName = "tlvs"
    instanceIds.EntityData.SegmentPath = "instance-ids"
    instanceIds.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/" + instanceIds.EntityData.SegmentPath
    instanceIds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instanceIds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instanceIds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instanceIds.EntityData.Children = types.NewOrderedMap()
    instanceIds.EntityData.Children.Append("instance-id", types.YChild{"InstanceId", nil})
    for i := range instanceIds.InstanceId {
        instanceIds.EntityData.Children.Append(types.GetSegmentPath(instanceIds.InstanceId[i]), types.YChild{"InstanceId", instanceIds.InstanceId[i]})
    }
    instanceIds.EntityData.Leafs = types.NewOrderedMap()

    instanceIds.EntityData.YListKeys = []string {}

    return &(instanceIds.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_InstanceIds_InstanceId
// A list of instance IDs received
// within TLV 7 within an IS-IS LSP
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_InstanceIds_InstanceId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the unique instance ID. The type is
    // interface{} with range: 0..4294967295.
    InstanceId interface{}

    // State parameters of ISIS TLV 7.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_InstanceIds_InstanceId_State
}

func (instanceId *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_InstanceIds_InstanceId) GetEntityData() *types.CommonEntityData {
    instanceId.EntityData.YFilter = instanceId.YFilter
    instanceId.EntityData.YangName = "instance-id"
    instanceId.EntityData.BundleName = "cisco_ios_xr"
    instanceId.EntityData.ParentYangName = "instance-ids"
    instanceId.EntityData.SegmentPath = "instance-id" + types.AddKeyToken(instanceId.InstanceId, "instance-id")
    instanceId.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/instance-ids/" + instanceId.EntityData.SegmentPath
    instanceId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instanceId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instanceId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instanceId.EntityData.Children = types.NewOrderedMap()
    instanceId.EntityData.Children.Append("state", types.YChild{"State", &instanceId.State})
    instanceId.EntityData.Leafs = types.NewOrderedMap()
    instanceId.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instanceId.InstanceId})

    instanceId.EntityData.YListKeys = []string {"InstanceId"}

    return &(instanceId.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_InstanceIds_InstanceId_State
// State parameters of ISIS TLV 7
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_InstanceIds_InstanceId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An Instance Identifier (IID) to uniquely identify an IS-IS instance. The
    // type is interface{} with range: 0..65535.
    InstanceId interface{}

    // Instance-Specific Topology Identifiers (ITIDs). The type is slice of
    // interface{} with range: 0..65535.
    TopologyId []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_InstanceIds_InstanceId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "instance-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/instance-ids/instance-id/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", state.InstanceId})
    state.EntityData.Leafs.Append("topology-id", types.YLeaf{"TopologyId", state.TopologyId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4Srlgs
// Instance of the IPv4 SRLG TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4Srlgs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Instance of the IPv4 SRLG TLV. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4Srlgs_Ipv4Srlg.
    Ipv4Srlg []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4Srlgs_Ipv4Srlg
}

func (ipv4Srlgs *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4Srlgs) GetEntityData() *types.CommonEntityData {
    ipv4Srlgs.EntityData.YFilter = ipv4Srlgs.YFilter
    ipv4Srlgs.EntityData.YangName = "ipv4-srlgs"
    ipv4Srlgs.EntityData.BundleName = "cisco_ios_xr"
    ipv4Srlgs.EntityData.ParentYangName = "tlvs"
    ipv4Srlgs.EntityData.SegmentPath = "ipv4-srlgs"
    ipv4Srlgs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/" + ipv4Srlgs.EntityData.SegmentPath
    ipv4Srlgs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Srlgs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Srlgs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Srlgs.EntityData.Children = types.NewOrderedMap()
    ipv4Srlgs.EntityData.Children.Append("ipv4-srlg", types.YChild{"Ipv4Srlg", nil})
    for i := range ipv4Srlgs.Ipv4Srlg {
        ipv4Srlgs.EntityData.Children.Append(types.GetSegmentPath(ipv4Srlgs.Ipv4Srlg[i]), types.YChild{"Ipv4Srlg", ipv4Srlgs.Ipv4Srlg[i]})
    }
    ipv4Srlgs.EntityData.Leafs = types.NewOrderedMap()

    ipv4Srlgs.EntityData.YListKeys = []string {}

    return &(ipv4Srlgs.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4Srlgs_Ipv4Srlg
// Instance of the IPv4 SRLG TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4Srlgs_Ipv4Srlg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the instance number of TLV 138. The
    // type is interface{} with range: 0..4294967295.
    InstanceNumber interface{}

    // State parameters of TLV 138.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4Srlgs_Ipv4Srlg_State
}

func (ipv4Srlg *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4Srlgs_Ipv4Srlg) GetEntityData() *types.CommonEntityData {
    ipv4Srlg.EntityData.YFilter = ipv4Srlg.YFilter
    ipv4Srlg.EntityData.YangName = "ipv4-srlg"
    ipv4Srlg.EntityData.BundleName = "cisco_ios_xr"
    ipv4Srlg.EntityData.ParentYangName = "ipv4-srlgs"
    ipv4Srlg.EntityData.SegmentPath = "ipv4-srlg" + types.AddKeyToken(ipv4Srlg.InstanceNumber, "instance-number")
    ipv4Srlg.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv4-srlgs/" + ipv4Srlg.EntityData.SegmentPath
    ipv4Srlg.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Srlg.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Srlg.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Srlg.EntityData.Children = types.NewOrderedMap()
    ipv4Srlg.EntityData.Children.Append("state", types.YChild{"State", &ipv4Srlg.State})
    ipv4Srlg.EntityData.Leafs = types.NewOrderedMap()
    ipv4Srlg.EntityData.Leafs.Append("instance-number", types.YLeaf{"InstanceNumber", ipv4Srlg.InstanceNumber})

    ipv4Srlg.EntityData.YListKeys = []string {"InstanceNumber"}

    return &(ipv4Srlg.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4Srlgs_Ipv4Srlg_State
// State parameters of TLV 138
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4Srlgs_Ipv4Srlg_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An arbitrary unsigned 32-bit integer used to disambiguate the instance of
    // TLV 138. The type is interface{} with range: 0..4294967295.
    InstanceNumber interface{}

    // Neighbor system ID. The type is string.
    SystemId interface{}

    // Pseudonode number if the neighbor is on a LAN interface. The type is
    // interface{} with range: 0..255.
    PsnNumber interface{}

    // IPv4 interface address. The type is string.
    Ipv4InterfaceAddress interface{}

    // IPv4 neighbor address. The type is string.
    Ipv4NeighborAddress interface{}

    // SRLG flags. The type is slice of OpenconfigIsisLspStateFlagsEnum.
    Flags []interface{}

    // List of SRLG values. The type is slice of interface{} with range:
    // 0..4294967295.
    SrlgValue []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4Srlgs_Ipv4Srlg_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "ipv4-srlg"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv4-srlgs/ipv4-srlg/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("instance-number", types.YLeaf{"InstanceNumber", state.InstanceNumber})
    state.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", state.SystemId})
    state.EntityData.Leafs.Append("psn-number", types.YLeaf{"PsnNumber", state.PsnNumber})
    state.EntityData.Leafs.Append("ipv4-interface-address", types.YLeaf{"Ipv4InterfaceAddress", state.Ipv4InterfaceAddress})
    state.EntityData.Leafs.Append("ipv4-neighbor-address", types.YLeaf{"Ipv4NeighborAddress", state.Ipv4NeighborAddress})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})
    state.EntityData.Leafs.Append("srlg-value", types.YLeaf{"SrlgValue", state.SrlgValue})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability
// This container describes list of ISIS
// neighbors and attributes
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IS reachability neighbor attributes.
    Neighbors OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors
}

func (isReachability *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability) GetEntityData() *types.CommonEntityData {
    isReachability.EntityData.YFilter = isReachability.YFilter
    isReachability.EntityData.YangName = "is-reachability"
    isReachability.EntityData.BundleName = "cisco_ios_xr"
    isReachability.EntityData.ParentYangName = "tlvs"
    isReachability.EntityData.SegmentPath = "is-reachability"
    isReachability.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/" + isReachability.EntityData.SegmentPath
    isReachability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isReachability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isReachability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isReachability.EntityData.Children = types.NewOrderedMap()
    isReachability.EntityData.Children.Append("neighbors", types.YChild{"Neighbors", &isReachability.Neighbors})
    isReachability.EntityData.Leafs = types.NewOrderedMap()

    isReachability.EntityData.YListKeys = []string {}

    return &(isReachability.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors
// IS reachability neighbor attributes
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IS reachability neighbor attributes. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor.
    Neighbor []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor
}

func (neighbors *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "cisco_ios_xr"
    neighbors.EntityData.ParentYangName = "is-reachability"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/is-reachability/" + neighbors.EntityData.SegmentPath
    neighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbors.EntityData.Children = types.NewOrderedMap()
    neighbors.EntityData.Children.Append("neighbor", types.YChild{"Neighbor", nil})
    for i := range neighbors.Neighbor {
        neighbors.EntityData.Children.Append(types.GetSegmentPath(neighbors.Neighbor[i]), types.YChild{"Neighbor", neighbors.Neighbor[i]})
    }
    neighbors.EntityData.Leafs = types.NewOrderedMap()

    neighbors.EntityData.YListKeys = []string {}

    return &(neighbors.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor
// IS reachability neighbor attributes
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the system ID of the neighbor. The
    // type is string.
    SystemId interface{}

    // State parameters of IS standard neighbor.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_State

    // This container defines ISIS Default Metric.
    DefaultMetric OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_DefaultMetric

    // This container defines the ISIS delay metric.
    DelayMetric OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_DelayMetric

    // This container defines the ISIS expense metric.
    ExpenseMetric OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_ExpenseMetric

    // This container defines the ISIS error metric.
    ErrorMetric OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_ErrorMetric
}

func (neighbor *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "cisco_ios_xr"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor" + types.AddKeyToken(neighbor.SystemId, "system-id")
    neighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/is-reachability/neighbors/" + neighbor.EntityData.SegmentPath
    neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbor.EntityData.Children = types.NewOrderedMap()
    neighbor.EntityData.Children.Append("state", types.YChild{"State", &neighbor.State})
    neighbor.EntityData.Children.Append("default-metric", types.YChild{"DefaultMetric", &neighbor.DefaultMetric})
    neighbor.EntityData.Children.Append("delay-metric", types.YChild{"DelayMetric", &neighbor.DelayMetric})
    neighbor.EntityData.Children.Append("expense-metric", types.YChild{"ExpenseMetric", &neighbor.ExpenseMetric})
    neighbor.EntityData.Children.Append("error-metric", types.YChild{"ErrorMetric", &neighbor.ErrorMetric})
    neighbor.EntityData.Leafs = types.NewOrderedMap()
    neighbor.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", neighbor.SystemId})

    neighbor.EntityData.YListKeys = []string {"SystemId"}

    return &(neighbor.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_State
// State parameters of IS standard neighbor
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // System-ID of IS neighbor. The type is string.
    SystemId interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "neighbor"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/is-reachability/neighbors/neighbor/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", state.SystemId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_DefaultMetric
// This container defines ISIS Default Metric
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_DefaultMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters for default-metric.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_DefaultMetric_State
}

func (defaultMetric *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_DefaultMetric) GetEntityData() *types.CommonEntityData {
    defaultMetric.EntityData.YFilter = defaultMetric.YFilter
    defaultMetric.EntityData.YangName = "default-metric"
    defaultMetric.EntityData.BundleName = "cisco_ios_xr"
    defaultMetric.EntityData.ParentYangName = "neighbor"
    defaultMetric.EntityData.SegmentPath = "default-metric"
    defaultMetric.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/is-reachability/neighbors/neighbor/" + defaultMetric.EntityData.SegmentPath
    defaultMetric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultMetric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultMetric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultMetric.EntityData.Children = types.NewOrderedMap()
    defaultMetric.EntityData.Children.Append("state", types.YChild{"State", &defaultMetric.State})
    defaultMetric.EntityData.Leafs = types.NewOrderedMap()

    defaultMetric.EntityData.YListKeys = []string {}

    return &(defaultMetric.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_DefaultMetric_State
// State parameters for default-metric
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_DefaultMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS Default-Metric Flags. The type is
    // OpenconfigIsisLspDefaultMetricStateFlagsEnum.
    Flags interface{}

    // ISIS default metric value. The type is interface{} with range: 0..255.
    DefaultMetric interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_DefaultMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "default-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/is-reachability/neighbors/neighbor/default-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})
    state.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", state.DefaultMetric})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_DelayMetric
// This container defines the ISIS delay metric
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_DelayMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of delay-metric.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_DelayMetric_State
}

func (delayMetric *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_DelayMetric) GetEntityData() *types.CommonEntityData {
    delayMetric.EntityData.YFilter = delayMetric.YFilter
    delayMetric.EntityData.YangName = "delay-metric"
    delayMetric.EntityData.BundleName = "cisco_ios_xr"
    delayMetric.EntityData.ParentYangName = "neighbor"
    delayMetric.EntityData.SegmentPath = "delay-metric"
    delayMetric.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/is-reachability/neighbors/neighbor/" + delayMetric.EntityData.SegmentPath
    delayMetric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    delayMetric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    delayMetric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    delayMetric.EntityData.Children = types.NewOrderedMap()
    delayMetric.EntityData.Children.Append("state", types.YChild{"State", &delayMetric.State})
    delayMetric.EntityData.Leafs = types.NewOrderedMap()

    delayMetric.EntityData.YListKeys = []string {}

    return &(delayMetric.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_DelayMetric_State
// State parameters of delay-metric
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_DelayMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS delay metric value. The type is interface{} with range: 0..255.
    Metric interface{}

    // ISIS Delay Metric Flags. The type is slice of
    // OpenconfigIsisLspIsisMetricFlagsEnum.
    Flags []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_DelayMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "delay-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/is-reachability/neighbors/neighbor/delay-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_ExpenseMetric
// This container defines the ISIS expense metric
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_ExpenseMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of expense-metric.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_ExpenseMetric_State
}

func (expenseMetric *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_ExpenseMetric) GetEntityData() *types.CommonEntityData {
    expenseMetric.EntityData.YFilter = expenseMetric.YFilter
    expenseMetric.EntityData.YangName = "expense-metric"
    expenseMetric.EntityData.BundleName = "cisco_ios_xr"
    expenseMetric.EntityData.ParentYangName = "neighbor"
    expenseMetric.EntityData.SegmentPath = "expense-metric"
    expenseMetric.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/is-reachability/neighbors/neighbor/" + expenseMetric.EntityData.SegmentPath
    expenseMetric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    expenseMetric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    expenseMetric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    expenseMetric.EntityData.Children = types.NewOrderedMap()
    expenseMetric.EntityData.Children.Append("state", types.YChild{"State", &expenseMetric.State})
    expenseMetric.EntityData.Leafs = types.NewOrderedMap()

    expenseMetric.EntityData.YListKeys = []string {}

    return &(expenseMetric.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_ExpenseMetric_State
// State parameters of expense-metric
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_ExpenseMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS expense metric value. The type is interface{} with range: 0..255.
    Metric interface{}

    // ISIS Expense Metric Flags. The type is slice of
    // OpenconfigIsisLspIsisMetricFlagsEnum.
    Flags []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_ExpenseMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "expense-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/is-reachability/neighbors/neighbor/expense-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_ErrorMetric
// This container defines the ISIS error metric
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_ErrorMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of error-metric.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_ErrorMetric_State
}

func (errorMetric *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_ErrorMetric) GetEntityData() *types.CommonEntityData {
    errorMetric.EntityData.YFilter = errorMetric.YFilter
    errorMetric.EntityData.YangName = "error-metric"
    errorMetric.EntityData.BundleName = "cisco_ios_xr"
    errorMetric.EntityData.ParentYangName = "neighbor"
    errorMetric.EntityData.SegmentPath = "error-metric"
    errorMetric.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/is-reachability/neighbors/neighbor/" + errorMetric.EntityData.SegmentPath
    errorMetric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    errorMetric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    errorMetric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    errorMetric.EntityData.Children = types.NewOrderedMap()
    errorMetric.EntityData.Children.Append("state", types.YChild{"State", &errorMetric.State})
    errorMetric.EntityData.Leafs = types.NewOrderedMap()

    errorMetric.EntityData.YListKeys = []string {}

    return &(errorMetric.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_ErrorMetric_State
// State parameters of error-metric
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_ErrorMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS error metric value. The type is interface{} with range: 0..255.
    Metric interface{}

    // IS-IS error metric flags. The type is slice of
    // OpenconfigIsisLspIsisMetricFlagsEnum.
    Flags []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_IsReachability_Neighbors_Neighbor_ErrorMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "error-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/is-reachability/neighbors/neighbor/error-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4TeRouterId
// This container defines TLV 134
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4TeRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of ISIS TLV 134.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4TeRouterId_State
}

func (ipv4TeRouterId *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4TeRouterId) GetEntityData() *types.CommonEntityData {
    ipv4TeRouterId.EntityData.YFilter = ipv4TeRouterId.YFilter
    ipv4TeRouterId.EntityData.YangName = "ipv4-te-router-id"
    ipv4TeRouterId.EntityData.BundleName = "cisco_ios_xr"
    ipv4TeRouterId.EntityData.ParentYangName = "tlvs"
    ipv4TeRouterId.EntityData.SegmentPath = "ipv4-te-router-id"
    ipv4TeRouterId.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/" + ipv4TeRouterId.EntityData.SegmentPath
    ipv4TeRouterId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4TeRouterId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4TeRouterId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4TeRouterId.EntityData.Children = types.NewOrderedMap()
    ipv4TeRouterId.EntityData.Children.Append("state", types.YChild{"State", &ipv4TeRouterId.State})
    ipv4TeRouterId.EntityData.Leafs = types.NewOrderedMap()

    ipv4TeRouterId.EntityData.YListKeys = []string {}

    return &(ipv4TeRouterId.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4TeRouterId_State
// State parameters of ISIS TLV 134
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4TeRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 Traffic Engineering router ID of the node. The type is slice of
    // string.
    RouterId []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4TeRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "ipv4-te-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv4-te-router-id/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", state.RouterId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Nlpid
// This container defines TLV 129
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Nlpid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of ISIS TLV 129.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Nlpid_State
}

func (nlpid *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Nlpid) GetEntityData() *types.CommonEntityData {
    nlpid.EntityData.YFilter = nlpid.YFilter
    nlpid.EntityData.YangName = "nlpid"
    nlpid.EntityData.BundleName = "cisco_ios_xr"
    nlpid.EntityData.ParentYangName = "tlvs"
    nlpid.EntityData.SegmentPath = "nlpid"
    nlpid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/" + nlpid.EntityData.SegmentPath
    nlpid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nlpid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nlpid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nlpid.EntityData.Children = types.NewOrderedMap()
    nlpid.EntityData.Children.Append("state", types.YChild{"State", &nlpid.State})
    nlpid.EntityData.Leafs = types.NewOrderedMap()

    nlpid.EntityData.YListKeys = []string {}

    return &(nlpid.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Nlpid_State
// State parameters of ISIS TLV 129
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Nlpid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol supported. The type is slice of OpenconfigIsisLspNlpidEnum.
    Nlpid []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Nlpid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "nlpid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/nlpid/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("nlpid", types.YLeaf{"Nlpid", state.Nlpid})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability
// This container defines list of IPv4
// extended reachability information
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list describes IPv4 extended prefixes and attributes.
    ExtendedIpv4ReachabilityPrefixes OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes
}

func (extendedIpv4Reachability *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability) GetEntityData() *types.CommonEntityData {
    extendedIpv4Reachability.EntityData.YFilter = extendedIpv4Reachability.YFilter
    extendedIpv4Reachability.EntityData.YangName = "extended-ipv4-reachability"
    extendedIpv4Reachability.EntityData.BundleName = "cisco_ios_xr"
    extendedIpv4Reachability.EntityData.ParentYangName = "tlvs"
    extendedIpv4Reachability.EntityData.SegmentPath = "extended-ipv4-reachability"
    extendedIpv4Reachability.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/" + extendedIpv4Reachability.EntityData.SegmentPath
    extendedIpv4Reachability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extendedIpv4Reachability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extendedIpv4Reachability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extendedIpv4Reachability.EntityData.Children = types.NewOrderedMap()
    extendedIpv4Reachability.EntityData.Children.Append("extended-ipv4-reachability-prefixes", types.YChild{"ExtendedIpv4ReachabilityPrefixes", &extendedIpv4Reachability.ExtendedIpv4ReachabilityPrefixes})
    extendedIpv4Reachability.EntityData.Leafs = types.NewOrderedMap()

    extendedIpv4Reachability.EntityData.YListKeys = []string {}

    return &(extendedIpv4Reachability.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes
// This list describes IPv4 extended
// prefixes and attributes
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list describes IPv4 extended prefixes and attributes. The type is
    // slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe.
    ExtendedIpv4ReachabilityPrefixe []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe
}

func (extendedIpv4ReachabilityPrefixes *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes) GetEntityData() *types.CommonEntityData {
    extendedIpv4ReachabilityPrefixes.EntityData.YFilter = extendedIpv4ReachabilityPrefixes.YFilter
    extendedIpv4ReachabilityPrefixes.EntityData.YangName = "extended-ipv4-reachability-prefixes"
    extendedIpv4ReachabilityPrefixes.EntityData.BundleName = "cisco_ios_xr"
    extendedIpv4ReachabilityPrefixes.EntityData.ParentYangName = "extended-ipv4-reachability"
    extendedIpv4ReachabilityPrefixes.EntityData.SegmentPath = "extended-ipv4-reachability-prefixes"
    extendedIpv4ReachabilityPrefixes.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-ipv4-reachability/" + extendedIpv4ReachabilityPrefixes.EntityData.SegmentPath
    extendedIpv4ReachabilityPrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extendedIpv4ReachabilityPrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extendedIpv4ReachabilityPrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extendedIpv4ReachabilityPrefixes.EntityData.Children = types.NewOrderedMap()
    extendedIpv4ReachabilityPrefixes.EntityData.Children.Append("extended-ipv4-reachability-prefixe", types.YChild{"ExtendedIpv4ReachabilityPrefixe", nil})
    for i := range extendedIpv4ReachabilityPrefixes.ExtendedIpv4ReachabilityPrefixe {
        extendedIpv4ReachabilityPrefixes.EntityData.Children.Append(types.GetSegmentPath(extendedIpv4ReachabilityPrefixes.ExtendedIpv4ReachabilityPrefixe[i]), types.YChild{"ExtendedIpv4ReachabilityPrefixe", extendedIpv4ReachabilityPrefixes.ExtendedIpv4ReachabilityPrefixe[i]})
    }
    extendedIpv4ReachabilityPrefixes.EntityData.Leafs = types.NewOrderedMap()

    extendedIpv4ReachabilityPrefixes.EntityData.YListKeys = []string {}

    return &(extendedIpv4ReachabilityPrefixes.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe
// This list describes IPv4 extended
// prefixes and attributes
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the IPv4 prefix that the TLV
    // describes the attributes of. The type is string.
    Prefix interface{}

    // State parameters of an IPv4 extended prefix.
    PrefixesState OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesState

    // List of subTLV types in the LSDB for the specified TLV.
    PrefixesSubtlvs OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs

    // Sub-TLVs that are not defined in the model or not recognised by system.
    PrefixesUndefinedSubtlvs OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesUndefinedSubtlvs
}

func (extendedIpv4ReachabilityPrefixe *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe) GetEntityData() *types.CommonEntityData {
    extendedIpv4ReachabilityPrefixe.EntityData.YFilter = extendedIpv4ReachabilityPrefixe.YFilter
    extendedIpv4ReachabilityPrefixe.EntityData.YangName = "extended-ipv4-reachability-prefixe"
    extendedIpv4ReachabilityPrefixe.EntityData.BundleName = "cisco_ios_xr"
    extendedIpv4ReachabilityPrefixe.EntityData.ParentYangName = "extended-ipv4-reachability-prefixes"
    extendedIpv4ReachabilityPrefixe.EntityData.SegmentPath = "extended-ipv4-reachability-prefixe" + types.AddKeyToken(extendedIpv4ReachabilityPrefixe.Prefix, "prefix")
    extendedIpv4ReachabilityPrefixe.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-ipv4-reachability/extended-ipv4-reachability-prefixes/" + extendedIpv4ReachabilityPrefixe.EntityData.SegmentPath
    extendedIpv4ReachabilityPrefixe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extendedIpv4ReachabilityPrefixe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extendedIpv4ReachabilityPrefixe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extendedIpv4ReachabilityPrefixe.EntityData.Children = types.NewOrderedMap()
    extendedIpv4ReachabilityPrefixe.EntityData.Children.Append("prefixes-state", types.YChild{"PrefixesState", &extendedIpv4ReachabilityPrefixe.PrefixesState})
    extendedIpv4ReachabilityPrefixe.EntityData.Children.Append("prefixes-subtlvs", types.YChild{"PrefixesSubtlvs", &extendedIpv4ReachabilityPrefixe.PrefixesSubtlvs})
    extendedIpv4ReachabilityPrefixe.EntityData.Children.Append("prefixes-undefined-subtlvs", types.YChild{"PrefixesUndefinedSubtlvs", &extendedIpv4ReachabilityPrefixe.PrefixesUndefinedSubtlvs})
    extendedIpv4ReachabilityPrefixe.EntityData.Leafs = types.NewOrderedMap()
    extendedIpv4ReachabilityPrefixe.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", extendedIpv4ReachabilityPrefixe.Prefix})

    extendedIpv4ReachabilityPrefixe.EntityData.YListKeys = []string {"Prefix"}

    return &(extendedIpv4ReachabilityPrefixe.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesState
// State parameters of an IPv4
// extended prefix
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The up/down bit. The type is bool.
    UpDown interface{}

    // The Sub-TLV present bit. The type is bool.
    Sbit interface{}

    // IPv4 prefix contained within extended reachability TLVs. The type is
    // string.
    Prefix interface{}

    // ISIS metric value. The type is interface{} with range: 0..4294967295.
    Metric interface{}
}

func (prefixesState *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesState) GetEntityData() *types.CommonEntityData {
    prefixesState.EntityData.YFilter = prefixesState.YFilter
    prefixesState.EntityData.YangName = "prefixes-state"
    prefixesState.EntityData.BundleName = "cisco_ios_xr"
    prefixesState.EntityData.ParentYangName = "extended-ipv4-reachability-prefixe"
    prefixesState.EntityData.SegmentPath = "prefixes-state"
    prefixesState.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-ipv4-reachability/extended-ipv4-reachability-prefixes/extended-ipv4-reachability-prefixe/" + prefixesState.EntityData.SegmentPath
    prefixesState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixesState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixesState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixesState.EntityData.Children = types.NewOrderedMap()
    prefixesState.EntityData.Leafs = types.NewOrderedMap()
    prefixesState.EntityData.Leafs.Append("up-down", types.YLeaf{"UpDown", prefixesState.UpDown})
    prefixesState.EntityData.Leafs.Append("sbit", types.YLeaf{"Sbit", prefixesState.Sbit})
    prefixesState.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", prefixesState.Prefix})
    prefixesState.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", prefixesState.Metric})

    prefixesState.EntityData.YListKeys = []string {}

    return &(prefixesState.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs
// List of subTLV types in the LSDB
// for the specified TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of subTLV types in the LSDB for the specified TLV. The type is slice
    // of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv.
    PrefixesSubtlv []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv
}

func (prefixesSubtlvs *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs) GetEntityData() *types.CommonEntityData {
    prefixesSubtlvs.EntityData.YFilter = prefixesSubtlvs.YFilter
    prefixesSubtlvs.EntityData.YangName = "prefixes-subtlvs"
    prefixesSubtlvs.EntityData.BundleName = "cisco_ios_xr"
    prefixesSubtlvs.EntityData.ParentYangName = "extended-ipv4-reachability-prefixe"
    prefixesSubtlvs.EntityData.SegmentPath = "prefixes-subtlvs"
    prefixesSubtlvs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-ipv4-reachability/extended-ipv4-reachability-prefixes/extended-ipv4-reachability-prefixe/" + prefixesSubtlvs.EntityData.SegmentPath
    prefixesSubtlvs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixesSubtlvs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixesSubtlvs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixesSubtlvs.EntityData.Children = types.NewOrderedMap()
    prefixesSubtlvs.EntityData.Children.Append("prefixes-subtlv", types.YChild{"PrefixesSubtlv", nil})
    for i := range prefixesSubtlvs.PrefixesSubtlv {
        prefixesSubtlvs.EntityData.Children.Append(types.GetSegmentPath(prefixesSubtlvs.PrefixesSubtlv[i]), types.YChild{"PrefixesSubtlv", prefixesSubtlvs.PrefixesSubtlv[i]})
    }
    prefixesSubtlvs.EntityData.Leafs = types.NewOrderedMap()

    prefixesSubtlvs.EntityData.YListKeys = []string {}

    return &(prefixesSubtlvs.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv
// List of subTLV types in the LSDB
// for the specified TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the sub-TLV type. The type is string.
    Type interface{}

    // This container defines sub-TLV 1.
    Tag OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Tag

    // This container defines sub-TLV 11.
    Ipv4SourceRouterId OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Ipv4SourceRouterId

    // This container defines sub-TLV 12.
    Ipv6SourceRouterId OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Ipv6SourceRouterId

    // State parameters for a prefix.
    PrefixesSubtlvsState OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_PrefixesSubtlvsState

    // This container defines sub-TLV 4.
    Flags OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Flags

    // This container defines sub-TLV 2.
    Tag64 OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Tag64

    // Prefix Segment-ID list.
    PrefixSids OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_PrefixSids
}

func (prefixesSubtlv *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv) GetEntityData() *types.CommonEntityData {
    prefixesSubtlv.EntityData.YFilter = prefixesSubtlv.YFilter
    prefixesSubtlv.EntityData.YangName = "prefixes-subtlv"
    prefixesSubtlv.EntityData.BundleName = "cisco_ios_xr"
    prefixesSubtlv.EntityData.ParentYangName = "prefixes-subtlvs"
    prefixesSubtlv.EntityData.SegmentPath = "prefixes-subtlv" + types.AddKeyToken(prefixesSubtlv.Type, "type")
    prefixesSubtlv.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-ipv4-reachability/extended-ipv4-reachability-prefixes/extended-ipv4-reachability-prefixe/prefixes-subtlvs/" + prefixesSubtlv.EntityData.SegmentPath
    prefixesSubtlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixesSubtlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixesSubtlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixesSubtlv.EntityData.Children = types.NewOrderedMap()
    prefixesSubtlv.EntityData.Children.Append("tag", types.YChild{"Tag", &prefixesSubtlv.Tag})
    prefixesSubtlv.EntityData.Children.Append("ipv4-source-router-id", types.YChild{"Ipv4SourceRouterId", &prefixesSubtlv.Ipv4SourceRouterId})
    prefixesSubtlv.EntityData.Children.Append("ipv6-source-router-id", types.YChild{"Ipv6SourceRouterId", &prefixesSubtlv.Ipv6SourceRouterId})
    prefixesSubtlv.EntityData.Children.Append("prefixes-subtlvs-state", types.YChild{"PrefixesSubtlvsState", &prefixesSubtlv.PrefixesSubtlvsState})
    prefixesSubtlv.EntityData.Children.Append("flags", types.YChild{"Flags", &prefixesSubtlv.Flags})
    prefixesSubtlv.EntityData.Children.Append("tag64", types.YChild{"Tag64", &prefixesSubtlv.Tag64})
    prefixesSubtlv.EntityData.Children.Append("prefix-sids", types.YChild{"PrefixSids", &prefixesSubtlv.PrefixSids})
    prefixesSubtlv.EntityData.Leafs = types.NewOrderedMap()
    prefixesSubtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", prefixesSubtlv.Type})

    prefixesSubtlv.EntityData.YListKeys = []string {"Type"}

    return &(prefixesSubtlv.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Tag
// This container defines sub-TLV 1
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Tag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 1.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Tag_State
}

func (tag *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Tag) GetEntityData() *types.CommonEntityData {
    tag.EntityData.YFilter = tag.YFilter
    tag.EntityData.YangName = "tag"
    tag.EntityData.BundleName = "cisco_ios_xr"
    tag.EntityData.ParentYangName = "prefixes-subtlv"
    tag.EntityData.SegmentPath = "tag"
    tag.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-ipv4-reachability/extended-ipv4-reachability-prefixes/extended-ipv4-reachability-prefixe/prefixes-subtlvs/prefixes-subtlv/" + tag.EntityData.SegmentPath
    tag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tag.EntityData.Children = types.NewOrderedMap()
    tag.EntityData.Children.Append("state", types.YChild{"State", &tag.State})
    tag.EntityData.Leafs = types.NewOrderedMap()

    tag.EntityData.YListKeys = []string {}

    return &(tag.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Tag_State
// State parameters of sub-TLV 1
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Tag_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of 32-bit tags associated with the prefix. The type is slice of
    // interface{} with range: 0..4294967295.
    Tag32 []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Tag_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "tag"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-ipv4-reachability/extended-ipv4-reachability-prefixes/extended-ipv4-reachability-prefixe/prefixes-subtlvs/prefixes-subtlv/tag/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("tag32", types.YLeaf{"Tag32", state.Tag32})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Ipv4SourceRouterId
// This container defines sub-TLV
// 11
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Ipv4SourceRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 11.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Ipv4SourceRouterId_State
}

func (ipv4SourceRouterId *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Ipv4SourceRouterId) GetEntityData() *types.CommonEntityData {
    ipv4SourceRouterId.EntityData.YFilter = ipv4SourceRouterId.YFilter
    ipv4SourceRouterId.EntityData.YangName = "ipv4-source-router-id"
    ipv4SourceRouterId.EntityData.BundleName = "cisco_ios_xr"
    ipv4SourceRouterId.EntityData.ParentYangName = "prefixes-subtlv"
    ipv4SourceRouterId.EntityData.SegmentPath = "ipv4-source-router-id"
    ipv4SourceRouterId.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-ipv4-reachability/extended-ipv4-reachability-prefixes/extended-ipv4-reachability-prefixe/prefixes-subtlvs/prefixes-subtlv/" + ipv4SourceRouterId.EntityData.SegmentPath
    ipv4SourceRouterId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4SourceRouterId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4SourceRouterId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4SourceRouterId.EntityData.Children = types.NewOrderedMap()
    ipv4SourceRouterId.EntityData.Children.Append("state", types.YChild{"State", &ipv4SourceRouterId.State})
    ipv4SourceRouterId.EntityData.Leafs = types.NewOrderedMap()

    ipv4SourceRouterId.EntityData.YListKeys = []string {}

    return &(ipv4SourceRouterId.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Ipv4SourceRouterId_State
// State parameters of sub-TLV 11
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Ipv4SourceRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type is string.
    Type interface{}

    // IPv4 Source router ID address. The type is string.
    Ipv4SourceRouterId interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Ipv4SourceRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "ipv4-source-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-ipv4-reachability/extended-ipv4-reachability-prefixes/extended-ipv4-reachability-prefixe/prefixes-subtlvs/prefixes-subtlv/ipv4-source-router-id/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("ipv4-source-router-id", types.YLeaf{"Ipv4SourceRouterId", state.Ipv4SourceRouterId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Ipv6SourceRouterId
// This container defines sub-TLV
// 12
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Ipv6SourceRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 12.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Ipv6SourceRouterId_State
}

func (ipv6SourceRouterId *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Ipv6SourceRouterId) GetEntityData() *types.CommonEntityData {
    ipv6SourceRouterId.EntityData.YFilter = ipv6SourceRouterId.YFilter
    ipv6SourceRouterId.EntityData.YangName = "ipv6-source-router-id"
    ipv6SourceRouterId.EntityData.BundleName = "cisco_ios_xr"
    ipv6SourceRouterId.EntityData.ParentYangName = "prefixes-subtlv"
    ipv6SourceRouterId.EntityData.SegmentPath = "ipv6-source-router-id"
    ipv6SourceRouterId.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-ipv4-reachability/extended-ipv4-reachability-prefixes/extended-ipv4-reachability-prefixe/prefixes-subtlvs/prefixes-subtlv/" + ipv6SourceRouterId.EntityData.SegmentPath
    ipv6SourceRouterId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6SourceRouterId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6SourceRouterId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6SourceRouterId.EntityData.Children = types.NewOrderedMap()
    ipv6SourceRouterId.EntityData.Children.Append("state", types.YChild{"State", &ipv6SourceRouterId.State})
    ipv6SourceRouterId.EntityData.Leafs = types.NewOrderedMap()

    ipv6SourceRouterId.EntityData.YListKeys = []string {}

    return &(ipv6SourceRouterId.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Ipv6SourceRouterId_State
// State parameters of sub-TLV 12
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Ipv6SourceRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type is string.
    Type interface{}

    // IPv6 Source router ID address. The type is string.
    Ipv6SourceRouterId interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Ipv6SourceRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "ipv6-source-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-ipv4-reachability/extended-ipv4-reachability-prefixes/extended-ipv4-reachability-prefixe/prefixes-subtlvs/prefixes-subtlv/ipv6-source-router-id/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("ipv6-source-router-id", types.YLeaf{"Ipv6SourceRouterId", state.Ipv6SourceRouterId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_PrefixesSubtlvsState
// State parameters for a prefix
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_PrefixesSubtlvsState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type is string.
    Type interface{}
}

func (prefixesSubtlvsState *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_PrefixesSubtlvsState) GetEntityData() *types.CommonEntityData {
    prefixesSubtlvsState.EntityData.YFilter = prefixesSubtlvsState.YFilter
    prefixesSubtlvsState.EntityData.YangName = "prefixes-subtlvs-state"
    prefixesSubtlvsState.EntityData.BundleName = "cisco_ios_xr"
    prefixesSubtlvsState.EntityData.ParentYangName = "prefixes-subtlv"
    prefixesSubtlvsState.EntityData.SegmentPath = "prefixes-subtlvs-state"
    prefixesSubtlvsState.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-ipv4-reachability/extended-ipv4-reachability-prefixes/extended-ipv4-reachability-prefixe/prefixes-subtlvs/prefixes-subtlv/" + prefixesSubtlvsState.EntityData.SegmentPath
    prefixesSubtlvsState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixesSubtlvsState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixesSubtlvsState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixesSubtlvsState.EntityData.Children = types.NewOrderedMap()
    prefixesSubtlvsState.EntityData.Leafs = types.NewOrderedMap()
    prefixesSubtlvsState.EntityData.Leafs.Append("type", types.YLeaf{"Type", prefixesSubtlvsState.Type})

    prefixesSubtlvsState.EntityData.YListKeys = []string {}

    return &(prefixesSubtlvsState.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Flags
// This container defines sub-TLV 4
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Flags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 4.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Flags_State
}

func (flags *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Flags) GetEntityData() *types.CommonEntityData {
    flags.EntityData.YFilter = flags.YFilter
    flags.EntityData.YangName = "flags"
    flags.EntityData.BundleName = "cisco_ios_xr"
    flags.EntityData.ParentYangName = "prefixes-subtlv"
    flags.EntityData.SegmentPath = "flags"
    flags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-ipv4-reachability/extended-ipv4-reachability-prefixes/extended-ipv4-reachability-prefixe/prefixes-subtlvs/prefixes-subtlv/" + flags.EntityData.SegmentPath
    flags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flags.EntityData.Children = types.NewOrderedMap()
    flags.EntityData.Children.Append("state", types.YChild{"State", &flags.State})
    flags.EntityData.Leafs = types.NewOrderedMap()

    flags.EntityData.YListKeys = []string {}

    return &(flags.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Flags_State
// State parameters of sub-TLV 4
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Flags_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type is string.
    Type interface{}

    // Additional prefix reachability flags. The type is slice of
    // OpenconfigIsisLspFlagsStateFlagsEnum.
    Flags []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Flags_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "flags"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-ipv4-reachability/extended-ipv4-reachability-prefixes/extended-ipv4-reachability-prefixe/prefixes-subtlvs/prefixes-subtlv/flags/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Tag64
// This container defines sub-TLV 2
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Tag64 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 2.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Tag64_State
}

func (tag64 *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Tag64) GetEntityData() *types.CommonEntityData {
    tag64.EntityData.YFilter = tag64.YFilter
    tag64.EntityData.YangName = "tag64"
    tag64.EntityData.BundleName = "cisco_ios_xr"
    tag64.EntityData.ParentYangName = "prefixes-subtlv"
    tag64.EntityData.SegmentPath = "tag64"
    tag64.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-ipv4-reachability/extended-ipv4-reachability-prefixes/extended-ipv4-reachability-prefixe/prefixes-subtlvs/prefixes-subtlv/" + tag64.EntityData.SegmentPath
    tag64.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tag64.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tag64.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tag64.EntityData.Children = types.NewOrderedMap()
    tag64.EntityData.Children.Append("state", types.YChild{"State", &tag64.State})
    tag64.EntityData.Leafs = types.NewOrderedMap()

    tag64.EntityData.YListKeys = []string {}

    return &(tag64.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Tag64_State
// State parameters of sub-TLV 2
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Tag64_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of 64-bit tags associated with the prefix. The type is slice of
    // interface{} with range: 0..18446744073709551615.
    Tag64 []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_Tag64_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "tag64"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-ipv4-reachability/extended-ipv4-reachability-prefixes/extended-ipv4-reachability-prefixe/prefixes-subtlvs/prefixes-subtlv/tag64/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("tag64", types.YLeaf{"Tag64", state.Tag64})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_PrefixSids
// Prefix Segment-ID list
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_PrefixSids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix Segment-ID list. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_PrefixSids_PrefixSid.
    PrefixSid []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_PrefixSids_PrefixSid
}

func (prefixSids *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_PrefixSids) GetEntityData() *types.CommonEntityData {
    prefixSids.EntityData.YFilter = prefixSids.YFilter
    prefixSids.EntityData.YangName = "prefix-sids"
    prefixSids.EntityData.BundleName = "cisco_ios_xr"
    prefixSids.EntityData.ParentYangName = "prefixes-subtlv"
    prefixSids.EntityData.SegmentPath = "prefix-sids"
    prefixSids.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-ipv4-reachability/extended-ipv4-reachability-prefixes/extended-ipv4-reachability-prefixe/prefixes-subtlvs/prefixes-subtlv/" + prefixSids.EntityData.SegmentPath
    prefixSids.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixSids.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixSids.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixSids.EntityData.Children = types.NewOrderedMap()
    prefixSids.EntityData.Children.Append("prefix-sid", types.YChild{"PrefixSid", nil})
    for i := range prefixSids.PrefixSid {
        prefixSids.EntityData.Children.Append(types.GetSegmentPath(prefixSids.PrefixSid[i]), types.YChild{"PrefixSid", prefixSids.PrefixSid[i]})
    }
    prefixSids.EntityData.Leafs = types.NewOrderedMap()

    prefixSids.EntityData.YListKeys = []string {}

    return &(prefixSids.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_PrefixSids_PrefixSid
// Prefix Segment-ID list
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_PrefixSids_PrefixSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the value of the prefix SID. The type
    // is interface{} with range: 0..4294967295.
    Value interface{}

    // State parameters for Prefix-SID.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_PrefixSids_PrefixSid_State
}

func (prefixSid *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_PrefixSids_PrefixSid) GetEntityData() *types.CommonEntityData {
    prefixSid.EntityData.YFilter = prefixSid.YFilter
    prefixSid.EntityData.YangName = "prefix-sid"
    prefixSid.EntityData.BundleName = "cisco_ios_xr"
    prefixSid.EntityData.ParentYangName = "prefix-sids"
    prefixSid.EntityData.SegmentPath = "prefix-sid" + types.AddKeyToken(prefixSid.Value, "value")
    prefixSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-ipv4-reachability/extended-ipv4-reachability-prefixes/extended-ipv4-reachability-prefixe/prefixes-subtlvs/prefixes-subtlv/prefix-sids/" + prefixSid.EntityData.SegmentPath
    prefixSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixSid.EntityData.Children = types.NewOrderedMap()
    prefixSid.EntityData.Children.Append("state", types.YChild{"State", &prefixSid.State})
    prefixSid.EntityData.Leafs = types.NewOrderedMap()
    prefixSid.EntityData.Leafs.Append("value", types.YLeaf{"Value", prefixSid.Value})

    prefixSid.EntityData.YListKeys = []string {"Value"}

    return &(prefixSid.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_PrefixSids_PrefixSid_State
// State parameters for Prefix-SID
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_PrefixSids_PrefixSid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGP Prefix-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Prefix-SID algorithm to be used for path computation. The type is
    // interface{} with range: 0..255.
    Algorithm interface{}

    // Flags associated with Prefix Segment-ID. The type is slice of
    // OpenconfigIsisLspPrefixSidStateFlagsEnum.
    Flags []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesSubtlvs_PrefixesSubtlv_PrefixSids_PrefixSid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "prefix-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-ipv4-reachability/extended-ipv4-reachability-prefixes/extended-ipv4-reachability-prefixe/prefixes-subtlvs/prefixes-subtlv/prefix-sids/prefix-sid/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})
    state.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", state.Algorithm})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesUndefinedSubtlvs
// Sub-TLVs that are not defined in
// the model or not recognised by
// system
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesUndefinedSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub-TLVs that are not defined in the model or not recognised by system. The
    // type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesUndefinedSubtlvs_PrefixesUndefinedSubtlv.
    PrefixesUndefinedSubtlv []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesUndefinedSubtlvs_PrefixesUndefinedSubtlv
}

func (prefixesUndefinedSubtlvs *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesUndefinedSubtlvs) GetEntityData() *types.CommonEntityData {
    prefixesUndefinedSubtlvs.EntityData.YFilter = prefixesUndefinedSubtlvs.YFilter
    prefixesUndefinedSubtlvs.EntityData.YangName = "prefixes-undefined-subtlvs"
    prefixesUndefinedSubtlvs.EntityData.BundleName = "cisco_ios_xr"
    prefixesUndefinedSubtlvs.EntityData.ParentYangName = "extended-ipv4-reachability-prefixe"
    prefixesUndefinedSubtlvs.EntityData.SegmentPath = "prefixes-undefined-subtlvs"
    prefixesUndefinedSubtlvs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-ipv4-reachability/extended-ipv4-reachability-prefixes/extended-ipv4-reachability-prefixe/" + prefixesUndefinedSubtlvs.EntityData.SegmentPath
    prefixesUndefinedSubtlvs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixesUndefinedSubtlvs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixesUndefinedSubtlvs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixesUndefinedSubtlvs.EntityData.Children = types.NewOrderedMap()
    prefixesUndefinedSubtlvs.EntityData.Children.Append("prefixes-undefined-subtlv", types.YChild{"PrefixesUndefinedSubtlv", nil})
    for i := range prefixesUndefinedSubtlvs.PrefixesUndefinedSubtlv {
        prefixesUndefinedSubtlvs.EntityData.Children.Append(types.GetSegmentPath(prefixesUndefinedSubtlvs.PrefixesUndefinedSubtlv[i]), types.YChild{"PrefixesUndefinedSubtlv", prefixesUndefinedSubtlvs.PrefixesUndefinedSubtlv[i]})
    }
    prefixesUndefinedSubtlvs.EntityData.Leafs = types.NewOrderedMap()

    prefixesUndefinedSubtlvs.EntityData.YListKeys = []string {}

    return &(prefixesUndefinedSubtlvs.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesUndefinedSubtlvs_PrefixesUndefinedSubtlv
// Sub-TLVs that are not defined in
// the model or not recognised by
// system
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesUndefinedSubtlvs_PrefixesUndefinedSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the type of the undefined sub-TLV.
    // The type is interface{} with range: 0..4294967295.
    Type interface{}

    // State parameters of the undefined sub-TLV.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesUndefinedSubtlvs_PrefixesUndefinedSubtlv_State
}

func (prefixesUndefinedSubtlv *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesUndefinedSubtlvs_PrefixesUndefinedSubtlv) GetEntityData() *types.CommonEntityData {
    prefixesUndefinedSubtlv.EntityData.YFilter = prefixesUndefinedSubtlv.YFilter
    prefixesUndefinedSubtlv.EntityData.YangName = "prefixes-undefined-subtlv"
    prefixesUndefinedSubtlv.EntityData.BundleName = "cisco_ios_xr"
    prefixesUndefinedSubtlv.EntityData.ParentYangName = "prefixes-undefined-subtlvs"
    prefixesUndefinedSubtlv.EntityData.SegmentPath = "prefixes-undefined-subtlv" + types.AddKeyToken(prefixesUndefinedSubtlv.Type, "type")
    prefixesUndefinedSubtlv.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-ipv4-reachability/extended-ipv4-reachability-prefixes/extended-ipv4-reachability-prefixe/prefixes-undefined-subtlvs/" + prefixesUndefinedSubtlv.EntityData.SegmentPath
    prefixesUndefinedSubtlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixesUndefinedSubtlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixesUndefinedSubtlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixesUndefinedSubtlv.EntityData.Children = types.NewOrderedMap()
    prefixesUndefinedSubtlv.EntityData.Children.Append("state", types.YChild{"State", &prefixesUndefinedSubtlv.State})
    prefixesUndefinedSubtlv.EntityData.Leafs = types.NewOrderedMap()
    prefixesUndefinedSubtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", prefixesUndefinedSubtlv.Type})

    prefixesUndefinedSubtlv.EntityData.YListKeys = []string {"Type"}

    return &(prefixesUndefinedSubtlv.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesUndefinedSubtlvs_PrefixesUndefinedSubtlv_State
// State parameters of the undefined sub-TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesUndefinedSubtlvs_PrefixesUndefinedSubtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_ExtendedIpv4Reachability_ExtendedIpv4ReachabilityPrefixes_ExtendedIpv4ReachabilityPrefixe_PrefixesUndefinedSubtlvs_PrefixesUndefinedSubtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "prefixes-undefined-subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/extended-ipv4-reachability/extended-ipv4-reachability-prefixes/extended-ipv4-reachability-prefixe/prefixes-undefined-subtlvs/prefixes-undefined-subtlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("length", types.YLeaf{"Length", state.Length})
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MultiTopology
// This container defines the topology
// supported
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MultiTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list describes a topology.
    Topologies OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MultiTopology_Topologies
}

func (multiTopology *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MultiTopology) GetEntityData() *types.CommonEntityData {
    multiTopology.EntityData.YFilter = multiTopology.YFilter
    multiTopology.EntityData.YangName = "multi-topology"
    multiTopology.EntityData.BundleName = "cisco_ios_xr"
    multiTopology.EntityData.ParentYangName = "tlvs"
    multiTopology.EntityData.SegmentPath = "multi-topology"
    multiTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/" + multiTopology.EntityData.SegmentPath
    multiTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multiTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multiTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multiTopology.EntityData.Children = types.NewOrderedMap()
    multiTopology.EntityData.Children.Append("topologies", types.YChild{"Topologies", &multiTopology.Topologies})
    multiTopology.EntityData.Leafs = types.NewOrderedMap()

    multiTopology.EntityData.YListKeys = []string {}

    return &(multiTopology.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MultiTopology_Topologies
// This list describes a topology
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MultiTopology_Topologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This list describes a topology. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MultiTopology_Topologies_Topology.
    Topology []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MultiTopology_Topologies_Topology
}

func (topologies *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MultiTopology_Topologies) GetEntityData() *types.CommonEntityData {
    topologies.EntityData.YFilter = topologies.YFilter
    topologies.EntityData.YangName = "topologies"
    topologies.EntityData.BundleName = "cisco_ios_xr"
    topologies.EntityData.ParentYangName = "multi-topology"
    topologies.EntityData.SegmentPath = "topologies"
    topologies.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/multi-topology/" + topologies.EntityData.SegmentPath
    topologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topologies.EntityData.Children = types.NewOrderedMap()
    topologies.EntityData.Children.Append("topology", types.YChild{"Topology", nil})
    for i := range topologies.Topology {
        topologies.EntityData.Children.Append(types.GetSegmentPath(topologies.Topology[i]), types.YChild{"Topology", topologies.Topology[i]})
    }
    topologies.EntityData.Leafs = types.NewOrderedMap()

    topologies.EntityData.YListKeys = []string {}

    return &(topologies.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MultiTopology_Topologies_Topology
// This list describes a topology
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MultiTopology_Topologies_Topology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the multi-topology ID being described
    // by the list entry. The type is interface{} with range: 0..4294967295.
    MtId interface{}

    // State parameters of IS multi-topology TLV 229.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MultiTopology_Topologies_Topology_State
}

func (topology *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MultiTopology_Topologies_Topology) GetEntityData() *types.CommonEntityData {
    topology.EntityData.YFilter = topology.YFilter
    topology.EntityData.YangName = "topology"
    topology.EntityData.BundleName = "cisco_ios_xr"
    topology.EntityData.ParentYangName = "topologies"
    topology.EntityData.SegmentPath = "topology" + types.AddKeyToken(topology.MtId, "mt-id")
    topology.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/multi-topology/topologies/" + topology.EntityData.SegmentPath
    topology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topology.EntityData.Children = types.NewOrderedMap()
    topology.EntityData.Children.Append("state", types.YChild{"State", &topology.State})
    topology.EntityData.Leafs = types.NewOrderedMap()
    topology.EntityData.Leafs.Append("mt-id", types.YLeaf{"MtId", topology.MtId})

    topology.EntityData.YListKeys = []string {"MtId"}

    return &(topology.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MultiTopology_Topologies_Topology_State
// State parameters of IS multi-topology TLV 229
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MultiTopology_Topologies_Topology_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Multi-topology ID. The type is interface{} with range: 0..65535.
    MtId interface{}

    // Attributes of the LSP for the associated topology. The type is
    // OpenconfigIsisLspAttributesEnum.
    Attributes interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MultiTopology_Topologies_Topology_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "topology"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/multi-topology/topologies/topology/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("mt-id", types.YLeaf{"MtId", state.MtId})
    state.EntityData.Leafs.Append("attributes", types.YLeaf{"Attributes", state.Attributes})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability
// This container defines list of IPv4
// external reachability information
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 external prefixes and reachability attributes.
    Ipv4ExternalReachabilityPrefixes OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes
}

func (ipv4ExternalReachability *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability) GetEntityData() *types.CommonEntityData {
    ipv4ExternalReachability.EntityData.YFilter = ipv4ExternalReachability.YFilter
    ipv4ExternalReachability.EntityData.YangName = "ipv4-external-reachability"
    ipv4ExternalReachability.EntityData.BundleName = "cisco_ios_xr"
    ipv4ExternalReachability.EntityData.ParentYangName = "tlvs"
    ipv4ExternalReachability.EntityData.SegmentPath = "ipv4-external-reachability"
    ipv4ExternalReachability.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/" + ipv4ExternalReachability.EntityData.SegmentPath
    ipv4ExternalReachability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4ExternalReachability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4ExternalReachability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4ExternalReachability.EntityData.Children = types.NewOrderedMap()
    ipv4ExternalReachability.EntityData.Children.Append("ipv4-external-reachability-prefixes", types.YChild{"Ipv4ExternalReachabilityPrefixes", &ipv4ExternalReachability.Ipv4ExternalReachabilityPrefixes})
    ipv4ExternalReachability.EntityData.Leafs = types.NewOrderedMap()

    ipv4ExternalReachability.EntityData.YListKeys = []string {}

    return &(ipv4ExternalReachability.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes
// IPv4 external prefixes and
// reachability attributes
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 external prefixes and reachability attributes. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe.
    Ipv4ExternalReachabilityPrefixe []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe
}

func (ipv4ExternalReachabilityPrefixes *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes) GetEntityData() *types.CommonEntityData {
    ipv4ExternalReachabilityPrefixes.EntityData.YFilter = ipv4ExternalReachabilityPrefixes.YFilter
    ipv4ExternalReachabilityPrefixes.EntityData.YangName = "ipv4-external-reachability-prefixes"
    ipv4ExternalReachabilityPrefixes.EntityData.BundleName = "cisco_ios_xr"
    ipv4ExternalReachabilityPrefixes.EntityData.ParentYangName = "ipv4-external-reachability"
    ipv4ExternalReachabilityPrefixes.EntityData.SegmentPath = "ipv4-external-reachability-prefixes"
    ipv4ExternalReachabilityPrefixes.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv4-external-reachability/" + ipv4ExternalReachabilityPrefixes.EntityData.SegmentPath
    ipv4ExternalReachabilityPrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4ExternalReachabilityPrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4ExternalReachabilityPrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4ExternalReachabilityPrefixes.EntityData.Children = types.NewOrderedMap()
    ipv4ExternalReachabilityPrefixes.EntityData.Children.Append("ipv4-external-reachability-prefixe", types.YChild{"Ipv4ExternalReachabilityPrefixe", nil})
    for i := range ipv4ExternalReachabilityPrefixes.Ipv4ExternalReachabilityPrefixe {
        ipv4ExternalReachabilityPrefixes.EntityData.Children.Append(types.GetSegmentPath(ipv4ExternalReachabilityPrefixes.Ipv4ExternalReachabilityPrefixe[i]), types.YChild{"Ipv4ExternalReachabilityPrefixe", ipv4ExternalReachabilityPrefixes.Ipv4ExternalReachabilityPrefixe[i]})
    }
    ipv4ExternalReachabilityPrefixes.EntityData.Leafs = types.NewOrderedMap()

    ipv4ExternalReachabilityPrefixes.EntityData.YListKeys = []string {}

    return &(ipv4ExternalReachabilityPrefixes.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe
// IPv4 external prefixes and
// reachability attributes
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the IPv4 prefix. The type is string.
    Prefix interface{}

    // State parameters of IPv4 standard prefix.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_State

    // This container defines ISIS Default Metric.
    DefaultMetric OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_DefaultMetric

    // This container defines the ISIS delay metric.
    DelayMetric OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_DelayMetric

    // This container defines the ISIS expense metric.
    ExpenseMetric OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_ExpenseMetric

    // This container defines the ISIS error metric.
    ErrorMetric OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_ErrorMetric
}

func (ipv4ExternalReachabilityPrefixe *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe) GetEntityData() *types.CommonEntityData {
    ipv4ExternalReachabilityPrefixe.EntityData.YFilter = ipv4ExternalReachabilityPrefixe.YFilter
    ipv4ExternalReachabilityPrefixe.EntityData.YangName = "ipv4-external-reachability-prefixe"
    ipv4ExternalReachabilityPrefixe.EntityData.BundleName = "cisco_ios_xr"
    ipv4ExternalReachabilityPrefixe.EntityData.ParentYangName = "ipv4-external-reachability-prefixes"
    ipv4ExternalReachabilityPrefixe.EntityData.SegmentPath = "ipv4-external-reachability-prefixe" + types.AddKeyToken(ipv4ExternalReachabilityPrefixe.Prefix, "prefix")
    ipv4ExternalReachabilityPrefixe.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv4-external-reachability/ipv4-external-reachability-prefixes/" + ipv4ExternalReachabilityPrefixe.EntityData.SegmentPath
    ipv4ExternalReachabilityPrefixe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4ExternalReachabilityPrefixe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4ExternalReachabilityPrefixe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4ExternalReachabilityPrefixe.EntityData.Children = types.NewOrderedMap()
    ipv4ExternalReachabilityPrefixe.EntityData.Children.Append("state", types.YChild{"State", &ipv4ExternalReachabilityPrefixe.State})
    ipv4ExternalReachabilityPrefixe.EntityData.Children.Append("default-metric", types.YChild{"DefaultMetric", &ipv4ExternalReachabilityPrefixe.DefaultMetric})
    ipv4ExternalReachabilityPrefixe.EntityData.Children.Append("delay-metric", types.YChild{"DelayMetric", &ipv4ExternalReachabilityPrefixe.DelayMetric})
    ipv4ExternalReachabilityPrefixe.EntityData.Children.Append("expense-metric", types.YChild{"ExpenseMetric", &ipv4ExternalReachabilityPrefixe.ExpenseMetric})
    ipv4ExternalReachabilityPrefixe.EntityData.Children.Append("error-metric", types.YChild{"ErrorMetric", &ipv4ExternalReachabilityPrefixe.ErrorMetric})
    ipv4ExternalReachabilityPrefixe.EntityData.Leafs = types.NewOrderedMap()
    ipv4ExternalReachabilityPrefixe.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4ExternalReachabilityPrefixe.Prefix})

    ipv4ExternalReachabilityPrefixe.EntityData.YListKeys = []string {"Prefix"}

    return &(ipv4ExternalReachabilityPrefixe.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_State
// State parameters of IPv4 standard prefix
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The up/down bit. The type is bool.
    UpDown interface{}

    // IPv4 prefix contained within reachability TLVs. The type is string.
    Prefix interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "ipv4-external-reachability-prefixe"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv4-external-reachability/ipv4-external-reachability-prefixes/ipv4-external-reachability-prefixe/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("up-down", types.YLeaf{"UpDown", state.UpDown})
    state.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", state.Prefix})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_DefaultMetric
// This container defines ISIS Default Metric
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_DefaultMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters for default-metric.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_DefaultMetric_State
}

func (defaultMetric *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_DefaultMetric) GetEntityData() *types.CommonEntityData {
    defaultMetric.EntityData.YFilter = defaultMetric.YFilter
    defaultMetric.EntityData.YangName = "default-metric"
    defaultMetric.EntityData.BundleName = "cisco_ios_xr"
    defaultMetric.EntityData.ParentYangName = "ipv4-external-reachability-prefixe"
    defaultMetric.EntityData.SegmentPath = "default-metric"
    defaultMetric.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv4-external-reachability/ipv4-external-reachability-prefixes/ipv4-external-reachability-prefixe/" + defaultMetric.EntityData.SegmentPath
    defaultMetric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultMetric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultMetric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultMetric.EntityData.Children = types.NewOrderedMap()
    defaultMetric.EntityData.Children.Append("state", types.YChild{"State", &defaultMetric.State})
    defaultMetric.EntityData.Leafs = types.NewOrderedMap()

    defaultMetric.EntityData.YListKeys = []string {}

    return &(defaultMetric.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_DefaultMetric_State
// State parameters for default-metric
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_DefaultMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS Default-Metric Flags. The type is
    // OpenconfigIsisLspDefaultMetricStateFlagsEnum.
    Flags interface{}

    // ISIS default metric value. The type is interface{} with range: 0..255.
    DefaultMetric interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_DefaultMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "default-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv4-external-reachability/ipv4-external-reachability-prefixes/ipv4-external-reachability-prefixe/default-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})
    state.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", state.DefaultMetric})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_DelayMetric
// This container defines the ISIS delay metric
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_DelayMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of delay-metric.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_DelayMetric_State
}

func (delayMetric *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_DelayMetric) GetEntityData() *types.CommonEntityData {
    delayMetric.EntityData.YFilter = delayMetric.YFilter
    delayMetric.EntityData.YangName = "delay-metric"
    delayMetric.EntityData.BundleName = "cisco_ios_xr"
    delayMetric.EntityData.ParentYangName = "ipv4-external-reachability-prefixe"
    delayMetric.EntityData.SegmentPath = "delay-metric"
    delayMetric.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv4-external-reachability/ipv4-external-reachability-prefixes/ipv4-external-reachability-prefixe/" + delayMetric.EntityData.SegmentPath
    delayMetric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    delayMetric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    delayMetric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    delayMetric.EntityData.Children = types.NewOrderedMap()
    delayMetric.EntityData.Children.Append("state", types.YChild{"State", &delayMetric.State})
    delayMetric.EntityData.Leafs = types.NewOrderedMap()

    delayMetric.EntityData.YListKeys = []string {}

    return &(delayMetric.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_DelayMetric_State
// State parameters of delay-metric
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_DelayMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS delay metric value. The type is interface{} with range: 0..255.
    Metric interface{}

    // ISIS Delay Metric Flags. The type is slice of
    // OpenconfigIsisLspIsisMetricFlagsEnum.
    Flags []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_DelayMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "delay-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv4-external-reachability/ipv4-external-reachability-prefixes/ipv4-external-reachability-prefixe/delay-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_ExpenseMetric
// This container defines the ISIS expense metric
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_ExpenseMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of expense-metric.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_ExpenseMetric_State
}

func (expenseMetric *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_ExpenseMetric) GetEntityData() *types.CommonEntityData {
    expenseMetric.EntityData.YFilter = expenseMetric.YFilter
    expenseMetric.EntityData.YangName = "expense-metric"
    expenseMetric.EntityData.BundleName = "cisco_ios_xr"
    expenseMetric.EntityData.ParentYangName = "ipv4-external-reachability-prefixe"
    expenseMetric.EntityData.SegmentPath = "expense-metric"
    expenseMetric.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv4-external-reachability/ipv4-external-reachability-prefixes/ipv4-external-reachability-prefixe/" + expenseMetric.EntityData.SegmentPath
    expenseMetric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    expenseMetric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    expenseMetric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    expenseMetric.EntityData.Children = types.NewOrderedMap()
    expenseMetric.EntityData.Children.Append("state", types.YChild{"State", &expenseMetric.State})
    expenseMetric.EntityData.Leafs = types.NewOrderedMap()

    expenseMetric.EntityData.YListKeys = []string {}

    return &(expenseMetric.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_ExpenseMetric_State
// State parameters of expense-metric
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_ExpenseMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS expense metric value. The type is interface{} with range: 0..255.
    Metric interface{}

    // ISIS Expense Metric Flags. The type is slice of
    // OpenconfigIsisLspIsisMetricFlagsEnum.
    Flags []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_ExpenseMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "expense-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv4-external-reachability/ipv4-external-reachability-prefixes/ipv4-external-reachability-prefixe/expense-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_ErrorMetric
// This container defines the ISIS error metric
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_ErrorMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of error-metric.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_ErrorMetric_State
}

func (errorMetric *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_ErrorMetric) GetEntityData() *types.CommonEntityData {
    errorMetric.EntityData.YFilter = errorMetric.YFilter
    errorMetric.EntityData.YangName = "error-metric"
    errorMetric.EntityData.BundleName = "cisco_ios_xr"
    errorMetric.EntityData.ParentYangName = "ipv4-external-reachability-prefixe"
    errorMetric.EntityData.SegmentPath = "error-metric"
    errorMetric.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv4-external-reachability/ipv4-external-reachability-prefixes/ipv4-external-reachability-prefixe/" + errorMetric.EntityData.SegmentPath
    errorMetric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    errorMetric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    errorMetric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    errorMetric.EntityData.Children = types.NewOrderedMap()
    errorMetric.EntityData.Children.Append("state", types.YChild{"State", &errorMetric.State})
    errorMetric.EntityData.Leafs = types.NewOrderedMap()

    errorMetric.EntityData.YListKeys = []string {}

    return &(errorMetric.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_ErrorMetric_State
// State parameters of error-metric
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_ErrorMetric_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS error metric value. The type is interface{} with range: 0..255.
    Metric interface{}

    // IS-IS error metric flags. The type is slice of
    // OpenconfigIsisLspIsisMetricFlagsEnum.
    Flags []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_Ipv4ExternalReachability_Ipv4ExternalReachabilityPrefixes_Ipv4ExternalReachabilityPrefixe_ErrorMetric_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "error-metric"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/ipv4-external-reachability/ipv4-external-reachability-prefixes/ipv4-external-reachability-prefixe/error-metric/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", state.Metric})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability
// This container defines list of IPv6
// reachability information in multi -
// topology environment
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of IPv6 prefixes contained within MT reachability TLV.
    MtIpv6ReachabilityPrefixes OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes
}

func (mtIpv6Reachability *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability) GetEntityData() *types.CommonEntityData {
    mtIpv6Reachability.EntityData.YFilter = mtIpv6Reachability.YFilter
    mtIpv6Reachability.EntityData.YangName = "mt-ipv6-reachability"
    mtIpv6Reachability.EntityData.BundleName = "cisco_ios_xr"
    mtIpv6Reachability.EntityData.ParentYangName = "tlvs"
    mtIpv6Reachability.EntityData.SegmentPath = "mt-ipv6-reachability"
    mtIpv6Reachability.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/" + mtIpv6Reachability.EntityData.SegmentPath
    mtIpv6Reachability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIpv6Reachability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIpv6Reachability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIpv6Reachability.EntityData.Children = types.NewOrderedMap()
    mtIpv6Reachability.EntityData.Children.Append("mt-ipv6-reachability-prefixes", types.YChild{"MtIpv6ReachabilityPrefixes", &mtIpv6Reachability.MtIpv6ReachabilityPrefixes})
    mtIpv6Reachability.EntityData.Leafs = types.NewOrderedMap()

    mtIpv6Reachability.EntityData.YListKeys = []string {}

    return &(mtIpv6Reachability.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes
// List of IPv6 prefixes contained
// within MT reachability TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of IPv6 prefixes contained within MT reachability TLV. The type is
    // slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe.
    MtIpv6ReachabilityPrefixe []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe
}

func (mtIpv6ReachabilityPrefixes *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes) GetEntityData() *types.CommonEntityData {
    mtIpv6ReachabilityPrefixes.EntityData.YFilter = mtIpv6ReachabilityPrefixes.YFilter
    mtIpv6ReachabilityPrefixes.EntityData.YangName = "mt-ipv6-reachability-prefixes"
    mtIpv6ReachabilityPrefixes.EntityData.BundleName = "cisco_ios_xr"
    mtIpv6ReachabilityPrefixes.EntityData.ParentYangName = "mt-ipv6-reachability"
    mtIpv6ReachabilityPrefixes.EntityData.SegmentPath = "mt-ipv6-reachability-prefixes"
    mtIpv6ReachabilityPrefixes.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv6-reachability/" + mtIpv6ReachabilityPrefixes.EntityData.SegmentPath
    mtIpv6ReachabilityPrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIpv6ReachabilityPrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIpv6ReachabilityPrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIpv6ReachabilityPrefixes.EntityData.Children = types.NewOrderedMap()
    mtIpv6ReachabilityPrefixes.EntityData.Children.Append("mt-ipv6-reachability-prefixe", types.YChild{"MtIpv6ReachabilityPrefixe", nil})
    for i := range mtIpv6ReachabilityPrefixes.MtIpv6ReachabilityPrefixe {
        types.SetYListKey(mtIpv6ReachabilityPrefixes.MtIpv6ReachabilityPrefixe[i], i)
        mtIpv6ReachabilityPrefixes.EntityData.Children.Append(types.GetSegmentPath(mtIpv6ReachabilityPrefixes.MtIpv6ReachabilityPrefixe[i]), types.YChild{"MtIpv6ReachabilityPrefixe", mtIpv6ReachabilityPrefixes.MtIpv6ReachabilityPrefixe[i]})
    }
    mtIpv6ReachabilityPrefixes.EntityData.Leafs = types.NewOrderedMap()

    mtIpv6ReachabilityPrefixes.EntityData.YListKeys = []string {}

    return &(mtIpv6ReachabilityPrefixes.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe
// List of IPv6 prefixes contained
// within MT reachability TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Reference to the IPv6 prefix described by the TLV. The type is string.
    Prefix interface{}

    // Reference to the multi-topology ID. The type is interface{} with range:
    // 0..4294967295.
    MtId interface{}

    // State parameters relating an IPv6 prefix attribute.
    MtIpv6ReachabilityPrefixesState OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesState

    // List of subTLV types in the LSDB for the specified TLV.
    MtIpv6ReachabilityPrefixesSubtlvs OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs

    // Sub-TLVs that are not defined in the model or not recognised by system.
    MtIpv6ReachabilityPrefixesUndefinedSubtlvs OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesUndefinedSubtlvs
}

func (mtIpv6ReachabilityPrefixe *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe) GetEntityData() *types.CommonEntityData {
    mtIpv6ReachabilityPrefixe.EntityData.YFilter = mtIpv6ReachabilityPrefixe.YFilter
    mtIpv6ReachabilityPrefixe.EntityData.YangName = "mt-ipv6-reachability-prefixe"
    mtIpv6ReachabilityPrefixe.EntityData.BundleName = "cisco_ios_xr"
    mtIpv6ReachabilityPrefixe.EntityData.ParentYangName = "mt-ipv6-reachability-prefixes"
    mtIpv6ReachabilityPrefixe.EntityData.SegmentPath = "mt-ipv6-reachability-prefixe" + types.AddNoKeyToken(mtIpv6ReachabilityPrefixe)
    mtIpv6ReachabilityPrefixe.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv6-reachability/mt-ipv6-reachability-prefixes/" + mtIpv6ReachabilityPrefixe.EntityData.SegmentPath
    mtIpv6ReachabilityPrefixe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIpv6ReachabilityPrefixe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIpv6ReachabilityPrefixe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIpv6ReachabilityPrefixe.EntityData.Children = types.NewOrderedMap()
    mtIpv6ReachabilityPrefixe.EntityData.Children.Append("mt-ipv6-reachability-prefixes-state", types.YChild{"MtIpv6ReachabilityPrefixesState", &mtIpv6ReachabilityPrefixe.MtIpv6ReachabilityPrefixesState})
    mtIpv6ReachabilityPrefixe.EntityData.Children.Append("mt-ipv6-reachability-prefixes-subtlvs", types.YChild{"MtIpv6ReachabilityPrefixesSubtlvs", &mtIpv6ReachabilityPrefixe.MtIpv6ReachabilityPrefixesSubtlvs})
    mtIpv6ReachabilityPrefixe.EntityData.Children.Append("mt-ipv6-reachability-prefixes-undefined-subtlvs", types.YChild{"MtIpv6ReachabilityPrefixesUndefinedSubtlvs", &mtIpv6ReachabilityPrefixe.MtIpv6ReachabilityPrefixesUndefinedSubtlvs})
    mtIpv6ReachabilityPrefixe.EntityData.Leafs = types.NewOrderedMap()
    mtIpv6ReachabilityPrefixe.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", mtIpv6ReachabilityPrefixe.Prefix})
    mtIpv6ReachabilityPrefixe.EntityData.Leafs.Append("mt-id", types.YLeaf{"MtId", mtIpv6ReachabilityPrefixe.MtId})

    mtIpv6ReachabilityPrefixe.EntityData.YListKeys = []string {}

    return &(mtIpv6ReachabilityPrefixe.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesState
// State parameters relating an IPv6
// prefix attribute
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The up/down bit. The type is bool.
    UpDown interface{}

    // The external bit. The type is bool.
    Xbit interface{}

    // The sub-tlv present bit. The type is bool.
    Sbit interface{}

    // IPv6 prefix contained within extended reachability TLVs. The type is
    // string.
    Prefix interface{}

    // ISIS metric value. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multi-topology ID. The type is interface{} with range: 0..65535.
    MtId interface{}
}

func (mtIpv6ReachabilityPrefixesState *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesState) GetEntityData() *types.CommonEntityData {
    mtIpv6ReachabilityPrefixesState.EntityData.YFilter = mtIpv6ReachabilityPrefixesState.YFilter
    mtIpv6ReachabilityPrefixesState.EntityData.YangName = "mt-ipv6-reachability-prefixes-state"
    mtIpv6ReachabilityPrefixesState.EntityData.BundleName = "cisco_ios_xr"
    mtIpv6ReachabilityPrefixesState.EntityData.ParentYangName = "mt-ipv6-reachability-prefixe"
    mtIpv6ReachabilityPrefixesState.EntityData.SegmentPath = "mt-ipv6-reachability-prefixes-state"
    mtIpv6ReachabilityPrefixesState.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv6-reachability/mt-ipv6-reachability-prefixes/mt-ipv6-reachability-prefixe/" + mtIpv6ReachabilityPrefixesState.EntityData.SegmentPath
    mtIpv6ReachabilityPrefixesState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIpv6ReachabilityPrefixesState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIpv6ReachabilityPrefixesState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIpv6ReachabilityPrefixesState.EntityData.Children = types.NewOrderedMap()
    mtIpv6ReachabilityPrefixesState.EntityData.Leafs = types.NewOrderedMap()
    mtIpv6ReachabilityPrefixesState.EntityData.Leafs.Append("up-down", types.YLeaf{"UpDown", mtIpv6ReachabilityPrefixesState.UpDown})
    mtIpv6ReachabilityPrefixesState.EntityData.Leafs.Append("xbit", types.YLeaf{"Xbit", mtIpv6ReachabilityPrefixesState.Xbit})
    mtIpv6ReachabilityPrefixesState.EntityData.Leafs.Append("sbit", types.YLeaf{"Sbit", mtIpv6ReachabilityPrefixesState.Sbit})
    mtIpv6ReachabilityPrefixesState.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", mtIpv6ReachabilityPrefixesState.Prefix})
    mtIpv6ReachabilityPrefixesState.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", mtIpv6ReachabilityPrefixesState.Metric})
    mtIpv6ReachabilityPrefixesState.EntityData.Leafs.Append("mt-id", types.YLeaf{"MtId", mtIpv6ReachabilityPrefixesState.MtId})

    mtIpv6ReachabilityPrefixesState.EntityData.YListKeys = []string {}

    return &(mtIpv6ReachabilityPrefixesState.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs
// List of subTLV types in the LSDB
// for the specified TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of subTLV types in the LSDB for the specified TLV. The type is slice
    // of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv.
    MtIpv6ReachabilityPrefixesSubtlv []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv
}

func (mtIpv6ReachabilityPrefixesSubtlvs *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs) GetEntityData() *types.CommonEntityData {
    mtIpv6ReachabilityPrefixesSubtlvs.EntityData.YFilter = mtIpv6ReachabilityPrefixesSubtlvs.YFilter
    mtIpv6ReachabilityPrefixesSubtlvs.EntityData.YangName = "mt-ipv6-reachability-prefixes-subtlvs"
    mtIpv6ReachabilityPrefixesSubtlvs.EntityData.BundleName = "cisco_ios_xr"
    mtIpv6ReachabilityPrefixesSubtlvs.EntityData.ParentYangName = "mt-ipv6-reachability-prefixe"
    mtIpv6ReachabilityPrefixesSubtlvs.EntityData.SegmentPath = "mt-ipv6-reachability-prefixes-subtlvs"
    mtIpv6ReachabilityPrefixesSubtlvs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv6-reachability/mt-ipv6-reachability-prefixes/mt-ipv6-reachability-prefixe/" + mtIpv6ReachabilityPrefixesSubtlvs.EntityData.SegmentPath
    mtIpv6ReachabilityPrefixesSubtlvs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIpv6ReachabilityPrefixesSubtlvs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIpv6ReachabilityPrefixesSubtlvs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIpv6ReachabilityPrefixesSubtlvs.EntityData.Children = types.NewOrderedMap()
    mtIpv6ReachabilityPrefixesSubtlvs.EntityData.Children.Append("mt-ipv6-reachability-prefixes-subtlv", types.YChild{"MtIpv6ReachabilityPrefixesSubtlv", nil})
    for i := range mtIpv6ReachabilityPrefixesSubtlvs.MtIpv6ReachabilityPrefixesSubtlv {
        mtIpv6ReachabilityPrefixesSubtlvs.EntityData.Children.Append(types.GetSegmentPath(mtIpv6ReachabilityPrefixesSubtlvs.MtIpv6ReachabilityPrefixesSubtlv[i]), types.YChild{"MtIpv6ReachabilityPrefixesSubtlv", mtIpv6ReachabilityPrefixesSubtlvs.MtIpv6ReachabilityPrefixesSubtlv[i]})
    }
    mtIpv6ReachabilityPrefixesSubtlvs.EntityData.Leafs = types.NewOrderedMap()

    mtIpv6ReachabilityPrefixesSubtlvs.EntityData.YListKeys = []string {}

    return &(mtIpv6ReachabilityPrefixesSubtlvs.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv
// List of subTLV types in the LSDB
// for the specified TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the sub-TLV type. The type is string.
    Type interface{}

    // Prefix Segment-ID list.
    MtIpv6ReachabilityPrefixesSubtlvsPrefixSids OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsPrefixSids

    // This container defines sub-TLV 4.
    MtIpv6ReachabilityPrefixesSubtlvsFlags OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsFlags

    // This container defines sub-TLV 11.
    MtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId

    // This container defines sub-TLV 2.
    MtIpv6ReachabilityPrefixesSubtlvsTag64 OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsTag64

    // This container defines sub-TLV 12.
    MtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId

    // This container defines sub-TLV 1.
    MtIpv6ReachabilityPrefixesSubtlvsTag OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsTag

    // State parameters for a prefix.
    MtIpv6ReachabilityPrefixesSubtlvsState OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsState
}

func (mtIpv6ReachabilityPrefixesSubtlv *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv) GetEntityData() *types.CommonEntityData {
    mtIpv6ReachabilityPrefixesSubtlv.EntityData.YFilter = mtIpv6ReachabilityPrefixesSubtlv.YFilter
    mtIpv6ReachabilityPrefixesSubtlv.EntityData.YangName = "mt-ipv6-reachability-prefixes-subtlv"
    mtIpv6ReachabilityPrefixesSubtlv.EntityData.BundleName = "cisco_ios_xr"
    mtIpv6ReachabilityPrefixesSubtlv.EntityData.ParentYangName = "mt-ipv6-reachability-prefixes-subtlvs"
    mtIpv6ReachabilityPrefixesSubtlv.EntityData.SegmentPath = "mt-ipv6-reachability-prefixes-subtlv" + types.AddKeyToken(mtIpv6ReachabilityPrefixesSubtlv.Type, "type")
    mtIpv6ReachabilityPrefixesSubtlv.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv6-reachability/mt-ipv6-reachability-prefixes/mt-ipv6-reachability-prefixe/mt-ipv6-reachability-prefixes-subtlvs/" + mtIpv6ReachabilityPrefixesSubtlv.EntityData.SegmentPath
    mtIpv6ReachabilityPrefixesSubtlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIpv6ReachabilityPrefixesSubtlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIpv6ReachabilityPrefixesSubtlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIpv6ReachabilityPrefixesSubtlv.EntityData.Children = types.NewOrderedMap()
    mtIpv6ReachabilityPrefixesSubtlv.EntityData.Children.Append("mt-ipv6-reachability-prefixes-subtlvs-prefix-sids", types.YChild{"MtIpv6ReachabilityPrefixesSubtlvsPrefixSids", &mtIpv6ReachabilityPrefixesSubtlv.MtIpv6ReachabilityPrefixesSubtlvsPrefixSids})
    mtIpv6ReachabilityPrefixesSubtlv.EntityData.Children.Append("mt-ipv6-reachability-prefixes-subtlvs-flags", types.YChild{"MtIpv6ReachabilityPrefixesSubtlvsFlags", &mtIpv6ReachabilityPrefixesSubtlv.MtIpv6ReachabilityPrefixesSubtlvsFlags})
    mtIpv6ReachabilityPrefixesSubtlv.EntityData.Children.Append("mt-ipv6-reachability-prefixes-subtlvs-ipv4-source-router-id", types.YChild{"MtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId", &mtIpv6ReachabilityPrefixesSubtlv.MtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId})
    mtIpv6ReachabilityPrefixesSubtlv.EntityData.Children.Append("mt-ipv6-reachability-prefixes-subtlvs-tag64", types.YChild{"MtIpv6ReachabilityPrefixesSubtlvsTag64", &mtIpv6ReachabilityPrefixesSubtlv.MtIpv6ReachabilityPrefixesSubtlvsTag64})
    mtIpv6ReachabilityPrefixesSubtlv.EntityData.Children.Append("mt-ipv6-reachability-prefixes-subtlvs-ipv6-source-router-id", types.YChild{"MtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId", &mtIpv6ReachabilityPrefixesSubtlv.MtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId})
    mtIpv6ReachabilityPrefixesSubtlv.EntityData.Children.Append("mt-ipv6-reachability-prefixes-subtlvs-tag", types.YChild{"MtIpv6ReachabilityPrefixesSubtlvsTag", &mtIpv6ReachabilityPrefixesSubtlv.MtIpv6ReachabilityPrefixesSubtlvsTag})
    mtIpv6ReachabilityPrefixesSubtlv.EntityData.Children.Append("mt-ipv6-reachability-prefixes-subtlvs-state", types.YChild{"MtIpv6ReachabilityPrefixesSubtlvsState", &mtIpv6ReachabilityPrefixesSubtlv.MtIpv6ReachabilityPrefixesSubtlvsState})
    mtIpv6ReachabilityPrefixesSubtlv.EntityData.Leafs = types.NewOrderedMap()
    mtIpv6ReachabilityPrefixesSubtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", mtIpv6ReachabilityPrefixesSubtlv.Type})

    mtIpv6ReachabilityPrefixesSubtlv.EntityData.YListKeys = []string {"Type"}

    return &(mtIpv6ReachabilityPrefixesSubtlv.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsPrefixSids
// Prefix Segment-ID list
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsPrefixSids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix Segment-ID list. The type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsPrefixSids_MtIpv6ReachabilityPrefixesSubtlvsPrefixSid.
    MtIpv6ReachabilityPrefixesSubtlvsPrefixSid []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsPrefixSids_MtIpv6ReachabilityPrefixesSubtlvsPrefixSid
}

func (mtIpv6ReachabilityPrefixesSubtlvsPrefixSids *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsPrefixSids) GetEntityData() *types.CommonEntityData {
    mtIpv6ReachabilityPrefixesSubtlvsPrefixSids.EntityData.YFilter = mtIpv6ReachabilityPrefixesSubtlvsPrefixSids.YFilter
    mtIpv6ReachabilityPrefixesSubtlvsPrefixSids.EntityData.YangName = "mt-ipv6-reachability-prefixes-subtlvs-prefix-sids"
    mtIpv6ReachabilityPrefixesSubtlvsPrefixSids.EntityData.BundleName = "cisco_ios_xr"
    mtIpv6ReachabilityPrefixesSubtlvsPrefixSids.EntityData.ParentYangName = "mt-ipv6-reachability-prefixes-subtlv"
    mtIpv6ReachabilityPrefixesSubtlvsPrefixSids.EntityData.SegmentPath = "mt-ipv6-reachability-prefixes-subtlvs-prefix-sids"
    mtIpv6ReachabilityPrefixesSubtlvsPrefixSids.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv6-reachability/mt-ipv6-reachability-prefixes/mt-ipv6-reachability-prefixe/mt-ipv6-reachability-prefixes-subtlvs/mt-ipv6-reachability-prefixes-subtlv/" + mtIpv6ReachabilityPrefixesSubtlvsPrefixSids.EntityData.SegmentPath
    mtIpv6ReachabilityPrefixesSubtlvsPrefixSids.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIpv6ReachabilityPrefixesSubtlvsPrefixSids.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIpv6ReachabilityPrefixesSubtlvsPrefixSids.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIpv6ReachabilityPrefixesSubtlvsPrefixSids.EntityData.Children = types.NewOrderedMap()
    mtIpv6ReachabilityPrefixesSubtlvsPrefixSids.EntityData.Children.Append("mt-ipv6-reachability-prefixes-subtlvs-prefix-sid", types.YChild{"MtIpv6ReachabilityPrefixesSubtlvsPrefixSid", nil})
    for i := range mtIpv6ReachabilityPrefixesSubtlvsPrefixSids.MtIpv6ReachabilityPrefixesSubtlvsPrefixSid {
        mtIpv6ReachabilityPrefixesSubtlvsPrefixSids.EntityData.Children.Append(types.GetSegmentPath(mtIpv6ReachabilityPrefixesSubtlvsPrefixSids.MtIpv6ReachabilityPrefixesSubtlvsPrefixSid[i]), types.YChild{"MtIpv6ReachabilityPrefixesSubtlvsPrefixSid", mtIpv6ReachabilityPrefixesSubtlvsPrefixSids.MtIpv6ReachabilityPrefixesSubtlvsPrefixSid[i]})
    }
    mtIpv6ReachabilityPrefixesSubtlvsPrefixSids.EntityData.Leafs = types.NewOrderedMap()

    mtIpv6ReachabilityPrefixesSubtlvsPrefixSids.EntityData.YListKeys = []string {}

    return &(mtIpv6ReachabilityPrefixesSubtlvsPrefixSids.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsPrefixSids_MtIpv6ReachabilityPrefixesSubtlvsPrefixSid
// Prefix Segment-ID list
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsPrefixSids_MtIpv6ReachabilityPrefixesSubtlvsPrefixSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the value of the prefix SID. The type
    // is interface{} with range: 0..4294967295.
    Value interface{}

    // State parameters for Prefix-SID.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsPrefixSids_MtIpv6ReachabilityPrefixesSubtlvsPrefixSid_State
}

func (mtIpv6ReachabilityPrefixesSubtlvsPrefixSid *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsPrefixSids_MtIpv6ReachabilityPrefixesSubtlvsPrefixSid) GetEntityData() *types.CommonEntityData {
    mtIpv6ReachabilityPrefixesSubtlvsPrefixSid.EntityData.YFilter = mtIpv6ReachabilityPrefixesSubtlvsPrefixSid.YFilter
    mtIpv6ReachabilityPrefixesSubtlvsPrefixSid.EntityData.YangName = "mt-ipv6-reachability-prefixes-subtlvs-prefix-sid"
    mtIpv6ReachabilityPrefixesSubtlvsPrefixSid.EntityData.BundleName = "cisco_ios_xr"
    mtIpv6ReachabilityPrefixesSubtlvsPrefixSid.EntityData.ParentYangName = "mt-ipv6-reachability-prefixes-subtlvs-prefix-sids"
    mtIpv6ReachabilityPrefixesSubtlvsPrefixSid.EntityData.SegmentPath = "mt-ipv6-reachability-prefixes-subtlvs-prefix-sid" + types.AddKeyToken(mtIpv6ReachabilityPrefixesSubtlvsPrefixSid.Value, "value")
    mtIpv6ReachabilityPrefixesSubtlvsPrefixSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv6-reachability/mt-ipv6-reachability-prefixes/mt-ipv6-reachability-prefixe/mt-ipv6-reachability-prefixes-subtlvs/mt-ipv6-reachability-prefixes-subtlv/mt-ipv6-reachability-prefixes-subtlvs-prefix-sids/" + mtIpv6ReachabilityPrefixesSubtlvsPrefixSid.EntityData.SegmentPath
    mtIpv6ReachabilityPrefixesSubtlvsPrefixSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIpv6ReachabilityPrefixesSubtlvsPrefixSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIpv6ReachabilityPrefixesSubtlvsPrefixSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIpv6ReachabilityPrefixesSubtlvsPrefixSid.EntityData.Children = types.NewOrderedMap()
    mtIpv6ReachabilityPrefixesSubtlvsPrefixSid.EntityData.Children.Append("state", types.YChild{"State", &mtIpv6ReachabilityPrefixesSubtlvsPrefixSid.State})
    mtIpv6ReachabilityPrefixesSubtlvsPrefixSid.EntityData.Leafs = types.NewOrderedMap()
    mtIpv6ReachabilityPrefixesSubtlvsPrefixSid.EntityData.Leafs.Append("value", types.YLeaf{"Value", mtIpv6ReachabilityPrefixesSubtlvsPrefixSid.Value})

    mtIpv6ReachabilityPrefixesSubtlvsPrefixSid.EntityData.YListKeys = []string {"Value"}

    return &(mtIpv6ReachabilityPrefixesSubtlvsPrefixSid.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsPrefixSids_MtIpv6ReachabilityPrefixesSubtlvsPrefixSid_State
// State parameters for Prefix-SID
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsPrefixSids_MtIpv6ReachabilityPrefixesSubtlvsPrefixSid_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IGP Prefix-SID value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Prefix-SID algorithm to be used for path computation. The type is
    // interface{} with range: 0..255.
    Algorithm interface{}

    // Flags associated with Prefix Segment-ID. The type is slice of
    // OpenconfigIsisLspPrefixSidStateFlagsEnum.
    Flags []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsPrefixSids_MtIpv6ReachabilityPrefixesSubtlvsPrefixSid_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "mt-ipv6-reachability-prefixes-subtlvs-prefix-sid"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv6-reachability/mt-ipv6-reachability-prefixes/mt-ipv6-reachability-prefixe/mt-ipv6-reachability-prefixes-subtlvs/mt-ipv6-reachability-prefixes-subtlv/mt-ipv6-reachability-prefixes-subtlvs-prefix-sids/mt-ipv6-reachability-prefixes-subtlvs-prefix-sid/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})
    state.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", state.Algorithm})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsFlags
// This container defines sub-TLV 4
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 4.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsFlags_State
}

func (mtIpv6ReachabilityPrefixesSubtlvsFlags *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsFlags) GetEntityData() *types.CommonEntityData {
    mtIpv6ReachabilityPrefixesSubtlvsFlags.EntityData.YFilter = mtIpv6ReachabilityPrefixesSubtlvsFlags.YFilter
    mtIpv6ReachabilityPrefixesSubtlvsFlags.EntityData.YangName = "mt-ipv6-reachability-prefixes-subtlvs-flags"
    mtIpv6ReachabilityPrefixesSubtlvsFlags.EntityData.BundleName = "cisco_ios_xr"
    mtIpv6ReachabilityPrefixesSubtlvsFlags.EntityData.ParentYangName = "mt-ipv6-reachability-prefixes-subtlv"
    mtIpv6ReachabilityPrefixesSubtlvsFlags.EntityData.SegmentPath = "mt-ipv6-reachability-prefixes-subtlvs-flags"
    mtIpv6ReachabilityPrefixesSubtlvsFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv6-reachability/mt-ipv6-reachability-prefixes/mt-ipv6-reachability-prefixe/mt-ipv6-reachability-prefixes-subtlvs/mt-ipv6-reachability-prefixes-subtlv/" + mtIpv6ReachabilityPrefixesSubtlvsFlags.EntityData.SegmentPath
    mtIpv6ReachabilityPrefixesSubtlvsFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIpv6ReachabilityPrefixesSubtlvsFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIpv6ReachabilityPrefixesSubtlvsFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIpv6ReachabilityPrefixesSubtlvsFlags.EntityData.Children = types.NewOrderedMap()
    mtIpv6ReachabilityPrefixesSubtlvsFlags.EntityData.Children.Append("state", types.YChild{"State", &mtIpv6ReachabilityPrefixesSubtlvsFlags.State})
    mtIpv6ReachabilityPrefixesSubtlvsFlags.EntityData.Leafs = types.NewOrderedMap()

    mtIpv6ReachabilityPrefixesSubtlvsFlags.EntityData.YListKeys = []string {}

    return &(mtIpv6ReachabilityPrefixesSubtlvsFlags.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsFlags_State
// State parameters of sub-TLV 4
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsFlags_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type is string.
    Type interface{}

    // Additional prefix reachability flags. The type is slice of
    // OpenconfigIsisLspFlagsStateFlagsEnum.
    Flags []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsFlags_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "mt-ipv6-reachability-prefixes-subtlvs-flags"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv6-reachability/mt-ipv6-reachability-prefixes/mt-ipv6-reachability-prefixe/mt-ipv6-reachability-prefixes-subtlvs/mt-ipv6-reachability-prefixes-subtlv/mt-ipv6-reachability-prefixes-subtlvs-flags/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", state.Flags})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId
// This container defines sub-TLV
// 11
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 11.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId_State
}

func (mtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId) GetEntityData() *types.CommonEntityData {
    mtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId.EntityData.YFilter = mtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId.YFilter
    mtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId.EntityData.YangName = "mt-ipv6-reachability-prefixes-subtlvs-ipv4-source-router-id"
    mtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId.EntityData.BundleName = "cisco_ios_xr"
    mtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId.EntityData.ParentYangName = "mt-ipv6-reachability-prefixes-subtlv"
    mtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId.EntityData.SegmentPath = "mt-ipv6-reachability-prefixes-subtlvs-ipv4-source-router-id"
    mtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv6-reachability/mt-ipv6-reachability-prefixes/mt-ipv6-reachability-prefixe/mt-ipv6-reachability-prefixes-subtlvs/mt-ipv6-reachability-prefixes-subtlv/" + mtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId.EntityData.SegmentPath
    mtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId.EntityData.Children = types.NewOrderedMap()
    mtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId.EntityData.Children.Append("state", types.YChild{"State", &mtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId.State})
    mtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId.EntityData.Leafs = types.NewOrderedMap()

    mtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId.EntityData.YListKeys = []string {}

    return &(mtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId_State
// State parameters of sub-TLV 11
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type is string.
    Type interface{}

    // IPv4 Source router ID address. The type is string.
    Ipv4SourceRouterId interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsIpv4SourceRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "mt-ipv6-reachability-prefixes-subtlvs-ipv4-source-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv6-reachability/mt-ipv6-reachability-prefixes/mt-ipv6-reachability-prefixe/mt-ipv6-reachability-prefixes-subtlvs/mt-ipv6-reachability-prefixes-subtlv/mt-ipv6-reachability-prefixes-subtlvs-ipv4-source-router-id/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("ipv4-source-router-id", types.YLeaf{"Ipv4SourceRouterId", state.Ipv4SourceRouterId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsTag64
// This container defines sub-TLV 2
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsTag64 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 2.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsTag64_State
}

func (mtIpv6ReachabilityPrefixesSubtlvsTag64 *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsTag64) GetEntityData() *types.CommonEntityData {
    mtIpv6ReachabilityPrefixesSubtlvsTag64.EntityData.YFilter = mtIpv6ReachabilityPrefixesSubtlvsTag64.YFilter
    mtIpv6ReachabilityPrefixesSubtlvsTag64.EntityData.YangName = "mt-ipv6-reachability-prefixes-subtlvs-tag64"
    mtIpv6ReachabilityPrefixesSubtlvsTag64.EntityData.BundleName = "cisco_ios_xr"
    mtIpv6ReachabilityPrefixesSubtlvsTag64.EntityData.ParentYangName = "mt-ipv6-reachability-prefixes-subtlv"
    mtIpv6ReachabilityPrefixesSubtlvsTag64.EntityData.SegmentPath = "mt-ipv6-reachability-prefixes-subtlvs-tag64"
    mtIpv6ReachabilityPrefixesSubtlvsTag64.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv6-reachability/mt-ipv6-reachability-prefixes/mt-ipv6-reachability-prefixe/mt-ipv6-reachability-prefixes-subtlvs/mt-ipv6-reachability-prefixes-subtlv/" + mtIpv6ReachabilityPrefixesSubtlvsTag64.EntityData.SegmentPath
    mtIpv6ReachabilityPrefixesSubtlvsTag64.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIpv6ReachabilityPrefixesSubtlvsTag64.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIpv6ReachabilityPrefixesSubtlvsTag64.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIpv6ReachabilityPrefixesSubtlvsTag64.EntityData.Children = types.NewOrderedMap()
    mtIpv6ReachabilityPrefixesSubtlvsTag64.EntityData.Children.Append("state", types.YChild{"State", &mtIpv6ReachabilityPrefixesSubtlvsTag64.State})
    mtIpv6ReachabilityPrefixesSubtlvsTag64.EntityData.Leafs = types.NewOrderedMap()

    mtIpv6ReachabilityPrefixesSubtlvsTag64.EntityData.YListKeys = []string {}

    return &(mtIpv6ReachabilityPrefixesSubtlvsTag64.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsTag64_State
// State parameters of sub-TLV 2
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsTag64_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of 64-bit tags associated with the prefix. The type is slice of
    // interface{} with range: 0..18446744073709551615.
    Tag64 []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsTag64_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "mt-ipv6-reachability-prefixes-subtlvs-tag64"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv6-reachability/mt-ipv6-reachability-prefixes/mt-ipv6-reachability-prefixe/mt-ipv6-reachability-prefixes-subtlvs/mt-ipv6-reachability-prefixes-subtlv/mt-ipv6-reachability-prefixes-subtlvs-tag64/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("tag64", types.YLeaf{"Tag64", state.Tag64})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId
// This container defines sub-TLV
// 12
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 12.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId_State
}

func (mtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId) GetEntityData() *types.CommonEntityData {
    mtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId.EntityData.YFilter = mtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId.YFilter
    mtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId.EntityData.YangName = "mt-ipv6-reachability-prefixes-subtlvs-ipv6-source-router-id"
    mtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId.EntityData.BundleName = "cisco_ios_xr"
    mtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId.EntityData.ParentYangName = "mt-ipv6-reachability-prefixes-subtlv"
    mtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId.EntityData.SegmentPath = "mt-ipv6-reachability-prefixes-subtlvs-ipv6-source-router-id"
    mtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv6-reachability/mt-ipv6-reachability-prefixes/mt-ipv6-reachability-prefixe/mt-ipv6-reachability-prefixes-subtlvs/mt-ipv6-reachability-prefixes-subtlv/" + mtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId.EntityData.SegmentPath
    mtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId.EntityData.Children = types.NewOrderedMap()
    mtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId.EntityData.Children.Append("state", types.YChild{"State", &mtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId.State})
    mtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId.EntityData.Leafs = types.NewOrderedMap()

    mtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId.EntityData.YListKeys = []string {}

    return &(mtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId_State
// State parameters of sub-TLV 12
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type is string.
    Type interface{}

    // IPv6 Source router ID address. The type is string.
    Ipv6SourceRouterId interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsIpv6SourceRouterId_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "mt-ipv6-reachability-prefixes-subtlvs-ipv6-source-router-id"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv6-reachability/mt-ipv6-reachability-prefixes/mt-ipv6-reachability-prefixe/mt-ipv6-reachability-prefixes-subtlvs/mt-ipv6-reachability-prefixes-subtlv/mt-ipv6-reachability-prefixes-subtlvs-ipv6-source-router-id/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("ipv6-source-router-id", types.YLeaf{"Ipv6SourceRouterId", state.Ipv6SourceRouterId})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsTag
// This container defines sub-TLV 1
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsTag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State parameters of sub-TLV 1.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsTag_State
}

func (mtIpv6ReachabilityPrefixesSubtlvsTag *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsTag) GetEntityData() *types.CommonEntityData {
    mtIpv6ReachabilityPrefixesSubtlvsTag.EntityData.YFilter = mtIpv6ReachabilityPrefixesSubtlvsTag.YFilter
    mtIpv6ReachabilityPrefixesSubtlvsTag.EntityData.YangName = "mt-ipv6-reachability-prefixes-subtlvs-tag"
    mtIpv6ReachabilityPrefixesSubtlvsTag.EntityData.BundleName = "cisco_ios_xr"
    mtIpv6ReachabilityPrefixesSubtlvsTag.EntityData.ParentYangName = "mt-ipv6-reachability-prefixes-subtlv"
    mtIpv6ReachabilityPrefixesSubtlvsTag.EntityData.SegmentPath = "mt-ipv6-reachability-prefixes-subtlvs-tag"
    mtIpv6ReachabilityPrefixesSubtlvsTag.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv6-reachability/mt-ipv6-reachability-prefixes/mt-ipv6-reachability-prefixe/mt-ipv6-reachability-prefixes-subtlvs/mt-ipv6-reachability-prefixes-subtlv/" + mtIpv6ReachabilityPrefixesSubtlvsTag.EntityData.SegmentPath
    mtIpv6ReachabilityPrefixesSubtlvsTag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIpv6ReachabilityPrefixesSubtlvsTag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIpv6ReachabilityPrefixesSubtlvsTag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIpv6ReachabilityPrefixesSubtlvsTag.EntityData.Children = types.NewOrderedMap()
    mtIpv6ReachabilityPrefixesSubtlvsTag.EntityData.Children.Append("state", types.YChild{"State", &mtIpv6ReachabilityPrefixesSubtlvsTag.State})
    mtIpv6ReachabilityPrefixesSubtlvsTag.EntityData.Leafs = types.NewOrderedMap()

    mtIpv6ReachabilityPrefixesSubtlvsTag.EntityData.YListKeys = []string {}

    return &(mtIpv6ReachabilityPrefixesSubtlvsTag.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsTag_State
// State parameters of sub-TLV 1
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsTag_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of 32-bit tags associated with the prefix. The type is slice of
    // interface{} with range: 0..4294967295.
    Tag32 []interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsTag_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "mt-ipv6-reachability-prefixes-subtlvs-tag"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv6-reachability/mt-ipv6-reachability-prefixes/mt-ipv6-reachability-prefixe/mt-ipv6-reachability-prefixes-subtlvs/mt-ipv6-reachability-prefixes-subtlv/mt-ipv6-reachability-prefixes-subtlvs-tag/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("tag32", types.YLeaf{"Tag32", state.Tag32})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsState
// State parameters for a prefix
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type of subTLV being described. The type is string.
    Type interface{}
}

func (mtIpv6ReachabilityPrefixesSubtlvsState *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesSubtlvs_MtIpv6ReachabilityPrefixesSubtlv_MtIpv6ReachabilityPrefixesSubtlvsState) GetEntityData() *types.CommonEntityData {
    mtIpv6ReachabilityPrefixesSubtlvsState.EntityData.YFilter = mtIpv6ReachabilityPrefixesSubtlvsState.YFilter
    mtIpv6ReachabilityPrefixesSubtlvsState.EntityData.YangName = "mt-ipv6-reachability-prefixes-subtlvs-state"
    mtIpv6ReachabilityPrefixesSubtlvsState.EntityData.BundleName = "cisco_ios_xr"
    mtIpv6ReachabilityPrefixesSubtlvsState.EntityData.ParentYangName = "mt-ipv6-reachability-prefixes-subtlv"
    mtIpv6ReachabilityPrefixesSubtlvsState.EntityData.SegmentPath = "mt-ipv6-reachability-prefixes-subtlvs-state"
    mtIpv6ReachabilityPrefixesSubtlvsState.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv6-reachability/mt-ipv6-reachability-prefixes/mt-ipv6-reachability-prefixe/mt-ipv6-reachability-prefixes-subtlvs/mt-ipv6-reachability-prefixes-subtlv/" + mtIpv6ReachabilityPrefixesSubtlvsState.EntityData.SegmentPath
    mtIpv6ReachabilityPrefixesSubtlvsState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIpv6ReachabilityPrefixesSubtlvsState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIpv6ReachabilityPrefixesSubtlvsState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIpv6ReachabilityPrefixesSubtlvsState.EntityData.Children = types.NewOrderedMap()
    mtIpv6ReachabilityPrefixesSubtlvsState.EntityData.Leafs = types.NewOrderedMap()
    mtIpv6ReachabilityPrefixesSubtlvsState.EntityData.Leafs.Append("type", types.YLeaf{"Type", mtIpv6ReachabilityPrefixesSubtlvsState.Type})

    mtIpv6ReachabilityPrefixesSubtlvsState.EntityData.YListKeys = []string {}

    return &(mtIpv6ReachabilityPrefixesSubtlvsState.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesUndefinedSubtlvs
// Sub-TLVs that are not defined in
// the model or not recognised by
// system
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesUndefinedSubtlvs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub-TLVs that are not defined in the model or not recognised by system. The
    // type is slice of
    // OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesUndefinedSubtlvs_MtIpv6ReachabilityPrefixesUndefinedSubtlv.
    MtIpv6ReachabilityPrefixesUndefinedSubtlv []*OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesUndefinedSubtlvs_MtIpv6ReachabilityPrefixesUndefinedSubtlv
}

func (mtIpv6ReachabilityPrefixesUndefinedSubtlvs *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesUndefinedSubtlvs) GetEntityData() *types.CommonEntityData {
    mtIpv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.YFilter = mtIpv6ReachabilityPrefixesUndefinedSubtlvs.YFilter
    mtIpv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.YangName = "mt-ipv6-reachability-prefixes-undefined-subtlvs"
    mtIpv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.BundleName = "cisco_ios_xr"
    mtIpv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.ParentYangName = "mt-ipv6-reachability-prefixe"
    mtIpv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.SegmentPath = "mt-ipv6-reachability-prefixes-undefined-subtlvs"
    mtIpv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv6-reachability/mt-ipv6-reachability-prefixes/mt-ipv6-reachability-prefixe/" + mtIpv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.SegmentPath
    mtIpv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIpv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIpv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIpv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.Children = types.NewOrderedMap()
    mtIpv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.Children.Append("mt-ipv6-reachability-prefixes-undefined-subtlv", types.YChild{"MtIpv6ReachabilityPrefixesUndefinedSubtlv", nil})
    for i := range mtIpv6ReachabilityPrefixesUndefinedSubtlvs.MtIpv6ReachabilityPrefixesUndefinedSubtlv {
        mtIpv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.Children.Append(types.GetSegmentPath(mtIpv6ReachabilityPrefixesUndefinedSubtlvs.MtIpv6ReachabilityPrefixesUndefinedSubtlv[i]), types.YChild{"MtIpv6ReachabilityPrefixesUndefinedSubtlv", mtIpv6ReachabilityPrefixesUndefinedSubtlvs.MtIpv6ReachabilityPrefixesUndefinedSubtlv[i]})
    }
    mtIpv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.Leafs = types.NewOrderedMap()

    mtIpv6ReachabilityPrefixesUndefinedSubtlvs.EntityData.YListKeys = []string {}

    return &(mtIpv6ReachabilityPrefixesUndefinedSubtlvs.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesUndefinedSubtlvs_MtIpv6ReachabilityPrefixesUndefinedSubtlv
// Sub-TLVs that are not defined in
// the model or not recognised by
// system
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesUndefinedSubtlvs_MtIpv6ReachabilityPrefixesUndefinedSubtlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Reference to the type of the undefined sub-TLV.
    // The type is interface{} with range: 0..4294967295.
    Type interface{}

    // State parameters of the undefined sub-TLV.
    State OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesUndefinedSubtlvs_MtIpv6ReachabilityPrefixesUndefinedSubtlv_State
}

func (mtIpv6ReachabilityPrefixesUndefinedSubtlv *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesUndefinedSubtlvs_MtIpv6ReachabilityPrefixesUndefinedSubtlv) GetEntityData() *types.CommonEntityData {
    mtIpv6ReachabilityPrefixesUndefinedSubtlv.EntityData.YFilter = mtIpv6ReachabilityPrefixesUndefinedSubtlv.YFilter
    mtIpv6ReachabilityPrefixesUndefinedSubtlv.EntityData.YangName = "mt-ipv6-reachability-prefixes-undefined-subtlv"
    mtIpv6ReachabilityPrefixesUndefinedSubtlv.EntityData.BundleName = "cisco_ios_xr"
    mtIpv6ReachabilityPrefixesUndefinedSubtlv.EntityData.ParentYangName = "mt-ipv6-reachability-prefixes-undefined-subtlvs"
    mtIpv6ReachabilityPrefixesUndefinedSubtlv.EntityData.SegmentPath = "mt-ipv6-reachability-prefixes-undefined-subtlv" + types.AddKeyToken(mtIpv6ReachabilityPrefixesUndefinedSubtlv.Type, "type")
    mtIpv6ReachabilityPrefixesUndefinedSubtlv.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv6-reachability/mt-ipv6-reachability-prefixes/mt-ipv6-reachability-prefixe/mt-ipv6-reachability-prefixes-undefined-subtlvs/" + mtIpv6ReachabilityPrefixesUndefinedSubtlv.EntityData.SegmentPath
    mtIpv6ReachabilityPrefixesUndefinedSubtlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtIpv6ReachabilityPrefixesUndefinedSubtlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtIpv6ReachabilityPrefixesUndefinedSubtlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtIpv6ReachabilityPrefixesUndefinedSubtlv.EntityData.Children = types.NewOrderedMap()
    mtIpv6ReachabilityPrefixesUndefinedSubtlv.EntityData.Children.Append("state", types.YChild{"State", &mtIpv6ReachabilityPrefixesUndefinedSubtlv.State})
    mtIpv6ReachabilityPrefixesUndefinedSubtlv.EntityData.Leafs = types.NewOrderedMap()
    mtIpv6ReachabilityPrefixesUndefinedSubtlv.EntityData.Leafs.Append("type", types.YLeaf{"Type", mtIpv6ReachabilityPrefixesUndefinedSubtlv.Type})

    mtIpv6ReachabilityPrefixesUndefinedSubtlv.EntityData.YListKeys = []string {"Type"}

    return &(mtIpv6ReachabilityPrefixesUndefinedSubtlv.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesUndefinedSubtlvs_MtIpv6ReachabilityPrefixesUndefinedSubtlv_State
// State parameters of the undefined sub-TLV
type OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesUndefinedSubtlvs_MtIpv6ReachabilityPrefixesUndefinedSubtlv_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TLV Type. The type is interface{} with range: 0..255.
    Type interface{}

    // TLV length. The type is interface{} with range: 0..255.
    Length interface{}

    // TLV value. The type is string.
    Value interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabases_LinkStateDatabase_Tlvses_Tlvs_MtIpv6Reachability_MtIpv6ReachabilityPrefixes_MtIpv6ReachabilityPrefixe_MtIpv6ReachabilityPrefixesUndefinedSubtlvs_MtIpv6ReachabilityPrefixesUndefinedSubtlv_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "mt-ipv6-reachability-prefixes-undefined-subtlv"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-databases/link-state-database/tlvses/tlvs/mt-ipv6-reachability/mt-ipv6-reachability-prefixes/mt-ipv6-reachability-prefixe/mt-ipv6-reachability-prefixes-undefined-subtlvs/mt-ipv6-reachability-prefixes-undefined-subtlv/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("length", types.YLeaf{"Length", state.Length})
    state.EntityData.Leafs.Append("value", types.YLeaf{"Value", state.Value})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// OcniIsis_NetworkInstances_NetworkInstance_State
// Operational state parameters relating to a
// network instance
type OcniIsis_NetworkInstances_NetworkInstance_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An operator-assigned unique name for the forwarding instance. The type is
    // string.
    Name interface{}

    // The type of network instance. The type is string.
    Type interface{}

    // Whether the network instance should be configured to be active on the
    // network element. The type is bool.
    Enabled interface{}

    // A free-form string to be used by the network operator to describe the
    // function of this network instance. The type is string.
    Description interface{}
}

func (state *OcniIsis_NetworkInstances_NetworkInstance_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "network-instance"
    state.EntityData.SegmentPath = "state"
    state.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:ocni-isis/network-instances/network-instance/" + state.EntityData.SegmentPath
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Leafs = types.NewOrderedMap()
    state.EntityData.Leafs.Append("name", types.YLeaf{"Name", state.Name})
    state.EntityData.Leafs.Append("type", types.YLeaf{"Type", state.Type})
    state.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", state.Enabled})
    state.EntityData.Leafs.Append("description", types.YLeaf{"Description", state.Description})

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// Isis
// isis
type Isis struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Per-instance operational data.
    Instances Isis_Instances
}

func (isis *Isis) GetEntityData() *types.CommonEntityData {
    isis.EntityData.YFilter = isis.YFilter
    isis.EntityData.YangName = "isis"
    isis.EntityData.BundleName = "cisco_ios_xr"
    isis.EntityData.ParentYangName = "Cisco-IOS-XR-clns-isis-oper"
    isis.EntityData.SegmentPath = "Cisco-IOS-XR-clns-isis-oper:isis"
    isis.EntityData.AbsolutePath = isis.EntityData.SegmentPath
    isis.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isis.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isis.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isis.EntityData.Children = types.NewOrderedMap()
    isis.EntityData.Children.Append("instances", types.YChild{"Instances", &isis.Instances})
    isis.EntityData.Leafs = types.NewOrderedMap()

    isis.EntityData.YListKeys = []string {}

    return &(isis.EntityData)
}

// Isis_Instances
// Per-instance operational data
type Isis_Instances struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IS-IS instance. The type is slice of Isis_Instances_Instance.
    Instance []*Isis_Instances_Instance
}

func (instances *Isis_Instances) GetEntityData() *types.CommonEntityData {
    instances.EntityData.YFilter = instances.YFilter
    instances.EntityData.YangName = "instances"
    instances.EntityData.BundleName = "cisco_ios_xr"
    instances.EntityData.ParentYangName = "isis"
    instances.EntityData.SegmentPath = "instances"
    instances.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/" + instances.EntityData.SegmentPath
    instances.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instances.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instances.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instances.EntityData.Children = types.NewOrderedMap()
    instances.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range instances.Instance {
        instances.EntityData.Children.Append(types.GetSegmentPath(instances.Instance[i]), types.YChild{"Instance", instances.Instance[i]})
    }
    instances.EntityData.Leafs = types.NewOrderedMap()

    instances.EntityData.YListKeys = []string {}

    return &(instances.EntityData)
}

// Isis_Instances_Instance
// IS-IS instance
type Isis_Instances_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Instance identifier. The type is string with
    // length: 1..36.
    InstanceName interface{}

    // Neighbor table.
    Neighbors Isis_Instances_Instance_Neighbors

    // Hostname table.
    HostNames Isis_Instances_Instance_HostNames

    // Per-instance statistics.
    StatisticsGlobal Isis_Instances_Instance_StatisticsGlobal

    // Level table.
    Levels Isis_Instances_Instance_Levels

    // Topology table.
    Topologies Isis_Instances_Instance_Topologies

    // NSR Status information.
    NsrStatus Isis_Instances_Instance_NsrStatus

    // Interface table.
    Interfaces Isis_Instances_Instance_Interfaces

    // Checkpointed adjacency table.
    CheckpointAdjacencies Isis_Instances_Instance_CheckpointAdjacencies

    // Flex-Algo Table.
    FlexAlgos Isis_Instances_Instance_FlexAlgos

    // Segment Routing Mapping Server operational data.
    Srms Isis_Instances_Instance_Srms

    // Log of errors and warnings.
    ErrorLog Isis_Instances_Instance_ErrorLog

    // Checkpointed interface table.
    CheckpointInterfaces Isis_Instances_Instance_CheckpointInterfaces

    // SR Label table.
    SrLabels Isis_Instances_Instance_SrLabels

    // Interface statistics table.
    InterfaceStatistics Isis_Instances_Instance_InterfaceStatistics

    // Basic protocol information about an IS-IS instance.
    Protocol Isis_Instances_Instance_Protocol

    // Neighbor-summary table.
    NeighborSummaries Isis_Instances_Instance_NeighborSummaries

    // Checkpointed LSP table.
    CheckpointLsps Isis_Instances_Instance_CheckpointLsps

    // Mesh-group information.
    MeshGroups Isis_Instances_Instance_MeshGroups

    // NSR Statistics information.
    NsrStatistics Isis_Instances_Instance_NsrStatistics

    // Checkpointed TE tunnel table.
    CheckpointTeTunnels Isis_Instances_Instance_CheckpointTeTunnels
}

func (instance *Isis_Instances_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "instances"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceName, "instance-name")
    instance.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/" + instance.EntityData.SegmentPath
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("neighbors", types.YChild{"Neighbors", &instance.Neighbors})
    instance.EntityData.Children.Append("host-names", types.YChild{"HostNames", &instance.HostNames})
    instance.EntityData.Children.Append("statistics-global", types.YChild{"StatisticsGlobal", &instance.StatisticsGlobal})
    instance.EntityData.Children.Append("levels", types.YChild{"Levels", &instance.Levels})
    instance.EntityData.Children.Append("topologies", types.YChild{"Topologies", &instance.Topologies})
    instance.EntityData.Children.Append("nsr-status", types.YChild{"NsrStatus", &instance.NsrStatus})
    instance.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &instance.Interfaces})
    instance.EntityData.Children.Append("checkpoint-adjacencies", types.YChild{"CheckpointAdjacencies", &instance.CheckpointAdjacencies})
    instance.EntityData.Children.Append("flex-algos", types.YChild{"FlexAlgos", &instance.FlexAlgos})
    instance.EntityData.Children.Append("srms", types.YChild{"Srms", &instance.Srms})
    instance.EntityData.Children.Append("error-log", types.YChild{"ErrorLog", &instance.ErrorLog})
    instance.EntityData.Children.Append("checkpoint-interfaces", types.YChild{"CheckpointInterfaces", &instance.CheckpointInterfaces})
    instance.EntityData.Children.Append("sr-labels", types.YChild{"SrLabels", &instance.SrLabels})
    instance.EntityData.Children.Append("interface-statistics", types.YChild{"InterfaceStatistics", &instance.InterfaceStatistics})
    instance.EntityData.Children.Append("protocol", types.YChild{"Protocol", &instance.Protocol})
    instance.EntityData.Children.Append("neighbor-summaries", types.YChild{"NeighborSummaries", &instance.NeighborSummaries})
    instance.EntityData.Children.Append("checkpoint-lsps", types.YChild{"CheckpointLsps", &instance.CheckpointLsps})
    instance.EntityData.Children.Append("mesh-groups", types.YChild{"MeshGroups", &instance.MeshGroups})
    instance.EntityData.Children.Append("nsr-statistics", types.YChild{"NsrStatistics", &instance.NsrStatistics})
    instance.EntityData.Children.Append("checkpoint-te-tunnels", types.YChild{"CheckpointTeTunnels", &instance.CheckpointTeTunnels})
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", instance.InstanceName})

    instance.EntityData.YListKeys = []string {"InstanceName"}

    return &(instance.EntityData)
}

// Isis_Instances_Instance_Neighbors
// Neighbor table
type Isis_Instances_Instance_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A single neighbor router. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor.
    Neighbor []*Isis_Instances_Instance_Neighbors_Neighbor
}

func (neighbors *Isis_Instances_Instance_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "cisco_ios_xr"
    neighbors.EntityData.ParentYangName = "instance"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/" + neighbors.EntityData.SegmentPath
    neighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbors.EntityData.Children = types.NewOrderedMap()
    neighbors.EntityData.Children.Append("neighbor", types.YChild{"Neighbor", nil})
    for i := range neighbors.Neighbor {
        types.SetYListKey(neighbors.Neighbor[i], i)
        neighbors.EntityData.Children.Append(types.GetSegmentPath(neighbors.Neighbor[i]), types.YChild{"Neighbor", neighbors.Neighbor[i]})
    }
    neighbors.EntityData.Leafs = types.NewOrderedMap()

    neighbors.EntityData.YListKeys = []string {}

    return &(neighbors.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor
// A single neighbor router
type Isis_Instances_Instance_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // System ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    SystemId interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Neighbor system ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSystemId interface{}

    // Neighbor SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Local interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    LocalInterface interface{}

    // Neighbor (adjacency) state. The type is IsisAdjState.
    NeighborState interface{}

    // Circuit type. The type is IsisLevels.
    NeighborCircuitType interface{}

    // TRUE if neighbor is IETF-NSF capable. The type is interface{} with range:
    // 0..4294967295.
    NeighborIetfNsfCapableFlag interface{}

    // Link media type. The type is IsisMediaClass.
    NeighborMediaType interface{}

    // Time (s) until neighbor declared down if no IIH received. The type is
    // interface{} with range: 0..4294967295.
    NeighborHoldtime interface{}

    // TRUE if NeighborUptime is set. The type is bool.
    NeighborUptimeValidFlag interface{}

    // How long the neighbor has been up (s). The type is interface{} with range:
    // 0..4294967295.
    NeighborUptime interface{}

    // ISIS NSR STANDBY. The type is bool.
    NsrStandby interface{}

    // Active area addresses. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress.
    NeighborActiveAreaAddress []*Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress

    // Topologies supported by both neighbor and local system. The type is slice
    // of Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported.
    TopologiesSupported []*Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported

    // Per address-family data. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData.
    NeighborPerAddressFamilyData []*Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData
}

func (neighbor *Isis_Instances_Instance_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "cisco_ios_xr"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor" + types.AddNoKeyToken(neighbor)
    neighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/" + neighbor.EntityData.SegmentPath
    neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbor.EntityData.Children = types.NewOrderedMap()
    neighbor.EntityData.Children.Append("neighbor-active-area-address", types.YChild{"NeighborActiveAreaAddress", nil})
    for i := range neighbor.NeighborActiveAreaAddress {
        types.SetYListKey(neighbor.NeighborActiveAreaAddress[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.NeighborActiveAreaAddress[i]), types.YChild{"NeighborActiveAreaAddress", neighbor.NeighborActiveAreaAddress[i]})
    }
    neighbor.EntityData.Children.Append("topologies-supported", types.YChild{"TopologiesSupported", nil})
    for i := range neighbor.TopologiesSupported {
        types.SetYListKey(neighbor.TopologiesSupported[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.TopologiesSupported[i]), types.YChild{"TopologiesSupported", neighbor.TopologiesSupported[i]})
    }
    neighbor.EntityData.Children.Append("neighbor-per-address-family-data", types.YChild{"NeighborPerAddressFamilyData", nil})
    for i := range neighbor.NeighborPerAddressFamilyData {
        types.SetYListKey(neighbor.NeighborPerAddressFamilyData[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.NeighborPerAddressFamilyData[i]), types.YChild{"NeighborPerAddressFamilyData", neighbor.NeighborPerAddressFamilyData[i]})
    }
    neighbor.EntityData.Leafs = types.NewOrderedMap()
    neighbor.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", neighbor.SystemId})
    neighbor.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", neighbor.InterfaceName})
    neighbor.EntityData.Leafs.Append("neighbor-system-id", types.YLeaf{"NeighborSystemId", neighbor.NeighborSystemId})
    neighbor.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", neighbor.NeighborSnpa})
    neighbor.EntityData.Leafs.Append("local-interface", types.YLeaf{"LocalInterface", neighbor.LocalInterface})
    neighbor.EntityData.Leafs.Append("neighbor-state", types.YLeaf{"NeighborState", neighbor.NeighborState})
    neighbor.EntityData.Leafs.Append("neighbor-circuit-type", types.YLeaf{"NeighborCircuitType", neighbor.NeighborCircuitType})
    neighbor.EntityData.Leafs.Append("neighbor-ietf-nsf-capable-flag", types.YLeaf{"NeighborIetfNsfCapableFlag", neighbor.NeighborIetfNsfCapableFlag})
    neighbor.EntityData.Leafs.Append("neighbor-media-type", types.YLeaf{"NeighborMediaType", neighbor.NeighborMediaType})
    neighbor.EntityData.Leafs.Append("neighbor-holdtime", types.YLeaf{"NeighborHoldtime", neighbor.NeighborHoldtime})
    neighbor.EntityData.Leafs.Append("neighbor-uptime-valid-flag", types.YLeaf{"NeighborUptimeValidFlag", neighbor.NeighborUptimeValidFlag})
    neighbor.EntityData.Leafs.Append("neighbor-uptime", types.YLeaf{"NeighborUptime", neighbor.NeighborUptime})
    neighbor.EntityData.Leafs.Append("nsr-standby", types.YLeaf{"NsrStandby", neighbor.NsrStandby})

    neighbor.EntityData.YListKeys = []string {}

    return &(neighbor.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress
// Active area addresses
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is string with pattern: [a-fA-F0-9]{2}(\.[a-fA-F0-9]{4}){0,6}.
    Entry interface{}
}

func (neighborActiveAreaAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborActiveAreaAddress) GetEntityData() *types.CommonEntityData {
    neighborActiveAreaAddress.EntityData.YFilter = neighborActiveAreaAddress.YFilter
    neighborActiveAreaAddress.EntityData.YangName = "neighbor-active-area-address"
    neighborActiveAreaAddress.EntityData.BundleName = "cisco_ios_xr"
    neighborActiveAreaAddress.EntityData.ParentYangName = "neighbor"
    neighborActiveAreaAddress.EntityData.SegmentPath = "neighbor-active-area-address" + types.AddNoKeyToken(neighborActiveAreaAddress)
    neighborActiveAreaAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/" + neighborActiveAreaAddress.EntityData.SegmentPath
    neighborActiveAreaAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborActiveAreaAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborActiveAreaAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborActiveAreaAddress.EntityData.Children = types.NewOrderedMap()
    neighborActiveAreaAddress.EntityData.Leafs = types.NewOrderedMap()
    neighborActiveAreaAddress.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", neighborActiveAreaAddress.Entry})

    neighborActiveAreaAddress.EntityData.YListKeys = []string {}

    return &(neighborActiveAreaAddress.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported
// Topologies supported by both neighbor and local
// system
type Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // AF name. The type is IsisAfId.
    AfName interface{}

    // Sub-AF name. The type is IsisSubAfId.
    SafName interface{}

    // VRF Name. The type is string.
    VrfName interface{}

    // Topology Name. The type is string.
    TopologyName interface{}
}

func (topologiesSupported *Isis_Instances_Instance_Neighbors_Neighbor_TopologiesSupported) GetEntityData() *types.CommonEntityData {
    topologiesSupported.EntityData.YFilter = topologiesSupported.YFilter
    topologiesSupported.EntityData.YangName = "topologies-supported"
    topologiesSupported.EntityData.BundleName = "cisco_ios_xr"
    topologiesSupported.EntityData.ParentYangName = "neighbor"
    topologiesSupported.EntityData.SegmentPath = "topologies-supported" + types.AddNoKeyToken(topologiesSupported)
    topologiesSupported.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/" + topologiesSupported.EntityData.SegmentPath
    topologiesSupported.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topologiesSupported.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topologiesSupported.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topologiesSupported.EntityData.Children = types.NewOrderedMap()
    topologiesSupported.EntityData.Leafs = types.NewOrderedMap()
    topologiesSupported.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", topologiesSupported.AfName})
    topologiesSupported.EntityData.Leafs.Append("saf-name", types.YLeaf{"SafName", topologiesSupported.SafName})
    topologiesSupported.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", topologiesSupported.VrfName})
    topologiesSupported.EntityData.Leafs.Append("topology-name", types.YLeaf{"TopologyName", topologiesSupported.TopologyName})

    topologiesSupported.EntityData.YListKeys = []string {}

    return &(topologiesSupported.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData
// Per address-family data
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // AFName. The type is IsisAfId.
    AfName interface{}

    // IPV4 neighbor info.
    Ipv4 Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4

    // IPV6 neighbor info.
    Ipv6 Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6
}

func (neighborPerAddressFamilyData *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData) GetEntityData() *types.CommonEntityData {
    neighborPerAddressFamilyData.EntityData.YFilter = neighborPerAddressFamilyData.YFilter
    neighborPerAddressFamilyData.EntityData.YangName = "neighbor-per-address-family-data"
    neighborPerAddressFamilyData.EntityData.BundleName = "cisco_ios_xr"
    neighborPerAddressFamilyData.EntityData.ParentYangName = "neighbor"
    neighborPerAddressFamilyData.EntityData.SegmentPath = "neighbor-per-address-family-data" + types.AddNoKeyToken(neighborPerAddressFamilyData)
    neighborPerAddressFamilyData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/" + neighborPerAddressFamilyData.EntityData.SegmentPath
    neighborPerAddressFamilyData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborPerAddressFamilyData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborPerAddressFamilyData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborPerAddressFamilyData.EntityData.Children = types.NewOrderedMap()
    neighborPerAddressFamilyData.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &neighborPerAddressFamilyData.Ipv4})
    neighborPerAddressFamilyData.EntityData.Children.Append("ipv6", types.YChild{"Ipv6", &neighborPerAddressFamilyData.Ipv6})
    neighborPerAddressFamilyData.EntityData.Leafs = types.NewOrderedMap()
    neighborPerAddressFamilyData.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", neighborPerAddressFamilyData.AfName})

    neighborPerAddressFamilyData.EntityData.YListKeys = []string {}

    return &(neighborPerAddressFamilyData.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4
// IPV4 neighbor info
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NextHop interface{}

    // Adjacency SID.
    AdjacencySid Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid

    // Adjacency SID not eligible for FRR protection.
    NonFrrAdjacencySid Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid

    // Adjacency interface addresses. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress.
    InterfaceAddress []*Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress

    // Per bundle member Adjacency sid. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid.
    UnderlyingAdjacencySid []*Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid

    // Underlying interface list for bundle interfaces. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface.
    UnderlyingInterface []*Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface
}

func (ipv4 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "neighbor-per-address-family-data"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Children.Append("adjacency-sid", types.YChild{"AdjacencySid", &ipv4.AdjacencySid})
    ipv4.EntityData.Children.Append("non-frr-adjacency-sid", types.YChild{"NonFrrAdjacencySid", &ipv4.NonFrrAdjacencySid})
    ipv4.EntityData.Children.Append("interface-address", types.YChild{"InterfaceAddress", nil})
    for i := range ipv4.InterfaceAddress {
        types.SetYListKey(ipv4.InterfaceAddress[i], i)
        ipv4.EntityData.Children.Append(types.GetSegmentPath(ipv4.InterfaceAddress[i]), types.YChild{"InterfaceAddress", ipv4.InterfaceAddress[i]})
    }
    ipv4.EntityData.Children.Append("underlying-adjacency-sid", types.YChild{"UnderlyingAdjacencySid", nil})
    for i := range ipv4.UnderlyingAdjacencySid {
        types.SetYListKey(ipv4.UnderlyingAdjacencySid[i], i)
        ipv4.EntityData.Children.Append(types.GetSegmentPath(ipv4.UnderlyingAdjacencySid[i]), types.YChild{"UnderlyingAdjacencySid", ipv4.UnderlyingAdjacencySid[i]})
    }
    ipv4.EntityData.Children.Append("underlying-interface", types.YChild{"UnderlyingInterface", nil})
    for i := range ipv4.UnderlyingInterface {
        types.SetYListKey(ipv4.UnderlyingInterface[i], i)
        ipv4.EntityData.Children.Append(types.GetSegmentPath(ipv4.UnderlyingInterface[i]), types.YChild{"UnderlyingInterface", ipv4.UnderlyingInterface[i]})
    }
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("next-hop", types.YLeaf{"NextHop", ipv4.NextHop})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid
// Adjacency SID
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency SID value. The type is interface{} with range: 0..4294967295.
    AdjacencySidValue interface{}

    // Adjacency SID Backup Info.
    AdjacencySidBackup Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup

    // Adjacency SID Backup Info TE.
    AdjacencySidBackupTe Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe
}

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid) GetEntityData() *types.CommonEntityData {
    adjacencySid.EntityData.YFilter = adjacencySid.YFilter
    adjacencySid.EntityData.YangName = "adjacency-sid"
    adjacencySid.EntityData.BundleName = "cisco_ios_xr"
    adjacencySid.EntityData.ParentYangName = "ipv4"
    adjacencySid.EntityData.SegmentPath = "adjacency-sid"
    adjacencySid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv4/" + adjacencySid.EntityData.SegmentPath
    adjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySid.EntityData.Children = types.NewOrderedMap()
    adjacencySid.EntityData.Children.Append("adjacency-sid-backup", types.YChild{"AdjacencySidBackup", &adjacencySid.AdjacencySidBackup})
    adjacencySid.EntityData.Children.Append("adjacency-sid-backup-te", types.YChild{"AdjacencySidBackupTe", &adjacencySid.AdjacencySidBackupTe})
    adjacencySid.EntityData.Leafs = types.NewOrderedMap()
    adjacencySid.EntityData.Leafs.Append("adjacency-sid-value", types.YLeaf{"AdjacencySidValue", adjacencySid.AdjacencySidValue})

    adjacencySid.EntityData.YListKeys = []string {}

    return &(adjacencySid.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup
// Adjacency SID Backup Info
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack.
    BackupLabelStack []*Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetEntityData() *types.CommonEntityData {
    adjacencySidBackup.EntityData.YFilter = adjacencySidBackup.YFilter
    adjacencySidBackup.EntityData.YangName = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackup.EntityData.ParentYangName = "adjacency-sid"
    adjacencySidBackup.EntityData.SegmentPath = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv4/adjacency-sid/" + adjacencySidBackup.EntityData.SegmentPath
    adjacencySidBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackup.EntityData.Children = types.NewOrderedMap()
    adjacencySidBackup.EntityData.Children.Append("backup-label-stack", types.YChild{"BackupLabelStack", nil})
    for i := range adjacencySidBackup.BackupLabelStack {
        types.SetYListKey(adjacencySidBackup.BackupLabelStack[i], i)
        adjacencySidBackup.EntityData.Children.Append(types.GetSegmentPath(adjacencySidBackup.BackupLabelStack[i]), types.YChild{"BackupLabelStack", adjacencySidBackup.BackupLabelStack[i]})
    }
    adjacencySidBackup.EntityData.Leafs = types.NewOrderedMap()
    adjacencySidBackup.EntityData.Leafs.Append("backup-label-stack-size", types.YLeaf{"BackupLabelStackSize", adjacencySidBackup.BackupLabelStackSize})
    adjacencySidBackup.EntityData.Leafs.Append("backup-node-address", types.YLeaf{"BackupNodeAddress", adjacencySidBackup.BackupNodeAddress})
    adjacencySidBackup.EntityData.Leafs.Append("backup-nexthop", types.YLeaf{"BackupNexthop", adjacencySidBackup.BackupNexthop})
    adjacencySidBackup.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", adjacencySidBackup.BackupInterface})

    adjacencySidBackup.EntityData.YListKeys = []string {}

    return &(adjacencySidBackup.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack" + types.AddNoKeyToken(backupLabelStack)
    backupLabelStack.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv4/adjacency-sid/adjacency-sid-backup/" + backupLabelStack.EntityData.SegmentPath
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", backupLabelStack.Entry})

    backupLabelStack.EntityData.YListKeys = []string {}

    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe
// Adjacency SID Backup Info TE
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack.
    BackupLabelStack []*Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetEntityData() *types.CommonEntityData {
    adjacencySidBackupTe.EntityData.YFilter = adjacencySidBackupTe.YFilter
    adjacencySidBackupTe.EntityData.YangName = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackupTe.EntityData.ParentYangName = "adjacency-sid"
    adjacencySidBackupTe.EntityData.SegmentPath = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv4/adjacency-sid/" + adjacencySidBackupTe.EntityData.SegmentPath
    adjacencySidBackupTe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackupTe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackupTe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackupTe.EntityData.Children = types.NewOrderedMap()
    adjacencySidBackupTe.EntityData.Children.Append("backup-label-stack", types.YChild{"BackupLabelStack", nil})
    for i := range adjacencySidBackupTe.BackupLabelStack {
        types.SetYListKey(adjacencySidBackupTe.BackupLabelStack[i], i)
        adjacencySidBackupTe.EntityData.Children.Append(types.GetSegmentPath(adjacencySidBackupTe.BackupLabelStack[i]), types.YChild{"BackupLabelStack", adjacencySidBackupTe.BackupLabelStack[i]})
    }
    adjacencySidBackupTe.EntityData.Leafs = types.NewOrderedMap()
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-label-stack-size", types.YLeaf{"BackupLabelStackSize", adjacencySidBackupTe.BackupLabelStackSize})
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-node-address", types.YLeaf{"BackupNodeAddress", adjacencySidBackupTe.BackupNodeAddress})
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-nexthop", types.YLeaf{"BackupNexthop", adjacencySidBackupTe.BackupNexthop})
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", adjacencySidBackupTe.BackupInterface})

    adjacencySidBackupTe.EntityData.YListKeys = []string {}

    return &(adjacencySidBackupTe.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup-te"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack" + types.AddNoKeyToken(backupLabelStack)
    backupLabelStack.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv4/adjacency-sid/adjacency-sid-backup-te/" + backupLabelStack.EntityData.SegmentPath
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", backupLabelStack.Entry})

    backupLabelStack.EntityData.YListKeys = []string {}

    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid
// Adjacency SID not eligible for FRR protection
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency SID value. The type is interface{} with range: 0..4294967295.
    AdjacencySidValue interface{}

    // Adjacency SID Backup Info.
    AdjacencySidBackup Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup

    // Adjacency SID Backup Info TE.
    AdjacencySidBackupTe Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetEntityData() *types.CommonEntityData {
    nonFrrAdjacencySid.EntityData.YFilter = nonFrrAdjacencySid.YFilter
    nonFrrAdjacencySid.EntityData.YangName = "non-frr-adjacency-sid"
    nonFrrAdjacencySid.EntityData.BundleName = "cisco_ios_xr"
    nonFrrAdjacencySid.EntityData.ParentYangName = "ipv4"
    nonFrrAdjacencySid.EntityData.SegmentPath = "non-frr-adjacency-sid"
    nonFrrAdjacencySid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv4/" + nonFrrAdjacencySid.EntityData.SegmentPath
    nonFrrAdjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonFrrAdjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonFrrAdjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonFrrAdjacencySid.EntityData.Children = types.NewOrderedMap()
    nonFrrAdjacencySid.EntityData.Children.Append("adjacency-sid-backup", types.YChild{"AdjacencySidBackup", &nonFrrAdjacencySid.AdjacencySidBackup})
    nonFrrAdjacencySid.EntityData.Children.Append("adjacency-sid-backup-te", types.YChild{"AdjacencySidBackupTe", &nonFrrAdjacencySid.AdjacencySidBackupTe})
    nonFrrAdjacencySid.EntityData.Leafs = types.NewOrderedMap()
    nonFrrAdjacencySid.EntityData.Leafs.Append("adjacency-sid-value", types.YLeaf{"AdjacencySidValue", nonFrrAdjacencySid.AdjacencySidValue})

    nonFrrAdjacencySid.EntityData.YListKeys = []string {}

    return &(nonFrrAdjacencySid.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup
// Adjacency SID Backup Info
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack.
    BackupLabelStack []*Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetEntityData() *types.CommonEntityData {
    adjacencySidBackup.EntityData.YFilter = adjacencySidBackup.YFilter
    adjacencySidBackup.EntityData.YangName = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackup.EntityData.ParentYangName = "non-frr-adjacency-sid"
    adjacencySidBackup.EntityData.SegmentPath = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv4/non-frr-adjacency-sid/" + adjacencySidBackup.EntityData.SegmentPath
    adjacencySidBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackup.EntityData.Children = types.NewOrderedMap()
    adjacencySidBackup.EntityData.Children.Append("backup-label-stack", types.YChild{"BackupLabelStack", nil})
    for i := range adjacencySidBackup.BackupLabelStack {
        types.SetYListKey(adjacencySidBackup.BackupLabelStack[i], i)
        adjacencySidBackup.EntityData.Children.Append(types.GetSegmentPath(adjacencySidBackup.BackupLabelStack[i]), types.YChild{"BackupLabelStack", adjacencySidBackup.BackupLabelStack[i]})
    }
    adjacencySidBackup.EntityData.Leafs = types.NewOrderedMap()
    adjacencySidBackup.EntityData.Leafs.Append("backup-label-stack-size", types.YLeaf{"BackupLabelStackSize", adjacencySidBackup.BackupLabelStackSize})
    adjacencySidBackup.EntityData.Leafs.Append("backup-node-address", types.YLeaf{"BackupNodeAddress", adjacencySidBackup.BackupNodeAddress})
    adjacencySidBackup.EntityData.Leafs.Append("backup-nexthop", types.YLeaf{"BackupNexthop", adjacencySidBackup.BackupNexthop})
    adjacencySidBackup.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", adjacencySidBackup.BackupInterface})

    adjacencySidBackup.EntityData.YListKeys = []string {}

    return &(adjacencySidBackup.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack" + types.AddNoKeyToken(backupLabelStack)
    backupLabelStack.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv4/non-frr-adjacency-sid/adjacency-sid-backup/" + backupLabelStack.EntityData.SegmentPath
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", backupLabelStack.Entry})

    backupLabelStack.EntityData.YListKeys = []string {}

    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe
// Adjacency SID Backup Info TE
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack.
    BackupLabelStack []*Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetEntityData() *types.CommonEntityData {
    adjacencySidBackupTe.EntityData.YFilter = adjacencySidBackupTe.YFilter
    adjacencySidBackupTe.EntityData.YangName = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackupTe.EntityData.ParentYangName = "non-frr-adjacency-sid"
    adjacencySidBackupTe.EntityData.SegmentPath = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv4/non-frr-adjacency-sid/" + adjacencySidBackupTe.EntityData.SegmentPath
    adjacencySidBackupTe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackupTe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackupTe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackupTe.EntityData.Children = types.NewOrderedMap()
    adjacencySidBackupTe.EntityData.Children.Append("backup-label-stack", types.YChild{"BackupLabelStack", nil})
    for i := range adjacencySidBackupTe.BackupLabelStack {
        types.SetYListKey(adjacencySidBackupTe.BackupLabelStack[i], i)
        adjacencySidBackupTe.EntityData.Children.Append(types.GetSegmentPath(adjacencySidBackupTe.BackupLabelStack[i]), types.YChild{"BackupLabelStack", adjacencySidBackupTe.BackupLabelStack[i]})
    }
    adjacencySidBackupTe.EntityData.Leafs = types.NewOrderedMap()
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-label-stack-size", types.YLeaf{"BackupLabelStackSize", adjacencySidBackupTe.BackupLabelStackSize})
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-node-address", types.YLeaf{"BackupNodeAddress", adjacencySidBackupTe.BackupNodeAddress})
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-nexthop", types.YLeaf{"BackupNexthop", adjacencySidBackupTe.BackupNexthop})
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", adjacencySidBackupTe.BackupInterface})

    adjacencySidBackupTe.EntityData.YListKeys = []string {}

    return &(adjacencySidBackupTe.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup-te"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack" + types.AddNoKeyToken(backupLabelStack)
    backupLabelStack.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv4/non-frr-adjacency-sid/adjacency-sid-backup-te/" + backupLabelStack.EntityData.SegmentPath
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", backupLabelStack.Entry})

    backupLabelStack.EntityData.YListKeys = []string {}

    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress
// Adjacency interface addresses
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_InterfaceAddress) GetEntityData() *types.CommonEntityData {
    interfaceAddress.EntityData.YFilter = interfaceAddress.YFilter
    interfaceAddress.EntityData.YangName = "interface-address"
    interfaceAddress.EntityData.BundleName = "cisco_ios_xr"
    interfaceAddress.EntityData.ParentYangName = "ipv4"
    interfaceAddress.EntityData.SegmentPath = "interface-address" + types.AddNoKeyToken(interfaceAddress)
    interfaceAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv4/" + interfaceAddress.EntityData.SegmentPath
    interfaceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAddress.EntityData.Children = types.NewOrderedMap()
    interfaceAddress.EntityData.Leafs = types.NewOrderedMap()
    interfaceAddress.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", interfaceAddress.Entry})

    interfaceAddress.EntityData.YListKeys = []string {}

    return &(interfaceAddress.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid
// Per bundle member Adjacency sid
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetEntityData() *types.CommonEntityData {
    underlyingAdjacencySid.EntityData.YFilter = underlyingAdjacencySid.YFilter
    underlyingAdjacencySid.EntityData.YangName = "underlying-adjacency-sid"
    underlyingAdjacencySid.EntityData.BundleName = "cisco_ios_xr"
    underlyingAdjacencySid.EntityData.ParentYangName = "ipv4"
    underlyingAdjacencySid.EntityData.SegmentPath = "underlying-adjacency-sid" + types.AddNoKeyToken(underlyingAdjacencySid)
    underlyingAdjacencySid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv4/" + underlyingAdjacencySid.EntityData.SegmentPath
    underlyingAdjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    underlyingAdjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    underlyingAdjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    underlyingAdjacencySid.EntityData.Children = types.NewOrderedMap()
    underlyingAdjacencySid.EntityData.Leafs = types.NewOrderedMap()
    underlyingAdjacencySid.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", underlyingAdjacencySid.Entry})

    underlyingAdjacencySid.EntityData.YListKeys = []string {}

    return &(underlyingAdjacencySid.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface
// Underlying interface list for bundle interfaces
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Local interface handle. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv4_UnderlyingInterface) GetEntityData() *types.CommonEntityData {
    underlyingInterface.EntityData.YFilter = underlyingInterface.YFilter
    underlyingInterface.EntityData.YangName = "underlying-interface"
    underlyingInterface.EntityData.BundleName = "cisco_ios_xr"
    underlyingInterface.EntityData.ParentYangName = "ipv4"
    underlyingInterface.EntityData.SegmentPath = "underlying-interface" + types.AddNoKeyToken(underlyingInterface)
    underlyingInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv4/" + underlyingInterface.EntityData.SegmentPath
    underlyingInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    underlyingInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    underlyingInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    underlyingInterface.EntityData.Children = types.NewOrderedMap()
    underlyingInterface.EntityData.Leafs = types.NewOrderedMap()
    underlyingInterface.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", underlyingInterface.InterfaceIndex})
    underlyingInterface.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", underlyingInterface.InterfaceName})

    underlyingInterface.EntityData.YListKeys = []string {}

    return &(underlyingInterface.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6
// IPV6 neighbor info
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency next hop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHop interface{}

    // Adjacency SID.
    AdjacencySid Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid

    // Adjacency SID not eligible for FRR protection.
    NonFrrAdjacencySid Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid

    // SRv6 End.X SID.
    EndXsid Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_EndXsid

    // SRv6 End.X SID not eligible for FRR protection.
    NonFrrEndXsid Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrEndXsid

    // Adjacency interface addresses. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress.
    InterfaceAddress []*Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress

    // Per bundle member Adjacency sid. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid.
    UnderlyingAdjacencySid []*Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid

    // Underlying interface list for bundle interfaces. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface.
    UnderlyingInterface []*Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface
}

func (ipv6 *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6) GetEntityData() *types.CommonEntityData {
    ipv6.EntityData.YFilter = ipv6.YFilter
    ipv6.EntityData.YangName = "ipv6"
    ipv6.EntityData.BundleName = "cisco_ios_xr"
    ipv6.EntityData.ParentYangName = "neighbor-per-address-family-data"
    ipv6.EntityData.SegmentPath = "ipv6"
    ipv6.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/" + ipv6.EntityData.SegmentPath
    ipv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6.EntityData.Children = types.NewOrderedMap()
    ipv6.EntityData.Children.Append("adjacency-sid", types.YChild{"AdjacencySid", &ipv6.AdjacencySid})
    ipv6.EntityData.Children.Append("non-frr-adjacency-sid", types.YChild{"NonFrrAdjacencySid", &ipv6.NonFrrAdjacencySid})
    ipv6.EntityData.Children.Append("end-xsid", types.YChild{"EndXsid", &ipv6.EndXsid})
    ipv6.EntityData.Children.Append("non-frr-end-xsid", types.YChild{"NonFrrEndXsid", &ipv6.NonFrrEndXsid})
    ipv6.EntityData.Children.Append("interface-address", types.YChild{"InterfaceAddress", nil})
    for i := range ipv6.InterfaceAddress {
        types.SetYListKey(ipv6.InterfaceAddress[i], i)
        ipv6.EntityData.Children.Append(types.GetSegmentPath(ipv6.InterfaceAddress[i]), types.YChild{"InterfaceAddress", ipv6.InterfaceAddress[i]})
    }
    ipv6.EntityData.Children.Append("underlying-adjacency-sid", types.YChild{"UnderlyingAdjacencySid", nil})
    for i := range ipv6.UnderlyingAdjacencySid {
        types.SetYListKey(ipv6.UnderlyingAdjacencySid[i], i)
        ipv6.EntityData.Children.Append(types.GetSegmentPath(ipv6.UnderlyingAdjacencySid[i]), types.YChild{"UnderlyingAdjacencySid", ipv6.UnderlyingAdjacencySid[i]})
    }
    ipv6.EntityData.Children.Append("underlying-interface", types.YChild{"UnderlyingInterface", nil})
    for i := range ipv6.UnderlyingInterface {
        types.SetYListKey(ipv6.UnderlyingInterface[i], i)
        ipv6.EntityData.Children.Append(types.GetSegmentPath(ipv6.UnderlyingInterface[i]), types.YChild{"UnderlyingInterface", ipv6.UnderlyingInterface[i]})
    }
    ipv6.EntityData.Leafs = types.NewOrderedMap()
    ipv6.EntityData.Leafs.Append("next-hop", types.YLeaf{"NextHop", ipv6.NextHop})

    ipv6.EntityData.YListKeys = []string {}

    return &(ipv6.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid
// Adjacency SID
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency SID value. The type is interface{} with range: 0..4294967295.
    AdjacencySidValue interface{}

    // Adjacency SID Backup Info.
    AdjacencySidBackup Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup

    // Adjacency SID Backup Info TE.
    AdjacencySidBackupTe Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe
}

func (adjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid) GetEntityData() *types.CommonEntityData {
    adjacencySid.EntityData.YFilter = adjacencySid.YFilter
    adjacencySid.EntityData.YangName = "adjacency-sid"
    adjacencySid.EntityData.BundleName = "cisco_ios_xr"
    adjacencySid.EntityData.ParentYangName = "ipv6"
    adjacencySid.EntityData.SegmentPath = "adjacency-sid"
    adjacencySid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv6/" + adjacencySid.EntityData.SegmentPath
    adjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySid.EntityData.Children = types.NewOrderedMap()
    adjacencySid.EntityData.Children.Append("adjacency-sid-backup", types.YChild{"AdjacencySidBackup", &adjacencySid.AdjacencySidBackup})
    adjacencySid.EntityData.Children.Append("adjacency-sid-backup-te", types.YChild{"AdjacencySidBackupTe", &adjacencySid.AdjacencySidBackupTe})
    adjacencySid.EntityData.Leafs = types.NewOrderedMap()
    adjacencySid.EntityData.Leafs.Append("adjacency-sid-value", types.YLeaf{"AdjacencySidValue", adjacencySid.AdjacencySidValue})

    adjacencySid.EntityData.YListKeys = []string {}

    return &(adjacencySid.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup
// Adjacency SID Backup Info
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack.
    BackupLabelStack []*Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetEntityData() *types.CommonEntityData {
    adjacencySidBackup.EntityData.YFilter = adjacencySidBackup.YFilter
    adjacencySidBackup.EntityData.YangName = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackup.EntityData.ParentYangName = "adjacency-sid"
    adjacencySidBackup.EntityData.SegmentPath = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv6/adjacency-sid/" + adjacencySidBackup.EntityData.SegmentPath
    adjacencySidBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackup.EntityData.Children = types.NewOrderedMap()
    adjacencySidBackup.EntityData.Children.Append("backup-label-stack", types.YChild{"BackupLabelStack", nil})
    for i := range adjacencySidBackup.BackupLabelStack {
        types.SetYListKey(adjacencySidBackup.BackupLabelStack[i], i)
        adjacencySidBackup.EntityData.Children.Append(types.GetSegmentPath(adjacencySidBackup.BackupLabelStack[i]), types.YChild{"BackupLabelStack", adjacencySidBackup.BackupLabelStack[i]})
    }
    adjacencySidBackup.EntityData.Leafs = types.NewOrderedMap()
    adjacencySidBackup.EntityData.Leafs.Append("backup-label-stack-size", types.YLeaf{"BackupLabelStackSize", adjacencySidBackup.BackupLabelStackSize})
    adjacencySidBackup.EntityData.Leafs.Append("backup-node-address", types.YLeaf{"BackupNodeAddress", adjacencySidBackup.BackupNodeAddress})
    adjacencySidBackup.EntityData.Leafs.Append("backup-nexthop", types.YLeaf{"BackupNexthop", adjacencySidBackup.BackupNexthop})
    adjacencySidBackup.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", adjacencySidBackup.BackupInterface})

    adjacencySidBackup.EntityData.YListKeys = []string {}

    return &(adjacencySidBackup.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack" + types.AddNoKeyToken(backupLabelStack)
    backupLabelStack.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv6/adjacency-sid/adjacency-sid-backup/" + backupLabelStack.EntityData.SegmentPath
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", backupLabelStack.Entry})

    backupLabelStack.EntityData.YListKeys = []string {}

    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe
// Adjacency SID Backup Info TE
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack.
    BackupLabelStack []*Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetEntityData() *types.CommonEntityData {
    adjacencySidBackupTe.EntityData.YFilter = adjacencySidBackupTe.YFilter
    adjacencySidBackupTe.EntityData.YangName = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackupTe.EntityData.ParentYangName = "adjacency-sid"
    adjacencySidBackupTe.EntityData.SegmentPath = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv6/adjacency-sid/" + adjacencySidBackupTe.EntityData.SegmentPath
    adjacencySidBackupTe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackupTe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackupTe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackupTe.EntityData.Children = types.NewOrderedMap()
    adjacencySidBackupTe.EntityData.Children.Append("backup-label-stack", types.YChild{"BackupLabelStack", nil})
    for i := range adjacencySidBackupTe.BackupLabelStack {
        types.SetYListKey(adjacencySidBackupTe.BackupLabelStack[i], i)
        adjacencySidBackupTe.EntityData.Children.Append(types.GetSegmentPath(adjacencySidBackupTe.BackupLabelStack[i]), types.YChild{"BackupLabelStack", adjacencySidBackupTe.BackupLabelStack[i]})
    }
    adjacencySidBackupTe.EntityData.Leafs = types.NewOrderedMap()
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-label-stack-size", types.YLeaf{"BackupLabelStackSize", adjacencySidBackupTe.BackupLabelStackSize})
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-node-address", types.YLeaf{"BackupNodeAddress", adjacencySidBackupTe.BackupNodeAddress})
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-nexthop", types.YLeaf{"BackupNexthop", adjacencySidBackupTe.BackupNexthop})
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", adjacencySidBackupTe.BackupInterface})

    adjacencySidBackupTe.EntityData.YListKeys = []string {}

    return &(adjacencySidBackupTe.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup-te"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack" + types.AddNoKeyToken(backupLabelStack)
    backupLabelStack.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv6/adjacency-sid/adjacency-sid-backup-te/" + backupLabelStack.EntityData.SegmentPath
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", backupLabelStack.Entry})

    backupLabelStack.EntityData.YListKeys = []string {}

    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid
// Adjacency SID not eligible for FRR protection
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency SID value. The type is interface{} with range: 0..4294967295.
    AdjacencySidValue interface{}

    // Adjacency SID Backup Info.
    AdjacencySidBackup Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup

    // Adjacency SID Backup Info TE.
    AdjacencySidBackupTe Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetEntityData() *types.CommonEntityData {
    nonFrrAdjacencySid.EntityData.YFilter = nonFrrAdjacencySid.YFilter
    nonFrrAdjacencySid.EntityData.YangName = "non-frr-adjacency-sid"
    nonFrrAdjacencySid.EntityData.BundleName = "cisco_ios_xr"
    nonFrrAdjacencySid.EntityData.ParentYangName = "ipv6"
    nonFrrAdjacencySid.EntityData.SegmentPath = "non-frr-adjacency-sid"
    nonFrrAdjacencySid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv6/" + nonFrrAdjacencySid.EntityData.SegmentPath
    nonFrrAdjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonFrrAdjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonFrrAdjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonFrrAdjacencySid.EntityData.Children = types.NewOrderedMap()
    nonFrrAdjacencySid.EntityData.Children.Append("adjacency-sid-backup", types.YChild{"AdjacencySidBackup", &nonFrrAdjacencySid.AdjacencySidBackup})
    nonFrrAdjacencySid.EntityData.Children.Append("adjacency-sid-backup-te", types.YChild{"AdjacencySidBackupTe", &nonFrrAdjacencySid.AdjacencySidBackupTe})
    nonFrrAdjacencySid.EntityData.Leafs = types.NewOrderedMap()
    nonFrrAdjacencySid.EntityData.Leafs.Append("adjacency-sid-value", types.YLeaf{"AdjacencySidValue", nonFrrAdjacencySid.AdjacencySidValue})

    nonFrrAdjacencySid.EntityData.YListKeys = []string {}

    return &(nonFrrAdjacencySid.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup
// Adjacency SID Backup Info
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack.
    BackupLabelStack []*Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack
}

func (adjacencySidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetEntityData() *types.CommonEntityData {
    adjacencySidBackup.EntityData.YFilter = adjacencySidBackup.YFilter
    adjacencySidBackup.EntityData.YangName = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackup.EntityData.ParentYangName = "non-frr-adjacency-sid"
    adjacencySidBackup.EntityData.SegmentPath = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv6/non-frr-adjacency-sid/" + adjacencySidBackup.EntityData.SegmentPath
    adjacencySidBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackup.EntityData.Children = types.NewOrderedMap()
    adjacencySidBackup.EntityData.Children.Append("backup-label-stack", types.YChild{"BackupLabelStack", nil})
    for i := range adjacencySidBackup.BackupLabelStack {
        types.SetYListKey(adjacencySidBackup.BackupLabelStack[i], i)
        adjacencySidBackup.EntityData.Children.Append(types.GetSegmentPath(adjacencySidBackup.BackupLabelStack[i]), types.YChild{"BackupLabelStack", adjacencySidBackup.BackupLabelStack[i]})
    }
    adjacencySidBackup.EntityData.Leafs = types.NewOrderedMap()
    adjacencySidBackup.EntityData.Leafs.Append("backup-label-stack-size", types.YLeaf{"BackupLabelStackSize", adjacencySidBackup.BackupLabelStackSize})
    adjacencySidBackup.EntityData.Leafs.Append("backup-node-address", types.YLeaf{"BackupNodeAddress", adjacencySidBackup.BackupNodeAddress})
    adjacencySidBackup.EntityData.Leafs.Append("backup-nexthop", types.YLeaf{"BackupNexthop", adjacencySidBackup.BackupNexthop})
    adjacencySidBackup.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", adjacencySidBackup.BackupInterface})

    adjacencySidBackup.EntityData.YListKeys = []string {}

    return &(adjacencySidBackup.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack" + types.AddNoKeyToken(backupLabelStack)
    backupLabelStack.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv6/non-frr-adjacency-sid/adjacency-sid-backup/" + backupLabelStack.EntityData.SegmentPath
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", backupLabelStack.Entry})

    backupLabelStack.EntityData.YListKeys = []string {}

    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe
// Adjacency SID Backup Info TE
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack.
    BackupLabelStack []*Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetEntityData() *types.CommonEntityData {
    adjacencySidBackupTe.EntityData.YFilter = adjacencySidBackupTe.YFilter
    adjacencySidBackupTe.EntityData.YangName = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackupTe.EntityData.ParentYangName = "non-frr-adjacency-sid"
    adjacencySidBackupTe.EntityData.SegmentPath = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv6/non-frr-adjacency-sid/" + adjacencySidBackupTe.EntityData.SegmentPath
    adjacencySidBackupTe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackupTe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackupTe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackupTe.EntityData.Children = types.NewOrderedMap()
    adjacencySidBackupTe.EntityData.Children.Append("backup-label-stack", types.YChild{"BackupLabelStack", nil})
    for i := range adjacencySidBackupTe.BackupLabelStack {
        types.SetYListKey(adjacencySidBackupTe.BackupLabelStack[i], i)
        adjacencySidBackupTe.EntityData.Children.Append(types.GetSegmentPath(adjacencySidBackupTe.BackupLabelStack[i]), types.YChild{"BackupLabelStack", adjacencySidBackupTe.BackupLabelStack[i]})
    }
    adjacencySidBackupTe.EntityData.Leafs = types.NewOrderedMap()
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-label-stack-size", types.YLeaf{"BackupLabelStackSize", adjacencySidBackupTe.BackupLabelStackSize})
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-node-address", types.YLeaf{"BackupNodeAddress", adjacencySidBackupTe.BackupNodeAddress})
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-nexthop", types.YLeaf{"BackupNexthop", adjacencySidBackupTe.BackupNexthop})
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", adjacencySidBackupTe.BackupInterface})

    adjacencySidBackupTe.EntityData.YListKeys = []string {}

    return &(adjacencySidBackupTe.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup-te"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack" + types.AddNoKeyToken(backupLabelStack)
    backupLabelStack.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv6/non-frr-adjacency-sid/adjacency-sid-backup-te/" + backupLabelStack.EntityData.SegmentPath
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", backupLabelStack.Entry})

    backupLabelStack.EntityData.YListKeys = []string {}

    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_EndXsid
// SRv6 End.X SID
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_EndXsid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // End.X SID Function. The type is interface{} with range: 0..65535.
    EndXsidFunction interface{}

    // End.X SID value.
    EndXsid Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_EndXsid_EndXsid

    // End.X SID Backup Info.
    EndXsidBackup Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_EndXsid_EndXsidBackup
}

func (endXsid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_EndXsid) GetEntityData() *types.CommonEntityData {
    endXsid.EntityData.YFilter = endXsid.YFilter
    endXsid.EntityData.YangName = "end-xsid"
    endXsid.EntityData.BundleName = "cisco_ios_xr"
    endXsid.EntityData.ParentYangName = "ipv6"
    endXsid.EntityData.SegmentPath = "end-xsid"
    endXsid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv6/" + endXsid.EntityData.SegmentPath
    endXsid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    endXsid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    endXsid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    endXsid.EntityData.Children = types.NewOrderedMap()
    endXsid.EntityData.Children.Append("end-xsid", types.YChild{"EndXsid", &endXsid.EndXsid})
    endXsid.EntityData.Children.Append("end-xsid-backup", types.YChild{"EndXsidBackup", &endXsid.EndXsidBackup})
    endXsid.EntityData.Leafs = types.NewOrderedMap()
    endXsid.EntityData.Leafs.Append("end-xsid-function", types.YLeaf{"EndXsidFunction", endXsid.EndXsidFunction})

    endXsid.EntityData.YListKeys = []string {}

    return &(endXsid.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_EndXsid_EndXsid
// End.X SID value
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_EndXsid_EndXsid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (endXsid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_EndXsid_EndXsid) GetEntityData() *types.CommonEntityData {
    endXsid.EntityData.YFilter = endXsid.YFilter
    endXsid.EntityData.YangName = "end-xsid"
    endXsid.EntityData.BundleName = "cisco_ios_xr"
    endXsid.EntityData.ParentYangName = "end-xsid"
    endXsid.EntityData.SegmentPath = "end-xsid"
    endXsid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv6/end-xsid/" + endXsid.EntityData.SegmentPath
    endXsid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    endXsid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    endXsid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    endXsid.EntityData.Children = types.NewOrderedMap()
    endXsid.EntityData.Leafs = types.NewOrderedMap()
    endXsid.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", endXsid.Prefix})
    endXsid.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", endXsid.PrefixLength})

    endXsid.EntityData.YListKeys = []string {}

    return &(endXsid.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_EndXsid_EndXsidBackup
// End.X SID Backup Info
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_EndXsid_EndXsidBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of SIDs in the backup path stack. The type is interface{} with
    // range: 0..255.
    BackupStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    BackupInterface interface{}

    // Backup path SID stack. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_EndXsid_EndXsidBackup_BackupStack.
    BackupStack []*Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_EndXsid_EndXsidBackup_BackupStack
}

func (endXsidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_EndXsid_EndXsidBackup) GetEntityData() *types.CommonEntityData {
    endXsidBackup.EntityData.YFilter = endXsidBackup.YFilter
    endXsidBackup.EntityData.YangName = "end-xsid-backup"
    endXsidBackup.EntityData.BundleName = "cisco_ios_xr"
    endXsidBackup.EntityData.ParentYangName = "end-xsid"
    endXsidBackup.EntityData.SegmentPath = "end-xsid-backup"
    endXsidBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv6/end-xsid/" + endXsidBackup.EntityData.SegmentPath
    endXsidBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    endXsidBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    endXsidBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    endXsidBackup.EntityData.Children = types.NewOrderedMap()
    endXsidBackup.EntityData.Children.Append("backup-stack", types.YChild{"BackupStack", nil})
    for i := range endXsidBackup.BackupStack {
        types.SetYListKey(endXsidBackup.BackupStack[i], i)
        endXsidBackup.EntityData.Children.Append(types.GetSegmentPath(endXsidBackup.BackupStack[i]), types.YChild{"BackupStack", endXsidBackup.BackupStack[i]})
    }
    endXsidBackup.EntityData.Leafs = types.NewOrderedMap()
    endXsidBackup.EntityData.Leafs.Append("backup-stack-size", types.YLeaf{"BackupStackSize", endXsidBackup.BackupStackSize})
    endXsidBackup.EntityData.Leafs.Append("backup-node-address", types.YLeaf{"BackupNodeAddress", endXsidBackup.BackupNodeAddress})
    endXsidBackup.EntityData.Leafs.Append("backup-nexthop", types.YLeaf{"BackupNexthop", endXsidBackup.BackupNexthop})
    endXsidBackup.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", endXsidBackup.BackupInterface})

    endXsidBackup.EntityData.YListKeys = []string {}

    return &(endXsidBackup.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_EndXsid_EndXsidBackup_BackupStack
// Backup path SID stack
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_EndXsid_EndXsidBackup_BackupStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (backupStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_EndXsid_EndXsidBackup_BackupStack) GetEntityData() *types.CommonEntityData {
    backupStack.EntityData.YFilter = backupStack.YFilter
    backupStack.EntityData.YangName = "backup-stack"
    backupStack.EntityData.BundleName = "cisco_ios_xr"
    backupStack.EntityData.ParentYangName = "end-xsid-backup"
    backupStack.EntityData.SegmentPath = "backup-stack" + types.AddNoKeyToken(backupStack)
    backupStack.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv6/end-xsid/end-xsid-backup/" + backupStack.EntityData.SegmentPath
    backupStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupStack.EntityData.Children = types.NewOrderedMap()
    backupStack.EntityData.Leafs = types.NewOrderedMap()
    backupStack.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", backupStack.Prefix})
    backupStack.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", backupStack.PrefixLength})

    backupStack.EntityData.YListKeys = []string {}

    return &(backupStack.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrEndXsid
// SRv6 End.X SID not eligible for FRR protection
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrEndXsid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // End.X SID Function. The type is interface{} with range: 0..65535.
    EndXsidFunction interface{}

    // End.X SID value.
    EndXsid Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrEndXsid_EndXsid

    // End.X SID Backup Info.
    EndXsidBackup Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrEndXsid_EndXsidBackup
}

func (nonFrrEndXsid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrEndXsid) GetEntityData() *types.CommonEntityData {
    nonFrrEndXsid.EntityData.YFilter = nonFrrEndXsid.YFilter
    nonFrrEndXsid.EntityData.YangName = "non-frr-end-xsid"
    nonFrrEndXsid.EntityData.BundleName = "cisco_ios_xr"
    nonFrrEndXsid.EntityData.ParentYangName = "ipv6"
    nonFrrEndXsid.EntityData.SegmentPath = "non-frr-end-xsid"
    nonFrrEndXsid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv6/" + nonFrrEndXsid.EntityData.SegmentPath
    nonFrrEndXsid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonFrrEndXsid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonFrrEndXsid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonFrrEndXsid.EntityData.Children = types.NewOrderedMap()
    nonFrrEndXsid.EntityData.Children.Append("end-xsid", types.YChild{"EndXsid", &nonFrrEndXsid.EndXsid})
    nonFrrEndXsid.EntityData.Children.Append("end-xsid-backup", types.YChild{"EndXsidBackup", &nonFrrEndXsid.EndXsidBackup})
    nonFrrEndXsid.EntityData.Leafs = types.NewOrderedMap()
    nonFrrEndXsid.EntityData.Leafs.Append("end-xsid-function", types.YLeaf{"EndXsidFunction", nonFrrEndXsid.EndXsidFunction})

    nonFrrEndXsid.EntityData.YListKeys = []string {}

    return &(nonFrrEndXsid.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrEndXsid_EndXsid
// End.X SID value
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrEndXsid_EndXsid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (endXsid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrEndXsid_EndXsid) GetEntityData() *types.CommonEntityData {
    endXsid.EntityData.YFilter = endXsid.YFilter
    endXsid.EntityData.YangName = "end-xsid"
    endXsid.EntityData.BundleName = "cisco_ios_xr"
    endXsid.EntityData.ParentYangName = "non-frr-end-xsid"
    endXsid.EntityData.SegmentPath = "end-xsid"
    endXsid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv6/non-frr-end-xsid/" + endXsid.EntityData.SegmentPath
    endXsid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    endXsid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    endXsid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    endXsid.EntityData.Children = types.NewOrderedMap()
    endXsid.EntityData.Leafs = types.NewOrderedMap()
    endXsid.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", endXsid.Prefix})
    endXsid.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", endXsid.PrefixLength})

    endXsid.EntityData.YListKeys = []string {}

    return &(endXsid.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrEndXsid_EndXsidBackup
// End.X SID Backup Info
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrEndXsid_EndXsidBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of SIDs in the backup path stack. The type is interface{} with
    // range: 0..255.
    BackupStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    BackupInterface interface{}

    // Backup path SID stack. The type is slice of
    // Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrEndXsid_EndXsidBackup_BackupStack.
    BackupStack []*Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrEndXsid_EndXsidBackup_BackupStack
}

func (endXsidBackup *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrEndXsid_EndXsidBackup) GetEntityData() *types.CommonEntityData {
    endXsidBackup.EntityData.YFilter = endXsidBackup.YFilter
    endXsidBackup.EntityData.YangName = "end-xsid-backup"
    endXsidBackup.EntityData.BundleName = "cisco_ios_xr"
    endXsidBackup.EntityData.ParentYangName = "non-frr-end-xsid"
    endXsidBackup.EntityData.SegmentPath = "end-xsid-backup"
    endXsidBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv6/non-frr-end-xsid/" + endXsidBackup.EntityData.SegmentPath
    endXsidBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    endXsidBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    endXsidBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    endXsidBackup.EntityData.Children = types.NewOrderedMap()
    endXsidBackup.EntityData.Children.Append("backup-stack", types.YChild{"BackupStack", nil})
    for i := range endXsidBackup.BackupStack {
        types.SetYListKey(endXsidBackup.BackupStack[i], i)
        endXsidBackup.EntityData.Children.Append(types.GetSegmentPath(endXsidBackup.BackupStack[i]), types.YChild{"BackupStack", endXsidBackup.BackupStack[i]})
    }
    endXsidBackup.EntityData.Leafs = types.NewOrderedMap()
    endXsidBackup.EntityData.Leafs.Append("backup-stack-size", types.YLeaf{"BackupStackSize", endXsidBackup.BackupStackSize})
    endXsidBackup.EntityData.Leafs.Append("backup-node-address", types.YLeaf{"BackupNodeAddress", endXsidBackup.BackupNodeAddress})
    endXsidBackup.EntityData.Leafs.Append("backup-nexthop", types.YLeaf{"BackupNexthop", endXsidBackup.BackupNexthop})
    endXsidBackup.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", endXsidBackup.BackupInterface})

    endXsidBackup.EntityData.YListKeys = []string {}

    return &(endXsidBackup.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrEndXsid_EndXsidBackup_BackupStack
// Backup path SID stack
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrEndXsid_EndXsidBackup_BackupStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (backupStack *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_NonFrrEndXsid_EndXsidBackup_BackupStack) GetEntityData() *types.CommonEntityData {
    backupStack.EntityData.YFilter = backupStack.YFilter
    backupStack.EntityData.YangName = "backup-stack"
    backupStack.EntityData.BundleName = "cisco_ios_xr"
    backupStack.EntityData.ParentYangName = "end-xsid-backup"
    backupStack.EntityData.SegmentPath = "backup-stack" + types.AddNoKeyToken(backupStack)
    backupStack.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv6/non-frr-end-xsid/end-xsid-backup/" + backupStack.EntityData.SegmentPath
    backupStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupStack.EntityData.Children = types.NewOrderedMap()
    backupStack.EntityData.Leafs = types.NewOrderedMap()
    backupStack.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", backupStack.Prefix})
    backupStack.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", backupStack.PrefixLength})

    backupStack.EntityData.YListKeys = []string {}

    return &(backupStack.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress
// Adjacency interface addresses
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (interfaceAddress *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_InterfaceAddress) GetEntityData() *types.CommonEntityData {
    interfaceAddress.EntityData.YFilter = interfaceAddress.YFilter
    interfaceAddress.EntityData.YangName = "interface-address"
    interfaceAddress.EntityData.BundleName = "cisco_ios_xr"
    interfaceAddress.EntityData.ParentYangName = "ipv6"
    interfaceAddress.EntityData.SegmentPath = "interface-address" + types.AddNoKeyToken(interfaceAddress)
    interfaceAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv6/" + interfaceAddress.EntityData.SegmentPath
    interfaceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAddress.EntityData.Children = types.NewOrderedMap()
    interfaceAddress.EntityData.Leafs = types.NewOrderedMap()
    interfaceAddress.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", interfaceAddress.Entry})

    interfaceAddress.EntityData.YListKeys = []string {}

    return &(interfaceAddress.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid
// Per bundle member Adjacency sid
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetEntityData() *types.CommonEntityData {
    underlyingAdjacencySid.EntityData.YFilter = underlyingAdjacencySid.YFilter
    underlyingAdjacencySid.EntityData.YangName = "underlying-adjacency-sid"
    underlyingAdjacencySid.EntityData.BundleName = "cisco_ios_xr"
    underlyingAdjacencySid.EntityData.ParentYangName = "ipv6"
    underlyingAdjacencySid.EntityData.SegmentPath = "underlying-adjacency-sid" + types.AddNoKeyToken(underlyingAdjacencySid)
    underlyingAdjacencySid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv6/" + underlyingAdjacencySid.EntityData.SegmentPath
    underlyingAdjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    underlyingAdjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    underlyingAdjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    underlyingAdjacencySid.EntityData.Children = types.NewOrderedMap()
    underlyingAdjacencySid.EntityData.Leafs = types.NewOrderedMap()
    underlyingAdjacencySid.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", underlyingAdjacencySid.Entry})

    underlyingAdjacencySid.EntityData.YListKeys = []string {}

    return &(underlyingAdjacencySid.EntityData)
}

// Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface
// Underlying interface list for bundle interfaces
type Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Local interface handle. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (underlyingInterface *Isis_Instances_Instance_Neighbors_Neighbor_NeighborPerAddressFamilyData_Ipv6_UnderlyingInterface) GetEntityData() *types.CommonEntityData {
    underlyingInterface.EntityData.YFilter = underlyingInterface.YFilter
    underlyingInterface.EntityData.YangName = "underlying-interface"
    underlyingInterface.EntityData.BundleName = "cisco_ios_xr"
    underlyingInterface.EntityData.ParentYangName = "ipv6"
    underlyingInterface.EntityData.SegmentPath = "underlying-interface" + types.AddNoKeyToken(underlyingInterface)
    underlyingInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbors/neighbor/neighbor-per-address-family-data/ipv6/" + underlyingInterface.EntityData.SegmentPath
    underlyingInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    underlyingInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    underlyingInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    underlyingInterface.EntityData.Children = types.NewOrderedMap()
    underlyingInterface.EntityData.Leafs = types.NewOrderedMap()
    underlyingInterface.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", underlyingInterface.InterfaceIndex})
    underlyingInterface.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", underlyingInterface.InterfaceName})

    underlyingInterface.EntityData.YListKeys = []string {}

    return &(underlyingInterface.EntityData)
}

// Isis_Instances_Instance_HostNames
// Hostname table
type Isis_Instances_Instance_HostNames struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Hostname table entry. The type is slice of
    // Isis_Instances_Instance_HostNames_HostName.
    HostName []*Isis_Instances_Instance_HostNames_HostName
}

func (hostNames *Isis_Instances_Instance_HostNames) GetEntityData() *types.CommonEntityData {
    hostNames.EntityData.YFilter = hostNames.YFilter
    hostNames.EntityData.YangName = "host-names"
    hostNames.EntityData.BundleName = "cisco_ios_xr"
    hostNames.EntityData.ParentYangName = "instance"
    hostNames.EntityData.SegmentPath = "host-names"
    hostNames.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/" + hostNames.EntityData.SegmentPath
    hostNames.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hostNames.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hostNames.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hostNames.EntityData.Children = types.NewOrderedMap()
    hostNames.EntityData.Children.Append("host-name", types.YChild{"HostName", nil})
    for i := range hostNames.HostName {
        hostNames.EntityData.Children.Append(types.GetSegmentPath(hostNames.HostName[i]), types.YChild{"HostName", hostNames.HostName[i]})
    }
    hostNames.EntityData.Leafs = types.NewOrderedMap()

    hostNames.EntityData.YListKeys = []string {}

    return &(hostNames.EntityData)
}

// Isis_Instances_Instance_HostNames_HostName
// Hostname table entry
type Isis_Instances_Instance_HostNames_HostName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. System ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    SystemId interface{}

    // TRUE if this is the local IS. The type is bool.
    LocalIsFlag interface{}

    // Host levels. The type is IsisLevels.
    HostLevels interface{}

    // Host name. The type is string.
    HostName interface{}
}

func (hostName *Isis_Instances_Instance_HostNames_HostName) GetEntityData() *types.CommonEntityData {
    hostName.EntityData.YFilter = hostName.YFilter
    hostName.EntityData.YangName = "host-name"
    hostName.EntityData.BundleName = "cisco_ios_xr"
    hostName.EntityData.ParentYangName = "host-names"
    hostName.EntityData.SegmentPath = "host-name" + types.AddKeyToken(hostName.SystemId, "system-id")
    hostName.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/host-names/" + hostName.EntityData.SegmentPath
    hostName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hostName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hostName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hostName.EntityData.Children = types.NewOrderedMap()
    hostName.EntityData.Leafs = types.NewOrderedMap()
    hostName.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", hostName.SystemId})
    hostName.EntityData.Leafs.Append("local-is-flag", types.YLeaf{"LocalIsFlag", hostName.LocalIsFlag})
    hostName.EntityData.Leafs.Append("host-levels", types.YLeaf{"HostLevels", hostName.HostLevels})
    hostName.EntityData.Leafs.Append("host-name", types.YLeaf{"HostName", hostName.HostName})

    hostName.EntityData.YListKeys = []string {"SystemId"}

    return &(hostName.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal
// Per-instance statistics
type Isis_Instances_Instance_StatisticsGlobal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Statistics.
    Statistics Isis_Instances_Instance_StatisticsGlobal_Statistics

    // Per-area data. The type is slice of
    // Isis_Instances_Instance_StatisticsGlobal_PerAreaData.
    PerAreaData []*Isis_Instances_Instance_StatisticsGlobal_PerAreaData
}

func (statisticsGlobal *Isis_Instances_Instance_StatisticsGlobal) GetEntityData() *types.CommonEntityData {
    statisticsGlobal.EntityData.YFilter = statisticsGlobal.YFilter
    statisticsGlobal.EntityData.YangName = "statistics-global"
    statisticsGlobal.EntityData.BundleName = "cisco_ios_xr"
    statisticsGlobal.EntityData.ParentYangName = "instance"
    statisticsGlobal.EntityData.SegmentPath = "statistics-global"
    statisticsGlobal.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/" + statisticsGlobal.EntityData.SegmentPath
    statisticsGlobal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statisticsGlobal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statisticsGlobal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statisticsGlobal.EntityData.Children = types.NewOrderedMap()
    statisticsGlobal.EntityData.Children.Append("statistics", types.YChild{"Statistics", &statisticsGlobal.Statistics})
    statisticsGlobal.EntityData.Children.Append("per-area-data", types.YChild{"PerAreaData", nil})
    for i := range statisticsGlobal.PerAreaData {
        types.SetYListKey(statisticsGlobal.PerAreaData[i], i)
        statisticsGlobal.EntityData.Children.Append(types.GetSegmentPath(statisticsGlobal.PerAreaData[i]), types.YChild{"PerAreaData", statisticsGlobal.PerAreaData[i]})
    }
    statisticsGlobal.EntityData.Leafs = types.NewOrderedMap()

    statisticsGlobal.EntityData.YListKeys = []string {}

    return &(statisticsGlobal.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_Statistics
// Statistics
type Isis_Instances_Instance_StatisticsGlobal_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fast-PSNP cache lookups. The type is interface{} with range: 0..4294967295.
    FastPsnpLookupCount interface{}

    // Fast-PSNP cache hits. The type is interface{} with range: 0..4294967295.
    FastPsnpLookupHitCount interface{}

    // Fast-CSNP cache lookups. The type is interface{} with range: 0..4294967295.
    FastCsnpLookupCount interface{}

    // Fast-CSNP cache hits. The type is interface{} with range: 0..4294967295.
    FastCsnpLookupHitCount interface{}

    // Fast-CSNP cache updates. The type is interface{} with range: 0..4294967295.
    FastCsnpCacheUpdateCount interface{}

    // LSPs received with holdtime 0. The type is interface{} with range:
    // 0..4294967295.
    ZeroHoldtimeLspCount interface{}

    // LSPs received with invalid checksum. The type is interface{} with range:
    // 0..4294967295.
    InvalidChecksumLspCount interface{}

    // IIHs dropped - Not Used. The type is interface{} with range: 0..4294967295.
    IihDroppedCount interface{}

    // LSPs dropped. The type is interface{} with range: 0..4294967295.
    LspDroppedCount interface{}

    // SNPs dropped. The type is interface{} with range: 0..4294967295.
    SnpDroppedCount interface{}

    // Maximum IIH queue length - Not Used. The type is interface{} with range:
    // 0..4294967295.
    MaximumIihQueueLength interface{}

    // Maximum update PDU queue length. The type is interface{} with range:
    // 0..4294967295.
    MaximumPduQueueLength interface{}

    // Update PDU queue length. The type is interface{} with range: 0..4294967295.
    PduQueueLength interface{}

    // Average hello receive rate in packets per second. The type is interface{}
    // with range: 0..4294967295. Units are packet/s.
    AvgHelloRecvRate interface{}

    // Average csnp receive rate in packets per second. The type is interface{}
    // with range: 0..4294967295. Units are packet/s.
    AvgCsnpRecvRate interface{}

    // Average psnp receive rate in packets per second. The type is interface{}
    // with range: 0..4294967295. Units are packet/s.
    AvgPsnpRecvRate interface{}

    // Average LSP receive rate in packets per second. The type is interface{}
    // with range: 0..4294967295. Units are packet/s.
    AvgLspRecvRate interface{}

    // Average hello send rate in packets per second. The type is interface{} with
    // range: 0..4294967295. Units are packet/s.
    AvgHelloSendRate interface{}

    // Average csnp send rate in packets per second. The type is interface{} with
    // range: 0..4294967295. Units are packet/s.
    AvgCsnpSendRate interface{}

    // Average psnp send rate in packets per second. The type is interface{} with
    // range: 0..4294967295. Units are packet/s.
    AvgPsnpSendRate interface{}

    // Average LSP send rate in packets per second. The type is interface{} with
    // range: 0..4294967295. Units are packet/s.
    AvgLspSendRate interface{}

    // Average hello process time.
    AvgHelloProcessTime Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloProcessTime

    // Average CSNP process time.
    AvgCsnpProcessTime Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpProcessTime

    // Average PSNP process time.
    AvgPsnpProcessTime Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpProcessTime

    // Average LSP process time.
    AvgLspProcessTime Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspProcessTime

    // Average hello transmit time.
    AvgHelloTransmitTime Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloTransmitTime

    // Average CSNP transmit time.
    AvgCsnpTransmitTime Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpTransmitTime

    // Average PSNP transmit time.
    AvgPsnpTransmitTime Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpTransmitTime

    // Average LSP transmit time.
    AvgLspTransmitTime Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspTransmitTime
}

func (statistics *Isis_Instances_Instance_StatisticsGlobal_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "statistics-global"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/statistics-global/" + statistics.EntityData.SegmentPath
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("avg-hello-process-time", types.YChild{"AvgHelloProcessTime", &statistics.AvgHelloProcessTime})
    statistics.EntityData.Children.Append("avg-csnp-process-time", types.YChild{"AvgCsnpProcessTime", &statistics.AvgCsnpProcessTime})
    statistics.EntityData.Children.Append("avg-psnp-process-time", types.YChild{"AvgPsnpProcessTime", &statistics.AvgPsnpProcessTime})
    statistics.EntityData.Children.Append("avg-lsp-process-time", types.YChild{"AvgLspProcessTime", &statistics.AvgLspProcessTime})
    statistics.EntityData.Children.Append("avg-hello-transmit-time", types.YChild{"AvgHelloTransmitTime", &statistics.AvgHelloTransmitTime})
    statistics.EntityData.Children.Append("avg-csnp-transmit-time", types.YChild{"AvgCsnpTransmitTime", &statistics.AvgCsnpTransmitTime})
    statistics.EntityData.Children.Append("avg-psnp-transmit-time", types.YChild{"AvgPsnpTransmitTime", &statistics.AvgPsnpTransmitTime})
    statistics.EntityData.Children.Append("avg-lsp-transmit-time", types.YChild{"AvgLspTransmitTime", &statistics.AvgLspTransmitTime})
    statistics.EntityData.Leafs = types.NewOrderedMap()
    statistics.EntityData.Leafs.Append("fast-psnp-lookup-count", types.YLeaf{"FastPsnpLookupCount", statistics.FastPsnpLookupCount})
    statistics.EntityData.Leafs.Append("fast-psnp-lookup-hit-count", types.YLeaf{"FastPsnpLookupHitCount", statistics.FastPsnpLookupHitCount})
    statistics.EntityData.Leafs.Append("fast-csnp-lookup-count", types.YLeaf{"FastCsnpLookupCount", statistics.FastCsnpLookupCount})
    statistics.EntityData.Leafs.Append("fast-csnp-lookup-hit-count", types.YLeaf{"FastCsnpLookupHitCount", statistics.FastCsnpLookupHitCount})
    statistics.EntityData.Leafs.Append("fast-csnp-cache-update-count", types.YLeaf{"FastCsnpCacheUpdateCount", statistics.FastCsnpCacheUpdateCount})
    statistics.EntityData.Leafs.Append("zero-holdtime-lsp-count", types.YLeaf{"ZeroHoldtimeLspCount", statistics.ZeroHoldtimeLspCount})
    statistics.EntityData.Leafs.Append("invalid-checksum-lsp-count", types.YLeaf{"InvalidChecksumLspCount", statistics.InvalidChecksumLspCount})
    statistics.EntityData.Leafs.Append("iih-dropped-count", types.YLeaf{"IihDroppedCount", statistics.IihDroppedCount})
    statistics.EntityData.Leafs.Append("lsp-dropped-count", types.YLeaf{"LspDroppedCount", statistics.LspDroppedCount})
    statistics.EntityData.Leafs.Append("snp-dropped-count", types.YLeaf{"SnpDroppedCount", statistics.SnpDroppedCount})
    statistics.EntityData.Leafs.Append("maximum-iih-queue-length", types.YLeaf{"MaximumIihQueueLength", statistics.MaximumIihQueueLength})
    statistics.EntityData.Leafs.Append("maximum-pdu-queue-length", types.YLeaf{"MaximumPduQueueLength", statistics.MaximumPduQueueLength})
    statistics.EntityData.Leafs.Append("pdu-queue-length", types.YLeaf{"PduQueueLength", statistics.PduQueueLength})
    statistics.EntityData.Leafs.Append("avg-hello-recv-rate", types.YLeaf{"AvgHelloRecvRate", statistics.AvgHelloRecvRate})
    statistics.EntityData.Leafs.Append("avg-csnp-recv-rate", types.YLeaf{"AvgCsnpRecvRate", statistics.AvgCsnpRecvRate})
    statistics.EntityData.Leafs.Append("avg-psnp-recv-rate", types.YLeaf{"AvgPsnpRecvRate", statistics.AvgPsnpRecvRate})
    statistics.EntityData.Leafs.Append("avg-lsp-recv-rate", types.YLeaf{"AvgLspRecvRate", statistics.AvgLspRecvRate})
    statistics.EntityData.Leafs.Append("avg-hello-send-rate", types.YLeaf{"AvgHelloSendRate", statistics.AvgHelloSendRate})
    statistics.EntityData.Leafs.Append("avg-csnp-send-rate", types.YLeaf{"AvgCsnpSendRate", statistics.AvgCsnpSendRate})
    statistics.EntityData.Leafs.Append("avg-psnp-send-rate", types.YLeaf{"AvgPsnpSendRate", statistics.AvgPsnpSendRate})
    statistics.EntityData.Leafs.Append("avg-lsp-send-rate", types.YLeaf{"AvgLspSendRate", statistics.AvgLspSendRate})

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloProcessTime
// Average hello process time
type Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloProcessTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (avgHelloProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloProcessTime) GetEntityData() *types.CommonEntityData {
    avgHelloProcessTime.EntityData.YFilter = avgHelloProcessTime.YFilter
    avgHelloProcessTime.EntityData.YangName = "avg-hello-process-time"
    avgHelloProcessTime.EntityData.BundleName = "cisco_ios_xr"
    avgHelloProcessTime.EntityData.ParentYangName = "statistics"
    avgHelloProcessTime.EntityData.SegmentPath = "avg-hello-process-time"
    avgHelloProcessTime.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/statistics-global/statistics/" + avgHelloProcessTime.EntityData.SegmentPath
    avgHelloProcessTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    avgHelloProcessTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    avgHelloProcessTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    avgHelloProcessTime.EntityData.Children = types.NewOrderedMap()
    avgHelloProcessTime.EntityData.Leafs = types.NewOrderedMap()
    avgHelloProcessTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", avgHelloProcessTime.Seconds})
    avgHelloProcessTime.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", avgHelloProcessTime.NanoSeconds})

    avgHelloProcessTime.EntityData.YListKeys = []string {}

    return &(avgHelloProcessTime.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpProcessTime
// Average CSNP process time
type Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpProcessTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (avgCsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpProcessTime) GetEntityData() *types.CommonEntityData {
    avgCsnpProcessTime.EntityData.YFilter = avgCsnpProcessTime.YFilter
    avgCsnpProcessTime.EntityData.YangName = "avg-csnp-process-time"
    avgCsnpProcessTime.EntityData.BundleName = "cisco_ios_xr"
    avgCsnpProcessTime.EntityData.ParentYangName = "statistics"
    avgCsnpProcessTime.EntityData.SegmentPath = "avg-csnp-process-time"
    avgCsnpProcessTime.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/statistics-global/statistics/" + avgCsnpProcessTime.EntityData.SegmentPath
    avgCsnpProcessTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    avgCsnpProcessTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    avgCsnpProcessTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    avgCsnpProcessTime.EntityData.Children = types.NewOrderedMap()
    avgCsnpProcessTime.EntityData.Leafs = types.NewOrderedMap()
    avgCsnpProcessTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", avgCsnpProcessTime.Seconds})
    avgCsnpProcessTime.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", avgCsnpProcessTime.NanoSeconds})

    avgCsnpProcessTime.EntityData.YListKeys = []string {}

    return &(avgCsnpProcessTime.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpProcessTime
// Average PSNP process time
type Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpProcessTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (avgPsnpProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpProcessTime) GetEntityData() *types.CommonEntityData {
    avgPsnpProcessTime.EntityData.YFilter = avgPsnpProcessTime.YFilter
    avgPsnpProcessTime.EntityData.YangName = "avg-psnp-process-time"
    avgPsnpProcessTime.EntityData.BundleName = "cisco_ios_xr"
    avgPsnpProcessTime.EntityData.ParentYangName = "statistics"
    avgPsnpProcessTime.EntityData.SegmentPath = "avg-psnp-process-time"
    avgPsnpProcessTime.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/statistics-global/statistics/" + avgPsnpProcessTime.EntityData.SegmentPath
    avgPsnpProcessTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    avgPsnpProcessTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    avgPsnpProcessTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    avgPsnpProcessTime.EntityData.Children = types.NewOrderedMap()
    avgPsnpProcessTime.EntityData.Leafs = types.NewOrderedMap()
    avgPsnpProcessTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", avgPsnpProcessTime.Seconds})
    avgPsnpProcessTime.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", avgPsnpProcessTime.NanoSeconds})

    avgPsnpProcessTime.EntityData.YListKeys = []string {}

    return &(avgPsnpProcessTime.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspProcessTime
// Average LSP process time
type Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspProcessTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (avgLspProcessTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspProcessTime) GetEntityData() *types.CommonEntityData {
    avgLspProcessTime.EntityData.YFilter = avgLspProcessTime.YFilter
    avgLspProcessTime.EntityData.YangName = "avg-lsp-process-time"
    avgLspProcessTime.EntityData.BundleName = "cisco_ios_xr"
    avgLspProcessTime.EntityData.ParentYangName = "statistics"
    avgLspProcessTime.EntityData.SegmentPath = "avg-lsp-process-time"
    avgLspProcessTime.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/statistics-global/statistics/" + avgLspProcessTime.EntityData.SegmentPath
    avgLspProcessTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    avgLspProcessTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    avgLspProcessTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    avgLspProcessTime.EntityData.Children = types.NewOrderedMap()
    avgLspProcessTime.EntityData.Leafs = types.NewOrderedMap()
    avgLspProcessTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", avgLspProcessTime.Seconds})
    avgLspProcessTime.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", avgLspProcessTime.NanoSeconds})

    avgLspProcessTime.EntityData.YListKeys = []string {}

    return &(avgLspProcessTime.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloTransmitTime
// Average hello transmit time
type Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloTransmitTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (avgHelloTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgHelloTransmitTime) GetEntityData() *types.CommonEntityData {
    avgHelloTransmitTime.EntityData.YFilter = avgHelloTransmitTime.YFilter
    avgHelloTransmitTime.EntityData.YangName = "avg-hello-transmit-time"
    avgHelloTransmitTime.EntityData.BundleName = "cisco_ios_xr"
    avgHelloTransmitTime.EntityData.ParentYangName = "statistics"
    avgHelloTransmitTime.EntityData.SegmentPath = "avg-hello-transmit-time"
    avgHelloTransmitTime.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/statistics-global/statistics/" + avgHelloTransmitTime.EntityData.SegmentPath
    avgHelloTransmitTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    avgHelloTransmitTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    avgHelloTransmitTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    avgHelloTransmitTime.EntityData.Children = types.NewOrderedMap()
    avgHelloTransmitTime.EntityData.Leafs = types.NewOrderedMap()
    avgHelloTransmitTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", avgHelloTransmitTime.Seconds})
    avgHelloTransmitTime.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", avgHelloTransmitTime.NanoSeconds})

    avgHelloTransmitTime.EntityData.YListKeys = []string {}

    return &(avgHelloTransmitTime.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpTransmitTime
// Average CSNP transmit time
type Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpTransmitTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (avgCsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgCsnpTransmitTime) GetEntityData() *types.CommonEntityData {
    avgCsnpTransmitTime.EntityData.YFilter = avgCsnpTransmitTime.YFilter
    avgCsnpTransmitTime.EntityData.YangName = "avg-csnp-transmit-time"
    avgCsnpTransmitTime.EntityData.BundleName = "cisco_ios_xr"
    avgCsnpTransmitTime.EntityData.ParentYangName = "statistics"
    avgCsnpTransmitTime.EntityData.SegmentPath = "avg-csnp-transmit-time"
    avgCsnpTransmitTime.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/statistics-global/statistics/" + avgCsnpTransmitTime.EntityData.SegmentPath
    avgCsnpTransmitTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    avgCsnpTransmitTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    avgCsnpTransmitTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    avgCsnpTransmitTime.EntityData.Children = types.NewOrderedMap()
    avgCsnpTransmitTime.EntityData.Leafs = types.NewOrderedMap()
    avgCsnpTransmitTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", avgCsnpTransmitTime.Seconds})
    avgCsnpTransmitTime.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", avgCsnpTransmitTime.NanoSeconds})

    avgCsnpTransmitTime.EntityData.YListKeys = []string {}

    return &(avgCsnpTransmitTime.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpTransmitTime
// Average PSNP transmit time
type Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpTransmitTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (avgPsnpTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgPsnpTransmitTime) GetEntityData() *types.CommonEntityData {
    avgPsnpTransmitTime.EntityData.YFilter = avgPsnpTransmitTime.YFilter
    avgPsnpTransmitTime.EntityData.YangName = "avg-psnp-transmit-time"
    avgPsnpTransmitTime.EntityData.BundleName = "cisco_ios_xr"
    avgPsnpTransmitTime.EntityData.ParentYangName = "statistics"
    avgPsnpTransmitTime.EntityData.SegmentPath = "avg-psnp-transmit-time"
    avgPsnpTransmitTime.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/statistics-global/statistics/" + avgPsnpTransmitTime.EntityData.SegmentPath
    avgPsnpTransmitTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    avgPsnpTransmitTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    avgPsnpTransmitTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    avgPsnpTransmitTime.EntityData.Children = types.NewOrderedMap()
    avgPsnpTransmitTime.EntityData.Leafs = types.NewOrderedMap()
    avgPsnpTransmitTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", avgPsnpTransmitTime.Seconds})
    avgPsnpTransmitTime.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", avgPsnpTransmitTime.NanoSeconds})

    avgPsnpTransmitTime.EntityData.YListKeys = []string {}

    return &(avgPsnpTransmitTime.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspTransmitTime
// Average LSP transmit time
type Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspTransmitTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (avgLspTransmitTime *Isis_Instances_Instance_StatisticsGlobal_Statistics_AvgLspTransmitTime) GetEntityData() *types.CommonEntityData {
    avgLspTransmitTime.EntityData.YFilter = avgLspTransmitTime.YFilter
    avgLspTransmitTime.EntityData.YangName = "avg-lsp-transmit-time"
    avgLspTransmitTime.EntityData.BundleName = "cisco_ios_xr"
    avgLspTransmitTime.EntityData.ParentYangName = "statistics"
    avgLspTransmitTime.EntityData.SegmentPath = "avg-lsp-transmit-time"
    avgLspTransmitTime.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/statistics-global/statistics/" + avgLspTransmitTime.EntityData.SegmentPath
    avgLspTransmitTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    avgLspTransmitTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    avgLspTransmitTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    avgLspTransmitTime.EntityData.Children = types.NewOrderedMap()
    avgLspTransmitTime.EntityData.Leafs = types.NewOrderedMap()
    avgLspTransmitTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", avgLspTransmitTime.Seconds})
    avgLspTransmitTime.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", avgLspTransmitTime.NanoSeconds})

    avgLspTransmitTime.EntityData.YListKeys = []string {}

    return &(avgLspTransmitTime.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_PerAreaData
// Per-area data
type Isis_Instances_Instance_StatisticsGlobal_PerAreaData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Level this data applies to. The type is IsisLevel.
    Level interface{}

    // Statistics.
    Statistics Isis_Instances_Instance_StatisticsGlobal_PerAreaData_Statistics

    // Per-topoogy statistics. The type is slice of
    // Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData.
    PerTopologyData []*Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData
}

func (perAreaData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData) GetEntityData() *types.CommonEntityData {
    perAreaData.EntityData.YFilter = perAreaData.YFilter
    perAreaData.EntityData.YangName = "per-area-data"
    perAreaData.EntityData.BundleName = "cisco_ios_xr"
    perAreaData.EntityData.ParentYangName = "statistics-global"
    perAreaData.EntityData.SegmentPath = "per-area-data" + types.AddNoKeyToken(perAreaData)
    perAreaData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/statistics-global/" + perAreaData.EntityData.SegmentPath
    perAreaData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perAreaData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perAreaData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perAreaData.EntityData.Children = types.NewOrderedMap()
    perAreaData.EntityData.Children.Append("statistics", types.YChild{"Statistics", &perAreaData.Statistics})
    perAreaData.EntityData.Children.Append("per-topology-data", types.YChild{"PerTopologyData", nil})
    for i := range perAreaData.PerTopologyData {
        types.SetYListKey(perAreaData.PerTopologyData[i], i)
        perAreaData.EntityData.Children.Append(types.GetSegmentPath(perAreaData.PerTopologyData[i]), types.YChild{"PerTopologyData", perAreaData.PerTopologyData[i]})
    }
    perAreaData.EntityData.Leafs = types.NewOrderedMap()
    perAreaData.EntityData.Leafs.Append("level", types.YLeaf{"Level", perAreaData.Level})

    perAreaData.EntityData.YListKeys = []string {}

    return &(perAreaData.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_PerAreaData_Statistics
// Statistics
type Isis_Instances_Instance_StatisticsGlobal_PerAreaData_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of times system LSP rebuilt. The type is interface{} with range:
    // 0..4294967295.
    SystemLspBuildCount interface{}

    // Number of times system LSP refreshed. The type is interface{} with range:
    // 0..4294967295.
    SystemLspRefreshCount interface{}
}

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "per-area-data"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/statistics-global/per-area-data/" + statistics.EntityData.SegmentPath
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Leafs = types.NewOrderedMap()
    statistics.EntityData.Leafs.Append("system-lsp-build-count", types.YLeaf{"SystemLspBuildCount", statistics.SystemLspBuildCount})
    statistics.EntityData.Leafs.Append("system-lsp-refresh-count", types.YLeaf{"SystemLspRefreshCount", statistics.SystemLspRefreshCount})

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData
// Per-topoogy statistics
type Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Topology ID.
    Id Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Id

    // Statistics.
    Statistics Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Statistics
}

func (perTopologyData *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData) GetEntityData() *types.CommonEntityData {
    perTopologyData.EntityData.YFilter = perTopologyData.YFilter
    perTopologyData.EntityData.YangName = "per-topology-data"
    perTopologyData.EntityData.BundleName = "cisco_ios_xr"
    perTopologyData.EntityData.ParentYangName = "per-area-data"
    perTopologyData.EntityData.SegmentPath = "per-topology-data" + types.AddNoKeyToken(perTopologyData)
    perTopologyData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/statistics-global/per-area-data/" + perTopologyData.EntityData.SegmentPath
    perTopologyData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perTopologyData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perTopologyData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perTopologyData.EntityData.Children = types.NewOrderedMap()
    perTopologyData.EntityData.Children.Append("id", types.YChild{"Id", &perTopologyData.Id})
    perTopologyData.EntityData.Children.Append("statistics", types.YChild{"Statistics", &perTopologyData.Statistics})
    perTopologyData.EntityData.Leafs = types.NewOrderedMap()

    perTopologyData.EntityData.YListKeys = []string {}

    return &(perTopologyData.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Id
// Topology ID
type Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Id struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF name. The type is IsisAfId.
    AfName interface{}

    // Sub-AF name. The type is IsisSubAfId.
    SafName interface{}

    // VRF Name. The type is string.
    VrfName interface{}

    // Topology Name. The type is string.
    TopologyName interface{}
}

func (id *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Id) GetEntityData() *types.CommonEntityData {
    id.EntityData.YFilter = id.YFilter
    id.EntityData.YangName = "id"
    id.EntityData.BundleName = "cisco_ios_xr"
    id.EntityData.ParentYangName = "per-topology-data"
    id.EntityData.SegmentPath = "id"
    id.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/statistics-global/per-area-data/per-topology-data/" + id.EntityData.SegmentPath
    id.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    id.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    id.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    id.EntityData.Children = types.NewOrderedMap()
    id.EntityData.Leafs = types.NewOrderedMap()
    id.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", id.AfName})
    id.EntityData.Leafs.Append("saf-name", types.YLeaf{"SafName", id.SafName})
    id.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", id.VrfName})
    id.EntityData.Leafs.Append("topology-name", types.YLeaf{"TopologyName", id.TopologyName})

    id.EntityData.YListKeys = []string {}

    return &(id.EntityData)
}

// Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Statistics
// Statistics
type Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of full SPF calculations run. The type is interface{} with range:
    // 0..4294967295.
    SpfRunCount interface{}

    // Number of ISPF calculations run. The type is interface{} with range:
    // 0..4294967295.
    IspfRunCount interface{}

    // Number of Next Hop Calculations run. The type is interface{} with range:
    // 0..4294967295.
    NhcRunCount interface{}

    // Number of PRCs run. The type is interface{} with range: 0..4294967295.
    PrcRunCount interface{}

    // Number of periodic SPF calculations run. The type is interface{} with
    // range: 0..4294967295.
    PeriodicRunCount interface{}
}

func (statistics *Isis_Instances_Instance_StatisticsGlobal_PerAreaData_PerTopologyData_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "per-topology-data"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/statistics-global/per-area-data/per-topology-data/" + statistics.EntityData.SegmentPath
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Leafs = types.NewOrderedMap()
    statistics.EntityData.Leafs.Append("spf-run-count", types.YLeaf{"SpfRunCount", statistics.SpfRunCount})
    statistics.EntityData.Leafs.Append("ispf-run-count", types.YLeaf{"IspfRunCount", statistics.IspfRunCount})
    statistics.EntityData.Leafs.Append("nhc-run-count", types.YLeaf{"NhcRunCount", statistics.NhcRunCount})
    statistics.EntityData.Leafs.Append("prc-run-count", types.YLeaf{"PrcRunCount", statistics.PrcRunCount})
    statistics.EntityData.Leafs.Append("periodic-run-count", types.YLeaf{"PeriodicRunCount", statistics.PeriodicRunCount})

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Isis_Instances_Instance_Levels
// Level table
type Isis_Instances_Instance_Levels struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Per-level operational data. The type is slice of
    // Isis_Instances_Instance_Levels_Level.
    Level []*Isis_Instances_Instance_Levels_Level
}

func (levels *Isis_Instances_Instance_Levels) GetEntityData() *types.CommonEntityData {
    levels.EntityData.YFilter = levels.YFilter
    levels.EntityData.YangName = "levels"
    levels.EntityData.BundleName = "cisco_ios_xr"
    levels.EntityData.ParentYangName = "instance"
    levels.EntityData.SegmentPath = "levels"
    levels.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/" + levels.EntityData.SegmentPath
    levels.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    levels.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    levels.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    levels.EntityData.Children = types.NewOrderedMap()
    levels.EntityData.Children.Append("level", types.YChild{"Level", nil})
    for i := range levels.Level {
        levels.EntityData.Children.Append(types.GetSegmentPath(levels.Level[i]), types.YChild{"Level", levels.Level[i]})
    }
    levels.EntityData.Leafs = types.NewOrderedMap()

    levels.EntityData.YListKeys = []string {}

    return &(levels.EntityData)
}

// Isis_Instances_Instance_Levels_Level
// Per-level operational data
type Isis_Instances_Instance_Levels_Level struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Level. The type is IsisInternalLevel.
    Level interface{}

    // Log of adjacency changes within a single level.
    AdjacencyLog Isis_Instances_Instance_Levels_Level_AdjacencyLog

    // Summary information for one level's LSP database.
    LspTableSummary Isis_Instances_Instance_Levels_Level_LspTableSummary

    // Adjacency table.
    Adjacencies Isis_Instances_Instance_Levels_Level_Adjacencies

    // Detailed LSP table. Use to retrieve LSPs with TLV content.
    DetailedLsps Isis_Instances_Instance_Levels_Level_DetailedLsps

    // LSP table.
    Lsps Isis_Instances_Instance_Levels_Level_Lsps

    // LSP-log for a single level.
    LspLog Isis_Instances_Instance_Levels_Level_LspLog

    // Database-log for a single level.
    DatabaseLog Isis_Instances_Instance_Levels_Level_DatabaseLog
}

func (level *Isis_Instances_Instance_Levels_Level) GetEntityData() *types.CommonEntityData {
    level.EntityData.YFilter = level.YFilter
    level.EntityData.YangName = "level"
    level.EntityData.BundleName = "cisco_ios_xr"
    level.EntityData.ParentYangName = "levels"
    level.EntityData.SegmentPath = "level" + types.AddKeyToken(level.Level, "level")
    level.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/" + level.EntityData.SegmentPath
    level.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    level.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    level.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    level.EntityData.Children = types.NewOrderedMap()
    level.EntityData.Children.Append("adjacency-log", types.YChild{"AdjacencyLog", &level.AdjacencyLog})
    level.EntityData.Children.Append("lsp-table-summary", types.YChild{"LspTableSummary", &level.LspTableSummary})
    level.EntityData.Children.Append("adjacencies", types.YChild{"Adjacencies", &level.Adjacencies})
    level.EntityData.Children.Append("detailed-lsps", types.YChild{"DetailedLsps", &level.DetailedLsps})
    level.EntityData.Children.Append("lsps", types.YChild{"Lsps", &level.Lsps})
    level.EntityData.Children.Append("lsp-log", types.YChild{"LspLog", &level.LspLog})
    level.EntityData.Children.Append("database-log", types.YChild{"DatabaseLog", &level.DatabaseLog})
    level.EntityData.Leafs = types.NewOrderedMap()
    level.EntityData.Leafs.Append("level", types.YLeaf{"Level", level.Level})

    level.EntityData.YListKeys = []string {"Level"}

    return &(level.EntityData)
}

// Isis_Instances_Instance_Levels_Level_AdjacencyLog
// Log of adjacency changes within a single
// level
type Isis_Instances_Instance_Levels_Level_AdjacencyLog struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency Log entries. The type is slice of
    // Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry.
    LogEntry []*Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry
}

func (adjacencyLog *Isis_Instances_Instance_Levels_Level_AdjacencyLog) GetEntityData() *types.CommonEntityData {
    adjacencyLog.EntityData.YFilter = adjacencyLog.YFilter
    adjacencyLog.EntityData.YangName = "adjacency-log"
    adjacencyLog.EntityData.BundleName = "cisco_ios_xr"
    adjacencyLog.EntityData.ParentYangName = "level"
    adjacencyLog.EntityData.SegmentPath = "adjacency-log"
    adjacencyLog.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/" + adjacencyLog.EntityData.SegmentPath
    adjacencyLog.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyLog.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyLog.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyLog.EntityData.Children = types.NewOrderedMap()
    adjacencyLog.EntityData.Children.Append("log-entry", types.YChild{"LogEntry", nil})
    for i := range adjacencyLog.LogEntry {
        types.SetYListKey(adjacencyLog.LogEntry[i], i)
        adjacencyLog.EntityData.Children.Append(types.GetSegmentPath(adjacencyLog.LogEntry[i]), types.YChild{"LogEntry", adjacencyLog.LogEntry[i]})
    }
    adjacencyLog.EntityData.Leafs = types.NewOrderedMap()

    adjacencyLog.EntityData.YListKeys = []string {}

    return &(adjacencyLog.EntityData)
}

// Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry
// Adjacency Log entries
type Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor system ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    AdjLogNeighborSystemId interface{}

    // Interface name. The type is string.
    InterfaceName interface{}

    // Previous adjacency state. The type is IsisAdjState.
    PrevAdjState interface{}

    // Current adjacency state. The type is IsisAdjState.
    CurAdjState interface{}

    // Reason adjacency changed state. The type is IsisAdjStateReason.
    StateReason interface{}

    // Generic entry data.
    GenericData Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData

    // Per-topology changes. The type is slice of
    // Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange.
    AdjacencyPerTopologyChange []*Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange
}

func (logEntry *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry) GetEntityData() *types.CommonEntityData {
    logEntry.EntityData.YFilter = logEntry.YFilter
    logEntry.EntityData.YangName = "log-entry"
    logEntry.EntityData.BundleName = "cisco_ios_xr"
    logEntry.EntityData.ParentYangName = "adjacency-log"
    logEntry.EntityData.SegmentPath = "log-entry" + types.AddNoKeyToken(logEntry)
    logEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacency-log/" + logEntry.EntityData.SegmentPath
    logEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    logEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    logEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    logEntry.EntityData.Children = types.NewOrderedMap()
    logEntry.EntityData.Children.Append("generic-data", types.YChild{"GenericData", &logEntry.GenericData})
    logEntry.EntityData.Children.Append("adjacency-per-topology-change", types.YChild{"AdjacencyPerTopologyChange", nil})
    for i := range logEntry.AdjacencyPerTopologyChange {
        types.SetYListKey(logEntry.AdjacencyPerTopologyChange[i], i)
        logEntry.EntityData.Children.Append(types.GetSegmentPath(logEntry.AdjacencyPerTopologyChange[i]), types.YChild{"AdjacencyPerTopologyChange", logEntry.AdjacencyPerTopologyChange[i]})
    }
    logEntry.EntityData.Leafs = types.NewOrderedMap()
    logEntry.EntityData.Leafs.Append("adj-log-neighbor-system-id", types.YLeaf{"AdjLogNeighborSystemId", logEntry.AdjLogNeighborSystemId})
    logEntry.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", logEntry.InterfaceName})
    logEntry.EntityData.Leafs.Append("prev-adj-state", types.YLeaf{"PrevAdjState", logEntry.PrevAdjState})
    logEntry.EntityData.Leafs.Append("cur-adj-state", types.YLeaf{"CurAdjState", logEntry.CurAdjState})
    logEntry.EntityData.Leafs.Append("state-reason", types.YLeaf{"StateReason", logEntry.StateReason})

    logEntry.EntityData.YListKeys = []string {}

    return &(logEntry.EntityData)
}

// Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData
// Generic entry data
type Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in UTC relative to Jan 1st, 1970.
    Timestamp Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData_Timestamp
}

func (genericData *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData) GetEntityData() *types.CommonEntityData {
    genericData.EntityData.YFilter = genericData.YFilter
    genericData.EntityData.YangName = "generic-data"
    genericData.EntityData.BundleName = "cisco_ios_xr"
    genericData.EntityData.ParentYangName = "log-entry"
    genericData.EntityData.SegmentPath = "generic-data"
    genericData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacency-log/log-entry/" + genericData.EntityData.SegmentPath
    genericData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericData.EntityData.Children = types.NewOrderedMap()
    genericData.EntityData.Children.Append("timestamp", types.YChild{"Timestamp", &genericData.Timestamp})
    genericData.EntityData.Leafs = types.NewOrderedMap()

    genericData.EntityData.YListKeys = []string {}

    return &(genericData.EntityData)
}

// Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData_Timestamp
// Time in UTC relative to Jan 1st, 1970
type Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData_Timestamp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (timestamp *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_GenericData_Timestamp) GetEntityData() *types.CommonEntityData {
    timestamp.EntityData.YFilter = timestamp.YFilter
    timestamp.EntityData.YangName = "timestamp"
    timestamp.EntityData.BundleName = "cisco_ios_xr"
    timestamp.EntityData.ParentYangName = "generic-data"
    timestamp.EntityData.SegmentPath = "timestamp"
    timestamp.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacency-log/log-entry/generic-data/" + timestamp.EntityData.SegmentPath
    timestamp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timestamp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timestamp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timestamp.EntityData.Children = types.NewOrderedMap()
    timestamp.EntityData.Leafs = types.NewOrderedMap()
    timestamp.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", timestamp.Seconds})
    timestamp.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", timestamp.NanoSeconds})

    timestamp.EntityData.YListKeys = []string {}

    return &(timestamp.EntityData)
}

// Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange
// Per-topology changes
type Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Change. The type is IsisAdjTopoChange.
    Change interface{}

    // Topology ID.
    Id Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange_Id
}

func (adjacencyPerTopologyChange *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange) GetEntityData() *types.CommonEntityData {
    adjacencyPerTopologyChange.EntityData.YFilter = adjacencyPerTopologyChange.YFilter
    adjacencyPerTopologyChange.EntityData.YangName = "adjacency-per-topology-change"
    adjacencyPerTopologyChange.EntityData.BundleName = "cisco_ios_xr"
    adjacencyPerTopologyChange.EntityData.ParentYangName = "log-entry"
    adjacencyPerTopologyChange.EntityData.SegmentPath = "adjacency-per-topology-change" + types.AddNoKeyToken(adjacencyPerTopologyChange)
    adjacencyPerTopologyChange.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacency-log/log-entry/" + adjacencyPerTopologyChange.EntityData.SegmentPath
    adjacencyPerTopologyChange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyPerTopologyChange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyPerTopologyChange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyPerTopologyChange.EntityData.Children = types.NewOrderedMap()
    adjacencyPerTopologyChange.EntityData.Children.Append("id", types.YChild{"Id", &adjacencyPerTopologyChange.Id})
    adjacencyPerTopologyChange.EntityData.Leafs = types.NewOrderedMap()
    adjacencyPerTopologyChange.EntityData.Leafs.Append("change", types.YLeaf{"Change", adjacencyPerTopologyChange.Change})

    adjacencyPerTopologyChange.EntityData.YListKeys = []string {}

    return &(adjacencyPerTopologyChange.EntityData)
}

// Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange_Id
// Topology ID
type Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange_Id struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF name. The type is IsisAfId.
    AfName interface{}

    // Sub-AF name. The type is IsisSubAfId.
    SafName interface{}

    // VRF Name. The type is string.
    VrfName interface{}

    // Topology Name. The type is string.
    TopologyName interface{}
}

func (id *Isis_Instances_Instance_Levels_Level_AdjacencyLog_LogEntry_AdjacencyPerTopologyChange_Id) GetEntityData() *types.CommonEntityData {
    id.EntityData.YFilter = id.YFilter
    id.EntityData.YangName = "id"
    id.EntityData.BundleName = "cisco_ios_xr"
    id.EntityData.ParentYangName = "adjacency-per-topology-change"
    id.EntityData.SegmentPath = "id"
    id.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacency-log/log-entry/adjacency-per-topology-change/" + id.EntityData.SegmentPath
    id.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    id.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    id.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    id.EntityData.Children = types.NewOrderedMap()
    id.EntityData.Leafs = types.NewOrderedMap()
    id.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", id.AfName})
    id.EntityData.Leafs.Append("saf-name", types.YLeaf{"SafName", id.SafName})
    id.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", id.VrfName})
    id.EntityData.Leafs.Append("topology-name", types.YLeaf{"TopologyName", id.TopologyName})

    id.EntityData.YListKeys = []string {}

    return &(id.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspTableSummary
// Summary information for one level's LSP
// database
type Isis_Instances_Instance_Levels_Level_LspTableSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Statistics for fragment 0 LSPs.
    Fragment0lspStats Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats

    // Statistics for all LSP fragments.
    AllFragmentLspStats Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats
}

func (lspTableSummary *Isis_Instances_Instance_Levels_Level_LspTableSummary) GetEntityData() *types.CommonEntityData {
    lspTableSummary.EntityData.YFilter = lspTableSummary.YFilter
    lspTableSummary.EntityData.YangName = "lsp-table-summary"
    lspTableSummary.EntityData.BundleName = "cisco_ios_xr"
    lspTableSummary.EntityData.ParentYangName = "level"
    lspTableSummary.EntityData.SegmentPath = "lsp-table-summary"
    lspTableSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/" + lspTableSummary.EntityData.SegmentPath
    lspTableSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lspTableSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lspTableSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lspTableSummary.EntityData.Children = types.NewOrderedMap()
    lspTableSummary.EntityData.Children.Append("fragment0lsp-stats", types.YChild{"Fragment0lspStats", &lspTableSummary.Fragment0lspStats})
    lspTableSummary.EntityData.Children.Append("all-fragment-lsp-stats", types.YChild{"AllFragmentLspStats", &lspTableSummary.AllFragmentLspStats})
    lspTableSummary.EntityData.Leafs = types.NewOrderedMap()

    lspTableSummary.EntityData.YListKeys = []string {}

    return &(lspTableSummary.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats
// Statistics for fragment 0 LSPs
type Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary by class of node.
    NodeCounters Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_NodeCounters

    // Per topology counters. The type is slice of
    // Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_PerTopologyCounter.
    PerTopologyCounter []*Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_PerTopologyCounter
}

func (fragment0lspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats) GetEntityData() *types.CommonEntityData {
    fragment0lspStats.EntityData.YFilter = fragment0lspStats.YFilter
    fragment0lspStats.EntityData.YangName = "fragment0lsp-stats"
    fragment0lspStats.EntityData.BundleName = "cisco_ios_xr"
    fragment0lspStats.EntityData.ParentYangName = "lsp-table-summary"
    fragment0lspStats.EntityData.SegmentPath = "fragment0lsp-stats"
    fragment0lspStats.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/lsp-table-summary/" + fragment0lspStats.EntityData.SegmentPath
    fragment0lspStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fragment0lspStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fragment0lspStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fragment0lspStats.EntityData.Children = types.NewOrderedMap()
    fragment0lspStats.EntityData.Children.Append("node-counters", types.YChild{"NodeCounters", &fragment0lspStats.NodeCounters})
    fragment0lspStats.EntityData.Children.Append("per-topology-counter", types.YChild{"PerTopologyCounter", nil})
    for i := range fragment0lspStats.PerTopologyCounter {
        types.SetYListKey(fragment0lspStats.PerTopologyCounter[i], i)
        fragment0lspStats.EntityData.Children.Append(types.GetSegmentPath(fragment0lspStats.PerTopologyCounter[i]), types.YChild{"PerTopologyCounter", fragment0lspStats.PerTopologyCounter[i]})
    }
    fragment0lspStats.EntityData.Leafs = types.NewOrderedMap()

    fragment0lspStats.EntityData.YListKeys = []string {}

    return &(fragment0lspStats.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_NodeCounters
// Summary by class of node
type Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_NodeCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router LSPs.
    RouteLspCount Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_NodeCounters_RouteLspCount

    // Pseudonode LSPs.
    PseudoNodeLspCount Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_NodeCounters_PseudoNodeLspCount
}

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_NodeCounters) GetEntityData() *types.CommonEntityData {
    nodeCounters.EntityData.YFilter = nodeCounters.YFilter
    nodeCounters.EntityData.YangName = "node-counters"
    nodeCounters.EntityData.BundleName = "cisco_ios_xr"
    nodeCounters.EntityData.ParentYangName = "fragment0lsp-stats"
    nodeCounters.EntityData.SegmentPath = "node-counters"
    nodeCounters.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/lsp-table-summary/fragment0lsp-stats/" + nodeCounters.EntityData.SegmentPath
    nodeCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeCounters.EntityData.Children = types.NewOrderedMap()
    nodeCounters.EntityData.Children.Append("route-lsp-count", types.YChild{"RouteLspCount", &nodeCounters.RouteLspCount})
    nodeCounters.EntityData.Children.Append("pseudo-node-lsp-count", types.YChild{"PseudoNodeLspCount", &nodeCounters.PseudoNodeLspCount})
    nodeCounters.EntityData.Leafs = types.NewOrderedMap()

    nodeCounters.EntityData.YListKeys = []string {}

    return &(nodeCounters.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_NodeCounters_RouteLspCount
// Router LSPs
type Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_NodeCounters_RouteLspCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active LSPs. The type is interface{} with range: 0..4294967295.
    ActiveLspCount interface{}

    // Number of purged LSPs. The type is interface{} with range: 0..4294967295.
    PurgedLspCount interface{}
}

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_NodeCounters_RouteLspCount) GetEntityData() *types.CommonEntityData {
    routeLspCount.EntityData.YFilter = routeLspCount.YFilter
    routeLspCount.EntityData.YangName = "route-lsp-count"
    routeLspCount.EntityData.BundleName = "cisco_ios_xr"
    routeLspCount.EntityData.ParentYangName = "node-counters"
    routeLspCount.EntityData.SegmentPath = "route-lsp-count"
    routeLspCount.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/lsp-table-summary/fragment0lsp-stats/node-counters/" + routeLspCount.EntityData.SegmentPath
    routeLspCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeLspCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeLspCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeLspCount.EntityData.Children = types.NewOrderedMap()
    routeLspCount.EntityData.Leafs = types.NewOrderedMap()
    routeLspCount.EntityData.Leafs.Append("active-lsp-count", types.YLeaf{"ActiveLspCount", routeLspCount.ActiveLspCount})
    routeLspCount.EntityData.Leafs.Append("purged-lsp-count", types.YLeaf{"PurgedLspCount", routeLspCount.PurgedLspCount})

    routeLspCount.EntityData.YListKeys = []string {}

    return &(routeLspCount.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_NodeCounters_PseudoNodeLspCount
// Pseudonode LSPs
type Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_NodeCounters_PseudoNodeLspCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active LSPs. The type is interface{} with range: 0..4294967295.
    ActiveLspCount interface{}

    // Number of purged LSPs. The type is interface{} with range: 0..4294967295.
    PurgedLspCount interface{}
}

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_NodeCounters_PseudoNodeLspCount) GetEntityData() *types.CommonEntityData {
    pseudoNodeLspCount.EntityData.YFilter = pseudoNodeLspCount.YFilter
    pseudoNodeLspCount.EntityData.YangName = "pseudo-node-lsp-count"
    pseudoNodeLspCount.EntityData.BundleName = "cisco_ios_xr"
    pseudoNodeLspCount.EntityData.ParentYangName = "node-counters"
    pseudoNodeLspCount.EntityData.SegmentPath = "pseudo-node-lsp-count"
    pseudoNodeLspCount.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/lsp-table-summary/fragment0lsp-stats/node-counters/" + pseudoNodeLspCount.EntityData.SegmentPath
    pseudoNodeLspCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudoNodeLspCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudoNodeLspCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudoNodeLspCount.EntityData.Children = types.NewOrderedMap()
    pseudoNodeLspCount.EntityData.Leafs = types.NewOrderedMap()
    pseudoNodeLspCount.EntityData.Leafs.Append("active-lsp-count", types.YLeaf{"ActiveLspCount", pseudoNodeLspCount.ActiveLspCount})
    pseudoNodeLspCount.EntityData.Leafs.Append("purged-lsp-count", types.YLeaf{"PurgedLspCount", pseudoNodeLspCount.PurgedLspCount})

    pseudoNodeLspCount.EntityData.YListKeys = []string {}

    return &(pseudoNodeLspCount.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_PerTopologyCounter
// Per topology counters
type Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_PerTopologyCounter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Topology ID.
    Id Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_PerTopologyCounter_Id

    // Number of LSPs with their per-topology overload bit set.
    OverloadedLspCount Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_PerTopologyCounter_OverloadedLspCount

    // Number of LSPs with their per-topology attached bit set.
    AttachedLspCount Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_PerTopologyCounter_AttachedLspCount
}

func (perTopologyCounter *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_PerTopologyCounter) GetEntityData() *types.CommonEntityData {
    perTopologyCounter.EntityData.YFilter = perTopologyCounter.YFilter
    perTopologyCounter.EntityData.YangName = "per-topology-counter"
    perTopologyCounter.EntityData.BundleName = "cisco_ios_xr"
    perTopologyCounter.EntityData.ParentYangName = "fragment0lsp-stats"
    perTopologyCounter.EntityData.SegmentPath = "per-topology-counter" + types.AddNoKeyToken(perTopologyCounter)
    perTopologyCounter.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/lsp-table-summary/fragment0lsp-stats/" + perTopologyCounter.EntityData.SegmentPath
    perTopologyCounter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perTopologyCounter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perTopologyCounter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perTopologyCounter.EntityData.Children = types.NewOrderedMap()
    perTopologyCounter.EntityData.Children.Append("id", types.YChild{"Id", &perTopologyCounter.Id})
    perTopologyCounter.EntityData.Children.Append("overloaded-lsp-count", types.YChild{"OverloadedLspCount", &perTopologyCounter.OverloadedLspCount})
    perTopologyCounter.EntityData.Children.Append("attached-lsp-count", types.YChild{"AttachedLspCount", &perTopologyCounter.AttachedLspCount})
    perTopologyCounter.EntityData.Leafs = types.NewOrderedMap()

    perTopologyCounter.EntityData.YListKeys = []string {}

    return &(perTopologyCounter.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_PerTopologyCounter_Id
// Topology ID
type Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_PerTopologyCounter_Id struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF name. The type is IsisAfId.
    AfName interface{}

    // Sub-AF name. The type is IsisSubAfId.
    SafName interface{}

    // VRF Name. The type is string.
    VrfName interface{}

    // Topology Name. The type is string.
    TopologyName interface{}
}

func (id *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_PerTopologyCounter_Id) GetEntityData() *types.CommonEntityData {
    id.EntityData.YFilter = id.YFilter
    id.EntityData.YangName = "id"
    id.EntityData.BundleName = "cisco_ios_xr"
    id.EntityData.ParentYangName = "per-topology-counter"
    id.EntityData.SegmentPath = "id"
    id.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/lsp-table-summary/fragment0lsp-stats/per-topology-counter/" + id.EntityData.SegmentPath
    id.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    id.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    id.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    id.EntityData.Children = types.NewOrderedMap()
    id.EntityData.Leafs = types.NewOrderedMap()
    id.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", id.AfName})
    id.EntityData.Leafs.Append("saf-name", types.YLeaf{"SafName", id.SafName})
    id.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", id.VrfName})
    id.EntityData.Leafs.Append("topology-name", types.YLeaf{"TopologyName", id.TopologyName})

    id.EntityData.YListKeys = []string {}

    return &(id.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_PerTopologyCounter_OverloadedLspCount
// Number of LSPs with their per-topology overload
// bit set
type Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_PerTopologyCounter_OverloadedLspCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active LSPs. The type is interface{} with range: 0..4294967295.
    ActiveLspCount interface{}

    // Number of purged LSPs. The type is interface{} with range: 0..4294967295.
    PurgedLspCount interface{}
}

func (overloadedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_PerTopologyCounter_OverloadedLspCount) GetEntityData() *types.CommonEntityData {
    overloadedLspCount.EntityData.YFilter = overloadedLspCount.YFilter
    overloadedLspCount.EntityData.YangName = "overloaded-lsp-count"
    overloadedLspCount.EntityData.BundleName = "cisco_ios_xr"
    overloadedLspCount.EntityData.ParentYangName = "per-topology-counter"
    overloadedLspCount.EntityData.SegmentPath = "overloaded-lsp-count"
    overloadedLspCount.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/lsp-table-summary/fragment0lsp-stats/per-topology-counter/" + overloadedLspCount.EntityData.SegmentPath
    overloadedLspCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    overloadedLspCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    overloadedLspCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    overloadedLspCount.EntityData.Children = types.NewOrderedMap()
    overloadedLspCount.EntityData.Leafs = types.NewOrderedMap()
    overloadedLspCount.EntityData.Leafs.Append("active-lsp-count", types.YLeaf{"ActiveLspCount", overloadedLspCount.ActiveLspCount})
    overloadedLspCount.EntityData.Leafs.Append("purged-lsp-count", types.YLeaf{"PurgedLspCount", overloadedLspCount.PurgedLspCount})

    overloadedLspCount.EntityData.YListKeys = []string {}

    return &(overloadedLspCount.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_PerTopologyCounter_AttachedLspCount
// Number of LSPs with their per-topology attached
// bit set
type Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_PerTopologyCounter_AttachedLspCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active LSPs. The type is interface{} with range: 0..4294967295.
    ActiveLspCount interface{}

    // Number of purged LSPs. The type is interface{} with range: 0..4294967295.
    PurgedLspCount interface{}
}

func (attachedLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_Fragment0lspStats_PerTopologyCounter_AttachedLspCount) GetEntityData() *types.CommonEntityData {
    attachedLspCount.EntityData.YFilter = attachedLspCount.YFilter
    attachedLspCount.EntityData.YangName = "attached-lsp-count"
    attachedLspCount.EntityData.BundleName = "cisco_ios_xr"
    attachedLspCount.EntityData.ParentYangName = "per-topology-counter"
    attachedLspCount.EntityData.SegmentPath = "attached-lsp-count"
    attachedLspCount.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/lsp-table-summary/fragment0lsp-stats/per-topology-counter/" + attachedLspCount.EntityData.SegmentPath
    attachedLspCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attachedLspCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attachedLspCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attachedLspCount.EntityData.Children = types.NewOrderedMap()
    attachedLspCount.EntityData.Leafs = types.NewOrderedMap()
    attachedLspCount.EntityData.Leafs.Append("active-lsp-count", types.YLeaf{"ActiveLspCount", attachedLspCount.ActiveLspCount})
    attachedLspCount.EntityData.Leafs.Append("purged-lsp-count", types.YLeaf{"PurgedLspCount", attachedLspCount.PurgedLspCount})

    attachedLspCount.EntityData.YListKeys = []string {}

    return &(attachedLspCount.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats
// Statistics for all LSP fragments
type Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary by class of node.
    NodeCounters Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters
}

func (allFragmentLspStats *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats) GetEntityData() *types.CommonEntityData {
    allFragmentLspStats.EntityData.YFilter = allFragmentLspStats.YFilter
    allFragmentLspStats.EntityData.YangName = "all-fragment-lsp-stats"
    allFragmentLspStats.EntityData.BundleName = "cisco_ios_xr"
    allFragmentLspStats.EntityData.ParentYangName = "lsp-table-summary"
    allFragmentLspStats.EntityData.SegmentPath = "all-fragment-lsp-stats"
    allFragmentLspStats.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/lsp-table-summary/" + allFragmentLspStats.EntityData.SegmentPath
    allFragmentLspStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allFragmentLspStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allFragmentLspStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allFragmentLspStats.EntityData.Children = types.NewOrderedMap()
    allFragmentLspStats.EntityData.Children.Append("node-counters", types.YChild{"NodeCounters", &allFragmentLspStats.NodeCounters})
    allFragmentLspStats.EntityData.Leafs = types.NewOrderedMap()

    allFragmentLspStats.EntityData.YListKeys = []string {}

    return &(allFragmentLspStats.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters
// Summary by class of node
type Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router LSPs.
    RouteLspCount Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_RouteLspCount

    // Pseudonode LSPs.
    PseudoNodeLspCount Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_PseudoNodeLspCount
}

func (nodeCounters *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters) GetEntityData() *types.CommonEntityData {
    nodeCounters.EntityData.YFilter = nodeCounters.YFilter
    nodeCounters.EntityData.YangName = "node-counters"
    nodeCounters.EntityData.BundleName = "cisco_ios_xr"
    nodeCounters.EntityData.ParentYangName = "all-fragment-lsp-stats"
    nodeCounters.EntityData.SegmentPath = "node-counters"
    nodeCounters.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/lsp-table-summary/all-fragment-lsp-stats/" + nodeCounters.EntityData.SegmentPath
    nodeCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeCounters.EntityData.Children = types.NewOrderedMap()
    nodeCounters.EntityData.Children.Append("route-lsp-count", types.YChild{"RouteLspCount", &nodeCounters.RouteLspCount})
    nodeCounters.EntityData.Children.Append("pseudo-node-lsp-count", types.YChild{"PseudoNodeLspCount", &nodeCounters.PseudoNodeLspCount})
    nodeCounters.EntityData.Leafs = types.NewOrderedMap()

    nodeCounters.EntityData.YListKeys = []string {}

    return &(nodeCounters.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_RouteLspCount
// Router LSPs
type Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_RouteLspCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active LSPs. The type is interface{} with range: 0..4294967295.
    ActiveLspCount interface{}

    // Number of purged LSPs. The type is interface{} with range: 0..4294967295.
    PurgedLspCount interface{}
}

func (routeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_RouteLspCount) GetEntityData() *types.CommonEntityData {
    routeLspCount.EntityData.YFilter = routeLspCount.YFilter
    routeLspCount.EntityData.YangName = "route-lsp-count"
    routeLspCount.EntityData.BundleName = "cisco_ios_xr"
    routeLspCount.EntityData.ParentYangName = "node-counters"
    routeLspCount.EntityData.SegmentPath = "route-lsp-count"
    routeLspCount.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/lsp-table-summary/all-fragment-lsp-stats/node-counters/" + routeLspCount.EntityData.SegmentPath
    routeLspCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeLspCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeLspCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeLspCount.EntityData.Children = types.NewOrderedMap()
    routeLspCount.EntityData.Leafs = types.NewOrderedMap()
    routeLspCount.EntityData.Leafs.Append("active-lsp-count", types.YLeaf{"ActiveLspCount", routeLspCount.ActiveLspCount})
    routeLspCount.EntityData.Leafs.Append("purged-lsp-count", types.YLeaf{"PurgedLspCount", routeLspCount.PurgedLspCount})

    routeLspCount.EntityData.YListKeys = []string {}

    return &(routeLspCount.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_PseudoNodeLspCount
// Pseudonode LSPs
type Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_PseudoNodeLspCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active LSPs. The type is interface{} with range: 0..4294967295.
    ActiveLspCount interface{}

    // Number of purged LSPs. The type is interface{} with range: 0..4294967295.
    PurgedLspCount interface{}
}

func (pseudoNodeLspCount *Isis_Instances_Instance_Levels_Level_LspTableSummary_AllFragmentLspStats_NodeCounters_PseudoNodeLspCount) GetEntityData() *types.CommonEntityData {
    pseudoNodeLspCount.EntityData.YFilter = pseudoNodeLspCount.YFilter
    pseudoNodeLspCount.EntityData.YangName = "pseudo-node-lsp-count"
    pseudoNodeLspCount.EntityData.BundleName = "cisco_ios_xr"
    pseudoNodeLspCount.EntityData.ParentYangName = "node-counters"
    pseudoNodeLspCount.EntityData.SegmentPath = "pseudo-node-lsp-count"
    pseudoNodeLspCount.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/lsp-table-summary/all-fragment-lsp-stats/node-counters/" + pseudoNodeLspCount.EntityData.SegmentPath
    pseudoNodeLspCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudoNodeLspCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudoNodeLspCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudoNodeLspCount.EntityData.Children = types.NewOrderedMap()
    pseudoNodeLspCount.EntityData.Leafs = types.NewOrderedMap()
    pseudoNodeLspCount.EntityData.Leafs.Append("active-lsp-count", types.YLeaf{"ActiveLspCount", pseudoNodeLspCount.ActiveLspCount})
    pseudoNodeLspCount.EntityData.Leafs.Append("purged-lsp-count", types.YLeaf{"PurgedLspCount", pseudoNodeLspCount.PurgedLspCount})

    pseudoNodeLspCount.EntityData.YListKeys = []string {}

    return &(pseudoNodeLspCount.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies
// Adjacency table
type Isis_Instances_Instance_Levels_Level_Adjacencies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A single IS-IS adjacency. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency.
    Adjacency []*Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency
}

func (adjacencies *Isis_Instances_Instance_Levels_Level_Adjacencies) GetEntityData() *types.CommonEntityData {
    adjacencies.EntityData.YFilter = adjacencies.YFilter
    adjacencies.EntityData.YangName = "adjacencies"
    adjacencies.EntityData.BundleName = "cisco_ios_xr"
    adjacencies.EntityData.ParentYangName = "level"
    adjacencies.EntityData.SegmentPath = "adjacencies"
    adjacencies.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/" + adjacencies.EntityData.SegmentPath
    adjacencies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencies.EntityData.Children = types.NewOrderedMap()
    adjacencies.EntityData.Children.Append("adjacency", types.YChild{"Adjacency", nil})
    for i := range adjacencies.Adjacency {
        types.SetYListKey(adjacencies.Adjacency[i], i)
        adjacencies.EntityData.Children.Append(types.GetSegmentPath(adjacencies.Adjacency[i]), types.YChild{"Adjacency", adjacencies.Adjacency[i]})
    }
    adjacencies.EntityData.Leafs = types.NewOrderedMap()

    adjacencies.EntityData.YListKeys = []string {}

    return &(adjacencies.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency
// A single IS-IS adjacency
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // System ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    SystemId interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Neighbor system ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    AdjacencySystemId interface{}

    // Neighbor SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    AdjacencySnpa interface{}

    // Local interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    AdjacencyInterface interface{}

    // Link media type. The type is IsisMediaClass.
    AdjacencyMediaType interface{}

    // Adjacency state. The type is IsisAdjState.
    AdjacencyState interface{}

    // Adjacency IPv4 BFD state. The type is IsisAdjBfdState.
    AdjacencyBfdState interface{}

    // Adjacency IPv6 BFD state. The type is IsisAdjBfdState.
    AdjacencyIpv6bfdState interface{}

    // Is IPv4 BFD retry timer running. The type is bool.
    AdjIpv4bfdRetryRunning interface{}

    // Is IPv6 BFD retry timer running. The type is bool.
    AdjIpv6bfdRetryRunning interface{}

    // Time to expiration of IPv4 BFD retry timer (s). The type is interface{}
    // with range: 0..4294967295.
    AdjIpv4bfdRetryExp interface{}

    // Time to expiration of IPv6 BFD retry timer (s). The type is interface{}
    // with range: 0..4294967295.
    AdjIpv6bfdRetryExp interface{}

    // IPv4 BFD retry counter. The type is interface{} with range: 0..4294967295.
    AdjIpv4bfdRetryCount interface{}

    // IPv6 BFD retry counter. The type is interface{} with range: 0..4294967295.
    AdjIpv6bfdRetryCount interface{}

    // TRUE if AdjacencyUptime is set. The type is bool.
    AdjacencyUptimeValidFlag interface{}

    // How long the adjacency has been up (s). The type is interface{} with range:
    // 0..4294967295.
    AdjacencyUptime interface{}

    // Time (s) until adjacency declared down if no IIH received. The type is
    // interface{} with range: 0..4294967295.
    AdjacencyHoldtime interface{}

    // Adjacency checkpoint object ID. The type is interface{} with range:
    // 0..4294967295.
    AdjacencyCheckpointObjectId interface{}

    // TRUE if neighbor is IETF-NSF capable. The type is bool.
    AdjacencyIetfNsfCapableFlag interface{}

    // Priority of DIS on this LAN. Valid only if aj_media_class is
    // ISIS_MEDIA_CLASS_LAN. The type is interface{} with range: 0..255.
    AdjacencyDispriority interface{}

    // Neighbor IS priority. Valid only if aj_media_class is ISIS_MEDIA_CLASS_LAN.
    // The type is interface{} with range: 0..255.
    AdjacencyNeighborPriority interface{}

    // Local IS priority. Valid only if aj_media_class is ISIS_MEDIA_CLASS_LAN.
    // The type is interface{} with range: 0..255.
    AdjacencyLocalPriority interface{}

    // TRUE if local system is DIS. Valid only if AdjacencyMediaType is
    // ISIS_MEDIA_CLASS_LAN. The type is bool.
    LocalDisFlag interface{}

    // TRUE if neighbor is DIS. Valid only if AdjacencyMediaType is
    // ISIS_MEDIA_CLASS_LAN. The type is bool.
    NeighborDisFlag interface{}

    // ISIS NSR STANDBY. The type is interface{} with range: 0..255.
    NsrStandby interface{}

    // Area addresses active over this adjacency. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress.
    AdjacencyAreaAddress []*Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress

    // Per-topology data. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology.
    AdjacencyTopology []*Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology

    // Per-address-family data. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData.
    AdjacencyPerAddressFamilyData []*Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData
}

func (adjacency *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency) GetEntityData() *types.CommonEntityData {
    adjacency.EntityData.YFilter = adjacency.YFilter
    adjacency.EntityData.YangName = "adjacency"
    adjacency.EntityData.BundleName = "cisco_ios_xr"
    adjacency.EntityData.ParentYangName = "adjacencies"
    adjacency.EntityData.SegmentPath = "adjacency" + types.AddNoKeyToken(adjacency)
    adjacency.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/" + adjacency.EntityData.SegmentPath
    adjacency.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacency.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacency.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacency.EntityData.Children = types.NewOrderedMap()
    adjacency.EntityData.Children.Append("adjacency-area-address", types.YChild{"AdjacencyAreaAddress", nil})
    for i := range adjacency.AdjacencyAreaAddress {
        types.SetYListKey(adjacency.AdjacencyAreaAddress[i], i)
        adjacency.EntityData.Children.Append(types.GetSegmentPath(adjacency.AdjacencyAreaAddress[i]), types.YChild{"AdjacencyAreaAddress", adjacency.AdjacencyAreaAddress[i]})
    }
    adjacency.EntityData.Children.Append("adjacency-topology", types.YChild{"AdjacencyTopology", nil})
    for i := range adjacency.AdjacencyTopology {
        types.SetYListKey(adjacency.AdjacencyTopology[i], i)
        adjacency.EntityData.Children.Append(types.GetSegmentPath(adjacency.AdjacencyTopology[i]), types.YChild{"AdjacencyTopology", adjacency.AdjacencyTopology[i]})
    }
    adjacency.EntityData.Children.Append("adjacency-per-address-family-data", types.YChild{"AdjacencyPerAddressFamilyData", nil})
    for i := range adjacency.AdjacencyPerAddressFamilyData {
        types.SetYListKey(adjacency.AdjacencyPerAddressFamilyData[i], i)
        adjacency.EntityData.Children.Append(types.GetSegmentPath(adjacency.AdjacencyPerAddressFamilyData[i]), types.YChild{"AdjacencyPerAddressFamilyData", adjacency.AdjacencyPerAddressFamilyData[i]})
    }
    adjacency.EntityData.Leafs = types.NewOrderedMap()
    adjacency.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", adjacency.SystemId})
    adjacency.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", adjacency.InterfaceName})
    adjacency.EntityData.Leafs.Append("adjacency-system-id", types.YLeaf{"AdjacencySystemId", adjacency.AdjacencySystemId})
    adjacency.EntityData.Leafs.Append("adjacency-snpa", types.YLeaf{"AdjacencySnpa", adjacency.AdjacencySnpa})
    adjacency.EntityData.Leafs.Append("adjacency-interface", types.YLeaf{"AdjacencyInterface", adjacency.AdjacencyInterface})
    adjacency.EntityData.Leafs.Append("adjacency-media-type", types.YLeaf{"AdjacencyMediaType", adjacency.AdjacencyMediaType})
    adjacency.EntityData.Leafs.Append("adjacency-state", types.YLeaf{"AdjacencyState", adjacency.AdjacencyState})
    adjacency.EntityData.Leafs.Append("adjacency-bfd-state", types.YLeaf{"AdjacencyBfdState", adjacency.AdjacencyBfdState})
    adjacency.EntityData.Leafs.Append("adjacency-ipv6bfd-state", types.YLeaf{"AdjacencyIpv6bfdState", adjacency.AdjacencyIpv6bfdState})
    adjacency.EntityData.Leafs.Append("adj-ipv4bfd-retry-running", types.YLeaf{"AdjIpv4bfdRetryRunning", adjacency.AdjIpv4bfdRetryRunning})
    adjacency.EntityData.Leafs.Append("adj-ipv6bfd-retry-running", types.YLeaf{"AdjIpv6bfdRetryRunning", adjacency.AdjIpv6bfdRetryRunning})
    adjacency.EntityData.Leafs.Append("adj-ipv4bfd-retry-exp", types.YLeaf{"AdjIpv4bfdRetryExp", adjacency.AdjIpv4bfdRetryExp})
    adjacency.EntityData.Leafs.Append("adj-ipv6bfd-retry-exp", types.YLeaf{"AdjIpv6bfdRetryExp", adjacency.AdjIpv6bfdRetryExp})
    adjacency.EntityData.Leafs.Append("adj-ipv4bfd-retry-count", types.YLeaf{"AdjIpv4bfdRetryCount", adjacency.AdjIpv4bfdRetryCount})
    adjacency.EntityData.Leafs.Append("adj-ipv6bfd-retry-count", types.YLeaf{"AdjIpv6bfdRetryCount", adjacency.AdjIpv6bfdRetryCount})
    adjacency.EntityData.Leafs.Append("adjacency-uptime-valid-flag", types.YLeaf{"AdjacencyUptimeValidFlag", adjacency.AdjacencyUptimeValidFlag})
    adjacency.EntityData.Leafs.Append("adjacency-uptime", types.YLeaf{"AdjacencyUptime", adjacency.AdjacencyUptime})
    adjacency.EntityData.Leafs.Append("adjacency-holdtime", types.YLeaf{"AdjacencyHoldtime", adjacency.AdjacencyHoldtime})
    adjacency.EntityData.Leafs.Append("adjacency-checkpoint-object-id", types.YLeaf{"AdjacencyCheckpointObjectId", adjacency.AdjacencyCheckpointObjectId})
    adjacency.EntityData.Leafs.Append("adjacency-ietf-nsf-capable-flag", types.YLeaf{"AdjacencyIetfNsfCapableFlag", adjacency.AdjacencyIetfNsfCapableFlag})
    adjacency.EntityData.Leafs.Append("adjacency-dispriority", types.YLeaf{"AdjacencyDispriority", adjacency.AdjacencyDispriority})
    adjacency.EntityData.Leafs.Append("adjacency-neighbor-priority", types.YLeaf{"AdjacencyNeighborPriority", adjacency.AdjacencyNeighborPriority})
    adjacency.EntityData.Leafs.Append("adjacency-local-priority", types.YLeaf{"AdjacencyLocalPriority", adjacency.AdjacencyLocalPriority})
    adjacency.EntityData.Leafs.Append("local-dis-flag", types.YLeaf{"LocalDisFlag", adjacency.LocalDisFlag})
    adjacency.EntityData.Leafs.Append("neighbor-dis-flag", types.YLeaf{"NeighborDisFlag", adjacency.NeighborDisFlag})
    adjacency.EntityData.Leafs.Append("nsr-standby", types.YLeaf{"NsrStandby", adjacency.NsrStandby})

    adjacency.EntityData.YListKeys = []string {}

    return &(adjacency.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress
// Area addresses active over this adjacency
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is string with pattern: [a-fA-F0-9]{2}(\.[a-fA-F0-9]{4}){0,6}.
    Entry interface{}
}

func (adjacencyAreaAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyAreaAddress) GetEntityData() *types.CommonEntityData {
    adjacencyAreaAddress.EntityData.YFilter = adjacencyAreaAddress.YFilter
    adjacencyAreaAddress.EntityData.YangName = "adjacency-area-address"
    adjacencyAreaAddress.EntityData.BundleName = "cisco_ios_xr"
    adjacencyAreaAddress.EntityData.ParentYangName = "adjacency"
    adjacencyAreaAddress.EntityData.SegmentPath = "adjacency-area-address" + types.AddNoKeyToken(adjacencyAreaAddress)
    adjacencyAreaAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/" + adjacencyAreaAddress.EntityData.SegmentPath
    adjacencyAreaAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyAreaAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyAreaAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyAreaAddress.EntityData.Children = types.NewOrderedMap()
    adjacencyAreaAddress.EntityData.Leafs = types.NewOrderedMap()
    adjacencyAreaAddress.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", adjacencyAreaAddress.Entry})

    adjacencyAreaAddress.EntityData.YListKeys = []string {}

    return &(adjacencyAreaAddress.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology
// Per-topology data
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Status of topology in adjacency. The type is IsisAdjTopoStatus.
    TopologyStatus interface{}

    // TRUE if suppressed parallel point-to-point link. The type is bool.
    ParallelP2pLinkSuppressedFlag interface{}

    // Topology ID.
    Id Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology_Id
}

func (adjacencyTopology *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology) GetEntityData() *types.CommonEntityData {
    adjacencyTopology.EntityData.YFilter = adjacencyTopology.YFilter
    adjacencyTopology.EntityData.YangName = "adjacency-topology"
    adjacencyTopology.EntityData.BundleName = "cisco_ios_xr"
    adjacencyTopology.EntityData.ParentYangName = "adjacency"
    adjacencyTopology.EntityData.SegmentPath = "adjacency-topology" + types.AddNoKeyToken(adjacencyTopology)
    adjacencyTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/" + adjacencyTopology.EntityData.SegmentPath
    adjacencyTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyTopology.EntityData.Children = types.NewOrderedMap()
    adjacencyTopology.EntityData.Children.Append("id", types.YChild{"Id", &adjacencyTopology.Id})
    adjacencyTopology.EntityData.Leafs = types.NewOrderedMap()
    adjacencyTopology.EntityData.Leafs.Append("topology-status", types.YLeaf{"TopologyStatus", adjacencyTopology.TopologyStatus})
    adjacencyTopology.EntityData.Leafs.Append("parallel-p2p-link-suppressed-flag", types.YLeaf{"ParallelP2pLinkSuppressedFlag", adjacencyTopology.ParallelP2pLinkSuppressedFlag})

    adjacencyTopology.EntityData.YListKeys = []string {}

    return &(adjacencyTopology.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology_Id
// Topology ID
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology_Id struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF name. The type is IsisAfId.
    AfName interface{}

    // Sub-AF name. The type is IsisSubAfId.
    SafName interface{}

    // VRF Name. The type is string.
    VrfName interface{}

    // Topology Name. The type is string.
    TopologyName interface{}
}

func (id *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyTopology_Id) GetEntityData() *types.CommonEntityData {
    id.EntityData.YFilter = id.YFilter
    id.EntityData.YangName = "id"
    id.EntityData.BundleName = "cisco_ios_xr"
    id.EntityData.ParentYangName = "adjacency-topology"
    id.EntityData.SegmentPath = "id"
    id.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-topology/" + id.EntityData.SegmentPath
    id.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    id.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    id.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    id.EntityData.Children = types.NewOrderedMap()
    id.EntityData.Leafs = types.NewOrderedMap()
    id.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", id.AfName})
    id.EntityData.Leafs.Append("saf-name", types.YLeaf{"SafName", id.SafName})
    id.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", id.VrfName})
    id.EntityData.Leafs.Append("topology-name", types.YLeaf{"TopologyName", id.TopologyName})

    id.EntityData.YListKeys = []string {}

    return &(id.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData
// Per-address-family data
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // AFName. The type is IsisAfId.
    AfName interface{}

    // IPV4 neighbor info.
    Ipv4 Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4

    // IPV6 neighbor info.
    Ipv6 Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6
}

func (adjacencyPerAddressFamilyData *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData) GetEntityData() *types.CommonEntityData {
    adjacencyPerAddressFamilyData.EntityData.YFilter = adjacencyPerAddressFamilyData.YFilter
    adjacencyPerAddressFamilyData.EntityData.YangName = "adjacency-per-address-family-data"
    adjacencyPerAddressFamilyData.EntityData.BundleName = "cisco_ios_xr"
    adjacencyPerAddressFamilyData.EntityData.ParentYangName = "adjacency"
    adjacencyPerAddressFamilyData.EntityData.SegmentPath = "adjacency-per-address-family-data" + types.AddNoKeyToken(adjacencyPerAddressFamilyData)
    adjacencyPerAddressFamilyData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/" + adjacencyPerAddressFamilyData.EntityData.SegmentPath
    adjacencyPerAddressFamilyData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyPerAddressFamilyData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyPerAddressFamilyData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyPerAddressFamilyData.EntityData.Children = types.NewOrderedMap()
    adjacencyPerAddressFamilyData.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &adjacencyPerAddressFamilyData.Ipv4})
    adjacencyPerAddressFamilyData.EntityData.Children.Append("ipv6", types.YChild{"Ipv6", &adjacencyPerAddressFamilyData.Ipv6})
    adjacencyPerAddressFamilyData.EntityData.Leafs = types.NewOrderedMap()
    adjacencyPerAddressFamilyData.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", adjacencyPerAddressFamilyData.AfName})

    adjacencyPerAddressFamilyData.EntityData.YListKeys = []string {}

    return &(adjacencyPerAddressFamilyData.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4
// IPV4 neighbor info
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NextHop interface{}

    // Adjacency SID.
    AdjacencySid Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid

    // Adjacency SID not eligible for FRR protection.
    NonFrrAdjacencySid Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid

    // Adjacency interface addresses. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress.
    InterfaceAddress []*Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress

    // Per bundle member Adjacency sid. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid.
    UnderlyingAdjacencySid []*Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid

    // Underlying interface list for bundle interfaces. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface.
    UnderlyingInterface []*Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface
}

func (ipv4 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "adjacency-per-address-family-data"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Children.Append("adjacency-sid", types.YChild{"AdjacencySid", &ipv4.AdjacencySid})
    ipv4.EntityData.Children.Append("non-frr-adjacency-sid", types.YChild{"NonFrrAdjacencySid", &ipv4.NonFrrAdjacencySid})
    ipv4.EntityData.Children.Append("interface-address", types.YChild{"InterfaceAddress", nil})
    for i := range ipv4.InterfaceAddress {
        types.SetYListKey(ipv4.InterfaceAddress[i], i)
        ipv4.EntityData.Children.Append(types.GetSegmentPath(ipv4.InterfaceAddress[i]), types.YChild{"InterfaceAddress", ipv4.InterfaceAddress[i]})
    }
    ipv4.EntityData.Children.Append("underlying-adjacency-sid", types.YChild{"UnderlyingAdjacencySid", nil})
    for i := range ipv4.UnderlyingAdjacencySid {
        types.SetYListKey(ipv4.UnderlyingAdjacencySid[i], i)
        ipv4.EntityData.Children.Append(types.GetSegmentPath(ipv4.UnderlyingAdjacencySid[i]), types.YChild{"UnderlyingAdjacencySid", ipv4.UnderlyingAdjacencySid[i]})
    }
    ipv4.EntityData.Children.Append("underlying-interface", types.YChild{"UnderlyingInterface", nil})
    for i := range ipv4.UnderlyingInterface {
        types.SetYListKey(ipv4.UnderlyingInterface[i], i)
        ipv4.EntityData.Children.Append(types.GetSegmentPath(ipv4.UnderlyingInterface[i]), types.YChild{"UnderlyingInterface", ipv4.UnderlyingInterface[i]})
    }
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("next-hop", types.YLeaf{"NextHop", ipv4.NextHop})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid
// Adjacency SID
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency SID value. The type is interface{} with range: 0..4294967295.
    AdjacencySidValue interface{}

    // Adjacency SID Backup Info.
    AdjacencySidBackup Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup

    // Adjacency SID Backup Info TE.
    AdjacencySidBackupTe Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe
}

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid) GetEntityData() *types.CommonEntityData {
    adjacencySid.EntityData.YFilter = adjacencySid.YFilter
    adjacencySid.EntityData.YangName = "adjacency-sid"
    adjacencySid.EntityData.BundleName = "cisco_ios_xr"
    adjacencySid.EntityData.ParentYangName = "ipv4"
    adjacencySid.EntityData.SegmentPath = "adjacency-sid"
    adjacencySid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv4/" + adjacencySid.EntityData.SegmentPath
    adjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySid.EntityData.Children = types.NewOrderedMap()
    adjacencySid.EntityData.Children.Append("adjacency-sid-backup", types.YChild{"AdjacencySidBackup", &adjacencySid.AdjacencySidBackup})
    adjacencySid.EntityData.Children.Append("adjacency-sid-backup-te", types.YChild{"AdjacencySidBackupTe", &adjacencySid.AdjacencySidBackupTe})
    adjacencySid.EntityData.Leafs = types.NewOrderedMap()
    adjacencySid.EntityData.Leafs.Append("adjacency-sid-value", types.YLeaf{"AdjacencySidValue", adjacencySid.AdjacencySidValue})

    adjacencySid.EntityData.YListKeys = []string {}

    return &(adjacencySid.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup
// Adjacency SID Backup Info
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack.
    BackupLabelStack []*Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup) GetEntityData() *types.CommonEntityData {
    adjacencySidBackup.EntityData.YFilter = adjacencySidBackup.YFilter
    adjacencySidBackup.EntityData.YangName = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackup.EntityData.ParentYangName = "adjacency-sid"
    adjacencySidBackup.EntityData.SegmentPath = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv4/adjacency-sid/" + adjacencySidBackup.EntityData.SegmentPath
    adjacencySidBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackup.EntityData.Children = types.NewOrderedMap()
    adjacencySidBackup.EntityData.Children.Append("backup-label-stack", types.YChild{"BackupLabelStack", nil})
    for i := range adjacencySidBackup.BackupLabelStack {
        types.SetYListKey(adjacencySidBackup.BackupLabelStack[i], i)
        adjacencySidBackup.EntityData.Children.Append(types.GetSegmentPath(adjacencySidBackup.BackupLabelStack[i]), types.YChild{"BackupLabelStack", adjacencySidBackup.BackupLabelStack[i]})
    }
    adjacencySidBackup.EntityData.Leafs = types.NewOrderedMap()
    adjacencySidBackup.EntityData.Leafs.Append("backup-label-stack-size", types.YLeaf{"BackupLabelStackSize", adjacencySidBackup.BackupLabelStackSize})
    adjacencySidBackup.EntityData.Leafs.Append("backup-node-address", types.YLeaf{"BackupNodeAddress", adjacencySidBackup.BackupNodeAddress})
    adjacencySidBackup.EntityData.Leafs.Append("backup-nexthop", types.YLeaf{"BackupNexthop", adjacencySidBackup.BackupNexthop})
    adjacencySidBackup.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", adjacencySidBackup.BackupInterface})

    adjacencySidBackup.EntityData.YListKeys = []string {}

    return &(adjacencySidBackup.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack" + types.AddNoKeyToken(backupLabelStack)
    backupLabelStack.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv4/adjacency-sid/adjacency-sid-backup/" + backupLabelStack.EntityData.SegmentPath
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", backupLabelStack.Entry})

    backupLabelStack.EntityData.YListKeys = []string {}

    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe
// Adjacency SID Backup Info TE
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack.
    BackupLabelStack []*Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe) GetEntityData() *types.CommonEntityData {
    adjacencySidBackupTe.EntityData.YFilter = adjacencySidBackupTe.YFilter
    adjacencySidBackupTe.EntityData.YangName = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackupTe.EntityData.ParentYangName = "adjacency-sid"
    adjacencySidBackupTe.EntityData.SegmentPath = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv4/adjacency-sid/" + adjacencySidBackupTe.EntityData.SegmentPath
    adjacencySidBackupTe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackupTe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackupTe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackupTe.EntityData.Children = types.NewOrderedMap()
    adjacencySidBackupTe.EntityData.Children.Append("backup-label-stack", types.YChild{"BackupLabelStack", nil})
    for i := range adjacencySidBackupTe.BackupLabelStack {
        types.SetYListKey(adjacencySidBackupTe.BackupLabelStack[i], i)
        adjacencySidBackupTe.EntityData.Children.Append(types.GetSegmentPath(adjacencySidBackupTe.BackupLabelStack[i]), types.YChild{"BackupLabelStack", adjacencySidBackupTe.BackupLabelStack[i]})
    }
    adjacencySidBackupTe.EntityData.Leafs = types.NewOrderedMap()
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-label-stack-size", types.YLeaf{"BackupLabelStackSize", adjacencySidBackupTe.BackupLabelStackSize})
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-node-address", types.YLeaf{"BackupNodeAddress", adjacencySidBackupTe.BackupNodeAddress})
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-nexthop", types.YLeaf{"BackupNexthop", adjacencySidBackupTe.BackupNexthop})
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", adjacencySidBackupTe.BackupInterface})

    adjacencySidBackupTe.EntityData.YListKeys = []string {}

    return &(adjacencySidBackupTe.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup-te"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack" + types.AddNoKeyToken(backupLabelStack)
    backupLabelStack.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv4/adjacency-sid/adjacency-sid-backup-te/" + backupLabelStack.EntityData.SegmentPath
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", backupLabelStack.Entry})

    backupLabelStack.EntityData.YListKeys = []string {}

    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid
// Adjacency SID not eligible for FRR protection
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency SID value. The type is interface{} with range: 0..4294967295.
    AdjacencySidValue interface{}

    // Adjacency SID Backup Info.
    AdjacencySidBackup Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup

    // Adjacency SID Backup Info TE.
    AdjacencySidBackupTe Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid) GetEntityData() *types.CommonEntityData {
    nonFrrAdjacencySid.EntityData.YFilter = nonFrrAdjacencySid.YFilter
    nonFrrAdjacencySid.EntityData.YangName = "non-frr-adjacency-sid"
    nonFrrAdjacencySid.EntityData.BundleName = "cisco_ios_xr"
    nonFrrAdjacencySid.EntityData.ParentYangName = "ipv4"
    nonFrrAdjacencySid.EntityData.SegmentPath = "non-frr-adjacency-sid"
    nonFrrAdjacencySid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv4/" + nonFrrAdjacencySid.EntityData.SegmentPath
    nonFrrAdjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonFrrAdjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonFrrAdjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonFrrAdjacencySid.EntityData.Children = types.NewOrderedMap()
    nonFrrAdjacencySid.EntityData.Children.Append("adjacency-sid-backup", types.YChild{"AdjacencySidBackup", &nonFrrAdjacencySid.AdjacencySidBackup})
    nonFrrAdjacencySid.EntityData.Children.Append("adjacency-sid-backup-te", types.YChild{"AdjacencySidBackupTe", &nonFrrAdjacencySid.AdjacencySidBackupTe})
    nonFrrAdjacencySid.EntityData.Leafs = types.NewOrderedMap()
    nonFrrAdjacencySid.EntityData.Leafs.Append("adjacency-sid-value", types.YLeaf{"AdjacencySidValue", nonFrrAdjacencySid.AdjacencySidValue})

    nonFrrAdjacencySid.EntityData.YListKeys = []string {}

    return &(nonFrrAdjacencySid.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup
// Adjacency SID Backup Info
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack.
    BackupLabelStack []*Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup) GetEntityData() *types.CommonEntityData {
    adjacencySidBackup.EntityData.YFilter = adjacencySidBackup.YFilter
    adjacencySidBackup.EntityData.YangName = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackup.EntityData.ParentYangName = "non-frr-adjacency-sid"
    adjacencySidBackup.EntityData.SegmentPath = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv4/non-frr-adjacency-sid/" + adjacencySidBackup.EntityData.SegmentPath
    adjacencySidBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackup.EntityData.Children = types.NewOrderedMap()
    adjacencySidBackup.EntityData.Children.Append("backup-label-stack", types.YChild{"BackupLabelStack", nil})
    for i := range adjacencySidBackup.BackupLabelStack {
        types.SetYListKey(adjacencySidBackup.BackupLabelStack[i], i)
        adjacencySidBackup.EntityData.Children.Append(types.GetSegmentPath(adjacencySidBackup.BackupLabelStack[i]), types.YChild{"BackupLabelStack", adjacencySidBackup.BackupLabelStack[i]})
    }
    adjacencySidBackup.EntityData.Leafs = types.NewOrderedMap()
    adjacencySidBackup.EntityData.Leafs.Append("backup-label-stack-size", types.YLeaf{"BackupLabelStackSize", adjacencySidBackup.BackupLabelStackSize})
    adjacencySidBackup.EntityData.Leafs.Append("backup-node-address", types.YLeaf{"BackupNodeAddress", adjacencySidBackup.BackupNodeAddress})
    adjacencySidBackup.EntityData.Leafs.Append("backup-nexthop", types.YLeaf{"BackupNexthop", adjacencySidBackup.BackupNexthop})
    adjacencySidBackup.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", adjacencySidBackup.BackupInterface})

    adjacencySidBackup.EntityData.YListKeys = []string {}

    return &(adjacencySidBackup.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack" + types.AddNoKeyToken(backupLabelStack)
    backupLabelStack.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv4/non-frr-adjacency-sid/adjacency-sid-backup/" + backupLabelStack.EntityData.SegmentPath
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", backupLabelStack.Entry})

    backupLabelStack.EntityData.YListKeys = []string {}

    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe
// Adjacency SID Backup Info TE
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack.
    BackupLabelStack []*Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe) GetEntityData() *types.CommonEntityData {
    adjacencySidBackupTe.EntityData.YFilter = adjacencySidBackupTe.YFilter
    adjacencySidBackupTe.EntityData.YangName = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackupTe.EntityData.ParentYangName = "non-frr-adjacency-sid"
    adjacencySidBackupTe.EntityData.SegmentPath = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv4/non-frr-adjacency-sid/" + adjacencySidBackupTe.EntityData.SegmentPath
    adjacencySidBackupTe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackupTe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackupTe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackupTe.EntityData.Children = types.NewOrderedMap()
    adjacencySidBackupTe.EntityData.Children.Append("backup-label-stack", types.YChild{"BackupLabelStack", nil})
    for i := range adjacencySidBackupTe.BackupLabelStack {
        types.SetYListKey(adjacencySidBackupTe.BackupLabelStack[i], i)
        adjacencySidBackupTe.EntityData.Children.Append(types.GetSegmentPath(adjacencySidBackupTe.BackupLabelStack[i]), types.YChild{"BackupLabelStack", adjacencySidBackupTe.BackupLabelStack[i]})
    }
    adjacencySidBackupTe.EntityData.Leafs = types.NewOrderedMap()
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-label-stack-size", types.YLeaf{"BackupLabelStackSize", adjacencySidBackupTe.BackupLabelStackSize})
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-node-address", types.YLeaf{"BackupNodeAddress", adjacencySidBackupTe.BackupNodeAddress})
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-nexthop", types.YLeaf{"BackupNexthop", adjacencySidBackupTe.BackupNexthop})
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", adjacencySidBackupTe.BackupInterface})

    adjacencySidBackupTe.EntityData.YListKeys = []string {}

    return &(adjacencySidBackupTe.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup-te"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack" + types.AddNoKeyToken(backupLabelStack)
    backupLabelStack.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv4/non-frr-adjacency-sid/adjacency-sid-backup-te/" + backupLabelStack.EntityData.SegmentPath
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", backupLabelStack.Entry})

    backupLabelStack.EntityData.YListKeys = []string {}

    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress
// Adjacency interface addresses
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_InterfaceAddress) GetEntityData() *types.CommonEntityData {
    interfaceAddress.EntityData.YFilter = interfaceAddress.YFilter
    interfaceAddress.EntityData.YangName = "interface-address"
    interfaceAddress.EntityData.BundleName = "cisco_ios_xr"
    interfaceAddress.EntityData.ParentYangName = "ipv4"
    interfaceAddress.EntityData.SegmentPath = "interface-address" + types.AddNoKeyToken(interfaceAddress)
    interfaceAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv4/" + interfaceAddress.EntityData.SegmentPath
    interfaceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAddress.EntityData.Children = types.NewOrderedMap()
    interfaceAddress.EntityData.Leafs = types.NewOrderedMap()
    interfaceAddress.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", interfaceAddress.Entry})

    interfaceAddress.EntityData.YListKeys = []string {}

    return &(interfaceAddress.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid
// Per bundle member Adjacency sid
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingAdjacencySid) GetEntityData() *types.CommonEntityData {
    underlyingAdjacencySid.EntityData.YFilter = underlyingAdjacencySid.YFilter
    underlyingAdjacencySid.EntityData.YangName = "underlying-adjacency-sid"
    underlyingAdjacencySid.EntityData.BundleName = "cisco_ios_xr"
    underlyingAdjacencySid.EntityData.ParentYangName = "ipv4"
    underlyingAdjacencySid.EntityData.SegmentPath = "underlying-adjacency-sid" + types.AddNoKeyToken(underlyingAdjacencySid)
    underlyingAdjacencySid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv4/" + underlyingAdjacencySid.EntityData.SegmentPath
    underlyingAdjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    underlyingAdjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    underlyingAdjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    underlyingAdjacencySid.EntityData.Children = types.NewOrderedMap()
    underlyingAdjacencySid.EntityData.Leafs = types.NewOrderedMap()
    underlyingAdjacencySid.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", underlyingAdjacencySid.Entry})

    underlyingAdjacencySid.EntityData.YListKeys = []string {}

    return &(underlyingAdjacencySid.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface
// Underlying interface list for bundle interfaces
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Local interface handle. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv4_UnderlyingInterface) GetEntityData() *types.CommonEntityData {
    underlyingInterface.EntityData.YFilter = underlyingInterface.YFilter
    underlyingInterface.EntityData.YangName = "underlying-interface"
    underlyingInterface.EntityData.BundleName = "cisco_ios_xr"
    underlyingInterface.EntityData.ParentYangName = "ipv4"
    underlyingInterface.EntityData.SegmentPath = "underlying-interface" + types.AddNoKeyToken(underlyingInterface)
    underlyingInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv4/" + underlyingInterface.EntityData.SegmentPath
    underlyingInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    underlyingInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    underlyingInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    underlyingInterface.EntityData.Children = types.NewOrderedMap()
    underlyingInterface.EntityData.Leafs = types.NewOrderedMap()
    underlyingInterface.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", underlyingInterface.InterfaceIndex})
    underlyingInterface.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", underlyingInterface.InterfaceName})

    underlyingInterface.EntityData.YListKeys = []string {}

    return &(underlyingInterface.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6
// IPV6 neighbor info
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency next hop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHop interface{}

    // Adjacency SID.
    AdjacencySid Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid

    // Adjacency SID not eligible for FRR protection.
    NonFrrAdjacencySid Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid

    // SRv6 End.X SID.
    EndXsid Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_EndXsid

    // SRv6 End.X SID not eligible for FRR protection.
    NonFrrEndXsid Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrEndXsid

    // Adjacency interface addresses. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress.
    InterfaceAddress []*Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress

    // Per bundle member Adjacency sid. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid.
    UnderlyingAdjacencySid []*Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid

    // Underlying interface list for bundle interfaces. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface.
    UnderlyingInterface []*Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface
}

func (ipv6 *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6) GetEntityData() *types.CommonEntityData {
    ipv6.EntityData.YFilter = ipv6.YFilter
    ipv6.EntityData.YangName = "ipv6"
    ipv6.EntityData.BundleName = "cisco_ios_xr"
    ipv6.EntityData.ParentYangName = "adjacency-per-address-family-data"
    ipv6.EntityData.SegmentPath = "ipv6"
    ipv6.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/" + ipv6.EntityData.SegmentPath
    ipv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6.EntityData.Children = types.NewOrderedMap()
    ipv6.EntityData.Children.Append("adjacency-sid", types.YChild{"AdjacencySid", &ipv6.AdjacencySid})
    ipv6.EntityData.Children.Append("non-frr-adjacency-sid", types.YChild{"NonFrrAdjacencySid", &ipv6.NonFrrAdjacencySid})
    ipv6.EntityData.Children.Append("end-xsid", types.YChild{"EndXsid", &ipv6.EndXsid})
    ipv6.EntityData.Children.Append("non-frr-end-xsid", types.YChild{"NonFrrEndXsid", &ipv6.NonFrrEndXsid})
    ipv6.EntityData.Children.Append("interface-address", types.YChild{"InterfaceAddress", nil})
    for i := range ipv6.InterfaceAddress {
        types.SetYListKey(ipv6.InterfaceAddress[i], i)
        ipv6.EntityData.Children.Append(types.GetSegmentPath(ipv6.InterfaceAddress[i]), types.YChild{"InterfaceAddress", ipv6.InterfaceAddress[i]})
    }
    ipv6.EntityData.Children.Append("underlying-adjacency-sid", types.YChild{"UnderlyingAdjacencySid", nil})
    for i := range ipv6.UnderlyingAdjacencySid {
        types.SetYListKey(ipv6.UnderlyingAdjacencySid[i], i)
        ipv6.EntityData.Children.Append(types.GetSegmentPath(ipv6.UnderlyingAdjacencySid[i]), types.YChild{"UnderlyingAdjacencySid", ipv6.UnderlyingAdjacencySid[i]})
    }
    ipv6.EntityData.Children.Append("underlying-interface", types.YChild{"UnderlyingInterface", nil})
    for i := range ipv6.UnderlyingInterface {
        types.SetYListKey(ipv6.UnderlyingInterface[i], i)
        ipv6.EntityData.Children.Append(types.GetSegmentPath(ipv6.UnderlyingInterface[i]), types.YChild{"UnderlyingInterface", ipv6.UnderlyingInterface[i]})
    }
    ipv6.EntityData.Leafs = types.NewOrderedMap()
    ipv6.EntityData.Leafs.Append("next-hop", types.YLeaf{"NextHop", ipv6.NextHop})

    ipv6.EntityData.YListKeys = []string {}

    return &(ipv6.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid
// Adjacency SID
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency SID value. The type is interface{} with range: 0..4294967295.
    AdjacencySidValue interface{}

    // Adjacency SID Backup Info.
    AdjacencySidBackup Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup

    // Adjacency SID Backup Info TE.
    AdjacencySidBackupTe Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe
}

func (adjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid) GetEntityData() *types.CommonEntityData {
    adjacencySid.EntityData.YFilter = adjacencySid.YFilter
    adjacencySid.EntityData.YangName = "adjacency-sid"
    adjacencySid.EntityData.BundleName = "cisco_ios_xr"
    adjacencySid.EntityData.ParentYangName = "ipv6"
    adjacencySid.EntityData.SegmentPath = "adjacency-sid"
    adjacencySid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv6/" + adjacencySid.EntityData.SegmentPath
    adjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySid.EntityData.Children = types.NewOrderedMap()
    adjacencySid.EntityData.Children.Append("adjacency-sid-backup", types.YChild{"AdjacencySidBackup", &adjacencySid.AdjacencySidBackup})
    adjacencySid.EntityData.Children.Append("adjacency-sid-backup-te", types.YChild{"AdjacencySidBackupTe", &adjacencySid.AdjacencySidBackupTe})
    adjacencySid.EntityData.Leafs = types.NewOrderedMap()
    adjacencySid.EntityData.Leafs.Append("adjacency-sid-value", types.YLeaf{"AdjacencySidValue", adjacencySid.AdjacencySidValue})

    adjacencySid.EntityData.YListKeys = []string {}

    return &(adjacencySid.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup
// Adjacency SID Backup Info
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack.
    BackupLabelStack []*Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup) GetEntityData() *types.CommonEntityData {
    adjacencySidBackup.EntityData.YFilter = adjacencySidBackup.YFilter
    adjacencySidBackup.EntityData.YangName = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackup.EntityData.ParentYangName = "adjacency-sid"
    adjacencySidBackup.EntityData.SegmentPath = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv6/adjacency-sid/" + adjacencySidBackup.EntityData.SegmentPath
    adjacencySidBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackup.EntityData.Children = types.NewOrderedMap()
    adjacencySidBackup.EntityData.Children.Append("backup-label-stack", types.YChild{"BackupLabelStack", nil})
    for i := range adjacencySidBackup.BackupLabelStack {
        types.SetYListKey(adjacencySidBackup.BackupLabelStack[i], i)
        adjacencySidBackup.EntityData.Children.Append(types.GetSegmentPath(adjacencySidBackup.BackupLabelStack[i]), types.YChild{"BackupLabelStack", adjacencySidBackup.BackupLabelStack[i]})
    }
    adjacencySidBackup.EntityData.Leafs = types.NewOrderedMap()
    adjacencySidBackup.EntityData.Leafs.Append("backup-label-stack-size", types.YLeaf{"BackupLabelStackSize", adjacencySidBackup.BackupLabelStackSize})
    adjacencySidBackup.EntityData.Leafs.Append("backup-node-address", types.YLeaf{"BackupNodeAddress", adjacencySidBackup.BackupNodeAddress})
    adjacencySidBackup.EntityData.Leafs.Append("backup-nexthop", types.YLeaf{"BackupNexthop", adjacencySidBackup.BackupNexthop})
    adjacencySidBackup.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", adjacencySidBackup.BackupInterface})

    adjacencySidBackup.EntityData.YListKeys = []string {}

    return &(adjacencySidBackup.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackup_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack" + types.AddNoKeyToken(backupLabelStack)
    backupLabelStack.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv6/adjacency-sid/adjacency-sid-backup/" + backupLabelStack.EntityData.SegmentPath
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", backupLabelStack.Entry})

    backupLabelStack.EntityData.YListKeys = []string {}

    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe
// Adjacency SID Backup Info TE
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack.
    BackupLabelStack []*Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe) GetEntityData() *types.CommonEntityData {
    adjacencySidBackupTe.EntityData.YFilter = adjacencySidBackupTe.YFilter
    adjacencySidBackupTe.EntityData.YangName = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackupTe.EntityData.ParentYangName = "adjacency-sid"
    adjacencySidBackupTe.EntityData.SegmentPath = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv6/adjacency-sid/" + adjacencySidBackupTe.EntityData.SegmentPath
    adjacencySidBackupTe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackupTe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackupTe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackupTe.EntityData.Children = types.NewOrderedMap()
    adjacencySidBackupTe.EntityData.Children.Append("backup-label-stack", types.YChild{"BackupLabelStack", nil})
    for i := range adjacencySidBackupTe.BackupLabelStack {
        types.SetYListKey(adjacencySidBackupTe.BackupLabelStack[i], i)
        adjacencySidBackupTe.EntityData.Children.Append(types.GetSegmentPath(adjacencySidBackupTe.BackupLabelStack[i]), types.YChild{"BackupLabelStack", adjacencySidBackupTe.BackupLabelStack[i]})
    }
    adjacencySidBackupTe.EntityData.Leafs = types.NewOrderedMap()
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-label-stack-size", types.YLeaf{"BackupLabelStackSize", adjacencySidBackupTe.BackupLabelStackSize})
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-node-address", types.YLeaf{"BackupNodeAddress", adjacencySidBackupTe.BackupNodeAddress})
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-nexthop", types.YLeaf{"BackupNexthop", adjacencySidBackupTe.BackupNexthop})
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", adjacencySidBackupTe.BackupInterface})

    adjacencySidBackupTe.EntityData.YListKeys = []string {}

    return &(adjacencySidBackupTe.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_AdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup-te"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack" + types.AddNoKeyToken(backupLabelStack)
    backupLabelStack.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv6/adjacency-sid/adjacency-sid-backup-te/" + backupLabelStack.EntityData.SegmentPath
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", backupLabelStack.Entry})

    backupLabelStack.EntityData.YListKeys = []string {}

    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid
// Adjacency SID not eligible for FRR protection
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency SID value. The type is interface{} with range: 0..4294967295.
    AdjacencySidValue interface{}

    // Adjacency SID Backup Info.
    AdjacencySidBackup Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup

    // Adjacency SID Backup Info TE.
    AdjacencySidBackupTe Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe
}

func (nonFrrAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid) GetEntityData() *types.CommonEntityData {
    nonFrrAdjacencySid.EntityData.YFilter = nonFrrAdjacencySid.YFilter
    nonFrrAdjacencySid.EntityData.YangName = "non-frr-adjacency-sid"
    nonFrrAdjacencySid.EntityData.BundleName = "cisco_ios_xr"
    nonFrrAdjacencySid.EntityData.ParentYangName = "ipv6"
    nonFrrAdjacencySid.EntityData.SegmentPath = "non-frr-adjacency-sid"
    nonFrrAdjacencySid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv6/" + nonFrrAdjacencySid.EntityData.SegmentPath
    nonFrrAdjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonFrrAdjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonFrrAdjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonFrrAdjacencySid.EntityData.Children = types.NewOrderedMap()
    nonFrrAdjacencySid.EntityData.Children.Append("adjacency-sid-backup", types.YChild{"AdjacencySidBackup", &nonFrrAdjacencySid.AdjacencySidBackup})
    nonFrrAdjacencySid.EntityData.Children.Append("adjacency-sid-backup-te", types.YChild{"AdjacencySidBackupTe", &nonFrrAdjacencySid.AdjacencySidBackupTe})
    nonFrrAdjacencySid.EntityData.Leafs = types.NewOrderedMap()
    nonFrrAdjacencySid.EntityData.Leafs.Append("adjacency-sid-value", types.YLeaf{"AdjacencySidValue", nonFrrAdjacencySid.AdjacencySidValue})

    nonFrrAdjacencySid.EntityData.YListKeys = []string {}

    return &(nonFrrAdjacencySid.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup
// Adjacency SID Backup Info
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack.
    BackupLabelStack []*Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack
}

func (adjacencySidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup) GetEntityData() *types.CommonEntityData {
    adjacencySidBackup.EntityData.YFilter = adjacencySidBackup.YFilter
    adjacencySidBackup.EntityData.YangName = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackup.EntityData.ParentYangName = "non-frr-adjacency-sid"
    adjacencySidBackup.EntityData.SegmentPath = "adjacency-sid-backup"
    adjacencySidBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv6/non-frr-adjacency-sid/" + adjacencySidBackup.EntityData.SegmentPath
    adjacencySidBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackup.EntityData.Children = types.NewOrderedMap()
    adjacencySidBackup.EntityData.Children.Append("backup-label-stack", types.YChild{"BackupLabelStack", nil})
    for i := range adjacencySidBackup.BackupLabelStack {
        types.SetYListKey(adjacencySidBackup.BackupLabelStack[i], i)
        adjacencySidBackup.EntityData.Children.Append(types.GetSegmentPath(adjacencySidBackup.BackupLabelStack[i]), types.YChild{"BackupLabelStack", adjacencySidBackup.BackupLabelStack[i]})
    }
    adjacencySidBackup.EntityData.Leafs = types.NewOrderedMap()
    adjacencySidBackup.EntityData.Leafs.Append("backup-label-stack-size", types.YLeaf{"BackupLabelStackSize", adjacencySidBackup.BackupLabelStackSize})
    adjacencySidBackup.EntityData.Leafs.Append("backup-node-address", types.YLeaf{"BackupNodeAddress", adjacencySidBackup.BackupNodeAddress})
    adjacencySidBackup.EntityData.Leafs.Append("backup-nexthop", types.YLeaf{"BackupNexthop", adjacencySidBackup.BackupNexthop})
    adjacencySidBackup.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", adjacencySidBackup.BackupInterface})

    adjacencySidBackup.EntityData.YListKeys = []string {}

    return &(adjacencySidBackup.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackup_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack" + types.AddNoKeyToken(backupLabelStack)
    backupLabelStack.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv6/non-frr-adjacency-sid/adjacency-sid-backup/" + backupLabelStack.EntityData.SegmentPath
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", backupLabelStack.Entry})

    backupLabelStack.EntityData.YListKeys = []string {}

    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe
// Adjacency SID Backup Info TE
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of labels in the backup path label stack. The type is interface{}
    // with range: 0..255.
    BackupLabelStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    BackupInterface interface{}

    // Backup path label stack. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack.
    BackupLabelStack []*Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack
}

func (adjacencySidBackupTe *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe) GetEntityData() *types.CommonEntityData {
    adjacencySidBackupTe.EntityData.YFilter = adjacencySidBackupTe.YFilter
    adjacencySidBackupTe.EntityData.YangName = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.BundleName = "cisco_ios_xr"
    adjacencySidBackupTe.EntityData.ParentYangName = "non-frr-adjacency-sid"
    adjacencySidBackupTe.EntityData.SegmentPath = "adjacency-sid-backup-te"
    adjacencySidBackupTe.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv6/non-frr-adjacency-sid/" + adjacencySidBackupTe.EntityData.SegmentPath
    adjacencySidBackupTe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencySidBackupTe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencySidBackupTe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencySidBackupTe.EntityData.Children = types.NewOrderedMap()
    adjacencySidBackupTe.EntityData.Children.Append("backup-label-stack", types.YChild{"BackupLabelStack", nil})
    for i := range adjacencySidBackupTe.BackupLabelStack {
        types.SetYListKey(adjacencySidBackupTe.BackupLabelStack[i], i)
        adjacencySidBackupTe.EntityData.Children.Append(types.GetSegmentPath(adjacencySidBackupTe.BackupLabelStack[i]), types.YChild{"BackupLabelStack", adjacencySidBackupTe.BackupLabelStack[i]})
    }
    adjacencySidBackupTe.EntityData.Leafs = types.NewOrderedMap()
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-label-stack-size", types.YLeaf{"BackupLabelStackSize", adjacencySidBackupTe.BackupLabelStackSize})
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-node-address", types.YLeaf{"BackupNodeAddress", adjacencySidBackupTe.BackupNodeAddress})
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-nexthop", types.YLeaf{"BackupNexthop", adjacencySidBackupTe.BackupNexthop})
    adjacencySidBackupTe.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", adjacencySidBackupTe.BackupInterface})

    adjacencySidBackupTe.EntityData.YListKeys = []string {}

    return &(adjacencySidBackupTe.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack
// Backup path label stack
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (backupLabelStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrAdjacencySid_AdjacencySidBackupTe_BackupLabelStack) GetEntityData() *types.CommonEntityData {
    backupLabelStack.EntityData.YFilter = backupLabelStack.YFilter
    backupLabelStack.EntityData.YangName = "backup-label-stack"
    backupLabelStack.EntityData.BundleName = "cisco_ios_xr"
    backupLabelStack.EntityData.ParentYangName = "adjacency-sid-backup-te"
    backupLabelStack.EntityData.SegmentPath = "backup-label-stack" + types.AddNoKeyToken(backupLabelStack)
    backupLabelStack.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv6/non-frr-adjacency-sid/adjacency-sid-backup-te/" + backupLabelStack.EntityData.SegmentPath
    backupLabelStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupLabelStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupLabelStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupLabelStack.EntityData.Children = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs = types.NewOrderedMap()
    backupLabelStack.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", backupLabelStack.Entry})

    backupLabelStack.EntityData.YListKeys = []string {}

    return &(backupLabelStack.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_EndXsid
// SRv6 End.X SID
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_EndXsid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // End.X SID Function. The type is interface{} with range: 0..65535.
    EndXsidFunction interface{}

    // End.X SID value.
    EndXsid Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_EndXsid_EndXsid

    // End.X SID Backup Info.
    EndXsidBackup Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_EndXsid_EndXsidBackup
}

func (endXsid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_EndXsid) GetEntityData() *types.CommonEntityData {
    endXsid.EntityData.YFilter = endXsid.YFilter
    endXsid.EntityData.YangName = "end-xsid"
    endXsid.EntityData.BundleName = "cisco_ios_xr"
    endXsid.EntityData.ParentYangName = "ipv6"
    endXsid.EntityData.SegmentPath = "end-xsid"
    endXsid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv6/" + endXsid.EntityData.SegmentPath
    endXsid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    endXsid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    endXsid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    endXsid.EntityData.Children = types.NewOrderedMap()
    endXsid.EntityData.Children.Append("end-xsid", types.YChild{"EndXsid", &endXsid.EndXsid})
    endXsid.EntityData.Children.Append("end-xsid-backup", types.YChild{"EndXsidBackup", &endXsid.EndXsidBackup})
    endXsid.EntityData.Leafs = types.NewOrderedMap()
    endXsid.EntityData.Leafs.Append("end-xsid-function", types.YLeaf{"EndXsidFunction", endXsid.EndXsidFunction})

    endXsid.EntityData.YListKeys = []string {}

    return &(endXsid.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_EndXsid_EndXsid
// End.X SID value
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_EndXsid_EndXsid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (endXsid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_EndXsid_EndXsid) GetEntityData() *types.CommonEntityData {
    endXsid.EntityData.YFilter = endXsid.YFilter
    endXsid.EntityData.YangName = "end-xsid"
    endXsid.EntityData.BundleName = "cisco_ios_xr"
    endXsid.EntityData.ParentYangName = "end-xsid"
    endXsid.EntityData.SegmentPath = "end-xsid"
    endXsid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv6/end-xsid/" + endXsid.EntityData.SegmentPath
    endXsid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    endXsid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    endXsid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    endXsid.EntityData.Children = types.NewOrderedMap()
    endXsid.EntityData.Leafs = types.NewOrderedMap()
    endXsid.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", endXsid.Prefix})
    endXsid.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", endXsid.PrefixLength})

    endXsid.EntityData.YListKeys = []string {}

    return &(endXsid.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_EndXsid_EndXsidBackup
// End.X SID Backup Info
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_EndXsid_EndXsidBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of SIDs in the backup path stack. The type is interface{} with
    // range: 0..255.
    BackupStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    BackupInterface interface{}

    // Backup path SID stack. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_EndXsid_EndXsidBackup_BackupStack.
    BackupStack []*Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_EndXsid_EndXsidBackup_BackupStack
}

func (endXsidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_EndXsid_EndXsidBackup) GetEntityData() *types.CommonEntityData {
    endXsidBackup.EntityData.YFilter = endXsidBackup.YFilter
    endXsidBackup.EntityData.YangName = "end-xsid-backup"
    endXsidBackup.EntityData.BundleName = "cisco_ios_xr"
    endXsidBackup.EntityData.ParentYangName = "end-xsid"
    endXsidBackup.EntityData.SegmentPath = "end-xsid-backup"
    endXsidBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv6/end-xsid/" + endXsidBackup.EntityData.SegmentPath
    endXsidBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    endXsidBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    endXsidBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    endXsidBackup.EntityData.Children = types.NewOrderedMap()
    endXsidBackup.EntityData.Children.Append("backup-stack", types.YChild{"BackupStack", nil})
    for i := range endXsidBackup.BackupStack {
        types.SetYListKey(endXsidBackup.BackupStack[i], i)
        endXsidBackup.EntityData.Children.Append(types.GetSegmentPath(endXsidBackup.BackupStack[i]), types.YChild{"BackupStack", endXsidBackup.BackupStack[i]})
    }
    endXsidBackup.EntityData.Leafs = types.NewOrderedMap()
    endXsidBackup.EntityData.Leafs.Append("backup-stack-size", types.YLeaf{"BackupStackSize", endXsidBackup.BackupStackSize})
    endXsidBackup.EntityData.Leafs.Append("backup-node-address", types.YLeaf{"BackupNodeAddress", endXsidBackup.BackupNodeAddress})
    endXsidBackup.EntityData.Leafs.Append("backup-nexthop", types.YLeaf{"BackupNexthop", endXsidBackup.BackupNexthop})
    endXsidBackup.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", endXsidBackup.BackupInterface})

    endXsidBackup.EntityData.YListKeys = []string {}

    return &(endXsidBackup.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_EndXsid_EndXsidBackup_BackupStack
// Backup path SID stack
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_EndXsid_EndXsidBackup_BackupStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (backupStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_EndXsid_EndXsidBackup_BackupStack) GetEntityData() *types.CommonEntityData {
    backupStack.EntityData.YFilter = backupStack.YFilter
    backupStack.EntityData.YangName = "backup-stack"
    backupStack.EntityData.BundleName = "cisco_ios_xr"
    backupStack.EntityData.ParentYangName = "end-xsid-backup"
    backupStack.EntityData.SegmentPath = "backup-stack" + types.AddNoKeyToken(backupStack)
    backupStack.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv6/end-xsid/end-xsid-backup/" + backupStack.EntityData.SegmentPath
    backupStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupStack.EntityData.Children = types.NewOrderedMap()
    backupStack.EntityData.Leafs = types.NewOrderedMap()
    backupStack.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", backupStack.Prefix})
    backupStack.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", backupStack.PrefixLength})

    backupStack.EntityData.YListKeys = []string {}

    return &(backupStack.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrEndXsid
// SRv6 End.X SID not eligible for FRR protection
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrEndXsid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // End.X SID Function. The type is interface{} with range: 0..65535.
    EndXsidFunction interface{}

    // End.X SID value.
    EndXsid Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrEndXsid_EndXsid

    // End.X SID Backup Info.
    EndXsidBackup Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrEndXsid_EndXsidBackup
}

func (nonFrrEndXsid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrEndXsid) GetEntityData() *types.CommonEntityData {
    nonFrrEndXsid.EntityData.YFilter = nonFrrEndXsid.YFilter
    nonFrrEndXsid.EntityData.YangName = "non-frr-end-xsid"
    nonFrrEndXsid.EntityData.BundleName = "cisco_ios_xr"
    nonFrrEndXsid.EntityData.ParentYangName = "ipv6"
    nonFrrEndXsid.EntityData.SegmentPath = "non-frr-end-xsid"
    nonFrrEndXsid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv6/" + nonFrrEndXsid.EntityData.SegmentPath
    nonFrrEndXsid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonFrrEndXsid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonFrrEndXsid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonFrrEndXsid.EntityData.Children = types.NewOrderedMap()
    nonFrrEndXsid.EntityData.Children.Append("end-xsid", types.YChild{"EndXsid", &nonFrrEndXsid.EndXsid})
    nonFrrEndXsid.EntityData.Children.Append("end-xsid-backup", types.YChild{"EndXsidBackup", &nonFrrEndXsid.EndXsidBackup})
    nonFrrEndXsid.EntityData.Leafs = types.NewOrderedMap()
    nonFrrEndXsid.EntityData.Leafs.Append("end-xsid-function", types.YLeaf{"EndXsidFunction", nonFrrEndXsid.EndXsidFunction})

    nonFrrEndXsid.EntityData.YListKeys = []string {}

    return &(nonFrrEndXsid.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrEndXsid_EndXsid
// End.X SID value
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrEndXsid_EndXsid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (endXsid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrEndXsid_EndXsid) GetEntityData() *types.CommonEntityData {
    endXsid.EntityData.YFilter = endXsid.YFilter
    endXsid.EntityData.YangName = "end-xsid"
    endXsid.EntityData.BundleName = "cisco_ios_xr"
    endXsid.EntityData.ParentYangName = "non-frr-end-xsid"
    endXsid.EntityData.SegmentPath = "end-xsid"
    endXsid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv6/non-frr-end-xsid/" + endXsid.EntityData.SegmentPath
    endXsid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    endXsid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    endXsid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    endXsid.EntityData.Children = types.NewOrderedMap()
    endXsid.EntityData.Leafs = types.NewOrderedMap()
    endXsid.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", endXsid.Prefix})
    endXsid.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", endXsid.PrefixLength})

    endXsid.EntityData.YListKeys = []string {}

    return &(endXsid.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrEndXsid_EndXsidBackup
// End.X SID Backup Info
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrEndXsid_EndXsidBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of SIDs in the backup path stack. The type is interface{} with
    // range: 0..255.
    BackupStackSize interface{}

    // Neighbor address used as adjacency backup target. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNodeAddress interface{}

    // Backup path nexthop address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupNexthop interface{}

    // Backup path interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    BackupInterface interface{}

    // Backup path SID stack. The type is slice of
    // Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrEndXsid_EndXsidBackup_BackupStack.
    BackupStack []*Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrEndXsid_EndXsidBackup_BackupStack
}

func (endXsidBackup *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrEndXsid_EndXsidBackup) GetEntityData() *types.CommonEntityData {
    endXsidBackup.EntityData.YFilter = endXsidBackup.YFilter
    endXsidBackup.EntityData.YangName = "end-xsid-backup"
    endXsidBackup.EntityData.BundleName = "cisco_ios_xr"
    endXsidBackup.EntityData.ParentYangName = "non-frr-end-xsid"
    endXsidBackup.EntityData.SegmentPath = "end-xsid-backup"
    endXsidBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv6/non-frr-end-xsid/" + endXsidBackup.EntityData.SegmentPath
    endXsidBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    endXsidBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    endXsidBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    endXsidBackup.EntityData.Children = types.NewOrderedMap()
    endXsidBackup.EntityData.Children.Append("backup-stack", types.YChild{"BackupStack", nil})
    for i := range endXsidBackup.BackupStack {
        types.SetYListKey(endXsidBackup.BackupStack[i], i)
        endXsidBackup.EntityData.Children.Append(types.GetSegmentPath(endXsidBackup.BackupStack[i]), types.YChild{"BackupStack", endXsidBackup.BackupStack[i]})
    }
    endXsidBackup.EntityData.Leafs = types.NewOrderedMap()
    endXsidBackup.EntityData.Leafs.Append("backup-stack-size", types.YLeaf{"BackupStackSize", endXsidBackup.BackupStackSize})
    endXsidBackup.EntityData.Leafs.Append("backup-node-address", types.YLeaf{"BackupNodeAddress", endXsidBackup.BackupNodeAddress})
    endXsidBackup.EntityData.Leafs.Append("backup-nexthop", types.YLeaf{"BackupNexthop", endXsidBackup.BackupNexthop})
    endXsidBackup.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", endXsidBackup.BackupInterface})

    endXsidBackup.EntityData.YListKeys = []string {}

    return &(endXsidBackup.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrEndXsid_EndXsidBackup_BackupStack
// Backup path SID stack
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrEndXsid_EndXsidBackup_BackupStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (backupStack *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_NonFrrEndXsid_EndXsidBackup_BackupStack) GetEntityData() *types.CommonEntityData {
    backupStack.EntityData.YFilter = backupStack.YFilter
    backupStack.EntityData.YangName = "backup-stack"
    backupStack.EntityData.BundleName = "cisco_ios_xr"
    backupStack.EntityData.ParentYangName = "end-xsid-backup"
    backupStack.EntityData.SegmentPath = "backup-stack" + types.AddNoKeyToken(backupStack)
    backupStack.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv6/non-frr-end-xsid/end-xsid-backup/" + backupStack.EntityData.SegmentPath
    backupStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupStack.EntityData.Children = types.NewOrderedMap()
    backupStack.EntityData.Leafs = types.NewOrderedMap()
    backupStack.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", backupStack.Prefix})
    backupStack.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", backupStack.PrefixLength})

    backupStack.EntityData.YListKeys = []string {}

    return &(backupStack.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress
// Adjacency interface addresses
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (interfaceAddress *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_InterfaceAddress) GetEntityData() *types.CommonEntityData {
    interfaceAddress.EntityData.YFilter = interfaceAddress.YFilter
    interfaceAddress.EntityData.YangName = "interface-address"
    interfaceAddress.EntityData.BundleName = "cisco_ios_xr"
    interfaceAddress.EntityData.ParentYangName = "ipv6"
    interfaceAddress.EntityData.SegmentPath = "interface-address" + types.AddNoKeyToken(interfaceAddress)
    interfaceAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv6/" + interfaceAddress.EntityData.SegmentPath
    interfaceAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAddress.EntityData.Children = types.NewOrderedMap()
    interfaceAddress.EntityData.Leafs = types.NewOrderedMap()
    interfaceAddress.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", interfaceAddress.Entry})

    interfaceAddress.EntityData.YListKeys = []string {}

    return &(interfaceAddress.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid
// Per bundle member Adjacency sid
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (underlyingAdjacencySid *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingAdjacencySid) GetEntityData() *types.CommonEntityData {
    underlyingAdjacencySid.EntityData.YFilter = underlyingAdjacencySid.YFilter
    underlyingAdjacencySid.EntityData.YangName = "underlying-adjacency-sid"
    underlyingAdjacencySid.EntityData.BundleName = "cisco_ios_xr"
    underlyingAdjacencySid.EntityData.ParentYangName = "ipv6"
    underlyingAdjacencySid.EntityData.SegmentPath = "underlying-adjacency-sid" + types.AddNoKeyToken(underlyingAdjacencySid)
    underlyingAdjacencySid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv6/" + underlyingAdjacencySid.EntityData.SegmentPath
    underlyingAdjacencySid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    underlyingAdjacencySid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    underlyingAdjacencySid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    underlyingAdjacencySid.EntityData.Children = types.NewOrderedMap()
    underlyingAdjacencySid.EntityData.Leafs = types.NewOrderedMap()
    underlyingAdjacencySid.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", underlyingAdjacencySid.Entry})

    underlyingAdjacencySid.EntityData.YListKeys = []string {}

    return &(underlyingAdjacencySid.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface
// Underlying interface list for bundle interfaces
type Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Local interface handle. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (underlyingInterface *Isis_Instances_Instance_Levels_Level_Adjacencies_Adjacency_AdjacencyPerAddressFamilyData_Ipv6_UnderlyingInterface) GetEntityData() *types.CommonEntityData {
    underlyingInterface.EntityData.YFilter = underlyingInterface.YFilter
    underlyingInterface.EntityData.YangName = "underlying-interface"
    underlyingInterface.EntityData.BundleName = "cisco_ios_xr"
    underlyingInterface.EntityData.ParentYangName = "ipv6"
    underlyingInterface.EntityData.SegmentPath = "underlying-interface" + types.AddNoKeyToken(underlyingInterface)
    underlyingInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/adjacencies/adjacency/adjacency-per-address-family-data/ipv6/" + underlyingInterface.EntityData.SegmentPath
    underlyingInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    underlyingInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    underlyingInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    underlyingInterface.EntityData.Children = types.NewOrderedMap()
    underlyingInterface.EntityData.Leafs = types.NewOrderedMap()
    underlyingInterface.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", underlyingInterface.InterfaceIndex})
    underlyingInterface.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", underlyingInterface.InterfaceName})

    underlyingInterface.EntityData.YListKeys = []string {}

    return &(underlyingInterface.EntityData)
}

// Isis_Instances_Instance_Levels_Level_DetailedLsps
// Detailed LSP table. Use to retrieve LSPs
// with TLV content.
type Isis_Instances_Instance_Levels_Level_DetailedLsps struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An IS-IS LSP with detailed TLV data included. The type is slice of
    // Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp.
    DetailedLsp []*Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp
}

func (detailedLsps *Isis_Instances_Instance_Levels_Level_DetailedLsps) GetEntityData() *types.CommonEntityData {
    detailedLsps.EntityData.YFilter = detailedLsps.YFilter
    detailedLsps.EntityData.YangName = "detailed-lsps"
    detailedLsps.EntityData.BundleName = "cisco_ios_xr"
    detailedLsps.EntityData.ParentYangName = "level"
    detailedLsps.EntityData.SegmentPath = "detailed-lsps"
    detailedLsps.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/" + detailedLsps.EntityData.SegmentPath
    detailedLsps.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailedLsps.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailedLsps.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailedLsps.EntityData.Children = types.NewOrderedMap()
    detailedLsps.EntityData.Children.Append("detailed-lsp", types.YChild{"DetailedLsp", nil})
    for i := range detailedLsps.DetailedLsp {
        detailedLsps.EntityData.Children.Append(types.GetSegmentPath(detailedLsps.DetailedLsp[i]), types.YChild{"DetailedLsp", detailedLsps.DetailedLsp[i]})
    }
    detailedLsps.EntityData.Leafs = types.NewOrderedMap()

    detailedLsps.EntityData.YListKeys = []string {}

    return &(detailedLsps.EntityData)
}

// Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp
// An IS-IS LSP with detailed TLV data
// included
type Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. LSP ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    LspId interface{}

    // LSP as received/sent over the wire, starting from the LSP ID field. The
    // type is string with pattern: ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    LspBody interface{}

    // Information from the LSP header.
    LspHeaderData Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp_LspHeaderData
}

func (detailedLsp *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp) GetEntityData() *types.CommonEntityData {
    detailedLsp.EntityData.YFilter = detailedLsp.YFilter
    detailedLsp.EntityData.YangName = "detailed-lsp"
    detailedLsp.EntityData.BundleName = "cisco_ios_xr"
    detailedLsp.EntityData.ParentYangName = "detailed-lsps"
    detailedLsp.EntityData.SegmentPath = "detailed-lsp" + types.AddKeyToken(detailedLsp.LspId, "lsp-id")
    detailedLsp.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/detailed-lsps/" + detailedLsp.EntityData.SegmentPath
    detailedLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailedLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailedLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailedLsp.EntityData.Children = types.NewOrderedMap()
    detailedLsp.EntityData.Children.Append("lsp-header-data", types.YChild{"LspHeaderData", &detailedLsp.LspHeaderData})
    detailedLsp.EntityData.Leafs = types.NewOrderedMap()
    detailedLsp.EntityData.Leafs.Append("lsp-id", types.YLeaf{"LspId", detailedLsp.LspId})
    detailedLsp.EntityData.Leafs.Append("lsp-body", types.YLeaf{"LspBody", detailedLsp.LspBody})

    detailedLsp.EntityData.YListKeys = []string {"LspId"}

    return &(detailedLsp.EntityData)
}

// Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp_LspHeaderData
// Information from the LSP header
type Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp_LspHeaderData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LSP ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    LspId interface{}

    // TRUE if this is a locally generated LSP. The type is bool.
    LocalLspFlag interface{}

    // TRUE if this LSP has not expired. The type is bool.
    LspActiveFlag interface{}

    // Time, in seconds, until LSP expiry (if active) or deletion (if expired) .
    // The type is interface{} with range: 0..65535. Units are second.
    LspHoldtime interface{}

    // Time, in seconds, for the received LSP it will be zero for the local LSP .
    // The type is interface{} with range: 0..65535. Units are second.
    LspRcvdHoldtime interface{}

    // The LSP sequence number. The type is interface{} with range: 0..4294967295.
    LspSequenceNumber interface{}

    // The LSP checksum. The type is interface{} with range: 0..65535.
    LspChecksum interface{}

    // TRUE if partition repair is supported. The type is bool.
    LspPartitionRepairSupportedFlag interface{}

    // TRUE if attached bit is set. The type is bool.
    LspAttachedFlag interface{}

    // TRUE if the overload bit is set. The type is bool.
    LspOverloadedFlag interface{}

    // TRUE if the LSP is non-v1a, XXX for testing. The type is interface{} with
    // range: 0..65535.
    LspNonv1aFlag interface{}

    // The type of the IS sourcing the LSP. The type is IsisLevels.
    LspLevel interface{}

    // The total length of the LSP. The type is interface{} with range: 0..65535.
    LspLength interface{}

    // max area addresses. The type is interface{} with range: 0..255.
    MaxAreaAddresses interface{}

    // System Id length. The type is interface{} with range: 0..255.
    IdLength interface{}

    // isis version. The type is interface{} with range: 0..255.
    Version interface{}

    // isis version2. The type is interface{} with range: 0..255.
    Version2 interface{}
}

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_DetailedLsps_DetailedLsp_LspHeaderData) GetEntityData() *types.CommonEntityData {
    lspHeaderData.EntityData.YFilter = lspHeaderData.YFilter
    lspHeaderData.EntityData.YangName = "lsp-header-data"
    lspHeaderData.EntityData.BundleName = "cisco_ios_xr"
    lspHeaderData.EntityData.ParentYangName = "detailed-lsp"
    lspHeaderData.EntityData.SegmentPath = "lsp-header-data"
    lspHeaderData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/detailed-lsps/detailed-lsp/" + lspHeaderData.EntityData.SegmentPath
    lspHeaderData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lspHeaderData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lspHeaderData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lspHeaderData.EntityData.Children = types.NewOrderedMap()
    lspHeaderData.EntityData.Leafs = types.NewOrderedMap()
    lspHeaderData.EntityData.Leafs.Append("lsp-id", types.YLeaf{"LspId", lspHeaderData.LspId})
    lspHeaderData.EntityData.Leafs.Append("local-lsp-flag", types.YLeaf{"LocalLspFlag", lspHeaderData.LocalLspFlag})
    lspHeaderData.EntityData.Leafs.Append("lsp-active-flag", types.YLeaf{"LspActiveFlag", lspHeaderData.LspActiveFlag})
    lspHeaderData.EntityData.Leafs.Append("lsp-holdtime", types.YLeaf{"LspHoldtime", lspHeaderData.LspHoldtime})
    lspHeaderData.EntityData.Leafs.Append("lsp-rcvd-holdtime", types.YLeaf{"LspRcvdHoldtime", lspHeaderData.LspRcvdHoldtime})
    lspHeaderData.EntityData.Leafs.Append("lsp-sequence-number", types.YLeaf{"LspSequenceNumber", lspHeaderData.LspSequenceNumber})
    lspHeaderData.EntityData.Leafs.Append("lsp-checksum", types.YLeaf{"LspChecksum", lspHeaderData.LspChecksum})
    lspHeaderData.EntityData.Leafs.Append("lsp-partition-repair-supported-flag", types.YLeaf{"LspPartitionRepairSupportedFlag", lspHeaderData.LspPartitionRepairSupportedFlag})
    lspHeaderData.EntityData.Leafs.Append("lsp-attached-flag", types.YLeaf{"LspAttachedFlag", lspHeaderData.LspAttachedFlag})
    lspHeaderData.EntityData.Leafs.Append("lsp-overloaded-flag", types.YLeaf{"LspOverloadedFlag", lspHeaderData.LspOverloadedFlag})
    lspHeaderData.EntityData.Leafs.Append("lsp-nonv1a-flag", types.YLeaf{"LspNonv1aFlag", lspHeaderData.LspNonv1aFlag})
    lspHeaderData.EntityData.Leafs.Append("lsp-level", types.YLeaf{"LspLevel", lspHeaderData.LspLevel})
    lspHeaderData.EntityData.Leafs.Append("lsp-length", types.YLeaf{"LspLength", lspHeaderData.LspLength})
    lspHeaderData.EntityData.Leafs.Append("max-area-addresses", types.YLeaf{"MaxAreaAddresses", lspHeaderData.MaxAreaAddresses})
    lspHeaderData.EntityData.Leafs.Append("id-length", types.YLeaf{"IdLength", lspHeaderData.IdLength})
    lspHeaderData.EntityData.Leafs.Append("version", types.YLeaf{"Version", lspHeaderData.Version})
    lspHeaderData.EntityData.Leafs.Append("version2", types.YLeaf{"Version2", lspHeaderData.Version2})

    lspHeaderData.EntityData.YListKeys = []string {}

    return &(lspHeaderData.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Lsps
// LSP table
type Isis_Instances_Instance_Levels_Level_Lsps struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An IS-IS LSP (header information only). The type is slice of
    // Isis_Instances_Instance_Levels_Level_Lsps_Lsp.
    Lsp []*Isis_Instances_Instance_Levels_Level_Lsps_Lsp
}

func (lsps *Isis_Instances_Instance_Levels_Level_Lsps) GetEntityData() *types.CommonEntityData {
    lsps.EntityData.YFilter = lsps.YFilter
    lsps.EntityData.YangName = "lsps"
    lsps.EntityData.BundleName = "cisco_ios_xr"
    lsps.EntityData.ParentYangName = "level"
    lsps.EntityData.SegmentPath = "lsps"
    lsps.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/" + lsps.EntityData.SegmentPath
    lsps.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsps.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsps.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsps.EntityData.Children = types.NewOrderedMap()
    lsps.EntityData.Children.Append("lsp", types.YChild{"Lsp", nil})
    for i := range lsps.Lsp {
        lsps.EntityData.Children.Append(types.GetSegmentPath(lsps.Lsp[i]), types.YChild{"Lsp", lsps.Lsp[i]})
    }
    lsps.EntityData.Leafs = types.NewOrderedMap()

    lsps.EntityData.YListKeys = []string {}

    return &(lsps.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Lsps_Lsp
// An IS-IS LSP (header information only)
type Isis_Instances_Instance_Levels_Level_Lsps_Lsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. LSP ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    LspId interface{}

    // LSP as received/sent over the wire, starting from the LSP ID field. The
    // type is string with pattern: ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    LspBody interface{}

    // Information from the LSP header.
    LspHeaderData Isis_Instances_Instance_Levels_Level_Lsps_Lsp_LspHeaderData
}

func (lsp *Isis_Instances_Instance_Levels_Level_Lsps_Lsp) GetEntityData() *types.CommonEntityData {
    lsp.EntityData.YFilter = lsp.YFilter
    lsp.EntityData.YangName = "lsp"
    lsp.EntityData.BundleName = "cisco_ios_xr"
    lsp.EntityData.ParentYangName = "lsps"
    lsp.EntityData.SegmentPath = "lsp" + types.AddKeyToken(lsp.LspId, "lsp-id")
    lsp.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/lsps/" + lsp.EntityData.SegmentPath
    lsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsp.EntityData.Children = types.NewOrderedMap()
    lsp.EntityData.Children.Append("lsp-header-data", types.YChild{"LspHeaderData", &lsp.LspHeaderData})
    lsp.EntityData.Leafs = types.NewOrderedMap()
    lsp.EntityData.Leafs.Append("lsp-id", types.YLeaf{"LspId", lsp.LspId})
    lsp.EntityData.Leafs.Append("lsp-body", types.YLeaf{"LspBody", lsp.LspBody})

    lsp.EntityData.YListKeys = []string {"LspId"}

    return &(lsp.EntityData)
}

// Isis_Instances_Instance_Levels_Level_Lsps_Lsp_LspHeaderData
// Information from the LSP header
type Isis_Instances_Instance_Levels_Level_Lsps_Lsp_LspHeaderData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LSP ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    LspId interface{}

    // TRUE if this is a locally generated LSP. The type is bool.
    LocalLspFlag interface{}

    // TRUE if this LSP has not expired. The type is bool.
    LspActiveFlag interface{}

    // Time, in seconds, until LSP expiry (if active) or deletion (if expired) .
    // The type is interface{} with range: 0..65535. Units are second.
    LspHoldtime interface{}

    // Time, in seconds, for the received LSP it will be zero for the local LSP .
    // The type is interface{} with range: 0..65535. Units are second.
    LspRcvdHoldtime interface{}

    // The LSP sequence number. The type is interface{} with range: 0..4294967295.
    LspSequenceNumber interface{}

    // The LSP checksum. The type is interface{} with range: 0..65535.
    LspChecksum interface{}

    // TRUE if partition repair is supported. The type is bool.
    LspPartitionRepairSupportedFlag interface{}

    // TRUE if attached bit is set. The type is bool.
    LspAttachedFlag interface{}

    // TRUE if the overload bit is set. The type is bool.
    LspOverloadedFlag interface{}

    // TRUE if the LSP is non-v1a, XXX for testing. The type is interface{} with
    // range: 0..65535.
    LspNonv1aFlag interface{}

    // The type of the IS sourcing the LSP. The type is IsisLevels.
    LspLevel interface{}

    // The total length of the LSP. The type is interface{} with range: 0..65535.
    LspLength interface{}

    // max area addresses. The type is interface{} with range: 0..255.
    MaxAreaAddresses interface{}

    // System Id length. The type is interface{} with range: 0..255.
    IdLength interface{}

    // isis version. The type is interface{} with range: 0..255.
    Version interface{}

    // isis version2. The type is interface{} with range: 0..255.
    Version2 interface{}
}

func (lspHeaderData *Isis_Instances_Instance_Levels_Level_Lsps_Lsp_LspHeaderData) GetEntityData() *types.CommonEntityData {
    lspHeaderData.EntityData.YFilter = lspHeaderData.YFilter
    lspHeaderData.EntityData.YangName = "lsp-header-data"
    lspHeaderData.EntityData.BundleName = "cisco_ios_xr"
    lspHeaderData.EntityData.ParentYangName = "lsp"
    lspHeaderData.EntityData.SegmentPath = "lsp-header-data"
    lspHeaderData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/lsps/lsp/" + lspHeaderData.EntityData.SegmentPath
    lspHeaderData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lspHeaderData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lspHeaderData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lspHeaderData.EntityData.Children = types.NewOrderedMap()
    lspHeaderData.EntityData.Leafs = types.NewOrderedMap()
    lspHeaderData.EntityData.Leafs.Append("lsp-id", types.YLeaf{"LspId", lspHeaderData.LspId})
    lspHeaderData.EntityData.Leafs.Append("local-lsp-flag", types.YLeaf{"LocalLspFlag", lspHeaderData.LocalLspFlag})
    lspHeaderData.EntityData.Leafs.Append("lsp-active-flag", types.YLeaf{"LspActiveFlag", lspHeaderData.LspActiveFlag})
    lspHeaderData.EntityData.Leafs.Append("lsp-holdtime", types.YLeaf{"LspHoldtime", lspHeaderData.LspHoldtime})
    lspHeaderData.EntityData.Leafs.Append("lsp-rcvd-holdtime", types.YLeaf{"LspRcvdHoldtime", lspHeaderData.LspRcvdHoldtime})
    lspHeaderData.EntityData.Leafs.Append("lsp-sequence-number", types.YLeaf{"LspSequenceNumber", lspHeaderData.LspSequenceNumber})
    lspHeaderData.EntityData.Leafs.Append("lsp-checksum", types.YLeaf{"LspChecksum", lspHeaderData.LspChecksum})
    lspHeaderData.EntityData.Leafs.Append("lsp-partition-repair-supported-flag", types.YLeaf{"LspPartitionRepairSupportedFlag", lspHeaderData.LspPartitionRepairSupportedFlag})
    lspHeaderData.EntityData.Leafs.Append("lsp-attached-flag", types.YLeaf{"LspAttachedFlag", lspHeaderData.LspAttachedFlag})
    lspHeaderData.EntityData.Leafs.Append("lsp-overloaded-flag", types.YLeaf{"LspOverloadedFlag", lspHeaderData.LspOverloadedFlag})
    lspHeaderData.EntityData.Leafs.Append("lsp-nonv1a-flag", types.YLeaf{"LspNonv1aFlag", lspHeaderData.LspNonv1aFlag})
    lspHeaderData.EntityData.Leafs.Append("lsp-level", types.YLeaf{"LspLevel", lspHeaderData.LspLevel})
    lspHeaderData.EntityData.Leafs.Append("lsp-length", types.YLeaf{"LspLength", lspHeaderData.LspLength})
    lspHeaderData.EntityData.Leafs.Append("max-area-addresses", types.YLeaf{"MaxAreaAddresses", lspHeaderData.MaxAreaAddresses})
    lspHeaderData.EntityData.Leafs.Append("id-length", types.YLeaf{"IdLength", lspHeaderData.IdLength})
    lspHeaderData.EntityData.Leafs.Append("version", types.YLeaf{"Version", lspHeaderData.Version})
    lspHeaderData.EntityData.Leafs.Append("version2", types.YLeaf{"Version2", lspHeaderData.Version2})

    lspHeaderData.EntityData.YListKeys = []string {}

    return &(lspHeaderData.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspLog
// LSP-log for a single level
type Isis_Instances_Instance_Levels_Level_LspLog struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Log entries. The type is slice of
    // Isis_Instances_Instance_Levels_Level_LspLog_LogEntry.
    LogEntry []*Isis_Instances_Instance_Levels_Level_LspLog_LogEntry
}

func (lspLog *Isis_Instances_Instance_Levels_Level_LspLog) GetEntityData() *types.CommonEntityData {
    lspLog.EntityData.YFilter = lspLog.YFilter
    lspLog.EntityData.YangName = "lsp-log"
    lspLog.EntityData.BundleName = "cisco_ios_xr"
    lspLog.EntityData.ParentYangName = "level"
    lspLog.EntityData.SegmentPath = "lsp-log"
    lspLog.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/" + lspLog.EntityData.SegmentPath
    lspLog.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lspLog.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lspLog.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lspLog.EntityData.Children = types.NewOrderedMap()
    lspLog.EntityData.Children.Append("log-entry", types.YChild{"LogEntry", nil})
    for i := range lspLog.LogEntry {
        types.SetYListKey(lspLog.LogEntry[i], i)
        lspLog.EntityData.Children.Append(types.GetSegmentPath(lspLog.LogEntry[i]), types.YChild{"LogEntry", lspLog.LogEntry[i]})
    }
    lspLog.EntityData.Leafs = types.NewOrderedMap()

    lspLog.EntityData.YListKeys = []string {}

    return &(lspLog.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspLog_LogEntry
// Log entries
type Isis_Instances_Instance_Levels_Level_LspLog_LogEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Number of triggers on this run. May not be equal to the number of trigger
    // event types if one or more trigger events has occurred more than once. The
    // type is interface{} with range: 0..4294967295.
    TriggerCount interface{}

    // Number of delayed triggers. The type is interface{} with range:
    // 0..4294967295.
    DelayedTriggerCount interface{}

    // Appropriate interface, if any. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    LogInterface interface{}

    // Pseudo-node number. The type is interface{} with range: 0..255.
    PseudoNodeNumber interface{}

    // Generic entry data.
    GenericData Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData

    // Triggers applying to this log entry. The type is slice of
    // Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger.
    Trigger []*Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger
}

func (logEntry *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry) GetEntityData() *types.CommonEntityData {
    logEntry.EntityData.YFilter = logEntry.YFilter
    logEntry.EntityData.YangName = "log-entry"
    logEntry.EntityData.BundleName = "cisco_ios_xr"
    logEntry.EntityData.ParentYangName = "lsp-log"
    logEntry.EntityData.SegmentPath = "log-entry" + types.AddNoKeyToken(logEntry)
    logEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/lsp-log/" + logEntry.EntityData.SegmentPath
    logEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    logEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    logEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    logEntry.EntityData.Children = types.NewOrderedMap()
    logEntry.EntityData.Children.Append("generic-data", types.YChild{"GenericData", &logEntry.GenericData})
    logEntry.EntityData.Children.Append("trigger", types.YChild{"Trigger", nil})
    for i := range logEntry.Trigger {
        types.SetYListKey(logEntry.Trigger[i], i)
        logEntry.EntityData.Children.Append(types.GetSegmentPath(logEntry.Trigger[i]), types.YChild{"Trigger", logEntry.Trigger[i]})
    }
    logEntry.EntityData.Leafs = types.NewOrderedMap()
    logEntry.EntityData.Leafs.Append("trigger-count", types.YLeaf{"TriggerCount", logEntry.TriggerCount})
    logEntry.EntityData.Leafs.Append("delayed-trigger-count", types.YLeaf{"DelayedTriggerCount", logEntry.DelayedTriggerCount})
    logEntry.EntityData.Leafs.Append("log-interface", types.YLeaf{"LogInterface", logEntry.LogInterface})
    logEntry.EntityData.Leafs.Append("pseudo-node-number", types.YLeaf{"PseudoNodeNumber", logEntry.PseudoNodeNumber})

    logEntry.EntityData.YListKeys = []string {}

    return &(logEntry.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData
// Generic entry data
type Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in UTC relative to Jan 1st, 1970.
    Timestamp Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData_Timestamp
}

func (genericData *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData) GetEntityData() *types.CommonEntityData {
    genericData.EntityData.YFilter = genericData.YFilter
    genericData.EntityData.YangName = "generic-data"
    genericData.EntityData.BundleName = "cisco_ios_xr"
    genericData.EntityData.ParentYangName = "log-entry"
    genericData.EntityData.SegmentPath = "generic-data"
    genericData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/lsp-log/log-entry/" + genericData.EntityData.SegmentPath
    genericData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericData.EntityData.Children = types.NewOrderedMap()
    genericData.EntityData.Children.Append("timestamp", types.YChild{"Timestamp", &genericData.Timestamp})
    genericData.EntityData.Leafs = types.NewOrderedMap()

    genericData.EntityData.YListKeys = []string {}

    return &(genericData.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData_Timestamp
// Time in UTC relative to Jan 1st, 1970
type Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData_Timestamp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (timestamp *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_GenericData_Timestamp) GetEntityData() *types.CommonEntityData {
    timestamp.EntityData.YFilter = timestamp.YFilter
    timestamp.EntityData.YangName = "timestamp"
    timestamp.EntityData.BundleName = "cisco_ios_xr"
    timestamp.EntityData.ParentYangName = "generic-data"
    timestamp.EntityData.SegmentPath = "timestamp"
    timestamp.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/lsp-log/log-entry/generic-data/" + timestamp.EntityData.SegmentPath
    timestamp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timestamp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timestamp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timestamp.EntityData.Children = types.NewOrderedMap()
    timestamp.EntityData.Leafs = types.NewOrderedMap()
    timestamp.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", timestamp.Seconds})
    timestamp.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", timestamp.NanoSeconds})

    timestamp.EntityData.YListKeys = []string {}

    return &(timestamp.EntityData)
}

// Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger
// Triggers applying to this log entry.
type Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is IsisLspTrigger.
    Entry interface{}
}

func (trigger *Isis_Instances_Instance_Levels_Level_LspLog_LogEntry_Trigger) GetEntityData() *types.CommonEntityData {
    trigger.EntityData.YFilter = trigger.YFilter
    trigger.EntityData.YangName = "trigger"
    trigger.EntityData.BundleName = "cisco_ios_xr"
    trigger.EntityData.ParentYangName = "log-entry"
    trigger.EntityData.SegmentPath = "trigger" + types.AddNoKeyToken(trigger)
    trigger.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/lsp-log/log-entry/" + trigger.EntityData.SegmentPath
    trigger.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trigger.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trigger.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trigger.EntityData.Children = types.NewOrderedMap()
    trigger.EntityData.Leafs = types.NewOrderedMap()
    trigger.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", trigger.Entry})

    trigger.EntityData.YListKeys = []string {}

    return &(trigger.EntityData)
}

// Isis_Instances_Instance_Levels_Level_DatabaseLog
// Database-log for a single level
type Isis_Instances_Instance_Levels_Level_DatabaseLog struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entries. The type is slice of
    // Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry.
    LogEntry []*Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry
}

func (databaseLog *Isis_Instances_Instance_Levels_Level_DatabaseLog) GetEntityData() *types.CommonEntityData {
    databaseLog.EntityData.YFilter = databaseLog.YFilter
    databaseLog.EntityData.YangName = "database-log"
    databaseLog.EntityData.BundleName = "cisco_ios_xr"
    databaseLog.EntityData.ParentYangName = "level"
    databaseLog.EntityData.SegmentPath = "database-log"
    databaseLog.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/" + databaseLog.EntityData.SegmentPath
    databaseLog.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseLog.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseLog.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseLog.EntityData.Children = types.NewOrderedMap()
    databaseLog.EntityData.Children.Append("log-entry", types.YChild{"LogEntry", nil})
    for i := range databaseLog.LogEntry {
        types.SetYListKey(databaseLog.LogEntry[i], i)
        databaseLog.EntityData.Children.Append(types.GetSegmentPath(databaseLog.LogEntry[i]), types.YChild{"LogEntry", databaseLog.LogEntry[i]})
    }
    databaseLog.EntityData.Leafs = types.NewOrderedMap()

    databaseLog.EntityData.YListKeys = []string {}

    return &(databaseLog.EntityData)
}

// Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry
// Entries
type Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Operation applying to this entry. The type is IsisLspDbOp.
    LspdbOperation interface{}

    // Generic entry data.
    GenericData Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData

    // Entry being inserted or the updated version of an old entry.
    NewLspEntry Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_NewLspEntry

    // Entry being replaced.
    OldLspEntry Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_OldLspEntry
}

func (logEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry) GetEntityData() *types.CommonEntityData {
    logEntry.EntityData.YFilter = logEntry.YFilter
    logEntry.EntityData.YangName = "log-entry"
    logEntry.EntityData.BundleName = "cisco_ios_xr"
    logEntry.EntityData.ParentYangName = "database-log"
    logEntry.EntityData.SegmentPath = "log-entry" + types.AddNoKeyToken(logEntry)
    logEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/database-log/" + logEntry.EntityData.SegmentPath
    logEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    logEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    logEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    logEntry.EntityData.Children = types.NewOrderedMap()
    logEntry.EntityData.Children.Append("generic-data", types.YChild{"GenericData", &logEntry.GenericData})
    logEntry.EntityData.Children.Append("new-lsp-entry", types.YChild{"NewLspEntry", &logEntry.NewLspEntry})
    logEntry.EntityData.Children.Append("old-lsp-entry", types.YChild{"OldLspEntry", &logEntry.OldLspEntry})
    logEntry.EntityData.Leafs = types.NewOrderedMap()
    logEntry.EntityData.Leafs.Append("lspdb-operation", types.YLeaf{"LspdbOperation", logEntry.LspdbOperation})

    logEntry.EntityData.YListKeys = []string {}

    return &(logEntry.EntityData)
}

// Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData
// Generic entry data
type Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in UTC relative to Jan 1st, 1970.
    Timestamp Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData_Timestamp
}

func (genericData *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData) GetEntityData() *types.CommonEntityData {
    genericData.EntityData.YFilter = genericData.YFilter
    genericData.EntityData.YangName = "generic-data"
    genericData.EntityData.BundleName = "cisco_ios_xr"
    genericData.EntityData.ParentYangName = "log-entry"
    genericData.EntityData.SegmentPath = "generic-data"
    genericData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/database-log/log-entry/" + genericData.EntityData.SegmentPath
    genericData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericData.EntityData.Children = types.NewOrderedMap()
    genericData.EntityData.Children.Append("timestamp", types.YChild{"Timestamp", &genericData.Timestamp})
    genericData.EntityData.Leafs = types.NewOrderedMap()

    genericData.EntityData.YListKeys = []string {}

    return &(genericData.EntityData)
}

// Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData_Timestamp
// Time in UTC relative to Jan 1st, 1970
type Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData_Timestamp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (timestamp *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_GenericData_Timestamp) GetEntityData() *types.CommonEntityData {
    timestamp.EntityData.YFilter = timestamp.YFilter
    timestamp.EntityData.YangName = "timestamp"
    timestamp.EntityData.BundleName = "cisco_ios_xr"
    timestamp.EntityData.ParentYangName = "generic-data"
    timestamp.EntityData.SegmentPath = "timestamp"
    timestamp.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/database-log/log-entry/generic-data/" + timestamp.EntityData.SegmentPath
    timestamp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timestamp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timestamp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timestamp.EntityData.Children = types.NewOrderedMap()
    timestamp.EntityData.Leafs = types.NewOrderedMap()
    timestamp.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", timestamp.Seconds})
    timestamp.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", timestamp.NanoSeconds})

    timestamp.EntityData.YListKeys = []string {}

    return &(timestamp.EntityData)
}

// Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_NewLspEntry
// Entry being inserted or the updated version of
// an old entry.
type Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_NewLspEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LSP ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    LspId interface{}

    // TRUE if this is a locally generated LSP. The type is bool.
    LocalLspFlag interface{}

    // TRUE if this LSP has not expired. The type is bool.
    LspActiveFlag interface{}

    // Time, in seconds, until LSP expiry (if active) or deletion (if expired) .
    // The type is interface{} with range: 0..65535. Units are second.
    LspHoldtime interface{}

    // Time, in seconds, for the received LSP it will be zero for the local LSP .
    // The type is interface{} with range: 0..65535. Units are second.
    LspRcvdHoldtime interface{}

    // The LSP sequence number. The type is interface{} with range: 0..4294967295.
    LspSequenceNumber interface{}

    // The LSP checksum. The type is interface{} with range: 0..65535.
    LspChecksum interface{}

    // TRUE if partition repair is supported. The type is bool.
    LspPartitionRepairSupportedFlag interface{}

    // TRUE if attached bit is set. The type is bool.
    LspAttachedFlag interface{}

    // TRUE if the overload bit is set. The type is bool.
    LspOverloadedFlag interface{}

    // TRUE if the LSP is non-v1a, XXX for testing. The type is interface{} with
    // range: 0..65535.
    LspNonv1aFlag interface{}

    // The type of the IS sourcing the LSP. The type is IsisLevels.
    LspLevel interface{}

    // The total length of the LSP. The type is interface{} with range: 0..65535.
    LspLength interface{}

    // max area addresses. The type is interface{} with range: 0..255.
    MaxAreaAddresses interface{}

    // System Id length. The type is interface{} with range: 0..255.
    IdLength interface{}

    // isis version. The type is interface{} with range: 0..255.
    Version interface{}

    // isis version2. The type is interface{} with range: 0..255.
    Version2 interface{}
}

func (newLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_NewLspEntry) GetEntityData() *types.CommonEntityData {
    newLspEntry.EntityData.YFilter = newLspEntry.YFilter
    newLspEntry.EntityData.YangName = "new-lsp-entry"
    newLspEntry.EntityData.BundleName = "cisco_ios_xr"
    newLspEntry.EntityData.ParentYangName = "log-entry"
    newLspEntry.EntityData.SegmentPath = "new-lsp-entry"
    newLspEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/database-log/log-entry/" + newLspEntry.EntityData.SegmentPath
    newLspEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    newLspEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    newLspEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    newLspEntry.EntityData.Children = types.NewOrderedMap()
    newLspEntry.EntityData.Leafs = types.NewOrderedMap()
    newLspEntry.EntityData.Leafs.Append("lsp-id", types.YLeaf{"LspId", newLspEntry.LspId})
    newLspEntry.EntityData.Leafs.Append("local-lsp-flag", types.YLeaf{"LocalLspFlag", newLspEntry.LocalLspFlag})
    newLspEntry.EntityData.Leafs.Append("lsp-active-flag", types.YLeaf{"LspActiveFlag", newLspEntry.LspActiveFlag})
    newLspEntry.EntityData.Leafs.Append("lsp-holdtime", types.YLeaf{"LspHoldtime", newLspEntry.LspHoldtime})
    newLspEntry.EntityData.Leafs.Append("lsp-rcvd-holdtime", types.YLeaf{"LspRcvdHoldtime", newLspEntry.LspRcvdHoldtime})
    newLspEntry.EntityData.Leafs.Append("lsp-sequence-number", types.YLeaf{"LspSequenceNumber", newLspEntry.LspSequenceNumber})
    newLspEntry.EntityData.Leafs.Append("lsp-checksum", types.YLeaf{"LspChecksum", newLspEntry.LspChecksum})
    newLspEntry.EntityData.Leafs.Append("lsp-partition-repair-supported-flag", types.YLeaf{"LspPartitionRepairSupportedFlag", newLspEntry.LspPartitionRepairSupportedFlag})
    newLspEntry.EntityData.Leafs.Append("lsp-attached-flag", types.YLeaf{"LspAttachedFlag", newLspEntry.LspAttachedFlag})
    newLspEntry.EntityData.Leafs.Append("lsp-overloaded-flag", types.YLeaf{"LspOverloadedFlag", newLspEntry.LspOverloadedFlag})
    newLspEntry.EntityData.Leafs.Append("lsp-nonv1a-flag", types.YLeaf{"LspNonv1aFlag", newLspEntry.LspNonv1aFlag})
    newLspEntry.EntityData.Leafs.Append("lsp-level", types.YLeaf{"LspLevel", newLspEntry.LspLevel})
    newLspEntry.EntityData.Leafs.Append("lsp-length", types.YLeaf{"LspLength", newLspEntry.LspLength})
    newLspEntry.EntityData.Leafs.Append("max-area-addresses", types.YLeaf{"MaxAreaAddresses", newLspEntry.MaxAreaAddresses})
    newLspEntry.EntityData.Leafs.Append("id-length", types.YLeaf{"IdLength", newLspEntry.IdLength})
    newLspEntry.EntityData.Leafs.Append("version", types.YLeaf{"Version", newLspEntry.Version})
    newLspEntry.EntityData.Leafs.Append("version2", types.YLeaf{"Version2", newLspEntry.Version2})

    newLspEntry.EntityData.YListKeys = []string {}

    return &(newLspEntry.EntityData)
}

// Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_OldLspEntry
// Entry being replaced.
type Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_OldLspEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LSP ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    LspId interface{}

    // TRUE if this is a locally generated LSP. The type is bool.
    LocalLspFlag interface{}

    // TRUE if this LSP has not expired. The type is bool.
    LspActiveFlag interface{}

    // Time, in seconds, until LSP expiry (if active) or deletion (if expired) .
    // The type is interface{} with range: 0..65535. Units are second.
    LspHoldtime interface{}

    // Time, in seconds, for the received LSP it will be zero for the local LSP .
    // The type is interface{} with range: 0..65535. Units are second.
    LspRcvdHoldtime interface{}

    // The LSP sequence number. The type is interface{} with range: 0..4294967295.
    LspSequenceNumber interface{}

    // The LSP checksum. The type is interface{} with range: 0..65535.
    LspChecksum interface{}

    // TRUE if partition repair is supported. The type is bool.
    LspPartitionRepairSupportedFlag interface{}

    // TRUE if attached bit is set. The type is bool.
    LspAttachedFlag interface{}

    // TRUE if the overload bit is set. The type is bool.
    LspOverloadedFlag interface{}

    // TRUE if the LSP is non-v1a, XXX for testing. The type is interface{} with
    // range: 0..65535.
    LspNonv1aFlag interface{}

    // The type of the IS sourcing the LSP. The type is IsisLevels.
    LspLevel interface{}

    // The total length of the LSP. The type is interface{} with range: 0..65535.
    LspLength interface{}

    // max area addresses. The type is interface{} with range: 0..255.
    MaxAreaAddresses interface{}

    // System Id length. The type is interface{} with range: 0..255.
    IdLength interface{}

    // isis version. The type is interface{} with range: 0..255.
    Version interface{}

    // isis version2. The type is interface{} with range: 0..255.
    Version2 interface{}
}

func (oldLspEntry *Isis_Instances_Instance_Levels_Level_DatabaseLog_LogEntry_OldLspEntry) GetEntityData() *types.CommonEntityData {
    oldLspEntry.EntityData.YFilter = oldLspEntry.YFilter
    oldLspEntry.EntityData.YangName = "old-lsp-entry"
    oldLspEntry.EntityData.BundleName = "cisco_ios_xr"
    oldLspEntry.EntityData.ParentYangName = "log-entry"
    oldLspEntry.EntityData.SegmentPath = "old-lsp-entry"
    oldLspEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/levels/level/database-log/log-entry/" + oldLspEntry.EntityData.SegmentPath
    oldLspEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oldLspEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oldLspEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oldLspEntry.EntityData.Children = types.NewOrderedMap()
    oldLspEntry.EntityData.Leafs = types.NewOrderedMap()
    oldLspEntry.EntityData.Leafs.Append("lsp-id", types.YLeaf{"LspId", oldLspEntry.LspId})
    oldLspEntry.EntityData.Leafs.Append("local-lsp-flag", types.YLeaf{"LocalLspFlag", oldLspEntry.LocalLspFlag})
    oldLspEntry.EntityData.Leafs.Append("lsp-active-flag", types.YLeaf{"LspActiveFlag", oldLspEntry.LspActiveFlag})
    oldLspEntry.EntityData.Leafs.Append("lsp-holdtime", types.YLeaf{"LspHoldtime", oldLspEntry.LspHoldtime})
    oldLspEntry.EntityData.Leafs.Append("lsp-rcvd-holdtime", types.YLeaf{"LspRcvdHoldtime", oldLspEntry.LspRcvdHoldtime})
    oldLspEntry.EntityData.Leafs.Append("lsp-sequence-number", types.YLeaf{"LspSequenceNumber", oldLspEntry.LspSequenceNumber})
    oldLspEntry.EntityData.Leafs.Append("lsp-checksum", types.YLeaf{"LspChecksum", oldLspEntry.LspChecksum})
    oldLspEntry.EntityData.Leafs.Append("lsp-partition-repair-supported-flag", types.YLeaf{"LspPartitionRepairSupportedFlag", oldLspEntry.LspPartitionRepairSupportedFlag})
    oldLspEntry.EntityData.Leafs.Append("lsp-attached-flag", types.YLeaf{"LspAttachedFlag", oldLspEntry.LspAttachedFlag})
    oldLspEntry.EntityData.Leafs.Append("lsp-overloaded-flag", types.YLeaf{"LspOverloadedFlag", oldLspEntry.LspOverloadedFlag})
    oldLspEntry.EntityData.Leafs.Append("lsp-nonv1a-flag", types.YLeaf{"LspNonv1aFlag", oldLspEntry.LspNonv1aFlag})
    oldLspEntry.EntityData.Leafs.Append("lsp-level", types.YLeaf{"LspLevel", oldLspEntry.LspLevel})
    oldLspEntry.EntityData.Leafs.Append("lsp-length", types.YLeaf{"LspLength", oldLspEntry.LspLength})
    oldLspEntry.EntityData.Leafs.Append("max-area-addresses", types.YLeaf{"MaxAreaAddresses", oldLspEntry.MaxAreaAddresses})
    oldLspEntry.EntityData.Leafs.Append("id-length", types.YLeaf{"IdLength", oldLspEntry.IdLength})
    oldLspEntry.EntityData.Leafs.Append("version", types.YLeaf{"Version", oldLspEntry.Version})
    oldLspEntry.EntityData.Leafs.Append("version2", types.YLeaf{"Version2", oldLspEntry.Version2})

    oldLspEntry.EntityData.YListKeys = []string {}

    return &(oldLspEntry.EntityData)
}

// Isis_Instances_Instance_Topologies
// Topology table
type Isis_Instances_Instance_Topologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Per-topology data. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology.
    Topology []*Isis_Instances_Instance_Topologies_Topology
}

func (topologies *Isis_Instances_Instance_Topologies) GetEntityData() *types.CommonEntityData {
    topologies.EntityData.YFilter = topologies.YFilter
    topologies.EntityData.YangName = "topologies"
    topologies.EntityData.BundleName = "cisco_ios_xr"
    topologies.EntityData.ParentYangName = "instance"
    topologies.EntityData.SegmentPath = "topologies"
    topologies.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/" + topologies.EntityData.SegmentPath
    topologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topologies.EntityData.Children = types.NewOrderedMap()
    topologies.EntityData.Children.Append("topology", types.YChild{"Topology", nil})
    for i := range topologies.Topology {
        types.SetYListKey(topologies.Topology[i], i)
        topologies.EntityData.Children.Append(types.GetSegmentPath(topologies.Topology[i]), types.YChild{"Topology", topologies.Topology[i]})
    }
    topologies.EntityData.Leafs = types.NewOrderedMap()

    topologies.EntityData.YListKeys = []string {}

    return &(topologies.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology
// Per-topology data
type Isis_Instances_Instance_Topologies_Topology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Address family. The type is IsisAddressFamily.
    AfName interface{}

    // Sub address family. The type is IsisSubAddressFamily.
    SafName interface{}

    // Topology Name. The type is string with length: 1..32.
    TopologyName interface{}

    // IPv6 Flex-Algo local route tables.
    Ipv6FlexRouteTables Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables

    // FRR summary information for a particular IS-IS topology.
    FrrSummary Isis_Instances_Instance_Topologies_Topology_FrrSummary

    // SRv6 Locator Table.
    Srv6Locators Isis_Instances_Instance_Topologies_Topology_Srv6Locators

    // Per-topology level table.
    TopologyLevels Isis_Instances_Instance_Topologies_Topology_TopologyLevels

    // IPv6 local route.
    Ipv6Routes Isis_Instances_Instance_Topologies_Topology_Ipv6Routes

    // IPv6 FRR table.
    Ipv6frrBackups Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups

    // IPv4 FRR table.
    Ipv4frrBackups Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups

    // IPv4 Flex-Algo local route tables.
    Ipv4FlexRouteTables Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables

    // IPv4 local route table.
    Ipv4Routes Isis_Instances_Instance_Topologies_Topology_Ipv4Routes
}

func (topology *Isis_Instances_Instance_Topologies_Topology) GetEntityData() *types.CommonEntityData {
    topology.EntityData.YFilter = topology.YFilter
    topology.EntityData.YangName = "topology"
    topology.EntityData.BundleName = "cisco_ios_xr"
    topology.EntityData.ParentYangName = "topologies"
    topology.EntityData.SegmentPath = "topology" + types.AddNoKeyToken(topology)
    topology.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/" + topology.EntityData.SegmentPath
    topology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topology.EntityData.Children = types.NewOrderedMap()
    topology.EntityData.Children.Append("ipv6-flex-route-tables", types.YChild{"Ipv6FlexRouteTables", &topology.Ipv6FlexRouteTables})
    topology.EntityData.Children.Append("frr-summary", types.YChild{"FrrSummary", &topology.FrrSummary})
    topology.EntityData.Children.Append("srv6-locators", types.YChild{"Srv6Locators", &topology.Srv6Locators})
    topology.EntityData.Children.Append("topology-levels", types.YChild{"TopologyLevels", &topology.TopologyLevels})
    topology.EntityData.Children.Append("ipv6-routes", types.YChild{"Ipv6Routes", &topology.Ipv6Routes})
    topology.EntityData.Children.Append("ipv6frr-backups", types.YChild{"Ipv6frrBackups", &topology.Ipv6frrBackups})
    topology.EntityData.Children.Append("ipv4frr-backups", types.YChild{"Ipv4frrBackups", &topology.Ipv4frrBackups})
    topology.EntityData.Children.Append("ipv4-flex-route-tables", types.YChild{"Ipv4FlexRouteTables", &topology.Ipv4FlexRouteTables})
    topology.EntityData.Children.Append("ipv4-routes", types.YChild{"Ipv4Routes", &topology.Ipv4Routes})
    topology.EntityData.Leafs = types.NewOrderedMap()
    topology.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", topology.AfName})
    topology.EntityData.Leafs.Append("saf-name", types.YLeaf{"SafName", topology.SafName})
    topology.EntityData.Leafs.Append("topology-name", types.YLeaf{"TopologyName", topology.TopologyName})

    topology.EntityData.YListKeys = []string {}

    return &(topology.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables
// IPv6 Flex-Algo local route tables
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 Flex-Algo local route table. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable.
    Ipv6FlexRouteTable []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable
}

func (ipv6FlexRouteTables *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables) GetEntityData() *types.CommonEntityData {
    ipv6FlexRouteTables.EntityData.YFilter = ipv6FlexRouteTables.YFilter
    ipv6FlexRouteTables.EntityData.YangName = "ipv6-flex-route-tables"
    ipv6FlexRouteTables.EntityData.BundleName = "cisco_ios_xr"
    ipv6FlexRouteTables.EntityData.ParentYangName = "topology"
    ipv6FlexRouteTables.EntityData.SegmentPath = "ipv6-flex-route-tables"
    ipv6FlexRouteTables.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/" + ipv6FlexRouteTables.EntityData.SegmentPath
    ipv6FlexRouteTables.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6FlexRouteTables.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6FlexRouteTables.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6FlexRouteTables.EntityData.Children = types.NewOrderedMap()
    ipv6FlexRouteTables.EntityData.Children.Append("ipv6-flex-route-table", types.YChild{"Ipv6FlexRouteTable", nil})
    for i := range ipv6FlexRouteTables.Ipv6FlexRouteTable {
        ipv6FlexRouteTables.EntityData.Children.Append(types.GetSegmentPath(ipv6FlexRouteTables.Ipv6FlexRouteTable[i]), types.YChild{"Ipv6FlexRouteTable", ipv6FlexRouteTables.Ipv6FlexRouteTable[i]})
    }
    ipv6FlexRouteTables.EntityData.Leafs = types.NewOrderedMap()

    ipv6FlexRouteTables.EntityData.YListKeys = []string {}

    return &(ipv6FlexRouteTables.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable
// IPv6 Flex-Algo local route table
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Flex Algo. The type is interface{} with range:
    // 0..4294967295.
    FlexAlg interface{}

    // An IPv6 route known to IS-IS. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute.
    Ipv6FlexRoute []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute
}

func (ipv6FlexRouteTable *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable) GetEntityData() *types.CommonEntityData {
    ipv6FlexRouteTable.EntityData.YFilter = ipv6FlexRouteTable.YFilter
    ipv6FlexRouteTable.EntityData.YangName = "ipv6-flex-route-table"
    ipv6FlexRouteTable.EntityData.BundleName = "cisco_ios_xr"
    ipv6FlexRouteTable.EntityData.ParentYangName = "ipv6-flex-route-tables"
    ipv6FlexRouteTable.EntityData.SegmentPath = "ipv6-flex-route-table" + types.AddKeyToken(ipv6FlexRouteTable.FlexAlg, "flex-alg")
    ipv6FlexRouteTable.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/" + ipv6FlexRouteTable.EntityData.SegmentPath
    ipv6FlexRouteTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6FlexRouteTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6FlexRouteTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6FlexRouteTable.EntityData.Children = types.NewOrderedMap()
    ipv6FlexRouteTable.EntityData.Children.Append("ipv6-flex-route", types.YChild{"Ipv6FlexRoute", nil})
    for i := range ipv6FlexRouteTable.Ipv6FlexRoute {
        types.SetYListKey(ipv6FlexRouteTable.Ipv6FlexRoute[i], i)
        ipv6FlexRouteTable.EntityData.Children.Append(types.GetSegmentPath(ipv6FlexRouteTable.Ipv6FlexRoute[i]), types.YChild{"Ipv6FlexRoute", ipv6FlexRouteTable.Ipv6FlexRoute[i]})
    }
    ipv6FlexRouteTable.EntityData.Leafs = types.NewOrderedMap()
    ipv6FlexRouteTable.EntityData.Leafs.Append("flex-alg", types.YLeaf{"FlexAlg", ipv6FlexRouteTable.FlexAlg})

    ipv6FlexRouteTable.EntityData.YListKeys = []string {"FlexAlg"}

    return &(ipv6FlexRouteTable.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute
// An IPv6 route known to IS-IS
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Status of IS-IS directly connected routes to the prefix.
    ConnectedStatus Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_ConnectedStatus

    // Status of other protocols' routes redistributed into IS-IS.
    RedistributedStatus Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_RedistributedStatus

    // Status of native IS-IS routes to the prefix.
    NativeStatus Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus

    // Per level details of how the local system advertises the prefix. The type
    // is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_PerLevelAdvertisingDetail.
    PerLevelAdvertisingDetail []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_PerLevelAdvertisingDetail
}

func (ipv6FlexRoute *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute) GetEntityData() *types.CommonEntityData {
    ipv6FlexRoute.EntityData.YFilter = ipv6FlexRoute.YFilter
    ipv6FlexRoute.EntityData.YangName = "ipv6-flex-route"
    ipv6FlexRoute.EntityData.BundleName = "cisco_ios_xr"
    ipv6FlexRoute.EntityData.ParentYangName = "ipv6-flex-route-table"
    ipv6FlexRoute.EntityData.SegmentPath = "ipv6-flex-route" + types.AddNoKeyToken(ipv6FlexRoute)
    ipv6FlexRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/" + ipv6FlexRoute.EntityData.SegmentPath
    ipv6FlexRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6FlexRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6FlexRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6FlexRoute.EntityData.Children = types.NewOrderedMap()
    ipv6FlexRoute.EntityData.Children.Append("connected-status", types.YChild{"ConnectedStatus", &ipv6FlexRoute.ConnectedStatus})
    ipv6FlexRoute.EntityData.Children.Append("redistributed-status", types.YChild{"RedistributedStatus", &ipv6FlexRoute.RedistributedStatus})
    ipv6FlexRoute.EntityData.Children.Append("native-status", types.YChild{"NativeStatus", &ipv6FlexRoute.NativeStatus})
    ipv6FlexRoute.EntityData.Children.Append("per-level-advertising-detail", types.YChild{"PerLevelAdvertisingDetail", nil})
    for i := range ipv6FlexRoute.PerLevelAdvertisingDetail {
        types.SetYListKey(ipv6FlexRoute.PerLevelAdvertisingDetail[i], i)
        ipv6FlexRoute.EntityData.Children.Append(types.GetSegmentPath(ipv6FlexRoute.PerLevelAdvertisingDetail[i]), types.YChild{"PerLevelAdvertisingDetail", ipv6FlexRoute.PerLevelAdvertisingDetail[i]})
    }
    ipv6FlexRoute.EntityData.Leafs = types.NewOrderedMap()
    ipv6FlexRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6FlexRoute.Prefix})
    ipv6FlexRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6FlexRoute.PrefixLength})

    ipv6FlexRoute.EntityData.YListKeys = []string {}

    return &(ipv6FlexRoute.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_ConnectedStatus
// Status of IS-IS directly connected routes to the
// prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_ConnectedStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the directly connected prefix.
    ConnectedDetails Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_ConnectedStatus_ConnectedDetails
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_ConnectedStatus) GetEntityData() *types.CommonEntityData {
    connectedStatus.EntityData.YFilter = connectedStatus.YFilter
    connectedStatus.EntityData.YangName = "connected-status"
    connectedStatus.EntityData.BundleName = "cisco_ios_xr"
    connectedStatus.EntityData.ParentYangName = "ipv6-flex-route"
    connectedStatus.EntityData.SegmentPath = "connected-status"
    connectedStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/" + connectedStatus.EntityData.SegmentPath
    connectedStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedStatus.EntityData.Children = types.NewOrderedMap()
    connectedStatus.EntityData.Children.Append("connected-details", types.YChild{"ConnectedDetails", &connectedStatus.ConnectedDetails})
    connectedStatus.EntityData.Leafs = types.NewOrderedMap()
    connectedStatus.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", connectedStatus.IsValid})

    connectedStatus.EntityData.YListKeys = []string {}

    return &(connectedStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_ConnectedStatus_ConnectedDetails
// Details of the directly connected prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_ConnectedStatus_ConnectedDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interfaces. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_ConnectedStatus_ConnectedDetails_Interface.
    Interface []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_ConnectedStatus_ConnectedDetails_Interface
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_ConnectedStatus_ConnectedDetails) GetEntityData() *types.CommonEntityData {
    connectedDetails.EntityData.YFilter = connectedDetails.YFilter
    connectedDetails.EntityData.YangName = "connected-details"
    connectedDetails.EntityData.BundleName = "cisco_ios_xr"
    connectedDetails.EntityData.ParentYangName = "connected-status"
    connectedDetails.EntityData.SegmentPath = "connected-details"
    connectedDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/connected-status/" + connectedDetails.EntityData.SegmentPath
    connectedDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedDetails.EntityData.Children = types.NewOrderedMap()
    connectedDetails.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range connectedDetails.Interface {
        types.SetYListKey(connectedDetails.Interface[i], i)
        connectedDetails.EntityData.Children.Append(types.GetSegmentPath(connectedDetails.Interface[i]), types.YChild{"Interface", connectedDetails.Interface[i]})
    }
    connectedDetails.EntityData.Leafs = types.NewOrderedMap()

    connectedDetails.EntityData.YListKeys = []string {}

    return &(connectedDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_ConnectedStatus_ConnectedDetails_Interface
// Interfaces
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_ConnectedStatus_ConnectedDetails_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is string.
    Entry interface{}
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_ConnectedStatus_ConnectedDetails_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "connected-details"
    self.EntityData.SegmentPath = "interface" + types.AddNoKeyToken(self)
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/connected-status/connected-details/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", self.Entry})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_RedistributedStatus
// Status of other protocols' routes redistributed
// into IS-IS
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_RedistributedStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Per level details of the redistributed route.
    RedistributionDetails Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_RedistributedStatus_RedistributionDetails
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_RedistributedStatus) GetEntityData() *types.CommonEntityData {
    redistributedStatus.EntityData.YFilter = redistributedStatus.YFilter
    redistributedStatus.EntityData.YangName = "redistributed-status"
    redistributedStatus.EntityData.BundleName = "cisco_ios_xr"
    redistributedStatus.EntityData.ParentYangName = "ipv6-flex-route"
    redistributedStatus.EntityData.SegmentPath = "redistributed-status"
    redistributedStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/" + redistributedStatus.EntityData.SegmentPath
    redistributedStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributedStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributedStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributedStatus.EntityData.Children = types.NewOrderedMap()
    redistributedStatus.EntityData.Children.Append("redistribution-details", types.YChild{"RedistributionDetails", &redistributedStatus.RedistributionDetails})
    redistributedStatus.EntityData.Leafs = types.NewOrderedMap()
    redistributedStatus.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", redistributedStatus.IsValid})

    redistributedStatus.EntityData.YListKeys = []string {}

    return &(redistributedStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_RedistributedStatus_RedistributionDetails
// Per level details of the redistributed route
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_RedistributedStatus_RedistributionDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // isis sh route redist detail. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail.
    IsisShRouteRedistDetail []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_RedistributedStatus_RedistributionDetails) GetEntityData() *types.CommonEntityData {
    redistributionDetails.EntityData.YFilter = redistributionDetails.YFilter
    redistributionDetails.EntityData.YangName = "redistribution-details"
    redistributionDetails.EntityData.BundleName = "cisco_ios_xr"
    redistributionDetails.EntityData.ParentYangName = "redistributed-status"
    redistributionDetails.EntityData.SegmentPath = "redistribution-details"
    redistributionDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/redistributed-status/" + redistributionDetails.EntityData.SegmentPath
    redistributionDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributionDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributionDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributionDetails.EntityData.Children = types.NewOrderedMap()
    redistributionDetails.EntityData.Children.Append("isis-sh-route-redist-detail", types.YChild{"IsisShRouteRedistDetail", nil})
    for i := range redistributionDetails.IsisShRouteRedistDetail {
        types.SetYListKey(redistributionDetails.IsisShRouteRedistDetail[i], i)
        redistributionDetails.EntityData.Children.Append(types.GetSegmentPath(redistributionDetails.IsisShRouteRedistDetail[i]), types.YChild{"IsisShRouteRedistDetail", redistributionDetails.IsisShRouteRedistDetail[i]})
    }
    redistributionDetails.EntityData.Leafs = types.NewOrderedMap()

    redistributionDetails.EntityData.YListKeys = []string {}

    return &(redistributionDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
// isis sh route redist detail
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Level into which the route is redistributed. The type is IsisLevel.
    Level interface{}

    // Protocol redistributing the route.
    Owner Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetEntityData() *types.CommonEntityData {
    isisShRouteRedistDetail.EntityData.YFilter = isisShRouteRedistDetail.YFilter
    isisShRouteRedistDetail.EntityData.YangName = "isis-sh-route-redist-detail"
    isisShRouteRedistDetail.EntityData.BundleName = "cisco_ios_xr"
    isisShRouteRedistDetail.EntityData.ParentYangName = "redistribution-details"
    isisShRouteRedistDetail.EntityData.SegmentPath = "isis-sh-route-redist-detail" + types.AddNoKeyToken(isisShRouteRedistDetail)
    isisShRouteRedistDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/redistributed-status/redistribution-details/" + isisShRouteRedistDetail.EntityData.SegmentPath
    isisShRouteRedistDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isisShRouteRedistDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isisShRouteRedistDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isisShRouteRedistDetail.EntityData.Children = types.NewOrderedMap()
    isisShRouteRedistDetail.EntityData.Children.Append("owner", types.YChild{"Owner", &isisShRouteRedistDetail.Owner})
    isisShRouteRedistDetail.EntityData.Leafs = types.NewOrderedMap()
    isisShRouteRedistDetail.EntityData.Leafs.Append("level", types.YLeaf{"Level", isisShRouteRedistDetail.Level})

    isisShRouteRedistDetail.EntityData.YListKeys = []string {}

    return &(isisShRouteRedistDetail.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
// Protocol redistributing the route
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol. The type is IsisRedistProto.
    Protocol interface{}

    // IS-IS instance identifier. The type is string.
    IsisInstanceId interface{}

    // OSPF process identifier. The type is string.
    OspfProcessId interface{}

    // OSPFv3 process identifier. The type is string.
    Ospfv3ProcessId interface{}

    // BGP Autonomous System number. The type is string.
    BgpAsNumber interface{}

    // EIGRP Autonomous System number. The type is string.
    EigrpAsNumber interface{}

    // Application Name. The type is string.
    ApplicationName interface{}
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetEntityData() *types.CommonEntityData {
    owner.EntityData.YFilter = owner.YFilter
    owner.EntityData.YangName = "owner"
    owner.EntityData.BundleName = "cisco_ios_xr"
    owner.EntityData.ParentYangName = "isis-sh-route-redist-detail"
    owner.EntityData.SegmentPath = "owner"
    owner.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/redistributed-status/redistribution-details/isis-sh-route-redist-detail/" + owner.EntityData.SegmentPath
    owner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    owner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    owner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    owner.EntityData.Children = types.NewOrderedMap()
    owner.EntityData.Leafs = types.NewOrderedMap()
    owner.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", owner.Protocol})
    owner.EntityData.Leafs.Append("isis-instance-id", types.YLeaf{"IsisInstanceId", owner.IsisInstanceId})
    owner.EntityData.Leafs.Append("ospf-process-id", types.YLeaf{"OspfProcessId", owner.OspfProcessId})
    owner.EntityData.Leafs.Append("ospfv3-process-id", types.YLeaf{"Ospfv3ProcessId", owner.Ospfv3ProcessId})
    owner.EntityData.Leafs.Append("bgp-as-number", types.YLeaf{"BgpAsNumber", owner.BgpAsNumber})
    owner.EntityData.Leafs.Append("eigrp-as-number", types.YLeaf{"EigrpAsNumber", owner.EigrpAsNumber})
    owner.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", owner.ApplicationName})

    owner.EntityData.YListKeys = []string {}

    return &(owner.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus
// Status of native IS-IS routes to the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the native route.
    NativeDetails Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus) GetEntityData() *types.CommonEntityData {
    nativeStatus.EntityData.YFilter = nativeStatus.YFilter
    nativeStatus.EntityData.YangName = "native-status"
    nativeStatus.EntityData.BundleName = "cisco_ios_xr"
    nativeStatus.EntityData.ParentYangName = "ipv6-flex-route"
    nativeStatus.EntityData.SegmentPath = "native-status"
    nativeStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/" + nativeStatus.EntityData.SegmentPath
    nativeStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nativeStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nativeStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nativeStatus.EntityData.Children = types.NewOrderedMap()
    nativeStatus.EntityData.Children.Append("native-details", types.YChild{"NativeDetails", &nativeStatus.NativeDetails})
    nativeStatus.EntityData.Leafs = types.NewOrderedMap()
    nativeStatus.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", nativeStatus.IsValid})

    nativeStatus.EntityData.YListKeys = []string {}

    return &(nativeStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails
// Details of the native route
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Relative importance of the prefix. The type is IsisPrefixPriority.
    Priority interface{}

    // Prefix local label for SR-MPLS. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}

    // Primary paths to prefix.
    Primary Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary

    // Backup paths to prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup.
    Backup []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails) GetEntityData() *types.CommonEntityData {
    nativeDetails.EntityData.YFilter = nativeDetails.YFilter
    nativeDetails.EntityData.YangName = "native-details"
    nativeDetails.EntityData.BundleName = "cisco_ios_xr"
    nativeDetails.EntityData.ParentYangName = "native-status"
    nativeDetails.EntityData.SegmentPath = "native-details"
    nativeDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/" + nativeDetails.EntityData.SegmentPath
    nativeDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nativeDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nativeDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nativeDetails.EntityData.Children = types.NewOrderedMap()
    nativeDetails.EntityData.Children.Append("primary", types.YChild{"Primary", &nativeDetails.Primary})
    nativeDetails.EntityData.Children.Append("backup", types.YChild{"Backup", nil})
    for i := range nativeDetails.Backup {
        types.SetYListKey(nativeDetails.Backup[i], i)
        nativeDetails.EntityData.Children.Append(types.GetSegmentPath(nativeDetails.Backup[i]), types.YChild{"Backup", nativeDetails.Backup[i]})
    }
    nativeDetails.EntityData.Leafs = types.NewOrderedMap()
    nativeDetails.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", nativeDetails.Priority})
    nativeDetails.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", nativeDetails.LocalLabel})

    nativeDetails.EntityData.YListKeys = []string {}

    return &(nativeDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary
// Primary paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths.
    Paths []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop.
    UcmpNextHop []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath.
    MulticastPath []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath.
    SrtePath []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath.
    ExplicitPath []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Source.
    Source []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource.
    MulticastSource []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary) GetEntityData() *types.CommonEntityData {
    primary.EntityData.YFilter = primary.YFilter
    primary.EntityData.YangName = "primary"
    primary.EntityData.BundleName = "cisco_ios_xr"
    primary.EntityData.ParentYangName = "native-details"
    primary.EntityData.SegmentPath = "primary"
    primary.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/" + primary.EntityData.SegmentPath
    primary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    primary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    primary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    primary.EntityData.Children = types.NewOrderedMap()
    primary.EntityData.Children.Append("paths", types.YChild{"Paths", nil})
    for i := range primary.Paths {
        types.SetYListKey(primary.Paths[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.Paths[i]), types.YChild{"Paths", primary.Paths[i]})
    }
    primary.EntityData.Children.Append("ucmp-next-hop", types.YChild{"UcmpNextHop", nil})
    for i := range primary.UcmpNextHop {
        types.SetYListKey(primary.UcmpNextHop[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.UcmpNextHop[i]), types.YChild{"UcmpNextHop", primary.UcmpNextHop[i]})
    }
    primary.EntityData.Children.Append("multicast-path", types.YChild{"MulticastPath", nil})
    for i := range primary.MulticastPath {
        types.SetYListKey(primary.MulticastPath[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.MulticastPath[i]), types.YChild{"MulticastPath", primary.MulticastPath[i]})
    }
    primary.EntityData.Children.Append("srte-path", types.YChild{"SrtePath", nil})
    for i := range primary.SrtePath {
        types.SetYListKey(primary.SrtePath[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.SrtePath[i]), types.YChild{"SrtePath", primary.SrtePath[i]})
    }
    primary.EntityData.Children.Append("explicit-path", types.YChild{"ExplicitPath", nil})
    for i := range primary.ExplicitPath {
        types.SetYListKey(primary.ExplicitPath[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.ExplicitPath[i]), types.YChild{"ExplicitPath", primary.ExplicitPath[i]})
    }
    primary.EntityData.Children.Append("source", types.YChild{"Source", nil})
    for i := range primary.Source {
        types.SetYListKey(primary.Source[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.Source[i]), types.YChild{"Source", primary.Source[i]})
    }
    primary.EntityData.Children.Append("multicast-source", types.YChild{"MulticastSource", nil})
    for i := range primary.MulticastSource {
        types.SetYListKey(primary.MulticastSource[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.MulticastSource[i]), types.YChild{"MulticastSource", primary.MulticastSource[i]})
    }
    primary.EntityData.Leafs = types.NewOrderedMap()
    primary.EntityData.Leafs.Append("origin", types.YLeaf{"Origin", primary.Origin})
    primary.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", primary.Metric})
    primary.EntityData.Leafs.Append("multicast-metric", types.YLeaf{"MulticastMetric", primary.MulticastMetric})
    primary.EntityData.Leafs.Append("is-external-metric", types.YLeaf{"IsExternalMetric", primary.IsExternalMetric})
    primary.EntityData.Leafs.Append("administrative-distance", types.YLeaf{"AdministrativeDistance", primary.AdministrativeDistance})

    primary.EntityData.YListKeys = []string {}

    return &(primary.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths_Nnh
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "primary"
    paths.EntityData.SegmentPath = "paths" + types.AddNoKeyToken(paths)
    paths.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/" + paths.EntityData.SegmentPath
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = types.NewOrderedMap()
    paths.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &paths.FrrBackup})
    paths.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range paths.UloopExplicit {
        types.SetYListKey(paths.UloopExplicit[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.UloopExplicit[i]), types.YChild{"UloopExplicit", paths.UloopExplicit[i]})
    }
    paths.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range paths.Nnh {
        types.SetYListKey(paths.Nnh[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.Nnh[i]), types.YChild{"Nnh", paths.Nnh[i]})
    }
    paths.EntityData.Leafs = types.NewOrderedMap()
    paths.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", paths.NeighborId})
    paths.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", paths.EgressInterface})
    paths.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", paths.NeighborAddress})
    paths.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", paths.NeighborSnpa})
    paths.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", paths.Tag})
    paths.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", paths.TunnelInterface})
    paths.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", paths.SegmentRoutingSidValue})
    paths.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", paths.Weight})
    paths.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", paths.IsTeTunnelInterface})
    paths.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", paths.IsSrExcludeTunnelInterface})
    paths.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", paths.OutgoingLabel})

    paths.EntityData.YListKeys = []string {}

    return &(paths.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "paths"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/paths/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/paths/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/paths/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "paths"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/paths/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Paths_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "paths"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/paths/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetEntityData() *types.CommonEntityData {
    ucmpNextHop.EntityData.YFilter = ucmpNextHop.YFilter
    ucmpNextHop.EntityData.YangName = "ucmp-next-hop"
    ucmpNextHop.EntityData.BundleName = "cisco_ios_xr"
    ucmpNextHop.EntityData.ParentYangName = "primary"
    ucmpNextHop.EntityData.SegmentPath = "ucmp-next-hop" + types.AddNoKeyToken(ucmpNextHop)
    ucmpNextHop.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/" + ucmpNextHop.EntityData.SegmentPath
    ucmpNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ucmpNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ucmpNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ucmpNextHop.EntityData.Children = types.NewOrderedMap()
    ucmpNextHop.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &ucmpNextHop.FrrBackup})
    ucmpNextHop.EntityData.Leafs = types.NewOrderedMap()
    ucmpNextHop.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", ucmpNextHop.NeighborId})
    ucmpNextHop.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", ucmpNextHop.EgressInterface})
    ucmpNextHop.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", ucmpNextHop.NeighborAddress})
    ucmpNextHop.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", ucmpNextHop.NeighborSnpa})
    ucmpNextHop.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", ucmpNextHop.Tag})
    ucmpNextHop.EntityData.Leafs.Append("total-ucmp-distance", types.YLeaf{"TotalUcmpDistance", ucmpNextHop.TotalUcmpDistance})
    ucmpNextHop.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", ucmpNextHop.SegmentRoutingSidValue})
    ucmpNextHop.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", ucmpNextHop.Weight})
    ucmpNextHop.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", ucmpNextHop.IsTeTunnelInterface})
    ucmpNextHop.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", ucmpNextHop.IsSrExcludeTunnelInterface})
    ucmpNextHop.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", ucmpNextHop.OutgoingLabel})

    ucmpNextHop.EntityData.YListKeys = []string {}

    return &(ucmpNextHop.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "ucmp-next-hop"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/ucmp-next-hop/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/ucmp-next-hop/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/ucmp-next-hop/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath) GetEntityData() *types.CommonEntityData {
    multicastPath.EntityData.YFilter = multicastPath.YFilter
    multicastPath.EntityData.YangName = "multicast-path"
    multicastPath.EntityData.BundleName = "cisco_ios_xr"
    multicastPath.EntityData.ParentYangName = "primary"
    multicastPath.EntityData.SegmentPath = "multicast-path" + types.AddNoKeyToken(multicastPath)
    multicastPath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/" + multicastPath.EntityData.SegmentPath
    multicastPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastPath.EntityData.Children = types.NewOrderedMap()
    multicastPath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &multicastPath.FrrBackup})
    multicastPath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range multicastPath.UloopExplicit {
        types.SetYListKey(multicastPath.UloopExplicit[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.UloopExplicit[i]), types.YChild{"UloopExplicit", multicastPath.UloopExplicit[i]})
    }
    multicastPath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range multicastPath.Nnh {
        types.SetYListKey(multicastPath.Nnh[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.Nnh[i]), types.YChild{"Nnh", multicastPath.Nnh[i]})
    }
    multicastPath.EntityData.Leafs = types.NewOrderedMap()
    multicastPath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", multicastPath.NeighborId})
    multicastPath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", multicastPath.EgressInterface})
    multicastPath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", multicastPath.NeighborAddress})
    multicastPath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", multicastPath.NeighborSnpa})
    multicastPath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", multicastPath.Tag})
    multicastPath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", multicastPath.TunnelInterface})
    multicastPath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", multicastPath.SegmentRoutingSidValue})
    multicastPath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", multicastPath.Weight})
    multicastPath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", multicastPath.IsTeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", multicastPath.IsSrExcludeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", multicastPath.OutgoingLabel})

    multicastPath.EntityData.YListKeys = []string {}

    return &(multicastPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "multicast-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/multicast-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/multicast-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/multicast-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "multicast-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/multicast-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "multicast-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/multicast-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_Nnh
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath) GetEntityData() *types.CommonEntityData {
    srtePath.EntityData.YFilter = srtePath.YFilter
    srtePath.EntityData.YangName = "srte-path"
    srtePath.EntityData.BundleName = "cisco_ios_xr"
    srtePath.EntityData.ParentYangName = "primary"
    srtePath.EntityData.SegmentPath = "srte-path" + types.AddNoKeyToken(srtePath)
    srtePath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/" + srtePath.EntityData.SegmentPath
    srtePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srtePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srtePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srtePath.EntityData.Children = types.NewOrderedMap()
    srtePath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &srtePath.FrrBackup})
    srtePath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range srtePath.UloopExplicit {
        types.SetYListKey(srtePath.UloopExplicit[i], i)
        srtePath.EntityData.Children.Append(types.GetSegmentPath(srtePath.UloopExplicit[i]), types.YChild{"UloopExplicit", srtePath.UloopExplicit[i]})
    }
    srtePath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range srtePath.Nnh {
        types.SetYListKey(srtePath.Nnh[i], i)
        srtePath.EntityData.Children.Append(types.GetSegmentPath(srtePath.Nnh[i]), types.YChild{"Nnh", srtePath.Nnh[i]})
    }
    srtePath.EntityData.Leafs = types.NewOrderedMap()
    srtePath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", srtePath.NeighborId})
    srtePath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", srtePath.EgressInterface})
    srtePath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", srtePath.NeighborAddress})
    srtePath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", srtePath.NeighborSnpa})
    srtePath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", srtePath.Tag})
    srtePath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", srtePath.TunnelInterface})
    srtePath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", srtePath.SegmentRoutingSidValue})
    srtePath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", srtePath.Weight})
    srtePath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", srtePath.IsTeTunnelInterface})
    srtePath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", srtePath.IsSrExcludeTunnelInterface})
    srtePath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", srtePath.OutgoingLabel})

    srtePath.EntityData.YListKeys = []string {}

    return &(srtePath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "srte-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/srte-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/srte-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/srte-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "srte-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/srte-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "srte-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/srte-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath) GetEntityData() *types.CommonEntityData {
    explicitPath.EntityData.YFilter = explicitPath.YFilter
    explicitPath.EntityData.YangName = "explicit-path"
    explicitPath.EntityData.BundleName = "cisco_ios_xr"
    explicitPath.EntityData.ParentYangName = "primary"
    explicitPath.EntityData.SegmentPath = "explicit-path" + types.AddNoKeyToken(explicitPath)
    explicitPath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/" + explicitPath.EntityData.SegmentPath
    explicitPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitPath.EntityData.Children = types.NewOrderedMap()
    explicitPath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &explicitPath.FrrBackup})
    explicitPath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range explicitPath.UloopExplicit {
        types.SetYListKey(explicitPath.UloopExplicit[i], i)
        explicitPath.EntityData.Children.Append(types.GetSegmentPath(explicitPath.UloopExplicit[i]), types.YChild{"UloopExplicit", explicitPath.UloopExplicit[i]})
    }
    explicitPath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range explicitPath.Nnh {
        types.SetYListKey(explicitPath.Nnh[i], i)
        explicitPath.EntityData.Children.Append(types.GetSegmentPath(explicitPath.Nnh[i]), types.YChild{"Nnh", explicitPath.Nnh[i]})
    }
    explicitPath.EntityData.Leafs = types.NewOrderedMap()
    explicitPath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", explicitPath.NeighborId})
    explicitPath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", explicitPath.EgressInterface})
    explicitPath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", explicitPath.NeighborAddress})
    explicitPath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", explicitPath.NeighborSnpa})
    explicitPath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", explicitPath.Tag})
    explicitPath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", explicitPath.TunnelInterface})
    explicitPath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", explicitPath.SegmentRoutingSidValue})
    explicitPath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", explicitPath.Weight})
    explicitPath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", explicitPath.IsTeTunnelInterface})
    explicitPath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", explicitPath.IsSrExcludeTunnelInterface})
    explicitPath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", explicitPath.OutgoingLabel})

    explicitPath.EntityData.YListKeys = []string {}

    return &(explicitPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "explicit-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/explicit-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/explicit-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/explicit-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "explicit-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/explicit-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "explicit-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/explicit-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Source_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Source_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "primary"
    source.EntityData.SegmentPath = "source" + types.AddNoKeyToken(source)
    source.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/" + source.EntityData.SegmentPath
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = types.NewOrderedMap()
    source.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range source.Tags {
        types.SetYListKey(source.Tags[i], i)
        source.EntityData.Children.Append(types.GetSegmentPath(source.Tags[i]), types.YChild{"Tags", source.Tags[i]})
    }
    source.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range source.NodalSid {
        types.SetYListKey(source.NodalSid[i], i)
        source.EntityData.Children.Append(types.GetSegmentPath(source.NodalSid[i]), types.YChild{"NodalSid", source.NodalSid[i]})
    }
    source.EntityData.Leafs = types.NewOrderedMap()
    source.EntityData.Leafs.Append("source-lsp-id", types.YLeaf{"SourceLspId", source.SourceLspId})
    source.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", source.SourceAddress})

    source.EntityData.YListKeys = []string {}

    return &(source.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Source_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Source_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "source"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/source/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Source_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "source"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/source/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource) GetEntityData() *types.CommonEntityData {
    multicastSource.EntityData.YFilter = multicastSource.YFilter
    multicastSource.EntityData.YangName = "multicast-source"
    multicastSource.EntityData.BundleName = "cisco_ios_xr"
    multicastSource.EntityData.ParentYangName = "primary"
    multicastSource.EntityData.SegmentPath = "multicast-source" + types.AddNoKeyToken(multicastSource)
    multicastSource.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/" + multicastSource.EntityData.SegmentPath
    multicastSource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastSource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastSource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastSource.EntityData.Children = types.NewOrderedMap()
    multicastSource.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range multicastSource.Tags {
        types.SetYListKey(multicastSource.Tags[i], i)
        multicastSource.EntityData.Children.Append(types.GetSegmentPath(multicastSource.Tags[i]), types.YChild{"Tags", multicastSource.Tags[i]})
    }
    multicastSource.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range multicastSource.NodalSid {
        types.SetYListKey(multicastSource.NodalSid[i], i)
        multicastSource.EntityData.Children.Append(types.GetSegmentPath(multicastSource.NodalSid[i]), types.YChild{"NodalSid", multicastSource.NodalSid[i]})
    }
    multicastSource.EntityData.Leafs = types.NewOrderedMap()
    multicastSource.EntityData.Leafs.Append("source-lsp-id", types.YLeaf{"SourceLspId", multicastSource.SourceLspId})
    multicastSource.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", multicastSource.SourceAddress})

    multicastSource.EntityData.YListKeys = []string {}

    return &(multicastSource.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "multicast-source"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/multicast-source/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "multicast-source"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/primary/multicast-source/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup
// Backup paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths.
    Paths []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop.
    UcmpNextHop []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath.
    MulticastPath []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath.
    SrtePath []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath.
    ExplicitPath []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Source.
    Source []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource.
    MulticastSource []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup) GetEntityData() *types.CommonEntityData {
    backup.EntityData.YFilter = backup.YFilter
    backup.EntityData.YangName = "backup"
    backup.EntityData.BundleName = "cisco_ios_xr"
    backup.EntityData.ParentYangName = "native-details"
    backup.EntityData.SegmentPath = "backup" + types.AddNoKeyToken(backup)
    backup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/" + backup.EntityData.SegmentPath
    backup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backup.EntityData.Children = types.NewOrderedMap()
    backup.EntityData.Children.Append("paths", types.YChild{"Paths", nil})
    for i := range backup.Paths {
        types.SetYListKey(backup.Paths[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.Paths[i]), types.YChild{"Paths", backup.Paths[i]})
    }
    backup.EntityData.Children.Append("ucmp-next-hop", types.YChild{"UcmpNextHop", nil})
    for i := range backup.UcmpNextHop {
        types.SetYListKey(backup.UcmpNextHop[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.UcmpNextHop[i]), types.YChild{"UcmpNextHop", backup.UcmpNextHop[i]})
    }
    backup.EntityData.Children.Append("multicast-path", types.YChild{"MulticastPath", nil})
    for i := range backup.MulticastPath {
        types.SetYListKey(backup.MulticastPath[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.MulticastPath[i]), types.YChild{"MulticastPath", backup.MulticastPath[i]})
    }
    backup.EntityData.Children.Append("srte-path", types.YChild{"SrtePath", nil})
    for i := range backup.SrtePath {
        types.SetYListKey(backup.SrtePath[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.SrtePath[i]), types.YChild{"SrtePath", backup.SrtePath[i]})
    }
    backup.EntityData.Children.Append("explicit-path", types.YChild{"ExplicitPath", nil})
    for i := range backup.ExplicitPath {
        types.SetYListKey(backup.ExplicitPath[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.ExplicitPath[i]), types.YChild{"ExplicitPath", backup.ExplicitPath[i]})
    }
    backup.EntityData.Children.Append("source", types.YChild{"Source", nil})
    for i := range backup.Source {
        types.SetYListKey(backup.Source[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.Source[i]), types.YChild{"Source", backup.Source[i]})
    }
    backup.EntityData.Children.Append("multicast-source", types.YChild{"MulticastSource", nil})
    for i := range backup.MulticastSource {
        types.SetYListKey(backup.MulticastSource[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.MulticastSource[i]), types.YChild{"MulticastSource", backup.MulticastSource[i]})
    }
    backup.EntityData.Leafs = types.NewOrderedMap()
    backup.EntityData.Leafs.Append("origin", types.YLeaf{"Origin", backup.Origin})
    backup.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", backup.Metric})
    backup.EntityData.Leafs.Append("multicast-metric", types.YLeaf{"MulticastMetric", backup.MulticastMetric})
    backup.EntityData.Leafs.Append("is-external-metric", types.YLeaf{"IsExternalMetric", backup.IsExternalMetric})
    backup.EntityData.Leafs.Append("administrative-distance", types.YLeaf{"AdministrativeDistance", backup.AdministrativeDistance})

    backup.EntityData.YListKeys = []string {}

    return &(backup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths_Nnh
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "backup"
    paths.EntityData.SegmentPath = "paths" + types.AddNoKeyToken(paths)
    paths.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/" + paths.EntityData.SegmentPath
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = types.NewOrderedMap()
    paths.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &paths.FrrBackup})
    paths.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range paths.UloopExplicit {
        types.SetYListKey(paths.UloopExplicit[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.UloopExplicit[i]), types.YChild{"UloopExplicit", paths.UloopExplicit[i]})
    }
    paths.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range paths.Nnh {
        types.SetYListKey(paths.Nnh[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.Nnh[i]), types.YChild{"Nnh", paths.Nnh[i]})
    }
    paths.EntityData.Leafs = types.NewOrderedMap()
    paths.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", paths.NeighborId})
    paths.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", paths.EgressInterface})
    paths.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", paths.NeighborAddress})
    paths.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", paths.NeighborSnpa})
    paths.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", paths.Tag})
    paths.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", paths.TunnelInterface})
    paths.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", paths.SegmentRoutingSidValue})
    paths.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", paths.Weight})
    paths.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", paths.IsTeTunnelInterface})
    paths.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", paths.IsSrExcludeTunnelInterface})
    paths.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", paths.OutgoingLabel})

    paths.EntityData.YListKeys = []string {}

    return &(paths.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "paths"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/paths/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/paths/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/paths/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "paths"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/paths/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Paths_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "paths"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/paths/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetEntityData() *types.CommonEntityData {
    ucmpNextHop.EntityData.YFilter = ucmpNextHop.YFilter
    ucmpNextHop.EntityData.YangName = "ucmp-next-hop"
    ucmpNextHop.EntityData.BundleName = "cisco_ios_xr"
    ucmpNextHop.EntityData.ParentYangName = "backup"
    ucmpNextHop.EntityData.SegmentPath = "ucmp-next-hop" + types.AddNoKeyToken(ucmpNextHop)
    ucmpNextHop.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/" + ucmpNextHop.EntityData.SegmentPath
    ucmpNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ucmpNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ucmpNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ucmpNextHop.EntityData.Children = types.NewOrderedMap()
    ucmpNextHop.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &ucmpNextHop.FrrBackup})
    ucmpNextHop.EntityData.Leafs = types.NewOrderedMap()
    ucmpNextHop.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", ucmpNextHop.NeighborId})
    ucmpNextHop.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", ucmpNextHop.EgressInterface})
    ucmpNextHop.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", ucmpNextHop.NeighborAddress})
    ucmpNextHop.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", ucmpNextHop.NeighborSnpa})
    ucmpNextHop.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", ucmpNextHop.Tag})
    ucmpNextHop.EntityData.Leafs.Append("total-ucmp-distance", types.YLeaf{"TotalUcmpDistance", ucmpNextHop.TotalUcmpDistance})
    ucmpNextHop.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", ucmpNextHop.SegmentRoutingSidValue})
    ucmpNextHop.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", ucmpNextHop.Weight})
    ucmpNextHop.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", ucmpNextHop.IsTeTunnelInterface})
    ucmpNextHop.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", ucmpNextHop.IsSrExcludeTunnelInterface})
    ucmpNextHop.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", ucmpNextHop.OutgoingLabel})

    ucmpNextHop.EntityData.YListKeys = []string {}

    return &(ucmpNextHop.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "ucmp-next-hop"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/ucmp-next-hop/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/ucmp-next-hop/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/ucmp-next-hop/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath) GetEntityData() *types.CommonEntityData {
    multicastPath.EntityData.YFilter = multicastPath.YFilter
    multicastPath.EntityData.YangName = "multicast-path"
    multicastPath.EntityData.BundleName = "cisco_ios_xr"
    multicastPath.EntityData.ParentYangName = "backup"
    multicastPath.EntityData.SegmentPath = "multicast-path" + types.AddNoKeyToken(multicastPath)
    multicastPath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/" + multicastPath.EntityData.SegmentPath
    multicastPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastPath.EntityData.Children = types.NewOrderedMap()
    multicastPath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &multicastPath.FrrBackup})
    multicastPath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range multicastPath.UloopExplicit {
        types.SetYListKey(multicastPath.UloopExplicit[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.UloopExplicit[i]), types.YChild{"UloopExplicit", multicastPath.UloopExplicit[i]})
    }
    multicastPath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range multicastPath.Nnh {
        types.SetYListKey(multicastPath.Nnh[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.Nnh[i]), types.YChild{"Nnh", multicastPath.Nnh[i]})
    }
    multicastPath.EntityData.Leafs = types.NewOrderedMap()
    multicastPath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", multicastPath.NeighborId})
    multicastPath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", multicastPath.EgressInterface})
    multicastPath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", multicastPath.NeighborAddress})
    multicastPath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", multicastPath.NeighborSnpa})
    multicastPath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", multicastPath.Tag})
    multicastPath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", multicastPath.TunnelInterface})
    multicastPath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", multicastPath.SegmentRoutingSidValue})
    multicastPath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", multicastPath.Weight})
    multicastPath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", multicastPath.IsTeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", multicastPath.IsSrExcludeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", multicastPath.OutgoingLabel})

    multicastPath.EntityData.YListKeys = []string {}

    return &(multicastPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "multicast-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/multicast-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/multicast-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/multicast-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "multicast-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/multicast-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "multicast-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/multicast-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_Nnh
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath) GetEntityData() *types.CommonEntityData {
    srtePath.EntityData.YFilter = srtePath.YFilter
    srtePath.EntityData.YangName = "srte-path"
    srtePath.EntityData.BundleName = "cisco_ios_xr"
    srtePath.EntityData.ParentYangName = "backup"
    srtePath.EntityData.SegmentPath = "srte-path" + types.AddNoKeyToken(srtePath)
    srtePath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/" + srtePath.EntityData.SegmentPath
    srtePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srtePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srtePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srtePath.EntityData.Children = types.NewOrderedMap()
    srtePath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &srtePath.FrrBackup})
    srtePath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range srtePath.UloopExplicit {
        types.SetYListKey(srtePath.UloopExplicit[i], i)
        srtePath.EntityData.Children.Append(types.GetSegmentPath(srtePath.UloopExplicit[i]), types.YChild{"UloopExplicit", srtePath.UloopExplicit[i]})
    }
    srtePath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range srtePath.Nnh {
        types.SetYListKey(srtePath.Nnh[i], i)
        srtePath.EntityData.Children.Append(types.GetSegmentPath(srtePath.Nnh[i]), types.YChild{"Nnh", srtePath.Nnh[i]})
    }
    srtePath.EntityData.Leafs = types.NewOrderedMap()
    srtePath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", srtePath.NeighborId})
    srtePath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", srtePath.EgressInterface})
    srtePath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", srtePath.NeighborAddress})
    srtePath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", srtePath.NeighborSnpa})
    srtePath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", srtePath.Tag})
    srtePath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", srtePath.TunnelInterface})
    srtePath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", srtePath.SegmentRoutingSidValue})
    srtePath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", srtePath.Weight})
    srtePath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", srtePath.IsTeTunnelInterface})
    srtePath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", srtePath.IsSrExcludeTunnelInterface})
    srtePath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", srtePath.OutgoingLabel})

    srtePath.EntityData.YListKeys = []string {}

    return &(srtePath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "srte-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/srte-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/srte-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/srte-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "srte-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/srte-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "srte-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/srte-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath) GetEntityData() *types.CommonEntityData {
    explicitPath.EntityData.YFilter = explicitPath.YFilter
    explicitPath.EntityData.YangName = "explicit-path"
    explicitPath.EntityData.BundleName = "cisco_ios_xr"
    explicitPath.EntityData.ParentYangName = "backup"
    explicitPath.EntityData.SegmentPath = "explicit-path" + types.AddNoKeyToken(explicitPath)
    explicitPath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/" + explicitPath.EntityData.SegmentPath
    explicitPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitPath.EntityData.Children = types.NewOrderedMap()
    explicitPath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &explicitPath.FrrBackup})
    explicitPath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range explicitPath.UloopExplicit {
        types.SetYListKey(explicitPath.UloopExplicit[i], i)
        explicitPath.EntityData.Children.Append(types.GetSegmentPath(explicitPath.UloopExplicit[i]), types.YChild{"UloopExplicit", explicitPath.UloopExplicit[i]})
    }
    explicitPath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range explicitPath.Nnh {
        types.SetYListKey(explicitPath.Nnh[i], i)
        explicitPath.EntityData.Children.Append(types.GetSegmentPath(explicitPath.Nnh[i]), types.YChild{"Nnh", explicitPath.Nnh[i]})
    }
    explicitPath.EntityData.Leafs = types.NewOrderedMap()
    explicitPath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", explicitPath.NeighborId})
    explicitPath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", explicitPath.EgressInterface})
    explicitPath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", explicitPath.NeighborAddress})
    explicitPath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", explicitPath.NeighborSnpa})
    explicitPath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", explicitPath.Tag})
    explicitPath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", explicitPath.TunnelInterface})
    explicitPath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", explicitPath.SegmentRoutingSidValue})
    explicitPath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", explicitPath.Weight})
    explicitPath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", explicitPath.IsTeTunnelInterface})
    explicitPath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", explicitPath.IsSrExcludeTunnelInterface})
    explicitPath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", explicitPath.OutgoingLabel})

    explicitPath.EntityData.YListKeys = []string {}

    return &(explicitPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "explicit-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/explicit-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/explicit-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/explicit-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "explicit-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/explicit-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "explicit-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/explicit-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Source_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Source_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "backup"
    source.EntityData.SegmentPath = "source" + types.AddNoKeyToken(source)
    source.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/" + source.EntityData.SegmentPath
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = types.NewOrderedMap()
    source.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range source.Tags {
        types.SetYListKey(source.Tags[i], i)
        source.EntityData.Children.Append(types.GetSegmentPath(source.Tags[i]), types.YChild{"Tags", source.Tags[i]})
    }
    source.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range source.NodalSid {
        types.SetYListKey(source.NodalSid[i], i)
        source.EntityData.Children.Append(types.GetSegmentPath(source.NodalSid[i]), types.YChild{"NodalSid", source.NodalSid[i]})
    }
    source.EntityData.Leafs = types.NewOrderedMap()
    source.EntityData.Leafs.Append("source-lsp-id", types.YLeaf{"SourceLspId", source.SourceLspId})
    source.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", source.SourceAddress})

    source.EntityData.YListKeys = []string {}

    return &(source.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Source_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Source_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "source"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/source/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Source_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "source"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/source/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource) GetEntityData() *types.CommonEntityData {
    multicastSource.EntityData.YFilter = multicastSource.YFilter
    multicastSource.EntityData.YangName = "multicast-source"
    multicastSource.EntityData.BundleName = "cisco_ios_xr"
    multicastSource.EntityData.ParentYangName = "backup"
    multicastSource.EntityData.SegmentPath = "multicast-source" + types.AddNoKeyToken(multicastSource)
    multicastSource.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/" + multicastSource.EntityData.SegmentPath
    multicastSource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastSource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastSource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastSource.EntityData.Children = types.NewOrderedMap()
    multicastSource.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range multicastSource.Tags {
        types.SetYListKey(multicastSource.Tags[i], i)
        multicastSource.EntityData.Children.Append(types.GetSegmentPath(multicastSource.Tags[i]), types.YChild{"Tags", multicastSource.Tags[i]})
    }
    multicastSource.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range multicastSource.NodalSid {
        types.SetYListKey(multicastSource.NodalSid[i], i)
        multicastSource.EntityData.Children.Append(types.GetSegmentPath(multicastSource.NodalSid[i]), types.YChild{"NodalSid", multicastSource.NodalSid[i]})
    }
    multicastSource.EntityData.Leafs = types.NewOrderedMap()
    multicastSource.EntityData.Leafs.Append("source-lsp-id", types.YLeaf{"SourceLspId", multicastSource.SourceLspId})
    multicastSource.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", multicastSource.SourceAddress})

    multicastSource.EntityData.YListKeys = []string {}

    return &(multicastSource.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "multicast-source"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/multicast-source/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "multicast-source"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/native-status/native-details/backup/multicast-source/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_PerLevelAdvertisingDetail
// Per level details of how the local system
// advertises the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_PerLevelAdvertisingDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Level in which the prefix is advertised. The type is IsisLevel.
    Level interface{}

    // The origin of the advertisement. The type is IsisShRouteAdvOrigin.
    AdvertisingOrigin interface{}

    // Metric with which the prefix is advertised. The type is interface{} with
    // range: 0..4294967295.
    Metric interface{}

    // Has the prefix been propagated from another level?. The type is bool.
    IsPropagated interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Is the prefix external to the IS-IS domain?. The type is bool.
    IsExternalReachability interface{}

    // Is the up/down bit set?. The type is bool.
    IsInterarea interface{}

    // Status of summarization for the prefix.
    SummarizationStatus Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_PerLevelAdvertisingDetail_SummarizationStatus

    // Tags associated with the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_PerLevelAdvertisingDetail_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_PerLevelAdvertisingDetail_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_PerLevelAdvertisingDetail_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_PerLevelAdvertisingDetail_NodalSid
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_PerLevelAdvertisingDetail) GetEntityData() *types.CommonEntityData {
    perLevelAdvertisingDetail.EntityData.YFilter = perLevelAdvertisingDetail.YFilter
    perLevelAdvertisingDetail.EntityData.YangName = "per-level-advertising-detail"
    perLevelAdvertisingDetail.EntityData.BundleName = "cisco_ios_xr"
    perLevelAdvertisingDetail.EntityData.ParentYangName = "ipv6-flex-route"
    perLevelAdvertisingDetail.EntityData.SegmentPath = "per-level-advertising-detail" + types.AddNoKeyToken(perLevelAdvertisingDetail)
    perLevelAdvertisingDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/" + perLevelAdvertisingDetail.EntityData.SegmentPath
    perLevelAdvertisingDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perLevelAdvertisingDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perLevelAdvertisingDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perLevelAdvertisingDetail.EntityData.Children = types.NewOrderedMap()
    perLevelAdvertisingDetail.EntityData.Children.Append("summarization-status", types.YChild{"SummarizationStatus", &perLevelAdvertisingDetail.SummarizationStatus})
    perLevelAdvertisingDetail.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range perLevelAdvertisingDetail.Tags {
        types.SetYListKey(perLevelAdvertisingDetail.Tags[i], i)
        perLevelAdvertisingDetail.EntityData.Children.Append(types.GetSegmentPath(perLevelAdvertisingDetail.Tags[i]), types.YChild{"Tags", perLevelAdvertisingDetail.Tags[i]})
    }
    perLevelAdvertisingDetail.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range perLevelAdvertisingDetail.NodalSid {
        types.SetYListKey(perLevelAdvertisingDetail.NodalSid[i], i)
        perLevelAdvertisingDetail.EntityData.Children.Append(types.GetSegmentPath(perLevelAdvertisingDetail.NodalSid[i]), types.YChild{"NodalSid", perLevelAdvertisingDetail.NodalSid[i]})
    }
    perLevelAdvertisingDetail.EntityData.Leafs = types.NewOrderedMap()
    perLevelAdvertisingDetail.EntityData.Leafs.Append("level", types.YLeaf{"Level", perLevelAdvertisingDetail.Level})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("advertising-origin", types.YLeaf{"AdvertisingOrigin", perLevelAdvertisingDetail.AdvertisingOrigin})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", perLevelAdvertisingDetail.Metric})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("is-propagated", types.YLeaf{"IsPropagated", perLevelAdvertisingDetail.IsPropagated})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("is-external-metric", types.YLeaf{"IsExternalMetric", perLevelAdvertisingDetail.IsExternalMetric})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("is-external-reachability", types.YLeaf{"IsExternalReachability", perLevelAdvertisingDetail.IsExternalReachability})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("is-interarea", types.YLeaf{"IsInterarea", perLevelAdvertisingDetail.IsInterarea})

    perLevelAdvertisingDetail.EntityData.YListKeys = []string {}

    return &(perLevelAdvertisingDetail.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_PerLevelAdvertisingDetail_SummarizationStatus
// Status of summarization for the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_PerLevelAdvertisingDetail_SummarizationStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Summarizing Prefix.
    SummaryPrefix Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_PerLevelAdvertisingDetail_SummarizationStatus) GetEntityData() *types.CommonEntityData {
    summarizationStatus.EntityData.YFilter = summarizationStatus.YFilter
    summarizationStatus.EntityData.YangName = "summarization-status"
    summarizationStatus.EntityData.BundleName = "cisco_ios_xr"
    summarizationStatus.EntityData.ParentYangName = "per-level-advertising-detail"
    summarizationStatus.EntityData.SegmentPath = "summarization-status"
    summarizationStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/per-level-advertising-detail/" + summarizationStatus.EntityData.SegmentPath
    summarizationStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summarizationStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summarizationStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summarizationStatus.EntityData.Children = types.NewOrderedMap()
    summarizationStatus.EntityData.Children.Append("summary-prefix", types.YChild{"SummaryPrefix", &summarizationStatus.SummaryPrefix})
    summarizationStatus.EntityData.Leafs = types.NewOrderedMap()
    summarizationStatus.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", summarizationStatus.IsValid})

    summarizationStatus.EntityData.YListKeys = []string {}

    return &(summarizationStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
// Summarizing Prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetEntityData() *types.CommonEntityData {
    summaryPrefix.EntityData.YFilter = summaryPrefix.YFilter
    summaryPrefix.EntityData.YangName = "summary-prefix"
    summaryPrefix.EntityData.BundleName = "cisco_ios_xr"
    summaryPrefix.EntityData.ParentYangName = "summarization-status"
    summaryPrefix.EntityData.SegmentPath = "summary-prefix"
    summaryPrefix.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/per-level-advertising-detail/summarization-status/" + summaryPrefix.EntityData.SegmentPath
    summaryPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryPrefix.EntityData.Children = types.NewOrderedMap()
    summaryPrefix.EntityData.Leafs = types.NewOrderedMap()
    summaryPrefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", summaryPrefix.Prefix})
    summaryPrefix.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", summaryPrefix.PrefixLength})

    summaryPrefix.EntityData.YListKeys = []string {}

    return &(summaryPrefix.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_PerLevelAdvertisingDetail_Tags
// Tags associated with the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_PerLevelAdvertisingDetail_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_PerLevelAdvertisingDetail_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "per-level-advertising-detail"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/per-level-advertising-detail/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_PerLevelAdvertisingDetail_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_PerLevelAdvertisingDetail_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6FlexRouteTables_Ipv6FlexRouteTable_Ipv6FlexRoute_PerLevelAdvertisingDetail_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "per-level-advertising-detail"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-flex-route-tables/ipv6-flex-route-table/ipv6-flex-route/per-level-advertising-detail/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_FrrSummary
// FRR summary information for a particular
// IS-IS topology
type Isis_Instances_Instance_Topologies_Topology_FrrSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FRR summary for prefixes reachable in L1.
    Level1Prefixes Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes

    // FRR summary for prefixes reachable in L2.
    Level2Prefixes Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes

    // Unreachable prefixes.
    UnreachablePrefixes Isis_Instances_Instance_Topologies_Topology_FrrSummary_UnreachablePrefixes
}

func (frrSummary *Isis_Instances_Instance_Topologies_Topology_FrrSummary) GetEntityData() *types.CommonEntityData {
    frrSummary.EntityData.YFilter = frrSummary.YFilter
    frrSummary.EntityData.YangName = "frr-summary"
    frrSummary.EntityData.BundleName = "cisco_ios_xr"
    frrSummary.EntityData.ParentYangName = "topology"
    frrSummary.EntityData.SegmentPath = "frr-summary"
    frrSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/" + frrSummary.EntityData.SegmentPath
    frrSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrSummary.EntityData.Children = types.NewOrderedMap()
    frrSummary.EntityData.Children.Append("level1-prefixes", types.YChild{"Level1Prefixes", &frrSummary.Level1Prefixes})
    frrSummary.EntityData.Children.Append("level2-prefixes", types.YChild{"Level2Prefixes", &frrSummary.Level2Prefixes})
    frrSummary.EntityData.Children.Append("unreachable-prefixes", types.YChild{"UnreachablePrefixes", &frrSummary.UnreachablePrefixes})
    frrSummary.EntityData.Leafs = types.NewOrderedMap()

    frrSummary.EntityData.YListKeys = []string {}

    return &(frrSummary.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes
// FRR summary for prefixes reachable in L1
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of prefixes with all paths having FRR backup.
    AllPathsProtected Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_AllPathsProtected

    // Number of prefixes with some paths having FRR backup.
    SomePathsProtected Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_SomePathsProtected

    // Number of reachable prefixes without FRR backup.
    Unprotected Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_Unprotected
}

func (level1Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes) GetEntityData() *types.CommonEntityData {
    level1Prefixes.EntityData.YFilter = level1Prefixes.YFilter
    level1Prefixes.EntityData.YangName = "level1-prefixes"
    level1Prefixes.EntityData.BundleName = "cisco_ios_xr"
    level1Prefixes.EntityData.ParentYangName = "frr-summary"
    level1Prefixes.EntityData.SegmentPath = "level1-prefixes"
    level1Prefixes.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/frr-summary/" + level1Prefixes.EntityData.SegmentPath
    level1Prefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    level1Prefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    level1Prefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    level1Prefixes.EntityData.Children = types.NewOrderedMap()
    level1Prefixes.EntityData.Children.Append("all-paths-protected", types.YChild{"AllPathsProtected", &level1Prefixes.AllPathsProtected})
    level1Prefixes.EntityData.Children.Append("some-paths-protected", types.YChild{"SomePathsProtected", &level1Prefixes.SomePathsProtected})
    level1Prefixes.EntityData.Children.Append("unprotected", types.YChild{"Unprotected", &level1Prefixes.Unprotected})
    level1Prefixes.EntityData.Leafs = types.NewOrderedMap()

    level1Prefixes.EntityData.YListKeys = []string {}

    return &(level1Prefixes.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_AllPathsProtected
// Number of prefixes with all paths having FRR
// backup
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_AllPathsProtected struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_AllPathsProtected) GetEntityData() *types.CommonEntityData {
    allPathsProtected.EntityData.YFilter = allPathsProtected.YFilter
    allPathsProtected.EntityData.YangName = "all-paths-protected"
    allPathsProtected.EntityData.BundleName = "cisco_ios_xr"
    allPathsProtected.EntityData.ParentYangName = "level1-prefixes"
    allPathsProtected.EntityData.SegmentPath = "all-paths-protected"
    allPathsProtected.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/frr-summary/level1-prefixes/" + allPathsProtected.EntityData.SegmentPath
    allPathsProtected.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allPathsProtected.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allPathsProtected.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allPathsProtected.EntityData.Children = types.NewOrderedMap()
    allPathsProtected.EntityData.Leafs = types.NewOrderedMap()
    allPathsProtected.EntityData.Leafs.Append("critical", types.YLeaf{"Critical", allPathsProtected.Critical})
    allPathsProtected.EntityData.Leafs.Append("high", types.YLeaf{"High", allPathsProtected.High})
    allPathsProtected.EntityData.Leafs.Append("medium", types.YLeaf{"Medium", allPathsProtected.Medium})
    allPathsProtected.EntityData.Leafs.Append("low", types.YLeaf{"Low", allPathsProtected.Low})

    allPathsProtected.EntityData.YListKeys = []string {}

    return &(allPathsProtected.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_SomePathsProtected
// Number of prefixes with some paths having FRR
// backup
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_SomePathsProtected struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_SomePathsProtected) GetEntityData() *types.CommonEntityData {
    somePathsProtected.EntityData.YFilter = somePathsProtected.YFilter
    somePathsProtected.EntityData.YangName = "some-paths-protected"
    somePathsProtected.EntityData.BundleName = "cisco_ios_xr"
    somePathsProtected.EntityData.ParentYangName = "level1-prefixes"
    somePathsProtected.EntityData.SegmentPath = "some-paths-protected"
    somePathsProtected.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/frr-summary/level1-prefixes/" + somePathsProtected.EntityData.SegmentPath
    somePathsProtected.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    somePathsProtected.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    somePathsProtected.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    somePathsProtected.EntityData.Children = types.NewOrderedMap()
    somePathsProtected.EntityData.Leafs = types.NewOrderedMap()
    somePathsProtected.EntityData.Leafs.Append("critical", types.YLeaf{"Critical", somePathsProtected.Critical})
    somePathsProtected.EntityData.Leafs.Append("high", types.YLeaf{"High", somePathsProtected.High})
    somePathsProtected.EntityData.Leafs.Append("medium", types.YLeaf{"Medium", somePathsProtected.Medium})
    somePathsProtected.EntityData.Leafs.Append("low", types.YLeaf{"Low", somePathsProtected.Low})

    somePathsProtected.EntityData.YListKeys = []string {}

    return &(somePathsProtected.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_Unprotected
// Number of reachable prefixes without FRR backup
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_Unprotected struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level1Prefixes_Unprotected) GetEntityData() *types.CommonEntityData {
    unprotected.EntityData.YFilter = unprotected.YFilter
    unprotected.EntityData.YangName = "unprotected"
    unprotected.EntityData.BundleName = "cisco_ios_xr"
    unprotected.EntityData.ParentYangName = "level1-prefixes"
    unprotected.EntityData.SegmentPath = "unprotected"
    unprotected.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/frr-summary/level1-prefixes/" + unprotected.EntityData.SegmentPath
    unprotected.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unprotected.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unprotected.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unprotected.EntityData.Children = types.NewOrderedMap()
    unprotected.EntityData.Leafs = types.NewOrderedMap()
    unprotected.EntityData.Leafs.Append("critical", types.YLeaf{"Critical", unprotected.Critical})
    unprotected.EntityData.Leafs.Append("high", types.YLeaf{"High", unprotected.High})
    unprotected.EntityData.Leafs.Append("medium", types.YLeaf{"Medium", unprotected.Medium})
    unprotected.EntityData.Leafs.Append("low", types.YLeaf{"Low", unprotected.Low})

    unprotected.EntityData.YListKeys = []string {}

    return &(unprotected.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes
// FRR summary for prefixes reachable in L2
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of prefixes with all paths having FRR backup.
    AllPathsProtected Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_AllPathsProtected

    // Number of prefixes with some paths having FRR backup.
    SomePathsProtected Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_SomePathsProtected

    // Number of reachable prefixes without FRR backup.
    Unprotected Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_Unprotected
}

func (level2Prefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes) GetEntityData() *types.CommonEntityData {
    level2Prefixes.EntityData.YFilter = level2Prefixes.YFilter
    level2Prefixes.EntityData.YangName = "level2-prefixes"
    level2Prefixes.EntityData.BundleName = "cisco_ios_xr"
    level2Prefixes.EntityData.ParentYangName = "frr-summary"
    level2Prefixes.EntityData.SegmentPath = "level2-prefixes"
    level2Prefixes.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/frr-summary/" + level2Prefixes.EntityData.SegmentPath
    level2Prefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    level2Prefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    level2Prefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    level2Prefixes.EntityData.Children = types.NewOrderedMap()
    level2Prefixes.EntityData.Children.Append("all-paths-protected", types.YChild{"AllPathsProtected", &level2Prefixes.AllPathsProtected})
    level2Prefixes.EntityData.Children.Append("some-paths-protected", types.YChild{"SomePathsProtected", &level2Prefixes.SomePathsProtected})
    level2Prefixes.EntityData.Children.Append("unprotected", types.YChild{"Unprotected", &level2Prefixes.Unprotected})
    level2Prefixes.EntityData.Leafs = types.NewOrderedMap()

    level2Prefixes.EntityData.YListKeys = []string {}

    return &(level2Prefixes.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_AllPathsProtected
// Number of prefixes with all paths having FRR
// backup
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_AllPathsProtected struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (allPathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_AllPathsProtected) GetEntityData() *types.CommonEntityData {
    allPathsProtected.EntityData.YFilter = allPathsProtected.YFilter
    allPathsProtected.EntityData.YangName = "all-paths-protected"
    allPathsProtected.EntityData.BundleName = "cisco_ios_xr"
    allPathsProtected.EntityData.ParentYangName = "level2-prefixes"
    allPathsProtected.EntityData.SegmentPath = "all-paths-protected"
    allPathsProtected.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/frr-summary/level2-prefixes/" + allPathsProtected.EntityData.SegmentPath
    allPathsProtected.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allPathsProtected.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allPathsProtected.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allPathsProtected.EntityData.Children = types.NewOrderedMap()
    allPathsProtected.EntityData.Leafs = types.NewOrderedMap()
    allPathsProtected.EntityData.Leafs.Append("critical", types.YLeaf{"Critical", allPathsProtected.Critical})
    allPathsProtected.EntityData.Leafs.Append("high", types.YLeaf{"High", allPathsProtected.High})
    allPathsProtected.EntityData.Leafs.Append("medium", types.YLeaf{"Medium", allPathsProtected.Medium})
    allPathsProtected.EntityData.Leafs.Append("low", types.YLeaf{"Low", allPathsProtected.Low})

    allPathsProtected.EntityData.YListKeys = []string {}

    return &(allPathsProtected.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_SomePathsProtected
// Number of prefixes with some paths having FRR
// backup
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_SomePathsProtected struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (somePathsProtected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_SomePathsProtected) GetEntityData() *types.CommonEntityData {
    somePathsProtected.EntityData.YFilter = somePathsProtected.YFilter
    somePathsProtected.EntityData.YangName = "some-paths-protected"
    somePathsProtected.EntityData.BundleName = "cisco_ios_xr"
    somePathsProtected.EntityData.ParentYangName = "level2-prefixes"
    somePathsProtected.EntityData.SegmentPath = "some-paths-protected"
    somePathsProtected.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/frr-summary/level2-prefixes/" + somePathsProtected.EntityData.SegmentPath
    somePathsProtected.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    somePathsProtected.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    somePathsProtected.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    somePathsProtected.EntityData.Children = types.NewOrderedMap()
    somePathsProtected.EntityData.Leafs = types.NewOrderedMap()
    somePathsProtected.EntityData.Leafs.Append("critical", types.YLeaf{"Critical", somePathsProtected.Critical})
    somePathsProtected.EntityData.Leafs.Append("high", types.YLeaf{"High", somePathsProtected.High})
    somePathsProtected.EntityData.Leafs.Append("medium", types.YLeaf{"Medium", somePathsProtected.Medium})
    somePathsProtected.EntityData.Leafs.Append("low", types.YLeaf{"Low", somePathsProtected.Low})

    somePathsProtected.EntityData.YListKeys = []string {}

    return &(somePathsProtected.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_Unprotected
// Number of reachable prefixes without FRR backup
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_Unprotected struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (unprotected *Isis_Instances_Instance_Topologies_Topology_FrrSummary_Level2Prefixes_Unprotected) GetEntityData() *types.CommonEntityData {
    unprotected.EntityData.YFilter = unprotected.YFilter
    unprotected.EntityData.YangName = "unprotected"
    unprotected.EntityData.BundleName = "cisco_ios_xr"
    unprotected.EntityData.ParentYangName = "level2-prefixes"
    unprotected.EntityData.SegmentPath = "unprotected"
    unprotected.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/frr-summary/level2-prefixes/" + unprotected.EntityData.SegmentPath
    unprotected.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unprotected.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unprotected.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unprotected.EntityData.Children = types.NewOrderedMap()
    unprotected.EntityData.Leafs = types.NewOrderedMap()
    unprotected.EntityData.Leafs.Append("critical", types.YLeaf{"Critical", unprotected.Critical})
    unprotected.EntityData.Leafs.Append("high", types.YLeaf{"High", unprotected.High})
    unprotected.EntityData.Leafs.Append("medium", types.YLeaf{"Medium", unprotected.Medium})
    unprotected.EntityData.Leafs.Append("low", types.YLeaf{"Low", unprotected.Low})

    unprotected.EntityData.YListKeys = []string {}

    return &(unprotected.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_FrrSummary_UnreachablePrefixes
// Unreachable prefixes
type Isis_Instances_Instance_Topologies_Topology_FrrSummary_UnreachablePrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (unreachablePrefixes *Isis_Instances_Instance_Topologies_Topology_FrrSummary_UnreachablePrefixes) GetEntityData() *types.CommonEntityData {
    unreachablePrefixes.EntityData.YFilter = unreachablePrefixes.YFilter
    unreachablePrefixes.EntityData.YangName = "unreachable-prefixes"
    unreachablePrefixes.EntityData.BundleName = "cisco_ios_xr"
    unreachablePrefixes.EntityData.ParentYangName = "frr-summary"
    unreachablePrefixes.EntityData.SegmentPath = "unreachable-prefixes"
    unreachablePrefixes.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/frr-summary/" + unreachablePrefixes.EntityData.SegmentPath
    unreachablePrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unreachablePrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unreachablePrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unreachablePrefixes.EntityData.Children = types.NewOrderedMap()
    unreachablePrefixes.EntityData.Leafs = types.NewOrderedMap()
    unreachablePrefixes.EntityData.Leafs.Append("critical", types.YLeaf{"Critical", unreachablePrefixes.Critical})
    unreachablePrefixes.EntityData.Leafs.Append("high", types.YLeaf{"High", unreachablePrefixes.High})
    unreachablePrefixes.EntityData.Leafs.Append("medium", types.YLeaf{"Medium", unreachablePrefixes.Medium})
    unreachablePrefixes.EntityData.Leafs.Append("low", types.YLeaf{"Low", unreachablePrefixes.Low})

    unreachablePrefixes.EntityData.YListKeys = []string {}

    return &(unreachablePrefixes.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Srv6Locators
// SRv6 Locator Table
type Isis_Instances_Instance_Topologies_Topology_Srv6Locators struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An SRv6 Locator. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Srv6Locators_Srv6Locator.
    Srv6Locator []*Isis_Instances_Instance_Topologies_Topology_Srv6Locators_Srv6Locator
}

func (srv6Locators *Isis_Instances_Instance_Topologies_Topology_Srv6Locators) GetEntityData() *types.CommonEntityData {
    srv6Locators.EntityData.YFilter = srv6Locators.YFilter
    srv6Locators.EntityData.YangName = "srv6-locators"
    srv6Locators.EntityData.BundleName = "cisco_ios_xr"
    srv6Locators.EntityData.ParentYangName = "topology"
    srv6Locators.EntityData.SegmentPath = "srv6-locators"
    srv6Locators.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/" + srv6Locators.EntityData.SegmentPath
    srv6Locators.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srv6Locators.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srv6Locators.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srv6Locators.EntityData.Children = types.NewOrderedMap()
    srv6Locators.EntityData.Children.Append("srv6-locator", types.YChild{"Srv6Locator", nil})
    for i := range srv6Locators.Srv6Locator {
        types.SetYListKey(srv6Locators.Srv6Locator[i], i)
        srv6Locators.EntityData.Children.Append(types.GetSegmentPath(srv6Locators.Srv6Locator[i]), types.YChild{"Srv6Locator", srv6Locators.Srv6Locator[i]})
    }
    srv6Locators.EntityData.Leafs = types.NewOrderedMap()

    srv6Locators.EntityData.YListKeys = []string {}

    return &(srv6Locators.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Srv6Locators_Srv6Locator
// An SRv6 Locator
type Isis_Instances_Instance_Topologies_Topology_Srv6Locators_Srv6Locator struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // LocatorName. The type is string.
    LocatorName interface{}

    // LocatorID. The type is interface{} with range: 0..4294967295.
    LocatorId interface{}

    // LocatorFormat. The type is interface{} with range: 0..4294967295.
    LocatorFormat interface{}

    // LocatorFlags. The type is interface{} with range: 0..65535.
    LocatorFlags interface{}

    // NumberOfReservedOpcodes. The type is interface{} with range: 0..255.
    NumberOfReservedOpcodes interface{}

    // Reserved Opcodes. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Srv6Locators_Srv6Locator_Opcode.
    Opcode []*Isis_Instances_Instance_Topologies_Topology_Srv6Locators_Srv6Locator_Opcode
}

func (srv6Locator *Isis_Instances_Instance_Topologies_Topology_Srv6Locators_Srv6Locator) GetEntityData() *types.CommonEntityData {
    srv6Locator.EntityData.YFilter = srv6Locator.YFilter
    srv6Locator.EntityData.YangName = "srv6-locator"
    srv6Locator.EntityData.BundleName = "cisco_ios_xr"
    srv6Locator.EntityData.ParentYangName = "srv6-locators"
    srv6Locator.EntityData.SegmentPath = "srv6-locator" + types.AddNoKeyToken(srv6Locator)
    srv6Locator.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/srv6-locators/" + srv6Locator.EntityData.SegmentPath
    srv6Locator.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srv6Locator.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srv6Locator.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srv6Locator.EntityData.Children = types.NewOrderedMap()
    srv6Locator.EntityData.Children.Append("opcode", types.YChild{"Opcode", nil})
    for i := range srv6Locator.Opcode {
        types.SetYListKey(srv6Locator.Opcode[i], i)
        srv6Locator.EntityData.Children.Append(types.GetSegmentPath(srv6Locator.Opcode[i]), types.YChild{"Opcode", srv6Locator.Opcode[i]})
    }
    srv6Locator.EntityData.Leafs = types.NewOrderedMap()
    srv6Locator.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", srv6Locator.Prefix})
    srv6Locator.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", srv6Locator.PrefixLength})
    srv6Locator.EntityData.Leafs.Append("locator-name", types.YLeaf{"LocatorName", srv6Locator.LocatorName})
    srv6Locator.EntityData.Leafs.Append("locator-id", types.YLeaf{"LocatorId", srv6Locator.LocatorId})
    srv6Locator.EntityData.Leafs.Append("locator-format", types.YLeaf{"LocatorFormat", srv6Locator.LocatorFormat})
    srv6Locator.EntityData.Leafs.Append("locator-flags", types.YLeaf{"LocatorFlags", srv6Locator.LocatorFlags})
    srv6Locator.EntityData.Leafs.Append("number-of-reserved-opcodes", types.YLeaf{"NumberOfReservedOpcodes", srv6Locator.NumberOfReservedOpcodes})

    srv6Locator.EntityData.YListKeys = []string {}

    return &(srv6Locator.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Srv6Locators_Srv6Locator_Opcode
// Reserved Opcodes
type Isis_Instances_Instance_Topologies_Topology_Srv6Locators_Srv6Locator_Opcode struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // FunctionType. The type is Srv6EndFunction.
    FunctionType interface{}

    // FunctionOpcode. The type is interface{} with range: 0..65535.
    FunctionOpcode interface{}
}

func (opcode *Isis_Instances_Instance_Topologies_Topology_Srv6Locators_Srv6Locator_Opcode) GetEntityData() *types.CommonEntityData {
    opcode.EntityData.YFilter = opcode.YFilter
    opcode.EntityData.YangName = "opcode"
    opcode.EntityData.BundleName = "cisco_ios_xr"
    opcode.EntityData.ParentYangName = "srv6-locator"
    opcode.EntityData.SegmentPath = "opcode" + types.AddNoKeyToken(opcode)
    opcode.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/srv6-locators/srv6-locator/" + opcode.EntityData.SegmentPath
    opcode.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opcode.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opcode.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opcode.EntityData.Children = types.NewOrderedMap()
    opcode.EntityData.Leafs = types.NewOrderedMap()
    opcode.EntityData.Leafs.Append("function-type", types.YLeaf{"FunctionType", opcode.FunctionType})
    opcode.EntityData.Leafs.Append("function-opcode", types.YLeaf{"FunctionOpcode", opcode.FunctionOpcode})

    opcode.EntityData.YListKeys = []string {}

    return &(opcode.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels
// Per-topology level table
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Per-level topology operational data. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel.
    TopologyLevel []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel
}

func (topologyLevels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels) GetEntityData() *types.CommonEntityData {
    topologyLevels.EntityData.YFilter = topologyLevels.YFilter
    topologyLevels.EntityData.YangName = "topology-levels"
    topologyLevels.EntityData.BundleName = "cisco_ios_xr"
    topologyLevels.EntityData.ParentYangName = "topology"
    topologyLevels.EntityData.SegmentPath = "topology-levels"
    topologyLevels.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/" + topologyLevels.EntityData.SegmentPath
    topologyLevels.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topologyLevels.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topologyLevels.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topologyLevels.EntityData.Children = types.NewOrderedMap()
    topologyLevels.EntityData.Children.Append("topology-level", types.YChild{"TopologyLevel", nil})
    for i := range topologyLevels.TopologyLevel {
        topologyLevels.EntityData.Children.Append(types.GetSegmentPath(topologyLevels.TopologyLevel[i]), types.YChild{"TopologyLevel", topologyLevels.TopologyLevel[i]})
    }
    topologyLevels.EntityData.Leafs = types.NewOrderedMap()

    topologyLevels.EntityData.YListKeys = []string {}

    return &(topologyLevels.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel
// Per-level topology operational data
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Level. The type is IsisInternalLevel.
    Level interface{}

    // TE advertisements for a single level and topology. Only available within
    // the IPv4 Unicast topology.
    TeAdvertisements Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements

    // TE adjacency-log for a single level and topology. Only available within the
    // IPv4 Unicast topology.
    TeAdjacencyLog Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog

    // Log of route calculations for a single level and topology.
    SpfLog Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog

    // TE tunnels table. Only available within the IPv4 Unicast topology.
    TeTunnels Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels

    // IPv4 IS Topology table.
    Ipv4LinkTopologies Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies

    // Summary information for a particular IS Topology.
    TopologySummary Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary

    // IPv6 IS Topology table.
    Ipv6LinkTopologies Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies
}

func (topologyLevel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel) GetEntityData() *types.CommonEntityData {
    topologyLevel.EntityData.YFilter = topologyLevel.YFilter
    topologyLevel.EntityData.YangName = "topology-level"
    topologyLevel.EntityData.BundleName = "cisco_ios_xr"
    topologyLevel.EntityData.ParentYangName = "topology-levels"
    topologyLevel.EntityData.SegmentPath = "topology-level" + types.AddKeyToken(topologyLevel.Level, "level")
    topologyLevel.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/" + topologyLevel.EntityData.SegmentPath
    topologyLevel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topologyLevel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topologyLevel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topologyLevel.EntityData.Children = types.NewOrderedMap()
    topologyLevel.EntityData.Children.Append("te-advertisements", types.YChild{"TeAdvertisements", &topologyLevel.TeAdvertisements})
    topologyLevel.EntityData.Children.Append("te-adjacency-log", types.YChild{"TeAdjacencyLog", &topologyLevel.TeAdjacencyLog})
    topologyLevel.EntityData.Children.Append("spf-log", types.YChild{"SpfLog", &topologyLevel.SpfLog})
    topologyLevel.EntityData.Children.Append("te-tunnels", types.YChild{"TeTunnels", &topologyLevel.TeTunnels})
    topologyLevel.EntityData.Children.Append("ipv4-link-topologies", types.YChild{"Ipv4LinkTopologies", &topologyLevel.Ipv4LinkTopologies})
    topologyLevel.EntityData.Children.Append("topology-summary", types.YChild{"TopologySummary", &topologyLevel.TopologySummary})
    topologyLevel.EntityData.Children.Append("ipv6-link-topologies", types.YChild{"Ipv6LinkTopologies", &topologyLevel.Ipv6LinkTopologies})
    topologyLevel.EntityData.Leafs = types.NewOrderedMap()
    topologyLevel.EntityData.Leafs.Append("level", types.YLeaf{"Level", topologyLevel.Level})

    topologyLevel.EntityData.YListKeys = []string {"Level"}

    return &(topologyLevel.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements
// TE advertisements for a single level and
// topology. Only available within the IPv4
// Unicast topology.
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates whether any TE advertisements are present. The type is bool.
    TeAdvDataPresent interface{}

    // Local system ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    TeSystemId interface{}

    // Local TE router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TeLocalRouterId interface{}

    // TE PCE advertisements.
    Tepceadv Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_Tepceadv

    // List of TE advertisement entries. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv.
    TeAdv []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv
}

func (teAdvertisements *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements) GetEntityData() *types.CommonEntityData {
    teAdvertisements.EntityData.YFilter = teAdvertisements.YFilter
    teAdvertisements.EntityData.YangName = "te-advertisements"
    teAdvertisements.EntityData.BundleName = "cisco_ios_xr"
    teAdvertisements.EntityData.ParentYangName = "topology-level"
    teAdvertisements.EntityData.SegmentPath = "te-advertisements"
    teAdvertisements.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/" + teAdvertisements.EntityData.SegmentPath
    teAdvertisements.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teAdvertisements.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teAdvertisements.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teAdvertisements.EntityData.Children = types.NewOrderedMap()
    teAdvertisements.EntityData.Children.Append("tepceadv", types.YChild{"Tepceadv", &teAdvertisements.Tepceadv})
    teAdvertisements.EntityData.Children.Append("te-adv", types.YChild{"TeAdv", nil})
    for i := range teAdvertisements.TeAdv {
        types.SetYListKey(teAdvertisements.TeAdv[i], i)
        teAdvertisements.EntityData.Children.Append(types.GetSegmentPath(teAdvertisements.TeAdv[i]), types.YChild{"TeAdv", teAdvertisements.TeAdv[i]})
    }
    teAdvertisements.EntityData.Leafs = types.NewOrderedMap()
    teAdvertisements.EntityData.Leafs.Append("te-adv-data-present", types.YLeaf{"TeAdvDataPresent", teAdvertisements.TeAdvDataPresent})
    teAdvertisements.EntityData.Leafs.Append("te-system-id", types.YLeaf{"TeSystemId", teAdvertisements.TeSystemId})
    teAdvertisements.EntityData.Leafs.Append("te-local-router-id", types.YLeaf{"TeLocalRouterId", teAdvertisements.TeLocalRouterId})

    teAdvertisements.EntityData.YListKeys = []string {}

    return &(teAdvertisements.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_Tepceadv
// TE PCE advertisements
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_Tepceadv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates whether any PCE advertisements are present. The type is bool.
    PceAdvDataPresent interface{}

    // Flooding scope for PCE advertisement. The type is IsisShTePceFloodingScope.
    PceFloodingScope interface{}

    // IPv4 PCE address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PceAddressIpv4 interface{}

    // PCE path scope bits. The type is interface{} with range: 0..255.
    PcePathScopeBits interface{}

    // PCE path scope preferences. The type is interface{} with range: 0..65535.
    PcePathScopePrefs interface{}
}

func (tepceadv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_Tepceadv) GetEntityData() *types.CommonEntityData {
    tepceadv.EntityData.YFilter = tepceadv.YFilter
    tepceadv.EntityData.YangName = "tepceadv"
    tepceadv.EntityData.BundleName = "cisco_ios_xr"
    tepceadv.EntityData.ParentYangName = "te-advertisements"
    tepceadv.EntityData.SegmentPath = "tepceadv"
    tepceadv.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/te-advertisements/" + tepceadv.EntityData.SegmentPath
    tepceadv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tepceadv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tepceadv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tepceadv.EntityData.Children = types.NewOrderedMap()
    tepceadv.EntityData.Leafs = types.NewOrderedMap()
    tepceadv.EntityData.Leafs.Append("pce-adv-data-present", types.YLeaf{"PceAdvDataPresent", tepceadv.PceAdvDataPresent})
    tepceadv.EntityData.Leafs.Append("pce-flooding-scope", types.YLeaf{"PceFloodingScope", tepceadv.PceFloodingScope})
    tepceadv.EntityData.Leafs.Append("pce-address-ipv4", types.YLeaf{"PceAddressIpv4", tepceadv.PceAddressIpv4})
    tepceadv.EntityData.Leafs.Append("pce-path-scope-bits", types.YLeaf{"PcePathScopeBits", tepceadv.PcePathScopeBits})
    tepceadv.EntityData.Leafs.Append("pce-path-scope-prefs", types.YLeaf{"PcePathScopePrefs", tepceadv.PcePathScopePrefs})

    tepceadv.EntityData.YListKeys = []string {}

    return &(tepceadv.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv
// List of TE advertisement entries
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor system ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    TeNeighborSystemId interface{}

    // Link type. The type is IsisShTeLink.
    LinkType interface{}

    // Local IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LocalIpAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TeNeighborIpAddress interface{}

    // TE metric. The type is interface{} with range: 0..4294967295.
    TeMetric interface{}

    // Physical link bandwidth. The type is interface{} with range: 0..4294967295.
    TePhysicalLinkBandwidth interface{}

    // Reservable link bandwidth in global pool. The type is interface{} with
    // range: 0..4294967295.
    TeReservedLinkBandwidth interface{}

    // Reservable link bandwidth in subpool. The type is interface{} with range:
    // 0..4294967295.
    TeSubpoolReservedLinkBandwidth interface{}

    // Affinity bits. The type is interface{} with range: 0..4294967295.
    TeAffinity interface{}

    // TE Ext Admin Number. The type is interface{} with range: 0..4294967295.
    TeExtAdminNum interface{}

    // Indicates whether any TE sub TLVs are present. The type is bool.
    TeSubTlvDataPresent interface{}

    // Bandwidth in use in global pool. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth.
    TeTransmittedBandwidth []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth

    // Bandwidth in use in subpool. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth.
    TeSubpoolTransmittedBandwidth []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth

    // TE Extended Admin Group. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub.
    TeExtAdminSub []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub

    // List of TE sub TLVs. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv.
    TeSubTlv []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv
}

func (teAdv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv) GetEntityData() *types.CommonEntityData {
    teAdv.EntityData.YFilter = teAdv.YFilter
    teAdv.EntityData.YangName = "te-adv"
    teAdv.EntityData.BundleName = "cisco_ios_xr"
    teAdv.EntityData.ParentYangName = "te-advertisements"
    teAdv.EntityData.SegmentPath = "te-adv" + types.AddNoKeyToken(teAdv)
    teAdv.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/te-advertisements/" + teAdv.EntityData.SegmentPath
    teAdv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teAdv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teAdv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teAdv.EntityData.Children = types.NewOrderedMap()
    teAdv.EntityData.Children.Append("te-transmitted-bandwidth", types.YChild{"TeTransmittedBandwidth", nil})
    for i := range teAdv.TeTransmittedBandwidth {
        types.SetYListKey(teAdv.TeTransmittedBandwidth[i], i)
        teAdv.EntityData.Children.Append(types.GetSegmentPath(teAdv.TeTransmittedBandwidth[i]), types.YChild{"TeTransmittedBandwidth", teAdv.TeTransmittedBandwidth[i]})
    }
    teAdv.EntityData.Children.Append("te-subpool-transmitted-bandwidth", types.YChild{"TeSubpoolTransmittedBandwidth", nil})
    for i := range teAdv.TeSubpoolTransmittedBandwidth {
        types.SetYListKey(teAdv.TeSubpoolTransmittedBandwidth[i], i)
        teAdv.EntityData.Children.Append(types.GetSegmentPath(teAdv.TeSubpoolTransmittedBandwidth[i]), types.YChild{"TeSubpoolTransmittedBandwidth", teAdv.TeSubpoolTransmittedBandwidth[i]})
    }
    teAdv.EntityData.Children.Append("te-ext-admin-sub", types.YChild{"TeExtAdminSub", nil})
    for i := range teAdv.TeExtAdminSub {
        types.SetYListKey(teAdv.TeExtAdminSub[i], i)
        teAdv.EntityData.Children.Append(types.GetSegmentPath(teAdv.TeExtAdminSub[i]), types.YChild{"TeExtAdminSub", teAdv.TeExtAdminSub[i]})
    }
    teAdv.EntityData.Children.Append("te-sub-tlv", types.YChild{"TeSubTlv", nil})
    for i := range teAdv.TeSubTlv {
        types.SetYListKey(teAdv.TeSubTlv[i], i)
        teAdv.EntityData.Children.Append(types.GetSegmentPath(teAdv.TeSubTlv[i]), types.YChild{"TeSubTlv", teAdv.TeSubTlv[i]})
    }
    teAdv.EntityData.Leafs = types.NewOrderedMap()
    teAdv.EntityData.Leafs.Append("te-neighbor-system-id", types.YLeaf{"TeNeighborSystemId", teAdv.TeNeighborSystemId})
    teAdv.EntityData.Leafs.Append("link-type", types.YLeaf{"LinkType", teAdv.LinkType})
    teAdv.EntityData.Leafs.Append("local-ip-address", types.YLeaf{"LocalIpAddress", teAdv.LocalIpAddress})
    teAdv.EntityData.Leafs.Append("te-neighbor-ip-address", types.YLeaf{"TeNeighborIpAddress", teAdv.TeNeighborIpAddress})
    teAdv.EntityData.Leafs.Append("te-metric", types.YLeaf{"TeMetric", teAdv.TeMetric})
    teAdv.EntityData.Leafs.Append("te-physical-link-bandwidth", types.YLeaf{"TePhysicalLinkBandwidth", teAdv.TePhysicalLinkBandwidth})
    teAdv.EntityData.Leafs.Append("te-reserved-link-bandwidth", types.YLeaf{"TeReservedLinkBandwidth", teAdv.TeReservedLinkBandwidth})
    teAdv.EntityData.Leafs.Append("te-subpool-reserved-link-bandwidth", types.YLeaf{"TeSubpoolReservedLinkBandwidth", teAdv.TeSubpoolReservedLinkBandwidth})
    teAdv.EntityData.Leafs.Append("te-affinity", types.YLeaf{"TeAffinity", teAdv.TeAffinity})
    teAdv.EntityData.Leafs.Append("te-ext-admin-num", types.YLeaf{"TeExtAdminNum", teAdv.TeExtAdminNum})
    teAdv.EntityData.Leafs.Append("te-sub-tlv-data-present", types.YLeaf{"TeSubTlvDataPresent", teAdv.TeSubTlvDataPresent})

    teAdv.EntityData.YListKeys = []string {}

    return &(teAdv.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth
// Bandwidth in use in global pool
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (teTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeTransmittedBandwidth) GetEntityData() *types.CommonEntityData {
    teTransmittedBandwidth.EntityData.YFilter = teTransmittedBandwidth.YFilter
    teTransmittedBandwidth.EntityData.YangName = "te-transmitted-bandwidth"
    teTransmittedBandwidth.EntityData.BundleName = "cisco_ios_xr"
    teTransmittedBandwidth.EntityData.ParentYangName = "te-adv"
    teTransmittedBandwidth.EntityData.SegmentPath = "te-transmitted-bandwidth" + types.AddNoKeyToken(teTransmittedBandwidth)
    teTransmittedBandwidth.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/te-advertisements/te-adv/" + teTransmittedBandwidth.EntityData.SegmentPath
    teTransmittedBandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teTransmittedBandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teTransmittedBandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teTransmittedBandwidth.EntityData.Children = types.NewOrderedMap()
    teTransmittedBandwidth.EntityData.Leafs = types.NewOrderedMap()
    teTransmittedBandwidth.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", teTransmittedBandwidth.Entry})

    teTransmittedBandwidth.EntityData.YListKeys = []string {}

    return &(teTransmittedBandwidth.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth
// Bandwidth in use in subpool
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (teSubpoolTransmittedBandwidth *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubpoolTransmittedBandwidth) GetEntityData() *types.CommonEntityData {
    teSubpoolTransmittedBandwidth.EntityData.YFilter = teSubpoolTransmittedBandwidth.YFilter
    teSubpoolTransmittedBandwidth.EntityData.YangName = "te-subpool-transmitted-bandwidth"
    teSubpoolTransmittedBandwidth.EntityData.BundleName = "cisco_ios_xr"
    teSubpoolTransmittedBandwidth.EntityData.ParentYangName = "te-adv"
    teSubpoolTransmittedBandwidth.EntityData.SegmentPath = "te-subpool-transmitted-bandwidth" + types.AddNoKeyToken(teSubpoolTransmittedBandwidth)
    teSubpoolTransmittedBandwidth.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/te-advertisements/te-adv/" + teSubpoolTransmittedBandwidth.EntityData.SegmentPath
    teSubpoolTransmittedBandwidth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teSubpoolTransmittedBandwidth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teSubpoolTransmittedBandwidth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teSubpoolTransmittedBandwidth.EntityData.Children = types.NewOrderedMap()
    teSubpoolTransmittedBandwidth.EntityData.Leafs = types.NewOrderedMap()
    teSubpoolTransmittedBandwidth.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", teSubpoolTransmittedBandwidth.Entry})

    teSubpoolTransmittedBandwidth.EntityData.YListKeys = []string {}

    return &(teSubpoolTransmittedBandwidth.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub
// TE Extended Admin Group
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (teExtAdminSub *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeExtAdminSub) GetEntityData() *types.CommonEntityData {
    teExtAdminSub.EntityData.YFilter = teExtAdminSub.YFilter
    teExtAdminSub.EntityData.YangName = "te-ext-admin-sub"
    teExtAdminSub.EntityData.BundleName = "cisco_ios_xr"
    teExtAdminSub.EntityData.ParentYangName = "te-adv"
    teExtAdminSub.EntityData.SegmentPath = "te-ext-admin-sub" + types.AddNoKeyToken(teExtAdminSub)
    teExtAdminSub.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/te-advertisements/te-adv/" + teExtAdminSub.EntityData.SegmentPath
    teExtAdminSub.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teExtAdminSub.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teExtAdminSub.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teExtAdminSub.EntityData.Children = types.NewOrderedMap()
    teExtAdminSub.EntityData.Leafs = types.NewOrderedMap()
    teExtAdminSub.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", teExtAdminSub.Entry})

    teExtAdminSub.EntityData.YListKeys = []string {}

    return &(teExtAdminSub.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv
// List of TE sub TLVs
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Type of sub TLV. The type is interface{} with range: 0..65535.
    TeSubTlvType interface{}

    // Length of sub TLV. The type is interface{} with range: 0..65535.
    TeSubTlvLength interface{}

    // Value of sub TLV. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    TeSubTlvValue interface{}
}

func (teSubTlv *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdvertisements_TeAdv_TeSubTlv) GetEntityData() *types.CommonEntityData {
    teSubTlv.EntityData.YFilter = teSubTlv.YFilter
    teSubTlv.EntityData.YangName = "te-sub-tlv"
    teSubTlv.EntityData.BundleName = "cisco_ios_xr"
    teSubTlv.EntityData.ParentYangName = "te-adv"
    teSubTlv.EntityData.SegmentPath = "te-sub-tlv" + types.AddNoKeyToken(teSubTlv)
    teSubTlv.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/te-advertisements/te-adv/" + teSubTlv.EntityData.SegmentPath
    teSubTlv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teSubTlv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teSubTlv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teSubTlv.EntityData.Children = types.NewOrderedMap()
    teSubTlv.EntityData.Leafs = types.NewOrderedMap()
    teSubTlv.EntityData.Leafs.Append("te-sub-tlv-type", types.YLeaf{"TeSubTlvType", teSubTlv.TeSubTlvType})
    teSubTlv.EntityData.Leafs.Append("te-sub-tlv-length", types.YLeaf{"TeSubTlvLength", teSubTlv.TeSubTlvLength})
    teSubTlv.EntityData.Leafs.Append("te-sub-tlv-value", types.YLeaf{"TeSubTlvValue", teSubTlv.TeSubTlvValue})

    teSubTlv.EntityData.YListKeys = []string {}

    return &(teSubTlv.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog
// TE adjacency-log for a single level and
// topology. Only available within the IPv4
// Unicast topology.
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Log entries. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry.
    LogEntry []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry
}

func (teAdjacencyLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog) GetEntityData() *types.CommonEntityData {
    teAdjacencyLog.EntityData.YFilter = teAdjacencyLog.YFilter
    teAdjacencyLog.EntityData.YangName = "te-adjacency-log"
    teAdjacencyLog.EntityData.BundleName = "cisco_ios_xr"
    teAdjacencyLog.EntityData.ParentYangName = "topology-level"
    teAdjacencyLog.EntityData.SegmentPath = "te-adjacency-log"
    teAdjacencyLog.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/" + teAdjacencyLog.EntityData.SegmentPath
    teAdjacencyLog.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teAdjacencyLog.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teAdjacencyLog.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teAdjacencyLog.EntityData.Children = types.NewOrderedMap()
    teAdjacencyLog.EntityData.Children.Append("log-entry", types.YChild{"LogEntry", nil})
    for i := range teAdjacencyLog.LogEntry {
        types.SetYListKey(teAdjacencyLog.LogEntry[i], i)
        teAdjacencyLog.EntityData.Children.Append(types.GetSegmentPath(teAdjacencyLog.LogEntry[i]), types.YChild{"LogEntry", teAdjacencyLog.LogEntry[i]})
    }
    teAdjacencyLog.EntityData.Leafs = types.NewOrderedMap()

    teAdjacencyLog.EntityData.YListKeys = []string {}

    return &(teAdjacencyLog.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry
// Log entries
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor ip address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborIpAddress interface{}

    // Up (TRUE) or down. The type is bool.
    Status interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    LogInterface interface{}

    // Neighbor system ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    TeLogNeighborSystemId interface{}

    // Generic entry data.
    GenericData Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData
}

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry) GetEntityData() *types.CommonEntityData {
    logEntry.EntityData.YFilter = logEntry.YFilter
    logEntry.EntityData.YangName = "log-entry"
    logEntry.EntityData.BundleName = "cisco_ios_xr"
    logEntry.EntityData.ParentYangName = "te-adjacency-log"
    logEntry.EntityData.SegmentPath = "log-entry" + types.AddNoKeyToken(logEntry)
    logEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/te-adjacency-log/" + logEntry.EntityData.SegmentPath
    logEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    logEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    logEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    logEntry.EntityData.Children = types.NewOrderedMap()
    logEntry.EntityData.Children.Append("generic-data", types.YChild{"GenericData", &logEntry.GenericData})
    logEntry.EntityData.Leafs = types.NewOrderedMap()
    logEntry.EntityData.Leafs.Append("neighbor-ip-address", types.YLeaf{"NeighborIpAddress", logEntry.NeighborIpAddress})
    logEntry.EntityData.Leafs.Append("status", types.YLeaf{"Status", logEntry.Status})
    logEntry.EntityData.Leafs.Append("log-interface", types.YLeaf{"LogInterface", logEntry.LogInterface})
    logEntry.EntityData.Leafs.Append("te-log-neighbor-system-id", types.YLeaf{"TeLogNeighborSystemId", logEntry.TeLogNeighborSystemId})

    logEntry.EntityData.YListKeys = []string {}

    return &(logEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData
// Generic entry data
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in UTC relative to Jan 1st, 1970.
    Timestamp Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData_Timestamp
}

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData) GetEntityData() *types.CommonEntityData {
    genericData.EntityData.YFilter = genericData.YFilter
    genericData.EntityData.YangName = "generic-data"
    genericData.EntityData.BundleName = "cisco_ios_xr"
    genericData.EntityData.ParentYangName = "log-entry"
    genericData.EntityData.SegmentPath = "generic-data"
    genericData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/te-adjacency-log/log-entry/" + genericData.EntityData.SegmentPath
    genericData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericData.EntityData.Children = types.NewOrderedMap()
    genericData.EntityData.Children.Append("timestamp", types.YChild{"Timestamp", &genericData.Timestamp})
    genericData.EntityData.Leafs = types.NewOrderedMap()

    genericData.EntityData.YListKeys = []string {}

    return &(genericData.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData_Timestamp
// Time in UTC relative to Jan 1st, 1970
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData_Timestamp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeAdjacencyLog_LogEntry_GenericData_Timestamp) GetEntityData() *types.CommonEntityData {
    timestamp.EntityData.YFilter = timestamp.YFilter
    timestamp.EntityData.YangName = "timestamp"
    timestamp.EntityData.BundleName = "cisco_ios_xr"
    timestamp.EntityData.ParentYangName = "generic-data"
    timestamp.EntityData.SegmentPath = "timestamp"
    timestamp.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/te-adjacency-log/log-entry/generic-data/" + timestamp.EntityData.SegmentPath
    timestamp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timestamp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timestamp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timestamp.EntityData.Children = types.NewOrderedMap()
    timestamp.EntityData.Leafs = types.NewOrderedMap()
    timestamp.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", timestamp.Seconds})
    timestamp.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", timestamp.NanoSeconds})

    timestamp.EntityData.YListKeys = []string {}

    return &(timestamp.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog
// Log of route calculations for a single
// level and topology
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SPF Log entries. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry.
    LogEntry []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry
}

func (spfLog *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog) GetEntityData() *types.CommonEntityData {
    spfLog.EntityData.YFilter = spfLog.YFilter
    spfLog.EntityData.YangName = "spf-log"
    spfLog.EntityData.BundleName = "cisco_ios_xr"
    spfLog.EntityData.ParentYangName = "topology-level"
    spfLog.EntityData.SegmentPath = "spf-log"
    spfLog.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/" + spfLog.EntityData.SegmentPath
    spfLog.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spfLog.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spfLog.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spfLog.EntityData.Children = types.NewOrderedMap()
    spfLog.EntityData.Children.Append("log-entry", types.YChild{"LogEntry", nil})
    for i := range spfLog.LogEntry {
        types.SetYListKey(spfLog.LogEntry[i], i)
        spfLog.EntityData.Children.Append(types.GetSegmentPath(spfLog.LogEntry[i]), types.YChild{"LogEntry", spfLog.LogEntry[i]})
    }
    spfLog.EntityData.Leafs = types.NewOrderedMap()

    spfLog.EntityData.YListKeys = []string {}

    return &(spfLog.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry
// SPF Log entries
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Type of calculation. The type is IsisSpfClass.
    Class interface{}

    // Time between the first trigger and the start of the route calculation, in
    // milliseconds. The type is interface{} with range: 0..4294967295. Units are
    // millisecond.
    WaitEnforced interface{}

    // Minimum time from end of this route calculation until the start of the
    // next, in milliseconds. The type is interface{} with range: 0..4294967295.
    // Units are millisecond.
    NextWaitInterval interface{}

    // Number of LSPs which arrived during the route calculation. The type is
    // interface{} with range: 0..4294967295.
    UpdatedLspCount interface{}

    // Generic entry data.
    GenericData Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData

    // Trigger information.
    Triggers Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers

    // Statistics for the SPT calculation phase.
    SptCalculationStatistics Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics

    // Statistics for the route update phase.
    RouteUpdateStatistics Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics
}

func (logEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry) GetEntityData() *types.CommonEntityData {
    logEntry.EntityData.YFilter = logEntry.YFilter
    logEntry.EntityData.YangName = "log-entry"
    logEntry.EntityData.BundleName = "cisco_ios_xr"
    logEntry.EntityData.ParentYangName = "spf-log"
    logEntry.EntityData.SegmentPath = "log-entry" + types.AddNoKeyToken(logEntry)
    logEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/" + logEntry.EntityData.SegmentPath
    logEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    logEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    logEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    logEntry.EntityData.Children = types.NewOrderedMap()
    logEntry.EntityData.Children.Append("generic-data", types.YChild{"GenericData", &logEntry.GenericData})
    logEntry.EntityData.Children.Append("triggers", types.YChild{"Triggers", &logEntry.Triggers})
    logEntry.EntityData.Children.Append("spt-calculation-statistics", types.YChild{"SptCalculationStatistics", &logEntry.SptCalculationStatistics})
    logEntry.EntityData.Children.Append("route-update-statistics", types.YChild{"RouteUpdateStatistics", &logEntry.RouteUpdateStatistics})
    logEntry.EntityData.Leafs = types.NewOrderedMap()
    logEntry.EntityData.Leafs.Append("class", types.YLeaf{"Class", logEntry.Class})
    logEntry.EntityData.Leafs.Append("wait-enforced", types.YLeaf{"WaitEnforced", logEntry.WaitEnforced})
    logEntry.EntityData.Leafs.Append("next-wait-interval", types.YLeaf{"NextWaitInterval", logEntry.NextWaitInterval})
    logEntry.EntityData.Leafs.Append("updated-lsp-count", types.YLeaf{"UpdatedLspCount", logEntry.UpdatedLspCount})

    logEntry.EntityData.YListKeys = []string {}

    return &(logEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData
// Generic entry data.
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in UTC relative to Jan 1st, 1970.
    Timestamp Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData_Timestamp
}

func (genericData *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData) GetEntityData() *types.CommonEntityData {
    genericData.EntityData.YFilter = genericData.YFilter
    genericData.EntityData.YangName = "generic-data"
    genericData.EntityData.BundleName = "cisco_ios_xr"
    genericData.EntityData.ParentYangName = "log-entry"
    genericData.EntityData.SegmentPath = "generic-data"
    genericData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/" + genericData.EntityData.SegmentPath
    genericData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericData.EntityData.Children = types.NewOrderedMap()
    genericData.EntityData.Children.Append("timestamp", types.YChild{"Timestamp", &genericData.Timestamp})
    genericData.EntityData.Leafs = types.NewOrderedMap()

    genericData.EntityData.YListKeys = []string {}

    return &(genericData.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData_Timestamp
// Time in UTC relative to Jan 1st, 1970
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData_Timestamp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (timestamp *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_GenericData_Timestamp) GetEntityData() *types.CommonEntityData {
    timestamp.EntityData.YFilter = timestamp.YFilter
    timestamp.EntityData.YangName = "timestamp"
    timestamp.EntityData.BundleName = "cisco_ios_xr"
    timestamp.EntityData.ParentYangName = "generic-data"
    timestamp.EntityData.SegmentPath = "timestamp"
    timestamp.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/generic-data/" + timestamp.EntityData.SegmentPath
    timestamp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timestamp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timestamp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timestamp.EntityData.Children = types.NewOrderedMap()
    timestamp.EntityData.Leafs = types.NewOrderedMap()
    timestamp.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", timestamp.Seconds})
    timestamp.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", timestamp.NanoSeconds})

    timestamp.EntityData.YListKeys = []string {}

    return &(timestamp.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers
// Trigger information
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of unique triggers on this run. The type is interface{} with range:
    // 0..4294967295.
    UniqueTriggerCount interface{}

    // ID of the first LSP to trigger the calculation, if any. The type is string
    // with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    FirstTriggerLspId interface{}

    // ID of a changed link in the first trigger LSP, if any. The type is string
    // with pattern: [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}.
    TriggerLink interface{}

    // ID of a changed next hop, if any. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    TriggerNextHopId interface{}

    // Is this SR micro loop calculation?. The type is bool.
    IsSrUloopCalculation interface{}

    // Is this SR micro loop calculation for link down?. The type is bool.
    IsSrUloopLinkDown interface{}

    // ID of a changed prefix in the first trigger LSP, if any.
    TriggerPrefix Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix

    // Triggers applying to this log entry. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger.
    Trigger []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger
}

func (triggers *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers) GetEntityData() *types.CommonEntityData {
    triggers.EntityData.YFilter = triggers.YFilter
    triggers.EntityData.YangName = "triggers"
    triggers.EntityData.BundleName = "cisco_ios_xr"
    triggers.EntityData.ParentYangName = "log-entry"
    triggers.EntityData.SegmentPath = "triggers"
    triggers.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/" + triggers.EntityData.SegmentPath
    triggers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    triggers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    triggers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    triggers.EntityData.Children = types.NewOrderedMap()
    triggers.EntityData.Children.Append("trigger-prefix", types.YChild{"TriggerPrefix", &triggers.TriggerPrefix})
    triggers.EntityData.Children.Append("trigger", types.YChild{"Trigger", nil})
    for i := range triggers.Trigger {
        types.SetYListKey(triggers.Trigger[i], i)
        triggers.EntityData.Children.Append(types.GetSegmentPath(triggers.Trigger[i]), types.YChild{"Trigger", triggers.Trigger[i]})
    }
    triggers.EntityData.Leafs = types.NewOrderedMap()
    triggers.EntityData.Leafs.Append("unique-trigger-count", types.YLeaf{"UniqueTriggerCount", triggers.UniqueTriggerCount})
    triggers.EntityData.Leafs.Append("first-trigger-lsp-id", types.YLeaf{"FirstTriggerLspId", triggers.FirstTriggerLspId})
    triggers.EntityData.Leafs.Append("trigger-link", types.YLeaf{"TriggerLink", triggers.TriggerLink})
    triggers.EntityData.Leafs.Append("trigger-next-hop-id", types.YLeaf{"TriggerNextHopId", triggers.TriggerNextHopId})
    triggers.EntityData.Leafs.Append("is-sr-uloop-calculation", types.YLeaf{"IsSrUloopCalculation", triggers.IsSrUloopCalculation})
    triggers.EntityData.Leafs.Append("is-sr-uloop-link-down", types.YLeaf{"IsSrUloopLinkDown", triggers.IsSrUloopLinkDown})

    triggers.EntityData.YListKeys = []string {}

    return &(triggers.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix
// ID of a changed prefix in the first trigger LSP,
// if any
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IsisAfId.
    AfName interface{}

    // ipv4.
    Ipv4 Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv4

    // ipv6.
    Ipv6 Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv6
}

func (triggerPrefix *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix) GetEntityData() *types.CommonEntityData {
    triggerPrefix.EntityData.YFilter = triggerPrefix.YFilter
    triggerPrefix.EntityData.YangName = "trigger-prefix"
    triggerPrefix.EntityData.BundleName = "cisco_ios_xr"
    triggerPrefix.EntityData.ParentYangName = "triggers"
    triggerPrefix.EntityData.SegmentPath = "trigger-prefix"
    triggerPrefix.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/triggers/" + triggerPrefix.EntityData.SegmentPath
    triggerPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    triggerPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    triggerPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    triggerPrefix.EntityData.Children = types.NewOrderedMap()
    triggerPrefix.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &triggerPrefix.Ipv4})
    triggerPrefix.EntityData.Children.Append("ipv6", types.YChild{"Ipv6", &triggerPrefix.Ipv6})
    triggerPrefix.EntityData.Leafs = types.NewOrderedMap()
    triggerPrefix.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", triggerPrefix.AfName})

    triggerPrefix.EntityData.YListKeys = []string {}

    return &(triggerPrefix.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv4
// ipv4
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv4 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "trigger-prefix"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/triggers/trigger-prefix/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4.Prefix})
    ipv4.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4.PrefixLength})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv6
// ipv6
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv6 *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_TriggerPrefix_Ipv6) GetEntityData() *types.CommonEntityData {
    ipv6.EntityData.YFilter = ipv6.YFilter
    ipv6.EntityData.YangName = "ipv6"
    ipv6.EntityData.BundleName = "cisco_ios_xr"
    ipv6.EntityData.ParentYangName = "trigger-prefix"
    ipv6.EntityData.SegmentPath = "ipv6"
    ipv6.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/triggers/trigger-prefix/" + ipv6.EntityData.SegmentPath
    ipv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6.EntityData.Children = types.NewOrderedMap()
    ipv6.EntityData.Leafs = types.NewOrderedMap()
    ipv6.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6.Prefix})
    ipv6.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6.PrefixLength})

    ipv6.EntityData.YListKeys = []string {}

    return &(ipv6.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger
// Triggers applying to this log entry
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is IsisSpfTrigger.
    Entry interface{}
}

func (trigger *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_Triggers_Trigger) GetEntityData() *types.CommonEntityData {
    trigger.EntityData.YFilter = trigger.YFilter
    trigger.EntityData.YangName = "trigger"
    trigger.EntityData.BundleName = "cisco_ios_xr"
    trigger.EntityData.ParentYangName = "triggers"
    trigger.EntityData.SegmentPath = "trigger" + types.AddNoKeyToken(trigger)
    trigger.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/triggers/" + trigger.EntityData.SegmentPath
    trigger.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trigger.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trigger.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trigger.EntityData.Children = types.NewOrderedMap()
    trigger.EntityData.Leafs = types.NewOrderedMap()
    trigger.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", trigger.Entry})

    trigger.EntityData.YListKeys = []string {}

    return &(trigger.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics
// Statistics for the SPT calculation phase
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Duration of the SPT calculation.
    Duration Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_Duration

    // Node counts.
    NodeCounts Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_NodeCounts
}

func (sptCalculationStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics) GetEntityData() *types.CommonEntityData {
    sptCalculationStatistics.EntityData.YFilter = sptCalculationStatistics.YFilter
    sptCalculationStatistics.EntityData.YangName = "spt-calculation-statistics"
    sptCalculationStatistics.EntityData.BundleName = "cisco_ios_xr"
    sptCalculationStatistics.EntityData.ParentYangName = "log-entry"
    sptCalculationStatistics.EntityData.SegmentPath = "spt-calculation-statistics"
    sptCalculationStatistics.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/" + sptCalculationStatistics.EntityData.SegmentPath
    sptCalculationStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sptCalculationStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sptCalculationStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sptCalculationStatistics.EntityData.Children = types.NewOrderedMap()
    sptCalculationStatistics.EntityData.Children.Append("duration", types.YChild{"Duration", &sptCalculationStatistics.Duration})
    sptCalculationStatistics.EntityData.Children.Append("node-counts", types.YChild{"NodeCounts", &sptCalculationStatistics.NodeCounts})
    sptCalculationStatistics.EntityData.Leafs = types.NewOrderedMap()

    sptCalculationStatistics.EntityData.YListKeys = []string {}

    return &(sptCalculationStatistics.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_Duration
// Duration of the SPT calculation
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_Duration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_Duration) GetEntityData() *types.CommonEntityData {
    duration.EntityData.YFilter = duration.YFilter
    duration.EntityData.YangName = "duration"
    duration.EntityData.BundleName = "cisco_ios_xr"
    duration.EntityData.ParentYangName = "spt-calculation-statistics"
    duration.EntityData.SegmentPath = "duration"
    duration.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/spt-calculation-statistics/" + duration.EntityData.SegmentPath
    duration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    duration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    duration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    duration.EntityData.Children = types.NewOrderedMap()
    duration.EntityData.Leafs = types.NewOrderedMap()
    duration.EntityData.Leafs.Append("real-duration", types.YLeaf{"RealDuration", duration.RealDuration})
    duration.EntityData.Leafs.Append("cpu-duration", types.YLeaf{"CpuDuration", duration.CpuDuration})

    duration.EntityData.YListKeys = []string {}

    return &(duration.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_NodeCounts
// Node counts
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_NodeCounts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of unreachable nodes in the database. The type is interface{} with
    // range: 0..4294967295.
    Unreachable interface{}

    // Number of reachable nodes in the database. The type is interface{} with
    // range: 0..4294967295.
    Reachable interface{}

    // Number of nodes added to the SPT. The type is interface{} with range:
    // 0..4294967295.
    Added interface{}

    // Number of nodes deleted from the SPT. The type is interface{} with range:
    // 0..4294967295.
    Deleted interface{}

    // Number of modified nodes (first hop and/or metric change). The type is
    // interface{} with range: 0..4294967295.
    Modified interface{}

    // Number of nodes touched whilst calculating the SPT. The type is interface{}
    // with range: 0..4294967295.
    Touched interface{}
}

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_SptCalculationStatistics_NodeCounts) GetEntityData() *types.CommonEntityData {
    nodeCounts.EntityData.YFilter = nodeCounts.YFilter
    nodeCounts.EntityData.YangName = "node-counts"
    nodeCounts.EntityData.BundleName = "cisco_ios_xr"
    nodeCounts.EntityData.ParentYangName = "spt-calculation-statistics"
    nodeCounts.EntityData.SegmentPath = "node-counts"
    nodeCounts.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/spt-calculation-statistics/" + nodeCounts.EntityData.SegmentPath
    nodeCounts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeCounts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeCounts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeCounts.EntityData.Children = types.NewOrderedMap()
    nodeCounts.EntityData.Leafs = types.NewOrderedMap()
    nodeCounts.EntityData.Leafs.Append("unreachable", types.YLeaf{"Unreachable", nodeCounts.Unreachable})
    nodeCounts.EntityData.Leafs.Append("reachable", types.YLeaf{"Reachable", nodeCounts.Reachable})
    nodeCounts.EntityData.Leafs.Append("added", types.YLeaf{"Added", nodeCounts.Added})
    nodeCounts.EntityData.Leafs.Append("deleted", types.YLeaf{"Deleted", nodeCounts.Deleted})
    nodeCounts.EntityData.Leafs.Append("modified", types.YLeaf{"Modified", nodeCounts.Modified})
    nodeCounts.EntityData.Leafs.Append("touched", types.YLeaf{"Touched", nodeCounts.Touched})

    nodeCounts.EntityData.YListKeys = []string {}

    return &(nodeCounts.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics
// Statistics for the route update phase
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Duration of the routing table update.
    Duration Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_Duration

    // Breakdown of the time taken by the routing table update.
    DurationBreakdown Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown

    // Node counts.
    NodeCounts Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts

    // Prefix item counts.
    ItemCounts Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts

    // Distinct prefix counts.
    RouteCounts Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts

    // Number of RIB batches sent.
    RibBatchCounts Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RibBatchCounts
}

func (routeUpdateStatistics *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics) GetEntityData() *types.CommonEntityData {
    routeUpdateStatistics.EntityData.YFilter = routeUpdateStatistics.YFilter
    routeUpdateStatistics.EntityData.YangName = "route-update-statistics"
    routeUpdateStatistics.EntityData.BundleName = "cisco_ios_xr"
    routeUpdateStatistics.EntityData.ParentYangName = "log-entry"
    routeUpdateStatistics.EntityData.SegmentPath = "route-update-statistics"
    routeUpdateStatistics.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/" + routeUpdateStatistics.EntityData.SegmentPath
    routeUpdateStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeUpdateStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeUpdateStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeUpdateStatistics.EntityData.Children = types.NewOrderedMap()
    routeUpdateStatistics.EntityData.Children.Append("duration", types.YChild{"Duration", &routeUpdateStatistics.Duration})
    routeUpdateStatistics.EntityData.Children.Append("duration-breakdown", types.YChild{"DurationBreakdown", &routeUpdateStatistics.DurationBreakdown})
    routeUpdateStatistics.EntityData.Children.Append("node-counts", types.YChild{"NodeCounts", &routeUpdateStatistics.NodeCounts})
    routeUpdateStatistics.EntityData.Children.Append("item-counts", types.YChild{"ItemCounts", &routeUpdateStatistics.ItemCounts})
    routeUpdateStatistics.EntityData.Children.Append("route-counts", types.YChild{"RouteCounts", &routeUpdateStatistics.RouteCounts})
    routeUpdateStatistics.EntityData.Children.Append("rib-batch-counts", types.YChild{"RibBatchCounts", &routeUpdateStatistics.RibBatchCounts})
    routeUpdateStatistics.EntityData.Leafs = types.NewOrderedMap()

    routeUpdateStatistics.EntityData.YListKeys = []string {}

    return &(routeUpdateStatistics.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_Duration
// Duration of the routing table update
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_Duration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (duration *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_Duration) GetEntityData() *types.CommonEntityData {
    duration.EntityData.YFilter = duration.YFilter
    duration.EntityData.YangName = "duration"
    duration.EntityData.BundleName = "cisco_ios_xr"
    duration.EntityData.ParentYangName = "route-update-statistics"
    duration.EntityData.SegmentPath = "duration"
    duration.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/" + duration.EntityData.SegmentPath
    duration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    duration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    duration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    duration.EntityData.Children = types.NewOrderedMap()
    duration.EntityData.Leafs = types.NewOrderedMap()
    duration.EntityData.Leafs.Append("real-duration", types.YLeaf{"RealDuration", duration.RealDuration})
    duration.EntityData.Leafs.Append("cpu-duration", types.YLeaf{"CpuDuration", duration.CpuDuration})

    duration.EntityData.YListKeys = []string {}

    return &(duration.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown
// Breakdown of the time taken by the routing table
// update
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time to update IS-IS's local RIB.
    LocalRibUpdate Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate

    // Time to build the update to send to the global RIB.
    GlobalRibBuild Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild

    // Time to send the update to the global RIB.
    GlobalRibSend Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend
}

func (durationBreakdown *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown) GetEntityData() *types.CommonEntityData {
    durationBreakdown.EntityData.YFilter = durationBreakdown.YFilter
    durationBreakdown.EntityData.YangName = "duration-breakdown"
    durationBreakdown.EntityData.BundleName = "cisco_ios_xr"
    durationBreakdown.EntityData.ParentYangName = "route-update-statistics"
    durationBreakdown.EntityData.SegmentPath = "duration-breakdown"
    durationBreakdown.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/" + durationBreakdown.EntityData.SegmentPath
    durationBreakdown.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    durationBreakdown.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    durationBreakdown.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    durationBreakdown.EntityData.Children = types.NewOrderedMap()
    durationBreakdown.EntityData.Children.Append("local-rib-update", types.YChild{"LocalRibUpdate", &durationBreakdown.LocalRibUpdate})
    durationBreakdown.EntityData.Children.Append("global-rib-build", types.YChild{"GlobalRibBuild", &durationBreakdown.GlobalRibBuild})
    durationBreakdown.EntityData.Children.Append("global-rib-send", types.YChild{"GlobalRibSend", &durationBreakdown.GlobalRibSend})
    durationBreakdown.EntityData.Leafs = types.NewOrderedMap()

    durationBreakdown.EntityData.YListKeys = []string {}

    return &(durationBreakdown.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate
// Time to update IS-IS's local RIB
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority.
    Critical Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Critical

    // High priority.
    High Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_High

    // Medium priority.
    Medium Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Medium

    // Low priority.
    Low Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Low
}

func (localRibUpdate *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate) GetEntityData() *types.CommonEntityData {
    localRibUpdate.EntityData.YFilter = localRibUpdate.YFilter
    localRibUpdate.EntityData.YangName = "local-rib-update"
    localRibUpdate.EntityData.BundleName = "cisco_ios_xr"
    localRibUpdate.EntityData.ParentYangName = "duration-breakdown"
    localRibUpdate.EntityData.SegmentPath = "local-rib-update"
    localRibUpdate.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/duration-breakdown/" + localRibUpdate.EntityData.SegmentPath
    localRibUpdate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localRibUpdate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localRibUpdate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localRibUpdate.EntityData.Children = types.NewOrderedMap()
    localRibUpdate.EntityData.Children.Append("critical", types.YChild{"Critical", &localRibUpdate.Critical})
    localRibUpdate.EntityData.Children.Append("high", types.YChild{"High", &localRibUpdate.High})
    localRibUpdate.EntityData.Children.Append("medium", types.YChild{"Medium", &localRibUpdate.Medium})
    localRibUpdate.EntityData.Children.Append("low", types.YChild{"Low", &localRibUpdate.Low})
    localRibUpdate.EntityData.Leafs = types.NewOrderedMap()

    localRibUpdate.EntityData.YListKeys = []string {}

    return &(localRibUpdate.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Critical
// Critical priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Critical struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Critical) GetEntityData() *types.CommonEntityData {
    critical.EntityData.YFilter = critical.YFilter
    critical.EntityData.YangName = "critical"
    critical.EntityData.BundleName = "cisco_ios_xr"
    critical.EntityData.ParentYangName = "local-rib-update"
    critical.EntityData.SegmentPath = "critical"
    critical.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/duration-breakdown/local-rib-update/" + critical.EntityData.SegmentPath
    critical.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    critical.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    critical.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    critical.EntityData.Children = types.NewOrderedMap()
    critical.EntityData.Leafs = types.NewOrderedMap()
    critical.EntityData.Leafs.Append("real-duration", types.YLeaf{"RealDuration", critical.RealDuration})
    critical.EntityData.Leafs.Append("cpu-duration", types.YLeaf{"CpuDuration", critical.CpuDuration})

    critical.EntityData.YListKeys = []string {}

    return &(critical.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_High
// High priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_High struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_High) GetEntityData() *types.CommonEntityData {
    high.EntityData.YFilter = high.YFilter
    high.EntityData.YangName = "high"
    high.EntityData.BundleName = "cisco_ios_xr"
    high.EntityData.ParentYangName = "local-rib-update"
    high.EntityData.SegmentPath = "high"
    high.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/duration-breakdown/local-rib-update/" + high.EntityData.SegmentPath
    high.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    high.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    high.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    high.EntityData.Children = types.NewOrderedMap()
    high.EntityData.Leafs = types.NewOrderedMap()
    high.EntityData.Leafs.Append("real-duration", types.YLeaf{"RealDuration", high.RealDuration})
    high.EntityData.Leafs.Append("cpu-duration", types.YLeaf{"CpuDuration", high.CpuDuration})

    high.EntityData.YListKeys = []string {}

    return &(high.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Medium
// Medium priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Medium struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Medium) GetEntityData() *types.CommonEntityData {
    medium.EntityData.YFilter = medium.YFilter
    medium.EntityData.YangName = "medium"
    medium.EntityData.BundleName = "cisco_ios_xr"
    medium.EntityData.ParentYangName = "local-rib-update"
    medium.EntityData.SegmentPath = "medium"
    medium.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/duration-breakdown/local-rib-update/" + medium.EntityData.SegmentPath
    medium.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    medium.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    medium.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    medium.EntityData.Children = types.NewOrderedMap()
    medium.EntityData.Leafs = types.NewOrderedMap()
    medium.EntityData.Leafs.Append("real-duration", types.YLeaf{"RealDuration", medium.RealDuration})
    medium.EntityData.Leafs.Append("cpu-duration", types.YLeaf{"CpuDuration", medium.CpuDuration})

    medium.EntityData.YListKeys = []string {}

    return &(medium.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Low
// Low priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Low struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_LocalRibUpdate_Low) GetEntityData() *types.CommonEntityData {
    low.EntityData.YFilter = low.YFilter
    low.EntityData.YangName = "low"
    low.EntityData.BundleName = "cisco_ios_xr"
    low.EntityData.ParentYangName = "local-rib-update"
    low.EntityData.SegmentPath = "low"
    low.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/duration-breakdown/local-rib-update/" + low.EntityData.SegmentPath
    low.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    low.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    low.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    low.EntityData.Children = types.NewOrderedMap()
    low.EntityData.Leafs = types.NewOrderedMap()
    low.EntityData.Leafs.Append("real-duration", types.YLeaf{"RealDuration", low.RealDuration})
    low.EntityData.Leafs.Append("cpu-duration", types.YLeaf{"CpuDuration", low.CpuDuration})

    low.EntityData.YListKeys = []string {}

    return &(low.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild
// Time to build the update to send to the global
// RIB
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority.
    Critical Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Critical

    // High priority.
    High Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_High

    // Medium priority.
    Medium Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Medium

    // Low priority.
    Low Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Low
}

func (globalRibBuild *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild) GetEntityData() *types.CommonEntityData {
    globalRibBuild.EntityData.YFilter = globalRibBuild.YFilter
    globalRibBuild.EntityData.YangName = "global-rib-build"
    globalRibBuild.EntityData.BundleName = "cisco_ios_xr"
    globalRibBuild.EntityData.ParentYangName = "duration-breakdown"
    globalRibBuild.EntityData.SegmentPath = "global-rib-build"
    globalRibBuild.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/duration-breakdown/" + globalRibBuild.EntityData.SegmentPath
    globalRibBuild.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalRibBuild.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalRibBuild.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalRibBuild.EntityData.Children = types.NewOrderedMap()
    globalRibBuild.EntityData.Children.Append("critical", types.YChild{"Critical", &globalRibBuild.Critical})
    globalRibBuild.EntityData.Children.Append("high", types.YChild{"High", &globalRibBuild.High})
    globalRibBuild.EntityData.Children.Append("medium", types.YChild{"Medium", &globalRibBuild.Medium})
    globalRibBuild.EntityData.Children.Append("low", types.YChild{"Low", &globalRibBuild.Low})
    globalRibBuild.EntityData.Leafs = types.NewOrderedMap()

    globalRibBuild.EntityData.YListKeys = []string {}

    return &(globalRibBuild.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Critical
// Critical priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Critical struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Critical) GetEntityData() *types.CommonEntityData {
    critical.EntityData.YFilter = critical.YFilter
    critical.EntityData.YangName = "critical"
    critical.EntityData.BundleName = "cisco_ios_xr"
    critical.EntityData.ParentYangName = "global-rib-build"
    critical.EntityData.SegmentPath = "critical"
    critical.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/duration-breakdown/global-rib-build/" + critical.EntityData.SegmentPath
    critical.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    critical.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    critical.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    critical.EntityData.Children = types.NewOrderedMap()
    critical.EntityData.Leafs = types.NewOrderedMap()
    critical.EntityData.Leafs.Append("real-duration", types.YLeaf{"RealDuration", critical.RealDuration})
    critical.EntityData.Leafs.Append("cpu-duration", types.YLeaf{"CpuDuration", critical.CpuDuration})

    critical.EntityData.YListKeys = []string {}

    return &(critical.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_High
// High priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_High struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_High) GetEntityData() *types.CommonEntityData {
    high.EntityData.YFilter = high.YFilter
    high.EntityData.YangName = "high"
    high.EntityData.BundleName = "cisco_ios_xr"
    high.EntityData.ParentYangName = "global-rib-build"
    high.EntityData.SegmentPath = "high"
    high.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/duration-breakdown/global-rib-build/" + high.EntityData.SegmentPath
    high.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    high.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    high.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    high.EntityData.Children = types.NewOrderedMap()
    high.EntityData.Leafs = types.NewOrderedMap()
    high.EntityData.Leafs.Append("real-duration", types.YLeaf{"RealDuration", high.RealDuration})
    high.EntityData.Leafs.Append("cpu-duration", types.YLeaf{"CpuDuration", high.CpuDuration})

    high.EntityData.YListKeys = []string {}

    return &(high.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Medium
// Medium priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Medium struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Medium) GetEntityData() *types.CommonEntityData {
    medium.EntityData.YFilter = medium.YFilter
    medium.EntityData.YangName = "medium"
    medium.EntityData.BundleName = "cisco_ios_xr"
    medium.EntityData.ParentYangName = "global-rib-build"
    medium.EntityData.SegmentPath = "medium"
    medium.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/duration-breakdown/global-rib-build/" + medium.EntityData.SegmentPath
    medium.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    medium.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    medium.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    medium.EntityData.Children = types.NewOrderedMap()
    medium.EntityData.Leafs = types.NewOrderedMap()
    medium.EntityData.Leafs.Append("real-duration", types.YLeaf{"RealDuration", medium.RealDuration})
    medium.EntityData.Leafs.Append("cpu-duration", types.YLeaf{"CpuDuration", medium.CpuDuration})

    medium.EntityData.YListKeys = []string {}

    return &(medium.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Low
// Low priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Low struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibBuild_Low) GetEntityData() *types.CommonEntityData {
    low.EntityData.YFilter = low.YFilter
    low.EntityData.YangName = "low"
    low.EntityData.BundleName = "cisco_ios_xr"
    low.EntityData.ParentYangName = "global-rib-build"
    low.EntityData.SegmentPath = "low"
    low.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/duration-breakdown/global-rib-build/" + low.EntityData.SegmentPath
    low.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    low.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    low.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    low.EntityData.Children = types.NewOrderedMap()
    low.EntityData.Leafs = types.NewOrderedMap()
    low.EntityData.Leafs.Append("real-duration", types.YLeaf{"RealDuration", low.RealDuration})
    low.EntityData.Leafs.Append("cpu-duration", types.YLeaf{"CpuDuration", low.CpuDuration})

    low.EntityData.YListKeys = []string {}

    return &(low.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend
// Time to send the update to the global RIB
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority.
    Critical Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Critical

    // High priority.
    High Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_High

    // Medium priority.
    Medium Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Medium

    // Low priority.
    Low Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Low
}

func (globalRibSend *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend) GetEntityData() *types.CommonEntityData {
    globalRibSend.EntityData.YFilter = globalRibSend.YFilter
    globalRibSend.EntityData.YangName = "global-rib-send"
    globalRibSend.EntityData.BundleName = "cisco_ios_xr"
    globalRibSend.EntityData.ParentYangName = "duration-breakdown"
    globalRibSend.EntityData.SegmentPath = "global-rib-send"
    globalRibSend.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/duration-breakdown/" + globalRibSend.EntityData.SegmentPath
    globalRibSend.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalRibSend.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalRibSend.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalRibSend.EntityData.Children = types.NewOrderedMap()
    globalRibSend.EntityData.Children.Append("critical", types.YChild{"Critical", &globalRibSend.Critical})
    globalRibSend.EntityData.Children.Append("high", types.YChild{"High", &globalRibSend.High})
    globalRibSend.EntityData.Children.Append("medium", types.YChild{"Medium", &globalRibSend.Medium})
    globalRibSend.EntityData.Children.Append("low", types.YChild{"Low", &globalRibSend.Low})
    globalRibSend.EntityData.Leafs = types.NewOrderedMap()

    globalRibSend.EntityData.YListKeys = []string {}

    return &(globalRibSend.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Critical
// Critical priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Critical struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (critical *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Critical) GetEntityData() *types.CommonEntityData {
    critical.EntityData.YFilter = critical.YFilter
    critical.EntityData.YangName = "critical"
    critical.EntityData.BundleName = "cisco_ios_xr"
    critical.EntityData.ParentYangName = "global-rib-send"
    critical.EntityData.SegmentPath = "critical"
    critical.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/duration-breakdown/global-rib-send/" + critical.EntityData.SegmentPath
    critical.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    critical.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    critical.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    critical.EntityData.Children = types.NewOrderedMap()
    critical.EntityData.Leafs = types.NewOrderedMap()
    critical.EntityData.Leafs.Append("real-duration", types.YLeaf{"RealDuration", critical.RealDuration})
    critical.EntityData.Leafs.Append("cpu-duration", types.YLeaf{"CpuDuration", critical.CpuDuration})

    critical.EntityData.YListKeys = []string {}

    return &(critical.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_High
// High priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_High struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (high *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_High) GetEntityData() *types.CommonEntityData {
    high.EntityData.YFilter = high.YFilter
    high.EntityData.YangName = "high"
    high.EntityData.BundleName = "cisco_ios_xr"
    high.EntityData.ParentYangName = "global-rib-send"
    high.EntityData.SegmentPath = "high"
    high.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/duration-breakdown/global-rib-send/" + high.EntityData.SegmentPath
    high.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    high.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    high.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    high.EntityData.Children = types.NewOrderedMap()
    high.EntityData.Leafs = types.NewOrderedMap()
    high.EntityData.Leafs.Append("real-duration", types.YLeaf{"RealDuration", high.RealDuration})
    high.EntityData.Leafs.Append("cpu-duration", types.YLeaf{"CpuDuration", high.CpuDuration})

    high.EntityData.YListKeys = []string {}

    return &(high.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Medium
// Medium priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Medium struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (medium *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Medium) GetEntityData() *types.CommonEntityData {
    medium.EntityData.YFilter = medium.YFilter
    medium.EntityData.YangName = "medium"
    medium.EntityData.BundleName = "cisco_ios_xr"
    medium.EntityData.ParentYangName = "global-rib-send"
    medium.EntityData.SegmentPath = "medium"
    medium.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/duration-breakdown/global-rib-send/" + medium.EntityData.SegmentPath
    medium.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    medium.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    medium.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    medium.EntityData.Children = types.NewOrderedMap()
    medium.EntityData.Leafs = types.NewOrderedMap()
    medium.EntityData.Leafs.Append("real-duration", types.YLeaf{"RealDuration", medium.RealDuration})
    medium.EntityData.Leafs.Append("cpu-duration", types.YLeaf{"CpuDuration", medium.CpuDuration})

    medium.EntityData.YListKeys = []string {}

    return &(medium.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Low
// Low priority
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Low struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Real time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RealDuration interface{}

    // CPU time duration in milliseconds. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    CpuDuration interface{}
}

func (low *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_DurationBreakdown_GlobalRibSend_Low) GetEntityData() *types.CommonEntityData {
    low.EntityData.YFilter = low.YFilter
    low.EntityData.YangName = "low"
    low.EntityData.BundleName = "cisco_ios_xr"
    low.EntityData.ParentYangName = "global-rib-send"
    low.EntityData.SegmentPath = "low"
    low.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/duration-breakdown/global-rib-send/" + low.EntityData.SegmentPath
    low.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    low.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    low.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    low.EntityData.Children = types.NewOrderedMap()
    low.EntityData.Leafs = types.NewOrderedMap()
    low.EntityData.Leafs.Append("real-duration", types.YLeaf{"RealDuration", low.RealDuration})
    low.EntityData.Leafs.Append("cpu-duration", types.YLeaf{"CpuDuration", low.CpuDuration})

    low.EntityData.YListKeys = []string {}

    return &(low.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts
// Node counts
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of nodes considered during route update. The type is
    // interface{} with range: 0..4294967295.
    TotalTouched interface{}

    // Per-priority count of nodes considered during route update.
    PerPriorityTouched Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts_PerPriorityTouched
}

func (nodeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts) GetEntityData() *types.CommonEntityData {
    nodeCounts.EntityData.YFilter = nodeCounts.YFilter
    nodeCounts.EntityData.YangName = "node-counts"
    nodeCounts.EntityData.BundleName = "cisco_ios_xr"
    nodeCounts.EntityData.ParentYangName = "route-update-statistics"
    nodeCounts.EntityData.SegmentPath = "node-counts"
    nodeCounts.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/" + nodeCounts.EntityData.SegmentPath
    nodeCounts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeCounts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeCounts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeCounts.EntityData.Children = types.NewOrderedMap()
    nodeCounts.EntityData.Children.Append("per-priority-touched", types.YChild{"PerPriorityTouched", &nodeCounts.PerPriorityTouched})
    nodeCounts.EntityData.Leafs = types.NewOrderedMap()
    nodeCounts.EntityData.Leafs.Append("total-touched", types.YLeaf{"TotalTouched", nodeCounts.TotalTouched})

    nodeCounts.EntityData.YListKeys = []string {}

    return &(nodeCounts.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts_PerPriorityTouched
// Per-priority count of nodes considered during
// route update
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts_PerPriorityTouched struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (perPriorityTouched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_NodeCounts_PerPriorityTouched) GetEntityData() *types.CommonEntityData {
    perPriorityTouched.EntityData.YFilter = perPriorityTouched.YFilter
    perPriorityTouched.EntityData.YangName = "per-priority-touched"
    perPriorityTouched.EntityData.BundleName = "cisco_ios_xr"
    perPriorityTouched.EntityData.ParentYangName = "node-counts"
    perPriorityTouched.EntityData.SegmentPath = "per-priority-touched"
    perPriorityTouched.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/node-counts/" + perPriorityTouched.EntityData.SegmentPath
    perPriorityTouched.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perPriorityTouched.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perPriorityTouched.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perPriorityTouched.EntityData.Children = types.NewOrderedMap()
    perPriorityTouched.EntityData.Leafs = types.NewOrderedMap()
    perPriorityTouched.EntityData.Leafs.Append("critical", types.YLeaf{"Critical", perPriorityTouched.Critical})
    perPriorityTouched.EntityData.Leafs.Append("high", types.YLeaf{"High", perPriorityTouched.High})
    perPriorityTouched.EntityData.Leafs.Append("medium", types.YLeaf{"Medium", perPriorityTouched.Medium})
    perPriorityTouched.EntityData.Leafs.Append("low", types.YLeaf{"Low", perPriorityTouched.Low})

    perPriorityTouched.EntityData.YListKeys = []string {}

    return &(perPriorityTouched.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts
// Prefix item counts
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of unreachable prefixes in the database.
    Unreachable Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Unreachable

    // Number of reachable prefixes in the database.
    Reachable Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Reachable

    // Number of prefixes added during calculation.
    Added Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Added

    // Number of prefixes deleted during calculation.
    Deleted Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Deleted

    // Number of prefixes modified, i.e. a first hop and/or metric change.
    Modified Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Modified

    // Number of prefixes considered whilst updating the routing table.
    Touched Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Touched
}

func (itemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts) GetEntityData() *types.CommonEntityData {
    itemCounts.EntityData.YFilter = itemCounts.YFilter
    itemCounts.EntityData.YangName = "item-counts"
    itemCounts.EntityData.BundleName = "cisco_ios_xr"
    itemCounts.EntityData.ParentYangName = "route-update-statistics"
    itemCounts.EntityData.SegmentPath = "item-counts"
    itemCounts.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/" + itemCounts.EntityData.SegmentPath
    itemCounts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    itemCounts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    itemCounts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    itemCounts.EntityData.Children = types.NewOrderedMap()
    itemCounts.EntityData.Children.Append("unreachable", types.YChild{"Unreachable", &itemCounts.Unreachable})
    itemCounts.EntityData.Children.Append("reachable", types.YChild{"Reachable", &itemCounts.Reachable})
    itemCounts.EntityData.Children.Append("added", types.YChild{"Added", &itemCounts.Added})
    itemCounts.EntityData.Children.Append("deleted", types.YChild{"Deleted", &itemCounts.Deleted})
    itemCounts.EntityData.Children.Append("modified", types.YChild{"Modified", &itemCounts.Modified})
    itemCounts.EntityData.Children.Append("touched", types.YChild{"Touched", &itemCounts.Touched})
    itemCounts.EntityData.Leafs = types.NewOrderedMap()

    itemCounts.EntityData.YListKeys = []string {}

    return &(itemCounts.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Unreachable
// Number of unreachable prefixes in the database
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Unreachable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Unreachable) GetEntityData() *types.CommonEntityData {
    unreachable.EntityData.YFilter = unreachable.YFilter
    unreachable.EntityData.YangName = "unreachable"
    unreachable.EntityData.BundleName = "cisco_ios_xr"
    unreachable.EntityData.ParentYangName = "item-counts"
    unreachable.EntityData.SegmentPath = "unreachable"
    unreachable.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/item-counts/" + unreachable.EntityData.SegmentPath
    unreachable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unreachable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unreachable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unreachable.EntityData.Children = types.NewOrderedMap()
    unreachable.EntityData.Leafs = types.NewOrderedMap()
    unreachable.EntityData.Leafs.Append("critical", types.YLeaf{"Critical", unreachable.Critical})
    unreachable.EntityData.Leafs.Append("high", types.YLeaf{"High", unreachable.High})
    unreachable.EntityData.Leafs.Append("medium", types.YLeaf{"Medium", unreachable.Medium})
    unreachable.EntityData.Leafs.Append("low", types.YLeaf{"Low", unreachable.Low})

    unreachable.EntityData.YListKeys = []string {}

    return &(unreachable.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Reachable
// Number of reachable prefixes in the database
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Reachable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Reachable) GetEntityData() *types.CommonEntityData {
    reachable.EntityData.YFilter = reachable.YFilter
    reachable.EntityData.YangName = "reachable"
    reachable.EntityData.BundleName = "cisco_ios_xr"
    reachable.EntityData.ParentYangName = "item-counts"
    reachable.EntityData.SegmentPath = "reachable"
    reachable.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/item-counts/" + reachable.EntityData.SegmentPath
    reachable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    reachable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    reachable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    reachable.EntityData.Children = types.NewOrderedMap()
    reachable.EntityData.Leafs = types.NewOrderedMap()
    reachable.EntityData.Leafs.Append("critical", types.YLeaf{"Critical", reachable.Critical})
    reachable.EntityData.Leafs.Append("high", types.YLeaf{"High", reachable.High})
    reachable.EntityData.Leafs.Append("medium", types.YLeaf{"Medium", reachable.Medium})
    reachable.EntityData.Leafs.Append("low", types.YLeaf{"Low", reachable.Low})

    reachable.EntityData.YListKeys = []string {}

    return &(reachable.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Added
// Number of prefixes added during calculation
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Added struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Added) GetEntityData() *types.CommonEntityData {
    added.EntityData.YFilter = added.YFilter
    added.EntityData.YangName = "added"
    added.EntityData.BundleName = "cisco_ios_xr"
    added.EntityData.ParentYangName = "item-counts"
    added.EntityData.SegmentPath = "added"
    added.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/item-counts/" + added.EntityData.SegmentPath
    added.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    added.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    added.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    added.EntityData.Children = types.NewOrderedMap()
    added.EntityData.Leafs = types.NewOrderedMap()
    added.EntityData.Leafs.Append("critical", types.YLeaf{"Critical", added.Critical})
    added.EntityData.Leafs.Append("high", types.YLeaf{"High", added.High})
    added.EntityData.Leafs.Append("medium", types.YLeaf{"Medium", added.Medium})
    added.EntityData.Leafs.Append("low", types.YLeaf{"Low", added.Low})

    added.EntityData.YListKeys = []string {}

    return &(added.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Deleted
// Number of prefixes deleted during calculation
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Deleted struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Deleted) GetEntityData() *types.CommonEntityData {
    deleted.EntityData.YFilter = deleted.YFilter
    deleted.EntityData.YangName = "deleted"
    deleted.EntityData.BundleName = "cisco_ios_xr"
    deleted.EntityData.ParentYangName = "item-counts"
    deleted.EntityData.SegmentPath = "deleted"
    deleted.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/item-counts/" + deleted.EntityData.SegmentPath
    deleted.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deleted.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deleted.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deleted.EntityData.Children = types.NewOrderedMap()
    deleted.EntityData.Leafs = types.NewOrderedMap()
    deleted.EntityData.Leafs.Append("critical", types.YLeaf{"Critical", deleted.Critical})
    deleted.EntityData.Leafs.Append("high", types.YLeaf{"High", deleted.High})
    deleted.EntityData.Leafs.Append("medium", types.YLeaf{"Medium", deleted.Medium})
    deleted.EntityData.Leafs.Append("low", types.YLeaf{"Low", deleted.Low})

    deleted.EntityData.YListKeys = []string {}

    return &(deleted.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Modified
// Number of prefixes modified, i.e. a first hop
// and/or metric change
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Modified struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Modified) GetEntityData() *types.CommonEntityData {
    modified.EntityData.YFilter = modified.YFilter
    modified.EntityData.YangName = "modified"
    modified.EntityData.BundleName = "cisco_ios_xr"
    modified.EntityData.ParentYangName = "item-counts"
    modified.EntityData.SegmentPath = "modified"
    modified.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/item-counts/" + modified.EntityData.SegmentPath
    modified.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    modified.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    modified.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    modified.EntityData.Children = types.NewOrderedMap()
    modified.EntityData.Leafs = types.NewOrderedMap()
    modified.EntityData.Leafs.Append("critical", types.YLeaf{"Critical", modified.Critical})
    modified.EntityData.Leafs.Append("high", types.YLeaf{"High", modified.High})
    modified.EntityData.Leafs.Append("medium", types.YLeaf{"Medium", modified.Medium})
    modified.EntityData.Leafs.Append("low", types.YLeaf{"Low", modified.Low})

    modified.EntityData.YListKeys = []string {}

    return &(modified.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Touched
// Number of prefixes considered whilst updating
// the routing table
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Touched struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_ItemCounts_Touched) GetEntityData() *types.CommonEntityData {
    touched.EntityData.YFilter = touched.YFilter
    touched.EntityData.YangName = "touched"
    touched.EntityData.BundleName = "cisco_ios_xr"
    touched.EntityData.ParentYangName = "item-counts"
    touched.EntityData.SegmentPath = "touched"
    touched.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/item-counts/" + touched.EntityData.SegmentPath
    touched.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    touched.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    touched.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    touched.EntityData.Children = types.NewOrderedMap()
    touched.EntityData.Leafs = types.NewOrderedMap()
    touched.EntityData.Leafs.Append("critical", types.YLeaf{"Critical", touched.Critical})
    touched.EntityData.Leafs.Append("high", types.YLeaf{"High", touched.High})
    touched.EntityData.Leafs.Append("medium", types.YLeaf{"Medium", touched.Medium})
    touched.EntityData.Leafs.Append("low", types.YLeaf{"Low", touched.Low})

    touched.EntityData.YListKeys = []string {}

    return &(touched.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts
// Distinct prefix counts
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of unreachable prefixes in the database.
    Unreachable Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Unreachable

    // Number of reachable prefixes in the database.
    Reachable Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Reachable

    // Number of prefixes added during calculation.
    Added Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Added

    // Number of prefixes deleted during calculation.
    Deleted Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Deleted

    // Number of prefixes modified, i.e. a first hop and/or metric change.
    Modified Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Modified

    // Number of prefixes considered whilst updating the routing table.
    Touched Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Touched
}

func (routeCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts) GetEntityData() *types.CommonEntityData {
    routeCounts.EntityData.YFilter = routeCounts.YFilter
    routeCounts.EntityData.YangName = "route-counts"
    routeCounts.EntityData.BundleName = "cisco_ios_xr"
    routeCounts.EntityData.ParentYangName = "route-update-statistics"
    routeCounts.EntityData.SegmentPath = "route-counts"
    routeCounts.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/" + routeCounts.EntityData.SegmentPath
    routeCounts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeCounts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeCounts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeCounts.EntityData.Children = types.NewOrderedMap()
    routeCounts.EntityData.Children.Append("unreachable", types.YChild{"Unreachable", &routeCounts.Unreachable})
    routeCounts.EntityData.Children.Append("reachable", types.YChild{"Reachable", &routeCounts.Reachable})
    routeCounts.EntityData.Children.Append("added", types.YChild{"Added", &routeCounts.Added})
    routeCounts.EntityData.Children.Append("deleted", types.YChild{"Deleted", &routeCounts.Deleted})
    routeCounts.EntityData.Children.Append("modified", types.YChild{"Modified", &routeCounts.Modified})
    routeCounts.EntityData.Children.Append("touched", types.YChild{"Touched", &routeCounts.Touched})
    routeCounts.EntityData.Leafs = types.NewOrderedMap()

    routeCounts.EntityData.YListKeys = []string {}

    return &(routeCounts.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Unreachable
// Number of unreachable prefixes in the database
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Unreachable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (unreachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Unreachable) GetEntityData() *types.CommonEntityData {
    unreachable.EntityData.YFilter = unreachable.YFilter
    unreachable.EntityData.YangName = "unreachable"
    unreachable.EntityData.BundleName = "cisco_ios_xr"
    unreachable.EntityData.ParentYangName = "route-counts"
    unreachable.EntityData.SegmentPath = "unreachable"
    unreachable.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/route-counts/" + unreachable.EntityData.SegmentPath
    unreachable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unreachable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unreachable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unreachable.EntityData.Children = types.NewOrderedMap()
    unreachable.EntityData.Leafs = types.NewOrderedMap()
    unreachable.EntityData.Leafs.Append("critical", types.YLeaf{"Critical", unreachable.Critical})
    unreachable.EntityData.Leafs.Append("high", types.YLeaf{"High", unreachable.High})
    unreachable.EntityData.Leafs.Append("medium", types.YLeaf{"Medium", unreachable.Medium})
    unreachable.EntityData.Leafs.Append("low", types.YLeaf{"Low", unreachable.Low})

    unreachable.EntityData.YListKeys = []string {}

    return &(unreachable.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Reachable
// Number of reachable prefixes in the database
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Reachable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (reachable *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Reachable) GetEntityData() *types.CommonEntityData {
    reachable.EntityData.YFilter = reachable.YFilter
    reachable.EntityData.YangName = "reachable"
    reachable.EntityData.BundleName = "cisco_ios_xr"
    reachable.EntityData.ParentYangName = "route-counts"
    reachable.EntityData.SegmentPath = "reachable"
    reachable.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/route-counts/" + reachable.EntityData.SegmentPath
    reachable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    reachable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    reachable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    reachable.EntityData.Children = types.NewOrderedMap()
    reachable.EntityData.Leafs = types.NewOrderedMap()
    reachable.EntityData.Leafs.Append("critical", types.YLeaf{"Critical", reachable.Critical})
    reachable.EntityData.Leafs.Append("high", types.YLeaf{"High", reachable.High})
    reachable.EntityData.Leafs.Append("medium", types.YLeaf{"Medium", reachable.Medium})
    reachable.EntityData.Leafs.Append("low", types.YLeaf{"Low", reachable.Low})

    reachable.EntityData.YListKeys = []string {}

    return &(reachable.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Added
// Number of prefixes added during calculation
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Added struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (added *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Added) GetEntityData() *types.CommonEntityData {
    added.EntityData.YFilter = added.YFilter
    added.EntityData.YangName = "added"
    added.EntityData.BundleName = "cisco_ios_xr"
    added.EntityData.ParentYangName = "route-counts"
    added.EntityData.SegmentPath = "added"
    added.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/route-counts/" + added.EntityData.SegmentPath
    added.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    added.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    added.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    added.EntityData.Children = types.NewOrderedMap()
    added.EntityData.Leafs = types.NewOrderedMap()
    added.EntityData.Leafs.Append("critical", types.YLeaf{"Critical", added.Critical})
    added.EntityData.Leafs.Append("high", types.YLeaf{"High", added.High})
    added.EntityData.Leafs.Append("medium", types.YLeaf{"Medium", added.Medium})
    added.EntityData.Leafs.Append("low", types.YLeaf{"Low", added.Low})

    added.EntityData.YListKeys = []string {}

    return &(added.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Deleted
// Number of prefixes deleted during calculation
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Deleted struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (deleted *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Deleted) GetEntityData() *types.CommonEntityData {
    deleted.EntityData.YFilter = deleted.YFilter
    deleted.EntityData.YangName = "deleted"
    deleted.EntityData.BundleName = "cisco_ios_xr"
    deleted.EntityData.ParentYangName = "route-counts"
    deleted.EntityData.SegmentPath = "deleted"
    deleted.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/route-counts/" + deleted.EntityData.SegmentPath
    deleted.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deleted.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deleted.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deleted.EntityData.Children = types.NewOrderedMap()
    deleted.EntityData.Leafs = types.NewOrderedMap()
    deleted.EntityData.Leafs.Append("critical", types.YLeaf{"Critical", deleted.Critical})
    deleted.EntityData.Leafs.Append("high", types.YLeaf{"High", deleted.High})
    deleted.EntityData.Leafs.Append("medium", types.YLeaf{"Medium", deleted.Medium})
    deleted.EntityData.Leafs.Append("low", types.YLeaf{"Low", deleted.Low})

    deleted.EntityData.YListKeys = []string {}

    return &(deleted.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Modified
// Number of prefixes modified, i.e. a first hop
// and/or metric change
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Modified struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (modified *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Modified) GetEntityData() *types.CommonEntityData {
    modified.EntityData.YFilter = modified.YFilter
    modified.EntityData.YangName = "modified"
    modified.EntityData.BundleName = "cisco_ios_xr"
    modified.EntityData.ParentYangName = "route-counts"
    modified.EntityData.SegmentPath = "modified"
    modified.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/route-counts/" + modified.EntityData.SegmentPath
    modified.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    modified.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    modified.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    modified.EntityData.Children = types.NewOrderedMap()
    modified.EntityData.Leafs = types.NewOrderedMap()
    modified.EntityData.Leafs.Append("critical", types.YLeaf{"Critical", modified.Critical})
    modified.EntityData.Leafs.Append("high", types.YLeaf{"High", modified.High})
    modified.EntityData.Leafs.Append("medium", types.YLeaf{"Medium", modified.Medium})
    modified.EntityData.Leafs.Append("low", types.YLeaf{"Low", modified.Low})

    modified.EntityData.YListKeys = []string {}

    return &(modified.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Touched
// Number of prefixes considered whilst updating
// the routing table
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Touched struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (touched *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RouteCounts_Touched) GetEntityData() *types.CommonEntityData {
    touched.EntityData.YFilter = touched.YFilter
    touched.EntityData.YangName = "touched"
    touched.EntityData.BundleName = "cisco_ios_xr"
    touched.EntityData.ParentYangName = "route-counts"
    touched.EntityData.SegmentPath = "touched"
    touched.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/route-counts/" + touched.EntityData.SegmentPath
    touched.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    touched.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    touched.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    touched.EntityData.Children = types.NewOrderedMap()
    touched.EntityData.Leafs = types.NewOrderedMap()
    touched.EntityData.Leafs.Append("critical", types.YLeaf{"Critical", touched.Critical})
    touched.EntityData.Leafs.Append("high", types.YLeaf{"High", touched.High})
    touched.EntityData.Leafs.Append("medium", types.YLeaf{"Medium", touched.Medium})
    touched.EntityData.Leafs.Append("low", types.YLeaf{"Low", touched.Low})

    touched.EntityData.YListKeys = []string {}

    return &(touched.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RibBatchCounts
// Number of RIB batches sent
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RibBatchCounts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (ribBatchCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_SpfLog_LogEntry_RouteUpdateStatistics_RibBatchCounts) GetEntityData() *types.CommonEntityData {
    ribBatchCounts.EntityData.YFilter = ribBatchCounts.YFilter
    ribBatchCounts.EntityData.YangName = "rib-batch-counts"
    ribBatchCounts.EntityData.BundleName = "cisco_ios_xr"
    ribBatchCounts.EntityData.ParentYangName = "route-update-statistics"
    ribBatchCounts.EntityData.SegmentPath = "rib-batch-counts"
    ribBatchCounts.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/spf-log/log-entry/route-update-statistics/" + ribBatchCounts.EntityData.SegmentPath
    ribBatchCounts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ribBatchCounts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ribBatchCounts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ribBatchCounts.EntityData.Children = types.NewOrderedMap()
    ribBatchCounts.EntityData.Leafs = types.NewOrderedMap()
    ribBatchCounts.EntityData.Leafs.Append("critical", types.YLeaf{"Critical", ribBatchCounts.Critical})
    ribBatchCounts.EntityData.Leafs.Append("high", types.YLeaf{"High", ribBatchCounts.High})
    ribBatchCounts.EntityData.Leafs.Append("medium", types.YLeaf{"Medium", ribBatchCounts.Medium})
    ribBatchCounts.EntityData.Leafs.Append("low", types.YLeaf{"Low", ribBatchCounts.Low})

    ribBatchCounts.EntityData.YListKeys = []string {}

    return &(ribBatchCounts.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels
// TE tunnels table. Only available within
// the IPv4 Unicast topology.
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A single TE tunnel advertized by IS-IS. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel.
    TeTunnel []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel
}

func (teTunnels *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels) GetEntityData() *types.CommonEntityData {
    teTunnels.EntityData.YFilter = teTunnels.YFilter
    teTunnels.EntityData.YangName = "te-tunnels"
    teTunnels.EntityData.BundleName = "cisco_ios_xr"
    teTunnels.EntityData.ParentYangName = "topology-level"
    teTunnels.EntityData.SegmentPath = "te-tunnels"
    teTunnels.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/" + teTunnels.EntityData.SegmentPath
    teTunnels.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teTunnels.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teTunnels.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teTunnels.EntityData.Children = types.NewOrderedMap()
    teTunnels.EntityData.Children.Append("te-tunnel", types.YChild{"TeTunnel", nil})
    for i := range teTunnels.TeTunnel {
        types.SetYListKey(teTunnels.TeTunnel[i], i)
        teTunnels.EntityData.Children.Append(types.GetSegmentPath(teTunnels.TeTunnel[i]), types.YChild{"TeTunnel", teTunnels.TeTunnel[i]})
    }
    teTunnels.EntityData.Leafs = types.NewOrderedMap()

    teTunnels.EntityData.YListKeys = []string {}

    return &(teTunnels.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel
// A single TE tunnel advertized by IS-IS
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // System ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    SystemId interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Destination system ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    TeSystemId interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    TeInterface interface{}

    // Tunnel bandwidth. The type is interface{} with range: 0..4294967295.
    TeBandwidth interface{}

    // Tunnel metric. The type is interface{} with range: -2147483648..2147483647.
    TeigpMetric interface{}

    // Tunnel next-hop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TeNextHopIpAddress interface{}

    // Tunnel metric mode. The type is IsisMetricMode.
    TeModeType interface{}

    // Indicates whether MPLS TE IPv4 forwarding adjacency is enabled. The type is
    // bool.
    Teipv4faEnabled interface{}

    // Indicates whether MPLS TE IPv6 forwarding adjacency is enabled. The type is
    // bool.
    Teipv6faEnabled interface{}

    // Indicates whether MPLS TE IPv4 autoroute announce is enabled. The type is
    // bool.
    Teipv4aaEnabled interface{}

    // Indicates whether MPLS TE IPv6 autoroute announce is enabled. The type is
    // bool.
    Teipv6aaEnabled interface{}

    // Tunnel checkpoint object ID. The type is interface{} with range:
    // 0..4294967295.
    TeCheckpointObjectId interface{}

    // Indicates whether MPLS TE segment routing is enabled. The type is bool.
    TeSegmentRoutingEnabled interface{}

    // Indicates whether MPLS TE segment routing strict SPF is enabled. The type
    // is bool.
    TeSegmentRoutingStrictSpf interface{}

    // Indicates whether Segment routing labeled traffic exclusion is enabled. The
    // type is bool.
    TeSegmentRoutingExclude interface{}
}

func (teTunnel *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TeTunnels_TeTunnel) GetEntityData() *types.CommonEntityData {
    teTunnel.EntityData.YFilter = teTunnel.YFilter
    teTunnel.EntityData.YangName = "te-tunnel"
    teTunnel.EntityData.BundleName = "cisco_ios_xr"
    teTunnel.EntityData.ParentYangName = "te-tunnels"
    teTunnel.EntityData.SegmentPath = "te-tunnel" + types.AddNoKeyToken(teTunnel)
    teTunnel.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/te-tunnels/" + teTunnel.EntityData.SegmentPath
    teTunnel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teTunnel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teTunnel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teTunnel.EntityData.Children = types.NewOrderedMap()
    teTunnel.EntityData.Leafs = types.NewOrderedMap()
    teTunnel.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", teTunnel.SystemId})
    teTunnel.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", teTunnel.InterfaceName})
    teTunnel.EntityData.Leafs.Append("te-system-id", types.YLeaf{"TeSystemId", teTunnel.TeSystemId})
    teTunnel.EntityData.Leafs.Append("te-interface", types.YLeaf{"TeInterface", teTunnel.TeInterface})
    teTunnel.EntityData.Leafs.Append("te-bandwidth", types.YLeaf{"TeBandwidth", teTunnel.TeBandwidth})
    teTunnel.EntityData.Leafs.Append("teigp-metric", types.YLeaf{"TeigpMetric", teTunnel.TeigpMetric})
    teTunnel.EntityData.Leafs.Append("te-next-hop-ip-address", types.YLeaf{"TeNextHopIpAddress", teTunnel.TeNextHopIpAddress})
    teTunnel.EntityData.Leafs.Append("te-mode-type", types.YLeaf{"TeModeType", teTunnel.TeModeType})
    teTunnel.EntityData.Leafs.Append("teipv4fa-enabled", types.YLeaf{"Teipv4faEnabled", teTunnel.Teipv4faEnabled})
    teTunnel.EntityData.Leafs.Append("teipv6fa-enabled", types.YLeaf{"Teipv6faEnabled", teTunnel.Teipv6faEnabled})
    teTunnel.EntityData.Leafs.Append("teipv4aa-enabled", types.YLeaf{"Teipv4aaEnabled", teTunnel.Teipv4aaEnabled})
    teTunnel.EntityData.Leafs.Append("teipv6aa-enabled", types.YLeaf{"Teipv6aaEnabled", teTunnel.Teipv6aaEnabled})
    teTunnel.EntityData.Leafs.Append("te-checkpoint-object-id", types.YLeaf{"TeCheckpointObjectId", teTunnel.TeCheckpointObjectId})
    teTunnel.EntityData.Leafs.Append("te-segment-routing-enabled", types.YLeaf{"TeSegmentRoutingEnabled", teTunnel.TeSegmentRoutingEnabled})
    teTunnel.EntityData.Leafs.Append("te-segment-routing-strict-spf", types.YLeaf{"TeSegmentRoutingStrictSpf", teTunnel.TeSegmentRoutingStrictSpf})
    teTunnel.EntityData.Leafs.Append("te-segment-routing-exclude", types.YLeaf{"TeSegmentRoutingExclude", teTunnel.TeSegmentRoutingExclude})

    teTunnel.EntityData.YListKeys = []string {}

    return &(teTunnel.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies
// IPv4 IS Topology table
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An IS in an IPv4 Link Topology. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology.
    Ipv4LinkTopology []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology
}

func (ipv4LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies) GetEntityData() *types.CommonEntityData {
    ipv4LinkTopologies.EntityData.YFilter = ipv4LinkTopologies.YFilter
    ipv4LinkTopologies.EntityData.YangName = "ipv4-link-topologies"
    ipv4LinkTopologies.EntityData.BundleName = "cisco_ios_xr"
    ipv4LinkTopologies.EntityData.ParentYangName = "topology-level"
    ipv4LinkTopologies.EntityData.SegmentPath = "ipv4-link-topologies"
    ipv4LinkTopologies.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/" + ipv4LinkTopologies.EntityData.SegmentPath
    ipv4LinkTopologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4LinkTopologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4LinkTopologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4LinkTopologies.EntityData.Children = types.NewOrderedMap()
    ipv4LinkTopologies.EntityData.Children.Append("ipv4-link-topology", types.YChild{"Ipv4LinkTopology", nil})
    for i := range ipv4LinkTopologies.Ipv4LinkTopology {
        ipv4LinkTopologies.EntityData.Children.Append(types.GetSegmentPath(ipv4LinkTopologies.Ipv4LinkTopology[i]), types.YChild{"Ipv4LinkTopology", ipv4LinkTopologies.Ipv4LinkTopology[i]})
    }
    ipv4LinkTopologies.EntityData.Leafs = types.NewOrderedMap()

    ipv4LinkTopologies.EntityData.YListKeys = []string {}

    return &(ipv4LinkTopologies.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology
// An IS in an IPv4 Link Topology
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. System ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    SystemId interface{}

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Does the IS participate in the topology?. The type is bool.
    IsParticipant interface{}

    // Is the IS overloaded?. The type is bool.
    IsOverloaded interface{}

    // Is the IS attached?. The type is bool.
    IsAttached interface{}

    // Is the IS reachable, and, if so, its status within the SPT.
    ReachabilityStatus Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus

    // Per-priority counts of prefix items advertised by the IS.
    AdvertisedPrefixItemCounts Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_AdvertisedPrefixItemCounts
}

func (ipv4LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology) GetEntityData() *types.CommonEntityData {
    ipv4LinkTopology.EntityData.YFilter = ipv4LinkTopology.YFilter
    ipv4LinkTopology.EntityData.YangName = "ipv4-link-topology"
    ipv4LinkTopology.EntityData.BundleName = "cisco_ios_xr"
    ipv4LinkTopology.EntityData.ParentYangName = "ipv4-link-topologies"
    ipv4LinkTopology.EntityData.SegmentPath = "ipv4-link-topology" + types.AddKeyToken(ipv4LinkTopology.SystemId, "system-id")
    ipv4LinkTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv4-link-topologies/" + ipv4LinkTopology.EntityData.SegmentPath
    ipv4LinkTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4LinkTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4LinkTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4LinkTopology.EntityData.Children = types.NewOrderedMap()
    ipv4LinkTopology.EntityData.Children.Append("reachability-status", types.YChild{"ReachabilityStatus", &ipv4LinkTopology.ReachabilityStatus})
    ipv4LinkTopology.EntityData.Children.Append("advertised-prefix-item-counts", types.YChild{"AdvertisedPrefixItemCounts", &ipv4LinkTopology.AdvertisedPrefixItemCounts})
    ipv4LinkTopology.EntityData.Leafs = types.NewOrderedMap()
    ipv4LinkTopology.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", ipv4LinkTopology.SystemId})
    ipv4LinkTopology.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", ipv4LinkTopology.SourceAddress})
    ipv4LinkTopology.EntityData.Leafs.Append("is-participant", types.YLeaf{"IsParticipant", ipv4LinkTopology.IsParticipant})
    ipv4LinkTopology.EntityData.Leafs.Append("is-overloaded", types.YLeaf{"IsOverloaded", ipv4LinkTopology.IsOverloaded})
    ipv4LinkTopology.EntityData.Leafs.Append("is-attached", types.YLeaf{"IsAttached", ipv4LinkTopology.IsAttached})

    ipv4LinkTopology.EntityData.YListKeys = []string {"SystemId"}

    return &(ipv4LinkTopology.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus
// Is the IS reachable, and, if so, its status
// within the SPT
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ReachableStatus. The type is IsisReachable.
    ReachableStatus interface{}

    // Status of the IS within the SPT.
    ReachableDetails Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails
}

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus) GetEntityData() *types.CommonEntityData {
    reachabilityStatus.EntityData.YFilter = reachabilityStatus.YFilter
    reachabilityStatus.EntityData.YangName = "reachability-status"
    reachabilityStatus.EntityData.BundleName = "cisco_ios_xr"
    reachabilityStatus.EntityData.ParentYangName = "ipv4-link-topology"
    reachabilityStatus.EntityData.SegmentPath = "reachability-status"
    reachabilityStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv4-link-topologies/ipv4-link-topology/" + reachabilityStatus.EntityData.SegmentPath
    reachabilityStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    reachabilityStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    reachabilityStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    reachabilityStatus.EntityData.Children = types.NewOrderedMap()
    reachabilityStatus.EntityData.Children.Append("reachable-details", types.YChild{"ReachableDetails", &reachabilityStatus.ReachableDetails})
    reachabilityStatus.EntityData.Leafs = types.NewOrderedMap()
    reachabilityStatus.EntityData.Leafs.Append("reachable-status", types.YLeaf{"ReachableStatus", reachabilityStatus.ReachableStatus})

    reachabilityStatus.EntityData.YListKeys = []string {}

    return &(reachabilityStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails
// Status of the IS within the SPT
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Distance to the IS. The type is interface{} with range: 0..4294967295.
    RootDistance interface{}

    // Distance to the IS. The type is interface{} with range: 0..4294967295.
    MulticastRootDistance interface{}

    // First hops towards the IS. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths.
    Paths []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths

    // Multicast intact first hops towards the IS. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath.
    MulticastPath []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath

    // Parents of the IS within the SPT. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent.
    Parent []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent

    // Children of the IS within the SPT. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children.
    Children []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children
}

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails) GetEntityData() *types.CommonEntityData {
    reachableDetails.EntityData.YFilter = reachableDetails.YFilter
    reachableDetails.EntityData.YangName = "reachable-details"
    reachableDetails.EntityData.BundleName = "cisco_ios_xr"
    reachableDetails.EntityData.ParentYangName = "reachability-status"
    reachableDetails.EntityData.SegmentPath = "reachable-details"
    reachableDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv4-link-topologies/ipv4-link-topology/reachability-status/" + reachableDetails.EntityData.SegmentPath
    reachableDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    reachableDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    reachableDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    reachableDetails.EntityData.Children = types.NewOrderedMap()
    reachableDetails.EntityData.Children.Append("paths", types.YChild{"Paths", nil})
    for i := range reachableDetails.Paths {
        types.SetYListKey(reachableDetails.Paths[i], i)
        reachableDetails.EntityData.Children.Append(types.GetSegmentPath(reachableDetails.Paths[i]), types.YChild{"Paths", reachableDetails.Paths[i]})
    }
    reachableDetails.EntityData.Children.Append("multicast-path", types.YChild{"MulticastPath", nil})
    for i := range reachableDetails.MulticastPath {
        types.SetYListKey(reachableDetails.MulticastPath[i], i)
        reachableDetails.EntityData.Children.Append(types.GetSegmentPath(reachableDetails.MulticastPath[i]), types.YChild{"MulticastPath", reachableDetails.MulticastPath[i]})
    }
    reachableDetails.EntityData.Children.Append("parent", types.YChild{"Parent", nil})
    for i := range reachableDetails.Parent {
        types.SetYListKey(reachableDetails.Parent[i], i)
        reachableDetails.EntityData.Children.Append(types.GetSegmentPath(reachableDetails.Parent[i]), types.YChild{"Parent", reachableDetails.Parent[i]})
    }
    reachableDetails.EntityData.Children.Append("children", types.YChild{"Children", nil})
    for i := range reachableDetails.Children {
        types.SetYListKey(reachableDetails.Children[i], i)
        reachableDetails.EntityData.Children.Append(types.GetSegmentPath(reachableDetails.Children[i]), types.YChild{"Children", reachableDetails.Children[i]})
    }
    reachableDetails.EntityData.Leafs = types.NewOrderedMap()
    reachableDetails.EntityData.Leafs.Append("root-distance", types.YLeaf{"RootDistance", reachableDetails.RootDistance})
    reachableDetails.EntityData.Leafs.Append("multicast-root-distance", types.YLeaf{"MulticastRootDistance", reachableDetails.MulticastRootDistance})

    reachableDetails.EntityData.YListKeys = []string {}

    return &(reachableDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths
// First hops towards the IS
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_Nnh
}

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "reachable-details"
    paths.EntityData.SegmentPath = "paths" + types.AddNoKeyToken(paths)
    paths.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv4-link-topologies/ipv4-link-topology/reachability-status/reachable-details/" + paths.EntityData.SegmentPath
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = types.NewOrderedMap()
    paths.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &paths.FrrBackup})
    paths.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range paths.UloopExplicit {
        types.SetYListKey(paths.UloopExplicit[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.UloopExplicit[i]), types.YChild{"UloopExplicit", paths.UloopExplicit[i]})
    }
    paths.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range paths.Nnh {
        types.SetYListKey(paths.Nnh[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.Nnh[i]), types.YChild{"Nnh", paths.Nnh[i]})
    }
    paths.EntityData.Leafs = types.NewOrderedMap()
    paths.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", paths.NeighborId})
    paths.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", paths.EgressInterface})
    paths.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", paths.NeighborAddress})
    paths.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", paths.NeighborSnpa})
    paths.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", paths.Tag})
    paths.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", paths.TunnelInterface})
    paths.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", paths.SegmentRoutingSidValue})
    paths.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", paths.Weight})
    paths.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", paths.IsTeTunnelInterface})
    paths.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", paths.IsSrExcludeTunnelInterface})
    paths.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", paths.OutgoingLabel})

    paths.EntityData.YListKeys = []string {}

    return &(paths.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "paths"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv4-link-topologies/ipv4-link-topology/reachability-status/reachable-details/paths/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv4-link-topologies/ipv4-link-topology/reachability-status/reachable-details/paths/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv4-link-topologies/ipv4-link-topology/reachability-status/reachable-details/paths/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "paths"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv4-link-topologies/ipv4-link-topology/reachability-status/reachable-details/paths/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Paths_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "paths"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv4-link-topologies/ipv4-link-topology/reachability-status/reachable-details/paths/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath
// Multicast intact first hops towards the IS
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_Nnh
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetEntityData() *types.CommonEntityData {
    multicastPath.EntityData.YFilter = multicastPath.YFilter
    multicastPath.EntityData.YangName = "multicast-path"
    multicastPath.EntityData.BundleName = "cisco_ios_xr"
    multicastPath.EntityData.ParentYangName = "reachable-details"
    multicastPath.EntityData.SegmentPath = "multicast-path" + types.AddNoKeyToken(multicastPath)
    multicastPath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv4-link-topologies/ipv4-link-topology/reachability-status/reachable-details/" + multicastPath.EntityData.SegmentPath
    multicastPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastPath.EntityData.Children = types.NewOrderedMap()
    multicastPath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &multicastPath.FrrBackup})
    multicastPath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range multicastPath.UloopExplicit {
        types.SetYListKey(multicastPath.UloopExplicit[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.UloopExplicit[i]), types.YChild{"UloopExplicit", multicastPath.UloopExplicit[i]})
    }
    multicastPath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range multicastPath.Nnh {
        types.SetYListKey(multicastPath.Nnh[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.Nnh[i]), types.YChild{"Nnh", multicastPath.Nnh[i]})
    }
    multicastPath.EntityData.Leafs = types.NewOrderedMap()
    multicastPath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", multicastPath.NeighborId})
    multicastPath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", multicastPath.EgressInterface})
    multicastPath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", multicastPath.NeighborAddress})
    multicastPath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", multicastPath.NeighborSnpa})
    multicastPath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", multicastPath.Tag})
    multicastPath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", multicastPath.TunnelInterface})
    multicastPath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", multicastPath.SegmentRoutingSidValue})
    multicastPath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", multicastPath.Weight})
    multicastPath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", multicastPath.IsTeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", multicastPath.IsSrExcludeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", multicastPath.OutgoingLabel})

    multicastPath.EntityData.YListKeys = []string {}

    return &(multicastPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "multicast-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv4-link-topologies/ipv4-link-topology/reachability-status/reachable-details/multicast-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv4-link-topologies/ipv4-link-topology/reachability-status/reachable-details/multicast-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv4-link-topologies/ipv4-link-topology/reachability-status/reachable-details/multicast-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "multicast-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv4-link-topologies/ipv4-link-topology/reachability-status/reachable-details/multicast-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "multicast-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv4-link-topologies/ipv4-link-topology/reachability-status/reachable-details/multicast-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent
// Parents of the IS within the SPT
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Pseudonode between system and its neighbor. The type is string with
    // pattern: [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}.
    IntermediatePseudonode interface{}
}

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetEntityData() *types.CommonEntityData {
    parent.EntityData.YFilter = parent.YFilter
    parent.EntityData.YangName = "parent"
    parent.EntityData.BundleName = "cisco_ios_xr"
    parent.EntityData.ParentYangName = "reachable-details"
    parent.EntityData.SegmentPath = "parent" + types.AddNoKeyToken(parent)
    parent.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv4-link-topologies/ipv4-link-topology/reachability-status/reachable-details/" + parent.EntityData.SegmentPath
    parent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    parent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    parent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    parent.EntityData.Children = types.NewOrderedMap()
    parent.EntityData.Leafs = types.NewOrderedMap()
    parent.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", parent.NeighborId})
    parent.EntityData.Leafs.Append("intermediate-pseudonode", types.YLeaf{"IntermediatePseudonode", parent.IntermediatePseudonode})

    parent.EntityData.YListKeys = []string {}

    return &(parent.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children
// Children of the IS within the SPT
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Pseudonode between system and its neighbor. The type is string with
    // pattern: [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}.
    IntermediatePseudonode interface{}
}

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetEntityData() *types.CommonEntityData {
    children.EntityData.YFilter = children.YFilter
    children.EntityData.YangName = "children"
    children.EntityData.BundleName = "cisco_ios_xr"
    children.EntityData.ParentYangName = "reachable-details"
    children.EntityData.SegmentPath = "children" + types.AddNoKeyToken(children)
    children.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv4-link-topologies/ipv4-link-topology/reachability-status/reachable-details/" + children.EntityData.SegmentPath
    children.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    children.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    children.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    children.EntityData.Children = types.NewOrderedMap()
    children.EntityData.Leafs = types.NewOrderedMap()
    children.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", children.NeighborId})
    children.EntityData.Leafs.Append("intermediate-pseudonode", types.YLeaf{"IntermediatePseudonode", children.IntermediatePseudonode})

    children.EntityData.YListKeys = []string {}

    return &(children.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_AdvertisedPrefixItemCounts
// Per-priority counts of prefix items advertised
// by the IS
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_AdvertisedPrefixItemCounts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv4LinkTopologies_Ipv4LinkTopology_AdvertisedPrefixItemCounts) GetEntityData() *types.CommonEntityData {
    advertisedPrefixItemCounts.EntityData.YFilter = advertisedPrefixItemCounts.YFilter
    advertisedPrefixItemCounts.EntityData.YangName = "advertised-prefix-item-counts"
    advertisedPrefixItemCounts.EntityData.BundleName = "cisco_ios_xr"
    advertisedPrefixItemCounts.EntityData.ParentYangName = "ipv4-link-topology"
    advertisedPrefixItemCounts.EntityData.SegmentPath = "advertised-prefix-item-counts"
    advertisedPrefixItemCounts.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv4-link-topologies/ipv4-link-topology/" + advertisedPrefixItemCounts.EntityData.SegmentPath
    advertisedPrefixItemCounts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertisedPrefixItemCounts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertisedPrefixItemCounts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertisedPrefixItemCounts.EntityData.Children = types.NewOrderedMap()
    advertisedPrefixItemCounts.EntityData.Leafs = types.NewOrderedMap()
    advertisedPrefixItemCounts.EntityData.Leafs.Append("critical", types.YLeaf{"Critical", advertisedPrefixItemCounts.Critical})
    advertisedPrefixItemCounts.EntityData.Leafs.Append("high", types.YLeaf{"High", advertisedPrefixItemCounts.High})
    advertisedPrefixItemCounts.EntityData.Leafs.Append("medium", types.YLeaf{"Medium", advertisedPrefixItemCounts.Medium})
    advertisedPrefixItemCounts.EntityData.Leafs.Append("low", types.YLeaf{"Low", advertisedPrefixItemCounts.Low})

    advertisedPrefixItemCounts.EntityData.YListKeys = []string {}

    return &(advertisedPrefixItemCounts.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary
// Summary information for a particular IS
// Topology
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Node Counts for System nodes.
    RouterNodeCount Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_RouterNodeCount

    // Node Counts for Pseudonode nodes.
    PseudonodeNodeCount Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_PseudonodeNodeCount
}

func (topologySummary *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary) GetEntityData() *types.CommonEntityData {
    topologySummary.EntityData.YFilter = topologySummary.YFilter
    topologySummary.EntityData.YangName = "topology-summary"
    topologySummary.EntityData.BundleName = "cisco_ios_xr"
    topologySummary.EntityData.ParentYangName = "topology-level"
    topologySummary.EntityData.SegmentPath = "topology-summary"
    topologySummary.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/" + topologySummary.EntityData.SegmentPath
    topologySummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topologySummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topologySummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topologySummary.EntityData.Children = types.NewOrderedMap()
    topologySummary.EntityData.Children.Append("router-node-count", types.YChild{"RouterNodeCount", &topologySummary.RouterNodeCount})
    topologySummary.EntityData.Children.Append("pseudonode-node-count", types.YChild{"PseudonodeNodeCount", &topologySummary.PseudonodeNodeCount})
    topologySummary.EntityData.Leafs = types.NewOrderedMap()

    topologySummary.EntityData.YListKeys = []string {}

    return &(topologySummary.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_RouterNodeCount
// Node Counts for System nodes
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_RouterNodeCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of nodes reachable in SPT. The type is interface{} with range:
    // 0..4294967295.
    ReachableNodeCount interface{}

    // Number of nodes unreachable in SPT. The type is interface{} with range:
    // 0..4294967295.
    UnreachableNodeCount interface{}

    // Number of participating nodes unreachable in SPT. The type is interface{}
    // with range: 0..4294967295.
    UnreachableParticipantNodeCount interface{}
}

func (routerNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_RouterNodeCount) GetEntityData() *types.CommonEntityData {
    routerNodeCount.EntityData.YFilter = routerNodeCount.YFilter
    routerNodeCount.EntityData.YangName = "router-node-count"
    routerNodeCount.EntityData.BundleName = "cisco_ios_xr"
    routerNodeCount.EntityData.ParentYangName = "topology-summary"
    routerNodeCount.EntityData.SegmentPath = "router-node-count"
    routerNodeCount.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/topology-summary/" + routerNodeCount.EntityData.SegmentPath
    routerNodeCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routerNodeCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routerNodeCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routerNodeCount.EntityData.Children = types.NewOrderedMap()
    routerNodeCount.EntityData.Leafs = types.NewOrderedMap()
    routerNodeCount.EntityData.Leafs.Append("reachable-node-count", types.YLeaf{"ReachableNodeCount", routerNodeCount.ReachableNodeCount})
    routerNodeCount.EntityData.Leafs.Append("unreachable-node-count", types.YLeaf{"UnreachableNodeCount", routerNodeCount.UnreachableNodeCount})
    routerNodeCount.EntityData.Leafs.Append("unreachable-participant-node-count", types.YLeaf{"UnreachableParticipantNodeCount", routerNodeCount.UnreachableParticipantNodeCount})

    routerNodeCount.EntityData.YListKeys = []string {}

    return &(routerNodeCount.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_PseudonodeNodeCount
// Node Counts for Pseudonode nodes
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_PseudonodeNodeCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of nodes reachable in SPT. The type is interface{} with range:
    // 0..4294967295.
    ReachableNodeCount interface{}

    // Number of nodes unreachable in SPT. The type is interface{} with range:
    // 0..4294967295.
    UnreachableNodeCount interface{}

    // Number of participating nodes unreachable in SPT. The type is interface{}
    // with range: 0..4294967295.
    UnreachableParticipantNodeCount interface{}
}

func (pseudonodeNodeCount *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_TopologySummary_PseudonodeNodeCount) GetEntityData() *types.CommonEntityData {
    pseudonodeNodeCount.EntityData.YFilter = pseudonodeNodeCount.YFilter
    pseudonodeNodeCount.EntityData.YangName = "pseudonode-node-count"
    pseudonodeNodeCount.EntityData.BundleName = "cisco_ios_xr"
    pseudonodeNodeCount.EntityData.ParentYangName = "topology-summary"
    pseudonodeNodeCount.EntityData.SegmentPath = "pseudonode-node-count"
    pseudonodeNodeCount.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/topology-summary/" + pseudonodeNodeCount.EntityData.SegmentPath
    pseudonodeNodeCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudonodeNodeCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudonodeNodeCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudonodeNodeCount.EntityData.Children = types.NewOrderedMap()
    pseudonodeNodeCount.EntityData.Leafs = types.NewOrderedMap()
    pseudonodeNodeCount.EntityData.Leafs.Append("reachable-node-count", types.YLeaf{"ReachableNodeCount", pseudonodeNodeCount.ReachableNodeCount})
    pseudonodeNodeCount.EntityData.Leafs.Append("unreachable-node-count", types.YLeaf{"UnreachableNodeCount", pseudonodeNodeCount.UnreachableNodeCount})
    pseudonodeNodeCount.EntityData.Leafs.Append("unreachable-participant-node-count", types.YLeaf{"UnreachableParticipantNodeCount", pseudonodeNodeCount.UnreachableParticipantNodeCount})

    pseudonodeNodeCount.EntityData.YListKeys = []string {}

    return &(pseudonodeNodeCount.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies
// IPv6 IS Topology table
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An IS in an IPv6 Link Topology. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology.
    Ipv6LinkTopology []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology
}

func (ipv6LinkTopologies *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies) GetEntityData() *types.CommonEntityData {
    ipv6LinkTopologies.EntityData.YFilter = ipv6LinkTopologies.YFilter
    ipv6LinkTopologies.EntityData.YangName = "ipv6-link-topologies"
    ipv6LinkTopologies.EntityData.BundleName = "cisco_ios_xr"
    ipv6LinkTopologies.EntityData.ParentYangName = "topology-level"
    ipv6LinkTopologies.EntityData.SegmentPath = "ipv6-link-topologies"
    ipv6LinkTopologies.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/" + ipv6LinkTopologies.EntityData.SegmentPath
    ipv6LinkTopologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6LinkTopologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6LinkTopologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6LinkTopologies.EntityData.Children = types.NewOrderedMap()
    ipv6LinkTopologies.EntityData.Children.Append("ipv6-link-topology", types.YChild{"Ipv6LinkTopology", nil})
    for i := range ipv6LinkTopologies.Ipv6LinkTopology {
        ipv6LinkTopologies.EntityData.Children.Append(types.GetSegmentPath(ipv6LinkTopologies.Ipv6LinkTopology[i]), types.YChild{"Ipv6LinkTopology", ipv6LinkTopologies.Ipv6LinkTopology[i]})
    }
    ipv6LinkTopologies.EntityData.Leafs = types.NewOrderedMap()

    ipv6LinkTopologies.EntityData.YListKeys = []string {}

    return &(ipv6LinkTopologies.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology
// An IS in an IPv6 Link Topology
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. System ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    SystemId interface{}

    // Source Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Does the IS participate in the topology?. The type is bool.
    IsParticipant interface{}

    // Is the IS overloaded?. The type is bool.
    IsOverloaded interface{}

    // Is the IS attached?. The type is bool.
    IsAttached interface{}

    // Is the IS reachable, and, if so, its status within the SPT.
    ReachabilityStatus Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus

    // Per-priority counts of prefix items advertised by the IS.
    AdvertisedPrefixItemCounts Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_AdvertisedPrefixItemCounts
}

func (ipv6LinkTopology *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology) GetEntityData() *types.CommonEntityData {
    ipv6LinkTopology.EntityData.YFilter = ipv6LinkTopology.YFilter
    ipv6LinkTopology.EntityData.YangName = "ipv6-link-topology"
    ipv6LinkTopology.EntityData.BundleName = "cisco_ios_xr"
    ipv6LinkTopology.EntityData.ParentYangName = "ipv6-link-topologies"
    ipv6LinkTopology.EntityData.SegmentPath = "ipv6-link-topology" + types.AddKeyToken(ipv6LinkTopology.SystemId, "system-id")
    ipv6LinkTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv6-link-topologies/" + ipv6LinkTopology.EntityData.SegmentPath
    ipv6LinkTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6LinkTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6LinkTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6LinkTopology.EntityData.Children = types.NewOrderedMap()
    ipv6LinkTopology.EntityData.Children.Append("reachability-status", types.YChild{"ReachabilityStatus", &ipv6LinkTopology.ReachabilityStatus})
    ipv6LinkTopology.EntityData.Children.Append("advertised-prefix-item-counts", types.YChild{"AdvertisedPrefixItemCounts", &ipv6LinkTopology.AdvertisedPrefixItemCounts})
    ipv6LinkTopology.EntityData.Leafs = types.NewOrderedMap()
    ipv6LinkTopology.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", ipv6LinkTopology.SystemId})
    ipv6LinkTopology.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", ipv6LinkTopology.SourceAddress})
    ipv6LinkTopology.EntityData.Leafs.Append("is-participant", types.YLeaf{"IsParticipant", ipv6LinkTopology.IsParticipant})
    ipv6LinkTopology.EntityData.Leafs.Append("is-overloaded", types.YLeaf{"IsOverloaded", ipv6LinkTopology.IsOverloaded})
    ipv6LinkTopology.EntityData.Leafs.Append("is-attached", types.YLeaf{"IsAttached", ipv6LinkTopology.IsAttached})

    ipv6LinkTopology.EntityData.YListKeys = []string {"SystemId"}

    return &(ipv6LinkTopology.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus
// Is the IS reachable, and, if so, its status
// within the SPT
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ReachableStatus. The type is IsisReachable.
    ReachableStatus interface{}

    // Status of the IS within the SPT.
    ReachableDetails Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails
}

func (reachabilityStatus *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus) GetEntityData() *types.CommonEntityData {
    reachabilityStatus.EntityData.YFilter = reachabilityStatus.YFilter
    reachabilityStatus.EntityData.YangName = "reachability-status"
    reachabilityStatus.EntityData.BundleName = "cisco_ios_xr"
    reachabilityStatus.EntityData.ParentYangName = "ipv6-link-topology"
    reachabilityStatus.EntityData.SegmentPath = "reachability-status"
    reachabilityStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv6-link-topologies/ipv6-link-topology/" + reachabilityStatus.EntityData.SegmentPath
    reachabilityStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    reachabilityStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    reachabilityStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    reachabilityStatus.EntityData.Children = types.NewOrderedMap()
    reachabilityStatus.EntityData.Children.Append("reachable-details", types.YChild{"ReachableDetails", &reachabilityStatus.ReachableDetails})
    reachabilityStatus.EntityData.Leafs = types.NewOrderedMap()
    reachabilityStatus.EntityData.Leafs.Append("reachable-status", types.YLeaf{"ReachableStatus", reachabilityStatus.ReachableStatus})

    reachabilityStatus.EntityData.YListKeys = []string {}

    return &(reachabilityStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails
// Status of the IS within the SPT
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Distance to the IS. The type is interface{} with range: 0..4294967295.
    RootDistance interface{}

    // Distance to the IS. The type is interface{} with range: 0..4294967295.
    MulticastRootDistance interface{}

    // First hops towards the IS. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths.
    Paths []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths

    // Multicast intact first hops towards the IS. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath.
    MulticastPath []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath

    // Parents of the IS within the SPT. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent.
    Parent []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent

    // Children of the IS within the SPT. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children.
    Children []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children
}

func (reachableDetails *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails) GetEntityData() *types.CommonEntityData {
    reachableDetails.EntityData.YFilter = reachableDetails.YFilter
    reachableDetails.EntityData.YangName = "reachable-details"
    reachableDetails.EntityData.BundleName = "cisco_ios_xr"
    reachableDetails.EntityData.ParentYangName = "reachability-status"
    reachableDetails.EntityData.SegmentPath = "reachable-details"
    reachableDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv6-link-topologies/ipv6-link-topology/reachability-status/" + reachableDetails.EntityData.SegmentPath
    reachableDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    reachableDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    reachableDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    reachableDetails.EntityData.Children = types.NewOrderedMap()
    reachableDetails.EntityData.Children.Append("paths", types.YChild{"Paths", nil})
    for i := range reachableDetails.Paths {
        types.SetYListKey(reachableDetails.Paths[i], i)
        reachableDetails.EntityData.Children.Append(types.GetSegmentPath(reachableDetails.Paths[i]), types.YChild{"Paths", reachableDetails.Paths[i]})
    }
    reachableDetails.EntityData.Children.Append("multicast-path", types.YChild{"MulticastPath", nil})
    for i := range reachableDetails.MulticastPath {
        types.SetYListKey(reachableDetails.MulticastPath[i], i)
        reachableDetails.EntityData.Children.Append(types.GetSegmentPath(reachableDetails.MulticastPath[i]), types.YChild{"MulticastPath", reachableDetails.MulticastPath[i]})
    }
    reachableDetails.EntityData.Children.Append("parent", types.YChild{"Parent", nil})
    for i := range reachableDetails.Parent {
        types.SetYListKey(reachableDetails.Parent[i], i)
        reachableDetails.EntityData.Children.Append(types.GetSegmentPath(reachableDetails.Parent[i]), types.YChild{"Parent", reachableDetails.Parent[i]})
    }
    reachableDetails.EntityData.Children.Append("children", types.YChild{"Children", nil})
    for i := range reachableDetails.Children {
        types.SetYListKey(reachableDetails.Children[i], i)
        reachableDetails.EntityData.Children.Append(types.GetSegmentPath(reachableDetails.Children[i]), types.YChild{"Children", reachableDetails.Children[i]})
    }
    reachableDetails.EntityData.Leafs = types.NewOrderedMap()
    reachableDetails.EntityData.Leafs.Append("root-distance", types.YLeaf{"RootDistance", reachableDetails.RootDistance})
    reachableDetails.EntityData.Leafs.Append("multicast-root-distance", types.YLeaf{"MulticastRootDistance", reachableDetails.MulticastRootDistance})

    reachableDetails.EntityData.YListKeys = []string {}

    return &(reachableDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths
// First hops towards the IS
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_Nnh
}

func (paths *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "reachable-details"
    paths.EntityData.SegmentPath = "paths" + types.AddNoKeyToken(paths)
    paths.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv6-link-topologies/ipv6-link-topology/reachability-status/reachable-details/" + paths.EntityData.SegmentPath
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = types.NewOrderedMap()
    paths.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &paths.FrrBackup})
    paths.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range paths.UloopExplicit {
        types.SetYListKey(paths.UloopExplicit[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.UloopExplicit[i]), types.YChild{"UloopExplicit", paths.UloopExplicit[i]})
    }
    paths.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range paths.Nnh {
        types.SetYListKey(paths.Nnh[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.Nnh[i]), types.YChild{"Nnh", paths.Nnh[i]})
    }
    paths.EntityData.Leafs = types.NewOrderedMap()
    paths.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", paths.NeighborId})
    paths.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", paths.EgressInterface})
    paths.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", paths.NeighborAddress})
    paths.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", paths.NeighborSnpa})
    paths.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", paths.Tag})
    paths.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", paths.TunnelInterface})
    paths.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", paths.SegmentRoutingSidValue})
    paths.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", paths.Weight})
    paths.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", paths.IsTeTunnelInterface})
    paths.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", paths.IsSrExcludeTunnelInterface})
    paths.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", paths.OutgoingLabel})

    paths.EntityData.YListKeys = []string {}

    return &(paths.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "paths"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv6-link-topologies/ipv6-link-topology/reachability-status/reachable-details/paths/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv6-link-topologies/ipv6-link-topology/reachability-status/reachable-details/paths/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv6-link-topologies/ipv6-link-topology/reachability-status/reachable-details/paths/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "paths"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv6-link-topologies/ipv6-link-topology/reachability-status/reachable-details/paths/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Paths_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "paths"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv6-link-topologies/ipv6-link-topology/reachability-status/reachable-details/paths/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath
// Multicast intact first hops towards the IS
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_Nnh
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath) GetEntityData() *types.CommonEntityData {
    multicastPath.EntityData.YFilter = multicastPath.YFilter
    multicastPath.EntityData.YangName = "multicast-path"
    multicastPath.EntityData.BundleName = "cisco_ios_xr"
    multicastPath.EntityData.ParentYangName = "reachable-details"
    multicastPath.EntityData.SegmentPath = "multicast-path" + types.AddNoKeyToken(multicastPath)
    multicastPath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv6-link-topologies/ipv6-link-topology/reachability-status/reachable-details/" + multicastPath.EntityData.SegmentPath
    multicastPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastPath.EntityData.Children = types.NewOrderedMap()
    multicastPath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &multicastPath.FrrBackup})
    multicastPath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range multicastPath.UloopExplicit {
        types.SetYListKey(multicastPath.UloopExplicit[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.UloopExplicit[i]), types.YChild{"UloopExplicit", multicastPath.UloopExplicit[i]})
    }
    multicastPath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range multicastPath.Nnh {
        types.SetYListKey(multicastPath.Nnh[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.Nnh[i]), types.YChild{"Nnh", multicastPath.Nnh[i]})
    }
    multicastPath.EntityData.Leafs = types.NewOrderedMap()
    multicastPath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", multicastPath.NeighborId})
    multicastPath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", multicastPath.EgressInterface})
    multicastPath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", multicastPath.NeighborAddress})
    multicastPath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", multicastPath.NeighborSnpa})
    multicastPath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", multicastPath.Tag})
    multicastPath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", multicastPath.TunnelInterface})
    multicastPath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", multicastPath.SegmentRoutingSidValue})
    multicastPath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", multicastPath.Weight})
    multicastPath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", multicastPath.IsTeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", multicastPath.IsSrExcludeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", multicastPath.OutgoingLabel})

    multicastPath.EntityData.YListKeys = []string {}

    return &(multicastPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "multicast-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv6-link-topologies/ipv6-link-topology/reachability-status/reachable-details/multicast-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv6-link-topologies/ipv6-link-topology/reachability-status/reachable-details/multicast-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv6-link-topologies/ipv6-link-topology/reachability-status/reachable-details/multicast-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "multicast-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv6-link-topologies/ipv6-link-topology/reachability-status/reachable-details/multicast-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_MulticastPath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "multicast-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv6-link-topologies/ipv6-link-topology/reachability-status/reachable-details/multicast-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent
// Parents of the IS within the SPT
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Pseudonode between system and its neighbor. The type is string with
    // pattern: [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}.
    IntermediatePseudonode interface{}
}

func (parent *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Parent) GetEntityData() *types.CommonEntityData {
    parent.EntityData.YFilter = parent.YFilter
    parent.EntityData.YangName = "parent"
    parent.EntityData.BundleName = "cisco_ios_xr"
    parent.EntityData.ParentYangName = "reachable-details"
    parent.EntityData.SegmentPath = "parent" + types.AddNoKeyToken(parent)
    parent.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv6-link-topologies/ipv6-link-topology/reachability-status/reachable-details/" + parent.EntityData.SegmentPath
    parent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    parent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    parent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    parent.EntityData.Children = types.NewOrderedMap()
    parent.EntityData.Leafs = types.NewOrderedMap()
    parent.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", parent.NeighborId})
    parent.EntityData.Leafs.Append("intermediate-pseudonode", types.YLeaf{"IntermediatePseudonode", parent.IntermediatePseudonode})

    parent.EntityData.YListKeys = []string {}

    return &(parent.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children
// Children of the IS within the SPT
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Pseudonode between system and its neighbor. The type is string with
    // pattern: [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}.
    IntermediatePseudonode interface{}
}

func (children *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_ReachabilityStatus_ReachableDetails_Children) GetEntityData() *types.CommonEntityData {
    children.EntityData.YFilter = children.YFilter
    children.EntityData.YangName = "children"
    children.EntityData.BundleName = "cisco_ios_xr"
    children.EntityData.ParentYangName = "reachable-details"
    children.EntityData.SegmentPath = "children" + types.AddNoKeyToken(children)
    children.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv6-link-topologies/ipv6-link-topology/reachability-status/reachable-details/" + children.EntityData.SegmentPath
    children.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    children.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    children.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    children.EntityData.Children = types.NewOrderedMap()
    children.EntityData.Leafs = types.NewOrderedMap()
    children.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", children.NeighborId})
    children.EntityData.Leafs.Append("intermediate-pseudonode", types.YLeaf{"IntermediatePseudonode", children.IntermediatePseudonode})

    children.EntityData.YListKeys = []string {}

    return &(children.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_AdvertisedPrefixItemCounts
// Per-priority counts of prefix items advertised
// by the IS
type Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_AdvertisedPrefixItemCounts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority. The type is interface{} with range: 0..4294967295.
    Critical interface{}

    // High priority. The type is interface{} with range: 0..4294967295.
    High interface{}

    // Medium priority. The type is interface{} with range: 0..4294967295.
    Medium interface{}

    // Low priority. The type is interface{} with range: 0..4294967295.
    Low interface{}
}

func (advertisedPrefixItemCounts *Isis_Instances_Instance_Topologies_Topology_TopologyLevels_TopologyLevel_Ipv6LinkTopologies_Ipv6LinkTopology_AdvertisedPrefixItemCounts) GetEntityData() *types.CommonEntityData {
    advertisedPrefixItemCounts.EntityData.YFilter = advertisedPrefixItemCounts.YFilter
    advertisedPrefixItemCounts.EntityData.YangName = "advertised-prefix-item-counts"
    advertisedPrefixItemCounts.EntityData.BundleName = "cisco_ios_xr"
    advertisedPrefixItemCounts.EntityData.ParentYangName = "ipv6-link-topology"
    advertisedPrefixItemCounts.EntityData.SegmentPath = "advertised-prefix-item-counts"
    advertisedPrefixItemCounts.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/topology-levels/topology-level/ipv6-link-topologies/ipv6-link-topology/" + advertisedPrefixItemCounts.EntityData.SegmentPath
    advertisedPrefixItemCounts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertisedPrefixItemCounts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertisedPrefixItemCounts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertisedPrefixItemCounts.EntityData.Children = types.NewOrderedMap()
    advertisedPrefixItemCounts.EntityData.Leafs = types.NewOrderedMap()
    advertisedPrefixItemCounts.EntityData.Leafs.Append("critical", types.YLeaf{"Critical", advertisedPrefixItemCounts.Critical})
    advertisedPrefixItemCounts.EntityData.Leafs.Append("high", types.YLeaf{"High", advertisedPrefixItemCounts.High})
    advertisedPrefixItemCounts.EntityData.Leafs.Append("medium", types.YLeaf{"Medium", advertisedPrefixItemCounts.Medium})
    advertisedPrefixItemCounts.EntityData.Leafs.Append("low", types.YLeaf{"Low", advertisedPrefixItemCounts.Low})

    advertisedPrefixItemCounts.EntityData.YListKeys = []string {}

    return &(advertisedPrefixItemCounts.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes
// IPv6 local route
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An IPv6 route known to IS-IS. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route.
    Ipv6Route []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route
}

func (ipv6Routes *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes) GetEntityData() *types.CommonEntityData {
    ipv6Routes.EntityData.YFilter = ipv6Routes.YFilter
    ipv6Routes.EntityData.YangName = "ipv6-routes"
    ipv6Routes.EntityData.BundleName = "cisco_ios_xr"
    ipv6Routes.EntityData.ParentYangName = "topology"
    ipv6Routes.EntityData.SegmentPath = "ipv6-routes"
    ipv6Routes.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/" + ipv6Routes.EntityData.SegmentPath
    ipv6Routes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Routes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Routes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Routes.EntityData.Children = types.NewOrderedMap()
    ipv6Routes.EntityData.Children.Append("ipv6-route", types.YChild{"Ipv6Route", nil})
    for i := range ipv6Routes.Ipv6Route {
        types.SetYListKey(ipv6Routes.Ipv6Route[i], i)
        ipv6Routes.EntityData.Children.Append(types.GetSegmentPath(ipv6Routes.Ipv6Route[i]), types.YChild{"Ipv6Route", ipv6Routes.Ipv6Route[i]})
    }
    ipv6Routes.EntityData.Leafs = types.NewOrderedMap()

    ipv6Routes.EntityData.YListKeys = []string {}

    return &(ipv6Routes.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route
// An IPv6 route known to IS-IS
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Status of IS-IS directly connected routes to the prefix.
    ConnectedStatus Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus

    // Status of other protocols' routes redistributed into IS-IS.
    RedistributedStatus Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus

    // Status of native IS-IS routes to the prefix.
    NativeStatus Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus

    // Per level details of how the local system advertises the prefix. The type
    // is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail.
    PerLevelAdvertisingDetail []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail
}

func (ipv6Route *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route) GetEntityData() *types.CommonEntityData {
    ipv6Route.EntityData.YFilter = ipv6Route.YFilter
    ipv6Route.EntityData.YangName = "ipv6-route"
    ipv6Route.EntityData.BundleName = "cisco_ios_xr"
    ipv6Route.EntityData.ParentYangName = "ipv6-routes"
    ipv6Route.EntityData.SegmentPath = "ipv6-route" + types.AddNoKeyToken(ipv6Route)
    ipv6Route.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/" + ipv6Route.EntityData.SegmentPath
    ipv6Route.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Route.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Route.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Route.EntityData.Children = types.NewOrderedMap()
    ipv6Route.EntityData.Children.Append("connected-status", types.YChild{"ConnectedStatus", &ipv6Route.ConnectedStatus})
    ipv6Route.EntityData.Children.Append("redistributed-status", types.YChild{"RedistributedStatus", &ipv6Route.RedistributedStatus})
    ipv6Route.EntityData.Children.Append("native-status", types.YChild{"NativeStatus", &ipv6Route.NativeStatus})
    ipv6Route.EntityData.Children.Append("per-level-advertising-detail", types.YChild{"PerLevelAdvertisingDetail", nil})
    for i := range ipv6Route.PerLevelAdvertisingDetail {
        types.SetYListKey(ipv6Route.PerLevelAdvertisingDetail[i], i)
        ipv6Route.EntityData.Children.Append(types.GetSegmentPath(ipv6Route.PerLevelAdvertisingDetail[i]), types.YChild{"PerLevelAdvertisingDetail", ipv6Route.PerLevelAdvertisingDetail[i]})
    }
    ipv6Route.EntityData.Leafs = types.NewOrderedMap()
    ipv6Route.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Route.Prefix})
    ipv6Route.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6Route.PrefixLength})

    ipv6Route.EntityData.YListKeys = []string {}

    return &(ipv6Route.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus
// Status of IS-IS directly connected routes to the
// prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the directly connected prefix.
    ConnectedDetails Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus) GetEntityData() *types.CommonEntityData {
    connectedStatus.EntityData.YFilter = connectedStatus.YFilter
    connectedStatus.EntityData.YangName = "connected-status"
    connectedStatus.EntityData.BundleName = "cisco_ios_xr"
    connectedStatus.EntityData.ParentYangName = "ipv6-route"
    connectedStatus.EntityData.SegmentPath = "connected-status"
    connectedStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/" + connectedStatus.EntityData.SegmentPath
    connectedStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedStatus.EntityData.Children = types.NewOrderedMap()
    connectedStatus.EntityData.Children.Append("connected-details", types.YChild{"ConnectedDetails", &connectedStatus.ConnectedDetails})
    connectedStatus.EntityData.Leafs = types.NewOrderedMap()
    connectedStatus.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", connectedStatus.IsValid})

    connectedStatus.EntityData.YListKeys = []string {}

    return &(connectedStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails
// Details of the directly connected prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interfaces. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface.
    Interface []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails) GetEntityData() *types.CommonEntityData {
    connectedDetails.EntityData.YFilter = connectedDetails.YFilter
    connectedDetails.EntityData.YangName = "connected-details"
    connectedDetails.EntityData.BundleName = "cisco_ios_xr"
    connectedDetails.EntityData.ParentYangName = "connected-status"
    connectedDetails.EntityData.SegmentPath = "connected-details"
    connectedDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/connected-status/" + connectedDetails.EntityData.SegmentPath
    connectedDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedDetails.EntityData.Children = types.NewOrderedMap()
    connectedDetails.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range connectedDetails.Interface {
        types.SetYListKey(connectedDetails.Interface[i], i)
        connectedDetails.EntityData.Children.Append(types.GetSegmentPath(connectedDetails.Interface[i]), types.YChild{"Interface", connectedDetails.Interface[i]})
    }
    connectedDetails.EntityData.Leafs = types.NewOrderedMap()

    connectedDetails.EntityData.YListKeys = []string {}

    return &(connectedDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface
// Interfaces
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is string.
    Entry interface{}
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_ConnectedStatus_ConnectedDetails_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "connected-details"
    self.EntityData.SegmentPath = "interface" + types.AddNoKeyToken(self)
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/connected-status/connected-details/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", self.Entry})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus
// Status of other protocols' routes redistributed
// into IS-IS
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Per level details of the redistributed route.
    RedistributionDetails Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus) GetEntityData() *types.CommonEntityData {
    redistributedStatus.EntityData.YFilter = redistributedStatus.YFilter
    redistributedStatus.EntityData.YangName = "redistributed-status"
    redistributedStatus.EntityData.BundleName = "cisco_ios_xr"
    redistributedStatus.EntityData.ParentYangName = "ipv6-route"
    redistributedStatus.EntityData.SegmentPath = "redistributed-status"
    redistributedStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/" + redistributedStatus.EntityData.SegmentPath
    redistributedStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributedStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributedStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributedStatus.EntityData.Children = types.NewOrderedMap()
    redistributedStatus.EntityData.Children.Append("redistribution-details", types.YChild{"RedistributionDetails", &redistributedStatus.RedistributionDetails})
    redistributedStatus.EntityData.Leafs = types.NewOrderedMap()
    redistributedStatus.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", redistributedStatus.IsValid})

    redistributedStatus.EntityData.YListKeys = []string {}

    return &(redistributedStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails
// Per level details of the redistributed route
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // isis sh route redist detail. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail.
    IsisShRouteRedistDetail []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails) GetEntityData() *types.CommonEntityData {
    redistributionDetails.EntityData.YFilter = redistributionDetails.YFilter
    redistributionDetails.EntityData.YangName = "redistribution-details"
    redistributionDetails.EntityData.BundleName = "cisco_ios_xr"
    redistributionDetails.EntityData.ParentYangName = "redistributed-status"
    redistributionDetails.EntityData.SegmentPath = "redistribution-details"
    redistributionDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/redistributed-status/" + redistributionDetails.EntityData.SegmentPath
    redistributionDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributionDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributionDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributionDetails.EntityData.Children = types.NewOrderedMap()
    redistributionDetails.EntityData.Children.Append("isis-sh-route-redist-detail", types.YChild{"IsisShRouteRedistDetail", nil})
    for i := range redistributionDetails.IsisShRouteRedistDetail {
        types.SetYListKey(redistributionDetails.IsisShRouteRedistDetail[i], i)
        redistributionDetails.EntityData.Children.Append(types.GetSegmentPath(redistributionDetails.IsisShRouteRedistDetail[i]), types.YChild{"IsisShRouteRedistDetail", redistributionDetails.IsisShRouteRedistDetail[i]})
    }
    redistributionDetails.EntityData.Leafs = types.NewOrderedMap()

    redistributionDetails.EntityData.YListKeys = []string {}

    return &(redistributionDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
// isis sh route redist detail
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Level into which the route is redistributed. The type is IsisLevel.
    Level interface{}

    // Protocol redistributing the route.
    Owner Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetEntityData() *types.CommonEntityData {
    isisShRouteRedistDetail.EntityData.YFilter = isisShRouteRedistDetail.YFilter
    isisShRouteRedistDetail.EntityData.YangName = "isis-sh-route-redist-detail"
    isisShRouteRedistDetail.EntityData.BundleName = "cisco_ios_xr"
    isisShRouteRedistDetail.EntityData.ParentYangName = "redistribution-details"
    isisShRouteRedistDetail.EntityData.SegmentPath = "isis-sh-route-redist-detail" + types.AddNoKeyToken(isisShRouteRedistDetail)
    isisShRouteRedistDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/redistributed-status/redistribution-details/" + isisShRouteRedistDetail.EntityData.SegmentPath
    isisShRouteRedistDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isisShRouteRedistDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isisShRouteRedistDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isisShRouteRedistDetail.EntityData.Children = types.NewOrderedMap()
    isisShRouteRedistDetail.EntityData.Children.Append("owner", types.YChild{"Owner", &isisShRouteRedistDetail.Owner})
    isisShRouteRedistDetail.EntityData.Leafs = types.NewOrderedMap()
    isisShRouteRedistDetail.EntityData.Leafs.Append("level", types.YLeaf{"Level", isisShRouteRedistDetail.Level})

    isisShRouteRedistDetail.EntityData.YListKeys = []string {}

    return &(isisShRouteRedistDetail.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
// Protocol redistributing the route
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol. The type is IsisRedistProto.
    Protocol interface{}

    // IS-IS instance identifier. The type is string.
    IsisInstanceId interface{}

    // OSPF process identifier. The type is string.
    OspfProcessId interface{}

    // OSPFv3 process identifier. The type is string.
    Ospfv3ProcessId interface{}

    // BGP Autonomous System number. The type is string.
    BgpAsNumber interface{}

    // EIGRP Autonomous System number. The type is string.
    EigrpAsNumber interface{}

    // Application Name. The type is string.
    ApplicationName interface{}
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetEntityData() *types.CommonEntityData {
    owner.EntityData.YFilter = owner.YFilter
    owner.EntityData.YangName = "owner"
    owner.EntityData.BundleName = "cisco_ios_xr"
    owner.EntityData.ParentYangName = "isis-sh-route-redist-detail"
    owner.EntityData.SegmentPath = "owner"
    owner.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/redistributed-status/redistribution-details/isis-sh-route-redist-detail/" + owner.EntityData.SegmentPath
    owner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    owner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    owner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    owner.EntityData.Children = types.NewOrderedMap()
    owner.EntityData.Leafs = types.NewOrderedMap()
    owner.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", owner.Protocol})
    owner.EntityData.Leafs.Append("isis-instance-id", types.YLeaf{"IsisInstanceId", owner.IsisInstanceId})
    owner.EntityData.Leafs.Append("ospf-process-id", types.YLeaf{"OspfProcessId", owner.OspfProcessId})
    owner.EntityData.Leafs.Append("ospfv3-process-id", types.YLeaf{"Ospfv3ProcessId", owner.Ospfv3ProcessId})
    owner.EntityData.Leafs.Append("bgp-as-number", types.YLeaf{"BgpAsNumber", owner.BgpAsNumber})
    owner.EntityData.Leafs.Append("eigrp-as-number", types.YLeaf{"EigrpAsNumber", owner.EigrpAsNumber})
    owner.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", owner.ApplicationName})

    owner.EntityData.YListKeys = []string {}

    return &(owner.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus
// Status of native IS-IS routes to the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the native route.
    NativeDetails Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus) GetEntityData() *types.CommonEntityData {
    nativeStatus.EntityData.YFilter = nativeStatus.YFilter
    nativeStatus.EntityData.YangName = "native-status"
    nativeStatus.EntityData.BundleName = "cisco_ios_xr"
    nativeStatus.EntityData.ParentYangName = "ipv6-route"
    nativeStatus.EntityData.SegmentPath = "native-status"
    nativeStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/" + nativeStatus.EntityData.SegmentPath
    nativeStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nativeStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nativeStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nativeStatus.EntityData.Children = types.NewOrderedMap()
    nativeStatus.EntityData.Children.Append("native-details", types.YChild{"NativeDetails", &nativeStatus.NativeDetails})
    nativeStatus.EntityData.Leafs = types.NewOrderedMap()
    nativeStatus.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", nativeStatus.IsValid})

    nativeStatus.EntityData.YListKeys = []string {}

    return &(nativeStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails
// Details of the native route
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Relative importance of the prefix. The type is IsisPrefixPriority.
    Priority interface{}

    // Prefix local label for SR-MPLS. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}

    // Primary paths to prefix.
    Primary Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary

    // Backup paths to prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup.
    Backup []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails) GetEntityData() *types.CommonEntityData {
    nativeDetails.EntityData.YFilter = nativeDetails.YFilter
    nativeDetails.EntityData.YangName = "native-details"
    nativeDetails.EntityData.BundleName = "cisco_ios_xr"
    nativeDetails.EntityData.ParentYangName = "native-status"
    nativeDetails.EntityData.SegmentPath = "native-details"
    nativeDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/" + nativeDetails.EntityData.SegmentPath
    nativeDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nativeDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nativeDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nativeDetails.EntityData.Children = types.NewOrderedMap()
    nativeDetails.EntityData.Children.Append("primary", types.YChild{"Primary", &nativeDetails.Primary})
    nativeDetails.EntityData.Children.Append("backup", types.YChild{"Backup", nil})
    for i := range nativeDetails.Backup {
        types.SetYListKey(nativeDetails.Backup[i], i)
        nativeDetails.EntityData.Children.Append(types.GetSegmentPath(nativeDetails.Backup[i]), types.YChild{"Backup", nativeDetails.Backup[i]})
    }
    nativeDetails.EntityData.Leafs = types.NewOrderedMap()
    nativeDetails.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", nativeDetails.Priority})
    nativeDetails.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", nativeDetails.LocalLabel})

    nativeDetails.EntityData.YListKeys = []string {}

    return &(nativeDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary
// Primary paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths.
    Paths []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop.
    UcmpNextHop []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath.
    MulticastPath []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath.
    SrtePath []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath.
    ExplicitPath []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source.
    Source []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource.
    MulticastSource []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary) GetEntityData() *types.CommonEntityData {
    primary.EntityData.YFilter = primary.YFilter
    primary.EntityData.YangName = "primary"
    primary.EntityData.BundleName = "cisco_ios_xr"
    primary.EntityData.ParentYangName = "native-details"
    primary.EntityData.SegmentPath = "primary"
    primary.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/" + primary.EntityData.SegmentPath
    primary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    primary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    primary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    primary.EntityData.Children = types.NewOrderedMap()
    primary.EntityData.Children.Append("paths", types.YChild{"Paths", nil})
    for i := range primary.Paths {
        types.SetYListKey(primary.Paths[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.Paths[i]), types.YChild{"Paths", primary.Paths[i]})
    }
    primary.EntityData.Children.Append("ucmp-next-hop", types.YChild{"UcmpNextHop", nil})
    for i := range primary.UcmpNextHop {
        types.SetYListKey(primary.UcmpNextHop[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.UcmpNextHop[i]), types.YChild{"UcmpNextHop", primary.UcmpNextHop[i]})
    }
    primary.EntityData.Children.Append("multicast-path", types.YChild{"MulticastPath", nil})
    for i := range primary.MulticastPath {
        types.SetYListKey(primary.MulticastPath[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.MulticastPath[i]), types.YChild{"MulticastPath", primary.MulticastPath[i]})
    }
    primary.EntityData.Children.Append("srte-path", types.YChild{"SrtePath", nil})
    for i := range primary.SrtePath {
        types.SetYListKey(primary.SrtePath[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.SrtePath[i]), types.YChild{"SrtePath", primary.SrtePath[i]})
    }
    primary.EntityData.Children.Append("explicit-path", types.YChild{"ExplicitPath", nil})
    for i := range primary.ExplicitPath {
        types.SetYListKey(primary.ExplicitPath[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.ExplicitPath[i]), types.YChild{"ExplicitPath", primary.ExplicitPath[i]})
    }
    primary.EntityData.Children.Append("source", types.YChild{"Source", nil})
    for i := range primary.Source {
        types.SetYListKey(primary.Source[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.Source[i]), types.YChild{"Source", primary.Source[i]})
    }
    primary.EntityData.Children.Append("multicast-source", types.YChild{"MulticastSource", nil})
    for i := range primary.MulticastSource {
        types.SetYListKey(primary.MulticastSource[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.MulticastSource[i]), types.YChild{"MulticastSource", primary.MulticastSource[i]})
    }
    primary.EntityData.Leafs = types.NewOrderedMap()
    primary.EntityData.Leafs.Append("origin", types.YLeaf{"Origin", primary.Origin})
    primary.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", primary.Metric})
    primary.EntityData.Leafs.Append("multicast-metric", types.YLeaf{"MulticastMetric", primary.MulticastMetric})
    primary.EntityData.Leafs.Append("is-external-metric", types.YLeaf{"IsExternalMetric", primary.IsExternalMetric})
    primary.EntityData.Leafs.Append("administrative-distance", types.YLeaf{"AdministrativeDistance", primary.AdministrativeDistance})

    primary.EntityData.YListKeys = []string {}

    return &(primary.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_Nnh
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "primary"
    paths.EntityData.SegmentPath = "paths" + types.AddNoKeyToken(paths)
    paths.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/" + paths.EntityData.SegmentPath
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = types.NewOrderedMap()
    paths.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &paths.FrrBackup})
    paths.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range paths.UloopExplicit {
        types.SetYListKey(paths.UloopExplicit[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.UloopExplicit[i]), types.YChild{"UloopExplicit", paths.UloopExplicit[i]})
    }
    paths.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range paths.Nnh {
        types.SetYListKey(paths.Nnh[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.Nnh[i]), types.YChild{"Nnh", paths.Nnh[i]})
    }
    paths.EntityData.Leafs = types.NewOrderedMap()
    paths.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", paths.NeighborId})
    paths.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", paths.EgressInterface})
    paths.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", paths.NeighborAddress})
    paths.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", paths.NeighborSnpa})
    paths.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", paths.Tag})
    paths.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", paths.TunnelInterface})
    paths.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", paths.SegmentRoutingSidValue})
    paths.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", paths.Weight})
    paths.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", paths.IsTeTunnelInterface})
    paths.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", paths.IsSrExcludeTunnelInterface})
    paths.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", paths.OutgoingLabel})

    paths.EntityData.YListKeys = []string {}

    return &(paths.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "paths"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/paths/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/paths/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/paths/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "paths"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/paths/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Paths_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "paths"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/paths/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetEntityData() *types.CommonEntityData {
    ucmpNextHop.EntityData.YFilter = ucmpNextHop.YFilter
    ucmpNextHop.EntityData.YangName = "ucmp-next-hop"
    ucmpNextHop.EntityData.BundleName = "cisco_ios_xr"
    ucmpNextHop.EntityData.ParentYangName = "primary"
    ucmpNextHop.EntityData.SegmentPath = "ucmp-next-hop" + types.AddNoKeyToken(ucmpNextHop)
    ucmpNextHop.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/" + ucmpNextHop.EntityData.SegmentPath
    ucmpNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ucmpNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ucmpNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ucmpNextHop.EntityData.Children = types.NewOrderedMap()
    ucmpNextHop.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &ucmpNextHop.FrrBackup})
    ucmpNextHop.EntityData.Leafs = types.NewOrderedMap()
    ucmpNextHop.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", ucmpNextHop.NeighborId})
    ucmpNextHop.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", ucmpNextHop.EgressInterface})
    ucmpNextHop.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", ucmpNextHop.NeighborAddress})
    ucmpNextHop.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", ucmpNextHop.NeighborSnpa})
    ucmpNextHop.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", ucmpNextHop.Tag})
    ucmpNextHop.EntityData.Leafs.Append("total-ucmp-distance", types.YLeaf{"TotalUcmpDistance", ucmpNextHop.TotalUcmpDistance})
    ucmpNextHop.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", ucmpNextHop.SegmentRoutingSidValue})
    ucmpNextHop.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", ucmpNextHop.Weight})
    ucmpNextHop.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", ucmpNextHop.IsTeTunnelInterface})
    ucmpNextHop.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", ucmpNextHop.IsSrExcludeTunnelInterface})
    ucmpNextHop.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", ucmpNextHop.OutgoingLabel})

    ucmpNextHop.EntityData.YListKeys = []string {}

    return &(ucmpNextHop.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "ucmp-next-hop"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/ucmp-next-hop/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/ucmp-next-hop/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/ucmp-next-hop/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetEntityData() *types.CommonEntityData {
    multicastPath.EntityData.YFilter = multicastPath.YFilter
    multicastPath.EntityData.YangName = "multicast-path"
    multicastPath.EntityData.BundleName = "cisco_ios_xr"
    multicastPath.EntityData.ParentYangName = "primary"
    multicastPath.EntityData.SegmentPath = "multicast-path" + types.AddNoKeyToken(multicastPath)
    multicastPath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/" + multicastPath.EntityData.SegmentPath
    multicastPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastPath.EntityData.Children = types.NewOrderedMap()
    multicastPath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &multicastPath.FrrBackup})
    multicastPath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range multicastPath.UloopExplicit {
        types.SetYListKey(multicastPath.UloopExplicit[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.UloopExplicit[i]), types.YChild{"UloopExplicit", multicastPath.UloopExplicit[i]})
    }
    multicastPath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range multicastPath.Nnh {
        types.SetYListKey(multicastPath.Nnh[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.Nnh[i]), types.YChild{"Nnh", multicastPath.Nnh[i]})
    }
    multicastPath.EntityData.Leafs = types.NewOrderedMap()
    multicastPath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", multicastPath.NeighborId})
    multicastPath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", multicastPath.EgressInterface})
    multicastPath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", multicastPath.NeighborAddress})
    multicastPath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", multicastPath.NeighborSnpa})
    multicastPath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", multicastPath.Tag})
    multicastPath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", multicastPath.TunnelInterface})
    multicastPath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", multicastPath.SegmentRoutingSidValue})
    multicastPath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", multicastPath.Weight})
    multicastPath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", multicastPath.IsTeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", multicastPath.IsSrExcludeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", multicastPath.OutgoingLabel})

    multicastPath.EntityData.YListKeys = []string {}

    return &(multicastPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "multicast-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/multicast-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/multicast-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/multicast-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "multicast-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/multicast-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "multicast-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/multicast-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_Nnh
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath) GetEntityData() *types.CommonEntityData {
    srtePath.EntityData.YFilter = srtePath.YFilter
    srtePath.EntityData.YangName = "srte-path"
    srtePath.EntityData.BundleName = "cisco_ios_xr"
    srtePath.EntityData.ParentYangName = "primary"
    srtePath.EntityData.SegmentPath = "srte-path" + types.AddNoKeyToken(srtePath)
    srtePath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/" + srtePath.EntityData.SegmentPath
    srtePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srtePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srtePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srtePath.EntityData.Children = types.NewOrderedMap()
    srtePath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &srtePath.FrrBackup})
    srtePath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range srtePath.UloopExplicit {
        types.SetYListKey(srtePath.UloopExplicit[i], i)
        srtePath.EntityData.Children.Append(types.GetSegmentPath(srtePath.UloopExplicit[i]), types.YChild{"UloopExplicit", srtePath.UloopExplicit[i]})
    }
    srtePath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range srtePath.Nnh {
        types.SetYListKey(srtePath.Nnh[i], i)
        srtePath.EntityData.Children.Append(types.GetSegmentPath(srtePath.Nnh[i]), types.YChild{"Nnh", srtePath.Nnh[i]})
    }
    srtePath.EntityData.Leafs = types.NewOrderedMap()
    srtePath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", srtePath.NeighborId})
    srtePath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", srtePath.EgressInterface})
    srtePath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", srtePath.NeighborAddress})
    srtePath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", srtePath.NeighborSnpa})
    srtePath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", srtePath.Tag})
    srtePath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", srtePath.TunnelInterface})
    srtePath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", srtePath.SegmentRoutingSidValue})
    srtePath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", srtePath.Weight})
    srtePath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", srtePath.IsTeTunnelInterface})
    srtePath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", srtePath.IsSrExcludeTunnelInterface})
    srtePath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", srtePath.OutgoingLabel})

    srtePath.EntityData.YListKeys = []string {}

    return &(srtePath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "srte-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/srte-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/srte-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/srte-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "srte-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/srte-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_SrtePath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "srte-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/srte-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetEntityData() *types.CommonEntityData {
    explicitPath.EntityData.YFilter = explicitPath.YFilter
    explicitPath.EntityData.YangName = "explicit-path"
    explicitPath.EntityData.BundleName = "cisco_ios_xr"
    explicitPath.EntityData.ParentYangName = "primary"
    explicitPath.EntityData.SegmentPath = "explicit-path" + types.AddNoKeyToken(explicitPath)
    explicitPath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/" + explicitPath.EntityData.SegmentPath
    explicitPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitPath.EntityData.Children = types.NewOrderedMap()
    explicitPath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &explicitPath.FrrBackup})
    explicitPath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range explicitPath.UloopExplicit {
        types.SetYListKey(explicitPath.UloopExplicit[i], i)
        explicitPath.EntityData.Children.Append(types.GetSegmentPath(explicitPath.UloopExplicit[i]), types.YChild{"UloopExplicit", explicitPath.UloopExplicit[i]})
    }
    explicitPath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range explicitPath.Nnh {
        types.SetYListKey(explicitPath.Nnh[i], i)
        explicitPath.EntityData.Children.Append(types.GetSegmentPath(explicitPath.Nnh[i]), types.YChild{"Nnh", explicitPath.Nnh[i]})
    }
    explicitPath.EntityData.Leafs = types.NewOrderedMap()
    explicitPath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", explicitPath.NeighborId})
    explicitPath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", explicitPath.EgressInterface})
    explicitPath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", explicitPath.NeighborAddress})
    explicitPath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", explicitPath.NeighborSnpa})
    explicitPath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", explicitPath.Tag})
    explicitPath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", explicitPath.TunnelInterface})
    explicitPath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", explicitPath.SegmentRoutingSidValue})
    explicitPath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", explicitPath.Weight})
    explicitPath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", explicitPath.IsTeTunnelInterface})
    explicitPath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", explicitPath.IsSrExcludeTunnelInterface})
    explicitPath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", explicitPath.OutgoingLabel})

    explicitPath.EntityData.YListKeys = []string {}

    return &(explicitPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "explicit-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/explicit-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/explicit-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/explicit-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "explicit-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/explicit-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "explicit-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/explicit-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "primary"
    source.EntityData.SegmentPath = "source" + types.AddNoKeyToken(source)
    source.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/" + source.EntityData.SegmentPath
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = types.NewOrderedMap()
    source.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range source.Tags {
        types.SetYListKey(source.Tags[i], i)
        source.EntityData.Children.Append(types.GetSegmentPath(source.Tags[i]), types.YChild{"Tags", source.Tags[i]})
    }
    source.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range source.NodalSid {
        types.SetYListKey(source.NodalSid[i], i)
        source.EntityData.Children.Append(types.GetSegmentPath(source.NodalSid[i]), types.YChild{"NodalSid", source.NodalSid[i]})
    }
    source.EntityData.Leafs = types.NewOrderedMap()
    source.EntityData.Leafs.Append("source-lsp-id", types.YLeaf{"SourceLspId", source.SourceLspId})
    source.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", source.SourceAddress})

    source.EntityData.YListKeys = []string {}

    return &(source.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "source"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/source/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "source"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/source/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetEntityData() *types.CommonEntityData {
    multicastSource.EntityData.YFilter = multicastSource.YFilter
    multicastSource.EntityData.YangName = "multicast-source"
    multicastSource.EntityData.BundleName = "cisco_ios_xr"
    multicastSource.EntityData.ParentYangName = "primary"
    multicastSource.EntityData.SegmentPath = "multicast-source" + types.AddNoKeyToken(multicastSource)
    multicastSource.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/" + multicastSource.EntityData.SegmentPath
    multicastSource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastSource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastSource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastSource.EntityData.Children = types.NewOrderedMap()
    multicastSource.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range multicastSource.Tags {
        types.SetYListKey(multicastSource.Tags[i], i)
        multicastSource.EntityData.Children.Append(types.GetSegmentPath(multicastSource.Tags[i]), types.YChild{"Tags", multicastSource.Tags[i]})
    }
    multicastSource.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range multicastSource.NodalSid {
        types.SetYListKey(multicastSource.NodalSid[i], i)
        multicastSource.EntityData.Children.Append(types.GetSegmentPath(multicastSource.NodalSid[i]), types.YChild{"NodalSid", multicastSource.NodalSid[i]})
    }
    multicastSource.EntityData.Leafs = types.NewOrderedMap()
    multicastSource.EntityData.Leafs.Append("source-lsp-id", types.YLeaf{"SourceLspId", multicastSource.SourceLspId})
    multicastSource.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", multicastSource.SourceAddress})

    multicastSource.EntityData.YListKeys = []string {}

    return &(multicastSource.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "multicast-source"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/multicast-source/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "multicast-source"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/primary/multicast-source/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup
// Backup paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths.
    Paths []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop.
    UcmpNextHop []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath.
    MulticastPath []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath.
    SrtePath []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath.
    ExplicitPath []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source.
    Source []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource.
    MulticastSource []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup) GetEntityData() *types.CommonEntityData {
    backup.EntityData.YFilter = backup.YFilter
    backup.EntityData.YangName = "backup"
    backup.EntityData.BundleName = "cisco_ios_xr"
    backup.EntityData.ParentYangName = "native-details"
    backup.EntityData.SegmentPath = "backup" + types.AddNoKeyToken(backup)
    backup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/" + backup.EntityData.SegmentPath
    backup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backup.EntityData.Children = types.NewOrderedMap()
    backup.EntityData.Children.Append("paths", types.YChild{"Paths", nil})
    for i := range backup.Paths {
        types.SetYListKey(backup.Paths[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.Paths[i]), types.YChild{"Paths", backup.Paths[i]})
    }
    backup.EntityData.Children.Append("ucmp-next-hop", types.YChild{"UcmpNextHop", nil})
    for i := range backup.UcmpNextHop {
        types.SetYListKey(backup.UcmpNextHop[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.UcmpNextHop[i]), types.YChild{"UcmpNextHop", backup.UcmpNextHop[i]})
    }
    backup.EntityData.Children.Append("multicast-path", types.YChild{"MulticastPath", nil})
    for i := range backup.MulticastPath {
        types.SetYListKey(backup.MulticastPath[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.MulticastPath[i]), types.YChild{"MulticastPath", backup.MulticastPath[i]})
    }
    backup.EntityData.Children.Append("srte-path", types.YChild{"SrtePath", nil})
    for i := range backup.SrtePath {
        types.SetYListKey(backup.SrtePath[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.SrtePath[i]), types.YChild{"SrtePath", backup.SrtePath[i]})
    }
    backup.EntityData.Children.Append("explicit-path", types.YChild{"ExplicitPath", nil})
    for i := range backup.ExplicitPath {
        types.SetYListKey(backup.ExplicitPath[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.ExplicitPath[i]), types.YChild{"ExplicitPath", backup.ExplicitPath[i]})
    }
    backup.EntityData.Children.Append("source", types.YChild{"Source", nil})
    for i := range backup.Source {
        types.SetYListKey(backup.Source[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.Source[i]), types.YChild{"Source", backup.Source[i]})
    }
    backup.EntityData.Children.Append("multicast-source", types.YChild{"MulticastSource", nil})
    for i := range backup.MulticastSource {
        types.SetYListKey(backup.MulticastSource[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.MulticastSource[i]), types.YChild{"MulticastSource", backup.MulticastSource[i]})
    }
    backup.EntityData.Leafs = types.NewOrderedMap()
    backup.EntityData.Leafs.Append("origin", types.YLeaf{"Origin", backup.Origin})
    backup.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", backup.Metric})
    backup.EntityData.Leafs.Append("multicast-metric", types.YLeaf{"MulticastMetric", backup.MulticastMetric})
    backup.EntityData.Leafs.Append("is-external-metric", types.YLeaf{"IsExternalMetric", backup.IsExternalMetric})
    backup.EntityData.Leafs.Append("administrative-distance", types.YLeaf{"AdministrativeDistance", backup.AdministrativeDistance})

    backup.EntityData.YListKeys = []string {}

    return &(backup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_Nnh
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "backup"
    paths.EntityData.SegmentPath = "paths" + types.AddNoKeyToken(paths)
    paths.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/" + paths.EntityData.SegmentPath
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = types.NewOrderedMap()
    paths.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &paths.FrrBackup})
    paths.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range paths.UloopExplicit {
        types.SetYListKey(paths.UloopExplicit[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.UloopExplicit[i]), types.YChild{"UloopExplicit", paths.UloopExplicit[i]})
    }
    paths.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range paths.Nnh {
        types.SetYListKey(paths.Nnh[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.Nnh[i]), types.YChild{"Nnh", paths.Nnh[i]})
    }
    paths.EntityData.Leafs = types.NewOrderedMap()
    paths.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", paths.NeighborId})
    paths.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", paths.EgressInterface})
    paths.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", paths.NeighborAddress})
    paths.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", paths.NeighborSnpa})
    paths.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", paths.Tag})
    paths.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", paths.TunnelInterface})
    paths.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", paths.SegmentRoutingSidValue})
    paths.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", paths.Weight})
    paths.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", paths.IsTeTunnelInterface})
    paths.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", paths.IsSrExcludeTunnelInterface})
    paths.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", paths.OutgoingLabel})

    paths.EntityData.YListKeys = []string {}

    return &(paths.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "paths"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/paths/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/paths/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/paths/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "paths"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/paths/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Paths_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "paths"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/paths/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetEntityData() *types.CommonEntityData {
    ucmpNextHop.EntityData.YFilter = ucmpNextHop.YFilter
    ucmpNextHop.EntityData.YangName = "ucmp-next-hop"
    ucmpNextHop.EntityData.BundleName = "cisco_ios_xr"
    ucmpNextHop.EntityData.ParentYangName = "backup"
    ucmpNextHop.EntityData.SegmentPath = "ucmp-next-hop" + types.AddNoKeyToken(ucmpNextHop)
    ucmpNextHop.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/" + ucmpNextHop.EntityData.SegmentPath
    ucmpNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ucmpNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ucmpNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ucmpNextHop.EntityData.Children = types.NewOrderedMap()
    ucmpNextHop.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &ucmpNextHop.FrrBackup})
    ucmpNextHop.EntityData.Leafs = types.NewOrderedMap()
    ucmpNextHop.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", ucmpNextHop.NeighborId})
    ucmpNextHop.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", ucmpNextHop.EgressInterface})
    ucmpNextHop.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", ucmpNextHop.NeighborAddress})
    ucmpNextHop.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", ucmpNextHop.NeighborSnpa})
    ucmpNextHop.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", ucmpNextHop.Tag})
    ucmpNextHop.EntityData.Leafs.Append("total-ucmp-distance", types.YLeaf{"TotalUcmpDistance", ucmpNextHop.TotalUcmpDistance})
    ucmpNextHop.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", ucmpNextHop.SegmentRoutingSidValue})
    ucmpNextHop.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", ucmpNextHop.Weight})
    ucmpNextHop.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", ucmpNextHop.IsTeTunnelInterface})
    ucmpNextHop.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", ucmpNextHop.IsSrExcludeTunnelInterface})
    ucmpNextHop.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", ucmpNextHop.OutgoingLabel})

    ucmpNextHop.EntityData.YListKeys = []string {}

    return &(ucmpNextHop.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "ucmp-next-hop"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/ucmp-next-hop/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/ucmp-next-hop/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/ucmp-next-hop/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetEntityData() *types.CommonEntityData {
    multicastPath.EntityData.YFilter = multicastPath.YFilter
    multicastPath.EntityData.YangName = "multicast-path"
    multicastPath.EntityData.BundleName = "cisco_ios_xr"
    multicastPath.EntityData.ParentYangName = "backup"
    multicastPath.EntityData.SegmentPath = "multicast-path" + types.AddNoKeyToken(multicastPath)
    multicastPath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/" + multicastPath.EntityData.SegmentPath
    multicastPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastPath.EntityData.Children = types.NewOrderedMap()
    multicastPath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &multicastPath.FrrBackup})
    multicastPath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range multicastPath.UloopExplicit {
        types.SetYListKey(multicastPath.UloopExplicit[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.UloopExplicit[i]), types.YChild{"UloopExplicit", multicastPath.UloopExplicit[i]})
    }
    multicastPath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range multicastPath.Nnh {
        types.SetYListKey(multicastPath.Nnh[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.Nnh[i]), types.YChild{"Nnh", multicastPath.Nnh[i]})
    }
    multicastPath.EntityData.Leafs = types.NewOrderedMap()
    multicastPath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", multicastPath.NeighborId})
    multicastPath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", multicastPath.EgressInterface})
    multicastPath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", multicastPath.NeighborAddress})
    multicastPath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", multicastPath.NeighborSnpa})
    multicastPath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", multicastPath.Tag})
    multicastPath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", multicastPath.TunnelInterface})
    multicastPath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", multicastPath.SegmentRoutingSidValue})
    multicastPath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", multicastPath.Weight})
    multicastPath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", multicastPath.IsTeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", multicastPath.IsSrExcludeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", multicastPath.OutgoingLabel})

    multicastPath.EntityData.YListKeys = []string {}

    return &(multicastPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "multicast-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/multicast-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/multicast-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/multicast-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "multicast-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/multicast-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "multicast-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/multicast-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_Nnh
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath) GetEntityData() *types.CommonEntityData {
    srtePath.EntityData.YFilter = srtePath.YFilter
    srtePath.EntityData.YangName = "srte-path"
    srtePath.EntityData.BundleName = "cisco_ios_xr"
    srtePath.EntityData.ParentYangName = "backup"
    srtePath.EntityData.SegmentPath = "srte-path" + types.AddNoKeyToken(srtePath)
    srtePath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/" + srtePath.EntityData.SegmentPath
    srtePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srtePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srtePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srtePath.EntityData.Children = types.NewOrderedMap()
    srtePath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &srtePath.FrrBackup})
    srtePath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range srtePath.UloopExplicit {
        types.SetYListKey(srtePath.UloopExplicit[i], i)
        srtePath.EntityData.Children.Append(types.GetSegmentPath(srtePath.UloopExplicit[i]), types.YChild{"UloopExplicit", srtePath.UloopExplicit[i]})
    }
    srtePath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range srtePath.Nnh {
        types.SetYListKey(srtePath.Nnh[i], i)
        srtePath.EntityData.Children.Append(types.GetSegmentPath(srtePath.Nnh[i]), types.YChild{"Nnh", srtePath.Nnh[i]})
    }
    srtePath.EntityData.Leafs = types.NewOrderedMap()
    srtePath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", srtePath.NeighborId})
    srtePath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", srtePath.EgressInterface})
    srtePath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", srtePath.NeighborAddress})
    srtePath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", srtePath.NeighborSnpa})
    srtePath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", srtePath.Tag})
    srtePath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", srtePath.TunnelInterface})
    srtePath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", srtePath.SegmentRoutingSidValue})
    srtePath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", srtePath.Weight})
    srtePath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", srtePath.IsTeTunnelInterface})
    srtePath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", srtePath.IsSrExcludeTunnelInterface})
    srtePath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", srtePath.OutgoingLabel})

    srtePath.EntityData.YListKeys = []string {}

    return &(srtePath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "srte-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/srte-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/srte-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/srte-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "srte-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/srte-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_SrtePath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "srte-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/srte-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetEntityData() *types.CommonEntityData {
    explicitPath.EntityData.YFilter = explicitPath.YFilter
    explicitPath.EntityData.YangName = "explicit-path"
    explicitPath.EntityData.BundleName = "cisco_ios_xr"
    explicitPath.EntityData.ParentYangName = "backup"
    explicitPath.EntityData.SegmentPath = "explicit-path" + types.AddNoKeyToken(explicitPath)
    explicitPath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/" + explicitPath.EntityData.SegmentPath
    explicitPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitPath.EntityData.Children = types.NewOrderedMap()
    explicitPath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &explicitPath.FrrBackup})
    explicitPath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range explicitPath.UloopExplicit {
        types.SetYListKey(explicitPath.UloopExplicit[i], i)
        explicitPath.EntityData.Children.Append(types.GetSegmentPath(explicitPath.UloopExplicit[i]), types.YChild{"UloopExplicit", explicitPath.UloopExplicit[i]})
    }
    explicitPath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range explicitPath.Nnh {
        types.SetYListKey(explicitPath.Nnh[i], i)
        explicitPath.EntityData.Children.Append(types.GetSegmentPath(explicitPath.Nnh[i]), types.YChild{"Nnh", explicitPath.Nnh[i]})
    }
    explicitPath.EntityData.Leafs = types.NewOrderedMap()
    explicitPath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", explicitPath.NeighborId})
    explicitPath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", explicitPath.EgressInterface})
    explicitPath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", explicitPath.NeighborAddress})
    explicitPath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", explicitPath.NeighborSnpa})
    explicitPath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", explicitPath.Tag})
    explicitPath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", explicitPath.TunnelInterface})
    explicitPath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", explicitPath.SegmentRoutingSidValue})
    explicitPath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", explicitPath.Weight})
    explicitPath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", explicitPath.IsTeTunnelInterface})
    explicitPath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", explicitPath.IsSrExcludeTunnelInterface})
    explicitPath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", explicitPath.OutgoingLabel})

    explicitPath.EntityData.YListKeys = []string {}

    return &(explicitPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "explicit-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/explicit-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/explicit-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/explicit-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "explicit-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/explicit-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "explicit-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/explicit-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "backup"
    source.EntityData.SegmentPath = "source" + types.AddNoKeyToken(source)
    source.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/" + source.EntityData.SegmentPath
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = types.NewOrderedMap()
    source.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range source.Tags {
        types.SetYListKey(source.Tags[i], i)
        source.EntityData.Children.Append(types.GetSegmentPath(source.Tags[i]), types.YChild{"Tags", source.Tags[i]})
    }
    source.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range source.NodalSid {
        types.SetYListKey(source.NodalSid[i], i)
        source.EntityData.Children.Append(types.GetSegmentPath(source.NodalSid[i]), types.YChild{"NodalSid", source.NodalSid[i]})
    }
    source.EntityData.Leafs = types.NewOrderedMap()
    source.EntityData.Leafs.Append("source-lsp-id", types.YLeaf{"SourceLspId", source.SourceLspId})
    source.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", source.SourceAddress})

    source.EntityData.YListKeys = []string {}

    return &(source.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "source"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/source/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "source"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/source/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetEntityData() *types.CommonEntityData {
    multicastSource.EntityData.YFilter = multicastSource.YFilter
    multicastSource.EntityData.YangName = "multicast-source"
    multicastSource.EntityData.BundleName = "cisco_ios_xr"
    multicastSource.EntityData.ParentYangName = "backup"
    multicastSource.EntityData.SegmentPath = "multicast-source" + types.AddNoKeyToken(multicastSource)
    multicastSource.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/" + multicastSource.EntityData.SegmentPath
    multicastSource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastSource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastSource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastSource.EntityData.Children = types.NewOrderedMap()
    multicastSource.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range multicastSource.Tags {
        types.SetYListKey(multicastSource.Tags[i], i)
        multicastSource.EntityData.Children.Append(types.GetSegmentPath(multicastSource.Tags[i]), types.YChild{"Tags", multicastSource.Tags[i]})
    }
    multicastSource.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range multicastSource.NodalSid {
        types.SetYListKey(multicastSource.NodalSid[i], i)
        multicastSource.EntityData.Children.Append(types.GetSegmentPath(multicastSource.NodalSid[i]), types.YChild{"NodalSid", multicastSource.NodalSid[i]})
    }
    multicastSource.EntityData.Leafs = types.NewOrderedMap()
    multicastSource.EntityData.Leafs.Append("source-lsp-id", types.YLeaf{"SourceLspId", multicastSource.SourceLspId})
    multicastSource.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", multicastSource.SourceAddress})

    multicastSource.EntityData.YListKeys = []string {}

    return &(multicastSource.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "multicast-source"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/multicast-source/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "multicast-source"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/native-status/native-details/backup/multicast-source/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail
// Per level details of how the local system
// advertises the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Level in which the prefix is advertised. The type is IsisLevel.
    Level interface{}

    // The origin of the advertisement. The type is IsisShRouteAdvOrigin.
    AdvertisingOrigin interface{}

    // Metric with which the prefix is advertised. The type is interface{} with
    // range: 0..4294967295.
    Metric interface{}

    // Has the prefix been propagated from another level?. The type is bool.
    IsPropagated interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Is the prefix external to the IS-IS domain?. The type is bool.
    IsExternalReachability interface{}

    // Is the up/down bit set?. The type is bool.
    IsInterarea interface{}

    // Status of summarization for the prefix.
    SummarizationStatus Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus

    // Tags associated with the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail) GetEntityData() *types.CommonEntityData {
    perLevelAdvertisingDetail.EntityData.YFilter = perLevelAdvertisingDetail.YFilter
    perLevelAdvertisingDetail.EntityData.YangName = "per-level-advertising-detail"
    perLevelAdvertisingDetail.EntityData.BundleName = "cisco_ios_xr"
    perLevelAdvertisingDetail.EntityData.ParentYangName = "ipv6-route"
    perLevelAdvertisingDetail.EntityData.SegmentPath = "per-level-advertising-detail" + types.AddNoKeyToken(perLevelAdvertisingDetail)
    perLevelAdvertisingDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/" + perLevelAdvertisingDetail.EntityData.SegmentPath
    perLevelAdvertisingDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perLevelAdvertisingDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perLevelAdvertisingDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perLevelAdvertisingDetail.EntityData.Children = types.NewOrderedMap()
    perLevelAdvertisingDetail.EntityData.Children.Append("summarization-status", types.YChild{"SummarizationStatus", &perLevelAdvertisingDetail.SummarizationStatus})
    perLevelAdvertisingDetail.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range perLevelAdvertisingDetail.Tags {
        types.SetYListKey(perLevelAdvertisingDetail.Tags[i], i)
        perLevelAdvertisingDetail.EntityData.Children.Append(types.GetSegmentPath(perLevelAdvertisingDetail.Tags[i]), types.YChild{"Tags", perLevelAdvertisingDetail.Tags[i]})
    }
    perLevelAdvertisingDetail.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range perLevelAdvertisingDetail.NodalSid {
        types.SetYListKey(perLevelAdvertisingDetail.NodalSid[i], i)
        perLevelAdvertisingDetail.EntityData.Children.Append(types.GetSegmentPath(perLevelAdvertisingDetail.NodalSid[i]), types.YChild{"NodalSid", perLevelAdvertisingDetail.NodalSid[i]})
    }
    perLevelAdvertisingDetail.EntityData.Leafs = types.NewOrderedMap()
    perLevelAdvertisingDetail.EntityData.Leafs.Append("level", types.YLeaf{"Level", perLevelAdvertisingDetail.Level})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("advertising-origin", types.YLeaf{"AdvertisingOrigin", perLevelAdvertisingDetail.AdvertisingOrigin})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", perLevelAdvertisingDetail.Metric})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("is-propagated", types.YLeaf{"IsPropagated", perLevelAdvertisingDetail.IsPropagated})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("is-external-metric", types.YLeaf{"IsExternalMetric", perLevelAdvertisingDetail.IsExternalMetric})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("is-external-reachability", types.YLeaf{"IsExternalReachability", perLevelAdvertisingDetail.IsExternalReachability})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("is-interarea", types.YLeaf{"IsInterarea", perLevelAdvertisingDetail.IsInterarea})

    perLevelAdvertisingDetail.EntityData.YListKeys = []string {}

    return &(perLevelAdvertisingDetail.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus
// Status of summarization for the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Summarizing Prefix.
    SummaryPrefix Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus) GetEntityData() *types.CommonEntityData {
    summarizationStatus.EntityData.YFilter = summarizationStatus.YFilter
    summarizationStatus.EntityData.YangName = "summarization-status"
    summarizationStatus.EntityData.BundleName = "cisco_ios_xr"
    summarizationStatus.EntityData.ParentYangName = "per-level-advertising-detail"
    summarizationStatus.EntityData.SegmentPath = "summarization-status"
    summarizationStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/per-level-advertising-detail/" + summarizationStatus.EntityData.SegmentPath
    summarizationStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summarizationStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summarizationStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summarizationStatus.EntityData.Children = types.NewOrderedMap()
    summarizationStatus.EntityData.Children.Append("summary-prefix", types.YChild{"SummaryPrefix", &summarizationStatus.SummaryPrefix})
    summarizationStatus.EntityData.Leafs = types.NewOrderedMap()
    summarizationStatus.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", summarizationStatus.IsValid})

    summarizationStatus.EntityData.YListKeys = []string {}

    return &(summarizationStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
// Summarizing Prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetEntityData() *types.CommonEntityData {
    summaryPrefix.EntityData.YFilter = summaryPrefix.YFilter
    summaryPrefix.EntityData.YangName = "summary-prefix"
    summaryPrefix.EntityData.BundleName = "cisco_ios_xr"
    summaryPrefix.EntityData.ParentYangName = "summarization-status"
    summaryPrefix.EntityData.SegmentPath = "summary-prefix"
    summaryPrefix.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/per-level-advertising-detail/summarization-status/" + summaryPrefix.EntityData.SegmentPath
    summaryPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryPrefix.EntityData.Children = types.NewOrderedMap()
    summaryPrefix.EntityData.Leafs = types.NewOrderedMap()
    summaryPrefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", summaryPrefix.Prefix})
    summaryPrefix.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", summaryPrefix.PrefixLength})

    summaryPrefix.EntityData.YListKeys = []string {}

    return &(summaryPrefix.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags
// Tags associated with the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "per-level-advertising-detail"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/per-level-advertising-detail/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6Routes_Ipv6Route_PerLevelAdvertisingDetail_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "per-level-advertising-detail"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6-routes/ipv6-route/per-level-advertising-detail/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups
// IPv6 FRR table
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FRR backup for an IPv6 network. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup.
    Ipv6frrBackup []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup
}

func (ipv6frrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups) GetEntityData() *types.CommonEntityData {
    ipv6frrBackups.EntityData.YFilter = ipv6frrBackups.YFilter
    ipv6frrBackups.EntityData.YangName = "ipv6frr-backups"
    ipv6frrBackups.EntityData.BundleName = "cisco_ios_xr"
    ipv6frrBackups.EntityData.ParentYangName = "topology"
    ipv6frrBackups.EntityData.SegmentPath = "ipv6frr-backups"
    ipv6frrBackups.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/" + ipv6frrBackups.EntityData.SegmentPath
    ipv6frrBackups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6frrBackups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6frrBackups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6frrBackups.EntityData.Children = types.NewOrderedMap()
    ipv6frrBackups.EntityData.Children.Append("ipv6frr-backup", types.YChild{"Ipv6frrBackup", nil})
    for i := range ipv6frrBackups.Ipv6frrBackup {
        types.SetYListKey(ipv6frrBackups.Ipv6frrBackup[i], i)
        ipv6frrBackups.EntityData.Children.Append(types.GetSegmentPath(ipv6frrBackups.Ipv6frrBackup[i]), types.YChild{"Ipv6frrBackup", ipv6frrBackups.Ipv6frrBackup[i]})
    }
    ipv6frrBackups.EntityData.Leafs = types.NewOrderedMap()

    ipv6frrBackups.EntityData.YListKeys = []string {}

    return &(ipv6frrBackups.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup
// FRR backup for an IPv6 network
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Status of IS-IS directly connected routes to the prefix.
    ConnectedStatus Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_ConnectedStatus

    // Status of other protocols' routes redistributed into IS-IS.
    RedistributedStatus Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_RedistributedStatus

    // Status of native IS-IS routes to the prefix.
    NativeStatus Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus

    // Per level details of how the local system advertises the prefix. The type
    // is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_PerLevelAdvertisingDetail.
    PerLevelAdvertisingDetail []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_PerLevelAdvertisingDetail
}

func (ipv6frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup) GetEntityData() *types.CommonEntityData {
    ipv6frrBackup.EntityData.YFilter = ipv6frrBackup.YFilter
    ipv6frrBackup.EntityData.YangName = "ipv6frr-backup"
    ipv6frrBackup.EntityData.BundleName = "cisco_ios_xr"
    ipv6frrBackup.EntityData.ParentYangName = "ipv6frr-backups"
    ipv6frrBackup.EntityData.SegmentPath = "ipv6frr-backup" + types.AddNoKeyToken(ipv6frrBackup)
    ipv6frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/" + ipv6frrBackup.EntityData.SegmentPath
    ipv6frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6frrBackup.EntityData.Children = types.NewOrderedMap()
    ipv6frrBackup.EntityData.Children.Append("connected-status", types.YChild{"ConnectedStatus", &ipv6frrBackup.ConnectedStatus})
    ipv6frrBackup.EntityData.Children.Append("redistributed-status", types.YChild{"RedistributedStatus", &ipv6frrBackup.RedistributedStatus})
    ipv6frrBackup.EntityData.Children.Append("native-status", types.YChild{"NativeStatus", &ipv6frrBackup.NativeStatus})
    ipv6frrBackup.EntityData.Children.Append("per-level-advertising-detail", types.YChild{"PerLevelAdvertisingDetail", nil})
    for i := range ipv6frrBackup.PerLevelAdvertisingDetail {
        types.SetYListKey(ipv6frrBackup.PerLevelAdvertisingDetail[i], i)
        ipv6frrBackup.EntityData.Children.Append(types.GetSegmentPath(ipv6frrBackup.PerLevelAdvertisingDetail[i]), types.YChild{"PerLevelAdvertisingDetail", ipv6frrBackup.PerLevelAdvertisingDetail[i]})
    }
    ipv6frrBackup.EntityData.Leafs = types.NewOrderedMap()
    ipv6frrBackup.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6frrBackup.Prefix})
    ipv6frrBackup.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6frrBackup.PrefixLength})

    ipv6frrBackup.EntityData.YListKeys = []string {}

    return &(ipv6frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_ConnectedStatus
// Status of IS-IS directly connected routes to the
// prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_ConnectedStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the directly connected prefix.
    ConnectedDetails Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_ConnectedStatus_ConnectedDetails
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_ConnectedStatus) GetEntityData() *types.CommonEntityData {
    connectedStatus.EntityData.YFilter = connectedStatus.YFilter
    connectedStatus.EntityData.YangName = "connected-status"
    connectedStatus.EntityData.BundleName = "cisco_ios_xr"
    connectedStatus.EntityData.ParentYangName = "ipv6frr-backup"
    connectedStatus.EntityData.SegmentPath = "connected-status"
    connectedStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/" + connectedStatus.EntityData.SegmentPath
    connectedStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedStatus.EntityData.Children = types.NewOrderedMap()
    connectedStatus.EntityData.Children.Append("connected-details", types.YChild{"ConnectedDetails", &connectedStatus.ConnectedDetails})
    connectedStatus.EntityData.Leafs = types.NewOrderedMap()
    connectedStatus.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", connectedStatus.IsValid})

    connectedStatus.EntityData.YListKeys = []string {}

    return &(connectedStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_ConnectedStatus_ConnectedDetails
// Details of the directly connected prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_ConnectedStatus_ConnectedDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interfaces. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_ConnectedStatus_ConnectedDetails_Interface.
    Interface []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_ConnectedStatus_ConnectedDetails_Interface
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_ConnectedStatus_ConnectedDetails) GetEntityData() *types.CommonEntityData {
    connectedDetails.EntityData.YFilter = connectedDetails.YFilter
    connectedDetails.EntityData.YangName = "connected-details"
    connectedDetails.EntityData.BundleName = "cisco_ios_xr"
    connectedDetails.EntityData.ParentYangName = "connected-status"
    connectedDetails.EntityData.SegmentPath = "connected-details"
    connectedDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/connected-status/" + connectedDetails.EntityData.SegmentPath
    connectedDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedDetails.EntityData.Children = types.NewOrderedMap()
    connectedDetails.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range connectedDetails.Interface {
        types.SetYListKey(connectedDetails.Interface[i], i)
        connectedDetails.EntityData.Children.Append(types.GetSegmentPath(connectedDetails.Interface[i]), types.YChild{"Interface", connectedDetails.Interface[i]})
    }
    connectedDetails.EntityData.Leafs = types.NewOrderedMap()

    connectedDetails.EntityData.YListKeys = []string {}

    return &(connectedDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_ConnectedStatus_ConnectedDetails_Interface
// Interfaces
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_ConnectedStatus_ConnectedDetails_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is string.
    Entry interface{}
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_ConnectedStatus_ConnectedDetails_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "connected-details"
    self.EntityData.SegmentPath = "interface" + types.AddNoKeyToken(self)
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/connected-status/connected-details/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", self.Entry})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_RedistributedStatus
// Status of other protocols' routes redistributed
// into IS-IS
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_RedistributedStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Per level details of the redistributed route.
    RedistributionDetails Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_RedistributedStatus_RedistributionDetails
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_RedistributedStatus) GetEntityData() *types.CommonEntityData {
    redistributedStatus.EntityData.YFilter = redistributedStatus.YFilter
    redistributedStatus.EntityData.YangName = "redistributed-status"
    redistributedStatus.EntityData.BundleName = "cisco_ios_xr"
    redistributedStatus.EntityData.ParentYangName = "ipv6frr-backup"
    redistributedStatus.EntityData.SegmentPath = "redistributed-status"
    redistributedStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/" + redistributedStatus.EntityData.SegmentPath
    redistributedStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributedStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributedStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributedStatus.EntityData.Children = types.NewOrderedMap()
    redistributedStatus.EntityData.Children.Append("redistribution-details", types.YChild{"RedistributionDetails", &redistributedStatus.RedistributionDetails})
    redistributedStatus.EntityData.Leafs = types.NewOrderedMap()
    redistributedStatus.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", redistributedStatus.IsValid})

    redistributedStatus.EntityData.YListKeys = []string {}

    return &(redistributedStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_RedistributedStatus_RedistributionDetails
// Per level details of the redistributed route
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_RedistributedStatus_RedistributionDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // isis sh route redist detail. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail.
    IsisShRouteRedistDetail []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_RedistributedStatus_RedistributionDetails) GetEntityData() *types.CommonEntityData {
    redistributionDetails.EntityData.YFilter = redistributionDetails.YFilter
    redistributionDetails.EntityData.YangName = "redistribution-details"
    redistributionDetails.EntityData.BundleName = "cisco_ios_xr"
    redistributionDetails.EntityData.ParentYangName = "redistributed-status"
    redistributionDetails.EntityData.SegmentPath = "redistribution-details"
    redistributionDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/redistributed-status/" + redistributionDetails.EntityData.SegmentPath
    redistributionDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributionDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributionDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributionDetails.EntityData.Children = types.NewOrderedMap()
    redistributionDetails.EntityData.Children.Append("isis-sh-route-redist-detail", types.YChild{"IsisShRouteRedistDetail", nil})
    for i := range redistributionDetails.IsisShRouteRedistDetail {
        types.SetYListKey(redistributionDetails.IsisShRouteRedistDetail[i], i)
        redistributionDetails.EntityData.Children.Append(types.GetSegmentPath(redistributionDetails.IsisShRouteRedistDetail[i]), types.YChild{"IsisShRouteRedistDetail", redistributionDetails.IsisShRouteRedistDetail[i]})
    }
    redistributionDetails.EntityData.Leafs = types.NewOrderedMap()

    redistributionDetails.EntityData.YListKeys = []string {}

    return &(redistributionDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
// isis sh route redist detail
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Level into which the route is redistributed. The type is IsisLevel.
    Level interface{}

    // Protocol redistributing the route.
    Owner Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetEntityData() *types.CommonEntityData {
    isisShRouteRedistDetail.EntityData.YFilter = isisShRouteRedistDetail.YFilter
    isisShRouteRedistDetail.EntityData.YangName = "isis-sh-route-redist-detail"
    isisShRouteRedistDetail.EntityData.BundleName = "cisco_ios_xr"
    isisShRouteRedistDetail.EntityData.ParentYangName = "redistribution-details"
    isisShRouteRedistDetail.EntityData.SegmentPath = "isis-sh-route-redist-detail" + types.AddNoKeyToken(isisShRouteRedistDetail)
    isisShRouteRedistDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/redistributed-status/redistribution-details/" + isisShRouteRedistDetail.EntityData.SegmentPath
    isisShRouteRedistDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isisShRouteRedistDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isisShRouteRedistDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isisShRouteRedistDetail.EntityData.Children = types.NewOrderedMap()
    isisShRouteRedistDetail.EntityData.Children.Append("owner", types.YChild{"Owner", &isisShRouteRedistDetail.Owner})
    isisShRouteRedistDetail.EntityData.Leafs = types.NewOrderedMap()
    isisShRouteRedistDetail.EntityData.Leafs.Append("level", types.YLeaf{"Level", isisShRouteRedistDetail.Level})

    isisShRouteRedistDetail.EntityData.YListKeys = []string {}

    return &(isisShRouteRedistDetail.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
// Protocol redistributing the route
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol. The type is IsisRedistProto.
    Protocol interface{}

    // IS-IS instance identifier. The type is string.
    IsisInstanceId interface{}

    // OSPF process identifier. The type is string.
    OspfProcessId interface{}

    // OSPFv3 process identifier. The type is string.
    Ospfv3ProcessId interface{}

    // BGP Autonomous System number. The type is string.
    BgpAsNumber interface{}

    // EIGRP Autonomous System number. The type is string.
    EigrpAsNumber interface{}

    // Application Name. The type is string.
    ApplicationName interface{}
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetEntityData() *types.CommonEntityData {
    owner.EntityData.YFilter = owner.YFilter
    owner.EntityData.YangName = "owner"
    owner.EntityData.BundleName = "cisco_ios_xr"
    owner.EntityData.ParentYangName = "isis-sh-route-redist-detail"
    owner.EntityData.SegmentPath = "owner"
    owner.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/redistributed-status/redistribution-details/isis-sh-route-redist-detail/" + owner.EntityData.SegmentPath
    owner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    owner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    owner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    owner.EntityData.Children = types.NewOrderedMap()
    owner.EntityData.Leafs = types.NewOrderedMap()
    owner.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", owner.Protocol})
    owner.EntityData.Leafs.Append("isis-instance-id", types.YLeaf{"IsisInstanceId", owner.IsisInstanceId})
    owner.EntityData.Leafs.Append("ospf-process-id", types.YLeaf{"OspfProcessId", owner.OspfProcessId})
    owner.EntityData.Leafs.Append("ospfv3-process-id", types.YLeaf{"Ospfv3ProcessId", owner.Ospfv3ProcessId})
    owner.EntityData.Leafs.Append("bgp-as-number", types.YLeaf{"BgpAsNumber", owner.BgpAsNumber})
    owner.EntityData.Leafs.Append("eigrp-as-number", types.YLeaf{"EigrpAsNumber", owner.EigrpAsNumber})
    owner.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", owner.ApplicationName})

    owner.EntityData.YListKeys = []string {}

    return &(owner.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus
// Status of native IS-IS routes to the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the native route.
    NativeDetails Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus) GetEntityData() *types.CommonEntityData {
    nativeStatus.EntityData.YFilter = nativeStatus.YFilter
    nativeStatus.EntityData.YangName = "native-status"
    nativeStatus.EntityData.BundleName = "cisco_ios_xr"
    nativeStatus.EntityData.ParentYangName = "ipv6frr-backup"
    nativeStatus.EntityData.SegmentPath = "native-status"
    nativeStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/" + nativeStatus.EntityData.SegmentPath
    nativeStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nativeStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nativeStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nativeStatus.EntityData.Children = types.NewOrderedMap()
    nativeStatus.EntityData.Children.Append("native-details", types.YChild{"NativeDetails", &nativeStatus.NativeDetails})
    nativeStatus.EntityData.Leafs = types.NewOrderedMap()
    nativeStatus.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", nativeStatus.IsValid})

    nativeStatus.EntityData.YListKeys = []string {}

    return &(nativeStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails
// Details of the native route
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Relative importance of the prefix. The type is IsisPrefixPriority.
    Priority interface{}

    // Prefix local label for SR-MPLS. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}

    // Primary paths to prefix.
    Primary Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary

    // Backup paths to prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup.
    Backup []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails) GetEntityData() *types.CommonEntityData {
    nativeDetails.EntityData.YFilter = nativeDetails.YFilter
    nativeDetails.EntityData.YangName = "native-details"
    nativeDetails.EntityData.BundleName = "cisco_ios_xr"
    nativeDetails.EntityData.ParentYangName = "native-status"
    nativeDetails.EntityData.SegmentPath = "native-details"
    nativeDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/" + nativeDetails.EntityData.SegmentPath
    nativeDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nativeDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nativeDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nativeDetails.EntityData.Children = types.NewOrderedMap()
    nativeDetails.EntityData.Children.Append("primary", types.YChild{"Primary", &nativeDetails.Primary})
    nativeDetails.EntityData.Children.Append("backup", types.YChild{"Backup", nil})
    for i := range nativeDetails.Backup {
        types.SetYListKey(nativeDetails.Backup[i], i)
        nativeDetails.EntityData.Children.Append(types.GetSegmentPath(nativeDetails.Backup[i]), types.YChild{"Backup", nativeDetails.Backup[i]})
    }
    nativeDetails.EntityData.Leafs = types.NewOrderedMap()
    nativeDetails.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", nativeDetails.Priority})
    nativeDetails.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", nativeDetails.LocalLabel})

    nativeDetails.EntityData.YListKeys = []string {}

    return &(nativeDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary
// Primary paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths.
    Paths []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop.
    UcmpNextHop []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath.
    MulticastPath []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath.
    SrtePath []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath.
    ExplicitPath []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Source.
    Source []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource.
    MulticastSource []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary) GetEntityData() *types.CommonEntityData {
    primary.EntityData.YFilter = primary.YFilter
    primary.EntityData.YangName = "primary"
    primary.EntityData.BundleName = "cisco_ios_xr"
    primary.EntityData.ParentYangName = "native-details"
    primary.EntityData.SegmentPath = "primary"
    primary.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/" + primary.EntityData.SegmentPath
    primary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    primary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    primary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    primary.EntityData.Children = types.NewOrderedMap()
    primary.EntityData.Children.Append("paths", types.YChild{"Paths", nil})
    for i := range primary.Paths {
        types.SetYListKey(primary.Paths[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.Paths[i]), types.YChild{"Paths", primary.Paths[i]})
    }
    primary.EntityData.Children.Append("ucmp-next-hop", types.YChild{"UcmpNextHop", nil})
    for i := range primary.UcmpNextHop {
        types.SetYListKey(primary.UcmpNextHop[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.UcmpNextHop[i]), types.YChild{"UcmpNextHop", primary.UcmpNextHop[i]})
    }
    primary.EntityData.Children.Append("multicast-path", types.YChild{"MulticastPath", nil})
    for i := range primary.MulticastPath {
        types.SetYListKey(primary.MulticastPath[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.MulticastPath[i]), types.YChild{"MulticastPath", primary.MulticastPath[i]})
    }
    primary.EntityData.Children.Append("srte-path", types.YChild{"SrtePath", nil})
    for i := range primary.SrtePath {
        types.SetYListKey(primary.SrtePath[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.SrtePath[i]), types.YChild{"SrtePath", primary.SrtePath[i]})
    }
    primary.EntityData.Children.Append("explicit-path", types.YChild{"ExplicitPath", nil})
    for i := range primary.ExplicitPath {
        types.SetYListKey(primary.ExplicitPath[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.ExplicitPath[i]), types.YChild{"ExplicitPath", primary.ExplicitPath[i]})
    }
    primary.EntityData.Children.Append("source", types.YChild{"Source", nil})
    for i := range primary.Source {
        types.SetYListKey(primary.Source[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.Source[i]), types.YChild{"Source", primary.Source[i]})
    }
    primary.EntityData.Children.Append("multicast-source", types.YChild{"MulticastSource", nil})
    for i := range primary.MulticastSource {
        types.SetYListKey(primary.MulticastSource[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.MulticastSource[i]), types.YChild{"MulticastSource", primary.MulticastSource[i]})
    }
    primary.EntityData.Leafs = types.NewOrderedMap()
    primary.EntityData.Leafs.Append("origin", types.YLeaf{"Origin", primary.Origin})
    primary.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", primary.Metric})
    primary.EntityData.Leafs.Append("multicast-metric", types.YLeaf{"MulticastMetric", primary.MulticastMetric})
    primary.EntityData.Leafs.Append("is-external-metric", types.YLeaf{"IsExternalMetric", primary.IsExternalMetric})
    primary.EntityData.Leafs.Append("administrative-distance", types.YLeaf{"AdministrativeDistance", primary.AdministrativeDistance})

    primary.EntityData.YListKeys = []string {}

    return &(primary.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths_Nnh
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "primary"
    paths.EntityData.SegmentPath = "paths" + types.AddNoKeyToken(paths)
    paths.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/" + paths.EntityData.SegmentPath
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = types.NewOrderedMap()
    paths.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &paths.FrrBackup})
    paths.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range paths.UloopExplicit {
        types.SetYListKey(paths.UloopExplicit[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.UloopExplicit[i]), types.YChild{"UloopExplicit", paths.UloopExplicit[i]})
    }
    paths.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range paths.Nnh {
        types.SetYListKey(paths.Nnh[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.Nnh[i]), types.YChild{"Nnh", paths.Nnh[i]})
    }
    paths.EntityData.Leafs = types.NewOrderedMap()
    paths.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", paths.NeighborId})
    paths.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", paths.EgressInterface})
    paths.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", paths.NeighborAddress})
    paths.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", paths.NeighborSnpa})
    paths.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", paths.Tag})
    paths.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", paths.TunnelInterface})
    paths.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", paths.SegmentRoutingSidValue})
    paths.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", paths.Weight})
    paths.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", paths.IsTeTunnelInterface})
    paths.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", paths.IsSrExcludeTunnelInterface})
    paths.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", paths.OutgoingLabel})

    paths.EntityData.YListKeys = []string {}

    return &(paths.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "paths"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/paths/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/paths/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/paths/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "paths"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/paths/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Paths_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "paths"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/paths/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetEntityData() *types.CommonEntityData {
    ucmpNextHop.EntityData.YFilter = ucmpNextHop.YFilter
    ucmpNextHop.EntityData.YangName = "ucmp-next-hop"
    ucmpNextHop.EntityData.BundleName = "cisco_ios_xr"
    ucmpNextHop.EntityData.ParentYangName = "primary"
    ucmpNextHop.EntityData.SegmentPath = "ucmp-next-hop" + types.AddNoKeyToken(ucmpNextHop)
    ucmpNextHop.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/" + ucmpNextHop.EntityData.SegmentPath
    ucmpNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ucmpNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ucmpNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ucmpNextHop.EntityData.Children = types.NewOrderedMap()
    ucmpNextHop.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &ucmpNextHop.FrrBackup})
    ucmpNextHop.EntityData.Leafs = types.NewOrderedMap()
    ucmpNextHop.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", ucmpNextHop.NeighborId})
    ucmpNextHop.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", ucmpNextHop.EgressInterface})
    ucmpNextHop.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", ucmpNextHop.NeighborAddress})
    ucmpNextHop.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", ucmpNextHop.NeighborSnpa})
    ucmpNextHop.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", ucmpNextHop.Tag})
    ucmpNextHop.EntityData.Leafs.Append("total-ucmp-distance", types.YLeaf{"TotalUcmpDistance", ucmpNextHop.TotalUcmpDistance})
    ucmpNextHop.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", ucmpNextHop.SegmentRoutingSidValue})
    ucmpNextHop.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", ucmpNextHop.Weight})
    ucmpNextHop.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", ucmpNextHop.IsTeTunnelInterface})
    ucmpNextHop.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", ucmpNextHop.IsSrExcludeTunnelInterface})
    ucmpNextHop.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", ucmpNextHop.OutgoingLabel})

    ucmpNextHop.EntityData.YListKeys = []string {}

    return &(ucmpNextHop.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "ucmp-next-hop"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/ucmp-next-hop/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/ucmp-next-hop/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/ucmp-next-hop/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetEntityData() *types.CommonEntityData {
    multicastPath.EntityData.YFilter = multicastPath.YFilter
    multicastPath.EntityData.YangName = "multicast-path"
    multicastPath.EntityData.BundleName = "cisco_ios_xr"
    multicastPath.EntityData.ParentYangName = "primary"
    multicastPath.EntityData.SegmentPath = "multicast-path" + types.AddNoKeyToken(multicastPath)
    multicastPath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/" + multicastPath.EntityData.SegmentPath
    multicastPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastPath.EntityData.Children = types.NewOrderedMap()
    multicastPath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &multicastPath.FrrBackup})
    multicastPath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range multicastPath.UloopExplicit {
        types.SetYListKey(multicastPath.UloopExplicit[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.UloopExplicit[i]), types.YChild{"UloopExplicit", multicastPath.UloopExplicit[i]})
    }
    multicastPath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range multicastPath.Nnh {
        types.SetYListKey(multicastPath.Nnh[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.Nnh[i]), types.YChild{"Nnh", multicastPath.Nnh[i]})
    }
    multicastPath.EntityData.Leafs = types.NewOrderedMap()
    multicastPath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", multicastPath.NeighborId})
    multicastPath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", multicastPath.EgressInterface})
    multicastPath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", multicastPath.NeighborAddress})
    multicastPath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", multicastPath.NeighborSnpa})
    multicastPath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", multicastPath.Tag})
    multicastPath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", multicastPath.TunnelInterface})
    multicastPath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", multicastPath.SegmentRoutingSidValue})
    multicastPath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", multicastPath.Weight})
    multicastPath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", multicastPath.IsTeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", multicastPath.IsSrExcludeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", multicastPath.OutgoingLabel})

    multicastPath.EntityData.YListKeys = []string {}

    return &(multicastPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "multicast-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/multicast-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/multicast-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/multicast-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "multicast-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/multicast-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "multicast-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/multicast-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_Nnh
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetEntityData() *types.CommonEntityData {
    srtePath.EntityData.YFilter = srtePath.YFilter
    srtePath.EntityData.YangName = "srte-path"
    srtePath.EntityData.BundleName = "cisco_ios_xr"
    srtePath.EntityData.ParentYangName = "primary"
    srtePath.EntityData.SegmentPath = "srte-path" + types.AddNoKeyToken(srtePath)
    srtePath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/" + srtePath.EntityData.SegmentPath
    srtePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srtePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srtePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srtePath.EntityData.Children = types.NewOrderedMap()
    srtePath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &srtePath.FrrBackup})
    srtePath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range srtePath.UloopExplicit {
        types.SetYListKey(srtePath.UloopExplicit[i], i)
        srtePath.EntityData.Children.Append(types.GetSegmentPath(srtePath.UloopExplicit[i]), types.YChild{"UloopExplicit", srtePath.UloopExplicit[i]})
    }
    srtePath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range srtePath.Nnh {
        types.SetYListKey(srtePath.Nnh[i], i)
        srtePath.EntityData.Children.Append(types.GetSegmentPath(srtePath.Nnh[i]), types.YChild{"Nnh", srtePath.Nnh[i]})
    }
    srtePath.EntityData.Leafs = types.NewOrderedMap()
    srtePath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", srtePath.NeighborId})
    srtePath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", srtePath.EgressInterface})
    srtePath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", srtePath.NeighborAddress})
    srtePath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", srtePath.NeighborSnpa})
    srtePath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", srtePath.Tag})
    srtePath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", srtePath.TunnelInterface})
    srtePath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", srtePath.SegmentRoutingSidValue})
    srtePath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", srtePath.Weight})
    srtePath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", srtePath.IsTeTunnelInterface})
    srtePath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", srtePath.IsSrExcludeTunnelInterface})
    srtePath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", srtePath.OutgoingLabel})

    srtePath.EntityData.YListKeys = []string {}

    return &(srtePath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "srte-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/srte-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/srte-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/srte-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "srte-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/srte-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "srte-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/srte-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetEntityData() *types.CommonEntityData {
    explicitPath.EntityData.YFilter = explicitPath.YFilter
    explicitPath.EntityData.YangName = "explicit-path"
    explicitPath.EntityData.BundleName = "cisco_ios_xr"
    explicitPath.EntityData.ParentYangName = "primary"
    explicitPath.EntityData.SegmentPath = "explicit-path" + types.AddNoKeyToken(explicitPath)
    explicitPath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/" + explicitPath.EntityData.SegmentPath
    explicitPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitPath.EntityData.Children = types.NewOrderedMap()
    explicitPath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &explicitPath.FrrBackup})
    explicitPath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range explicitPath.UloopExplicit {
        types.SetYListKey(explicitPath.UloopExplicit[i], i)
        explicitPath.EntityData.Children.Append(types.GetSegmentPath(explicitPath.UloopExplicit[i]), types.YChild{"UloopExplicit", explicitPath.UloopExplicit[i]})
    }
    explicitPath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range explicitPath.Nnh {
        types.SetYListKey(explicitPath.Nnh[i], i)
        explicitPath.EntityData.Children.Append(types.GetSegmentPath(explicitPath.Nnh[i]), types.YChild{"Nnh", explicitPath.Nnh[i]})
    }
    explicitPath.EntityData.Leafs = types.NewOrderedMap()
    explicitPath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", explicitPath.NeighborId})
    explicitPath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", explicitPath.EgressInterface})
    explicitPath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", explicitPath.NeighborAddress})
    explicitPath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", explicitPath.NeighborSnpa})
    explicitPath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", explicitPath.Tag})
    explicitPath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", explicitPath.TunnelInterface})
    explicitPath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", explicitPath.SegmentRoutingSidValue})
    explicitPath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", explicitPath.Weight})
    explicitPath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", explicitPath.IsTeTunnelInterface})
    explicitPath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", explicitPath.IsSrExcludeTunnelInterface})
    explicitPath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", explicitPath.OutgoingLabel})

    explicitPath.EntityData.YListKeys = []string {}

    return &(explicitPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "explicit-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/explicit-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/explicit-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/explicit-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "explicit-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/explicit-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "explicit-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/explicit-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Source_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "primary"
    source.EntityData.SegmentPath = "source" + types.AddNoKeyToken(source)
    source.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/" + source.EntityData.SegmentPath
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = types.NewOrderedMap()
    source.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range source.Tags {
        types.SetYListKey(source.Tags[i], i)
        source.EntityData.Children.Append(types.GetSegmentPath(source.Tags[i]), types.YChild{"Tags", source.Tags[i]})
    }
    source.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range source.NodalSid {
        types.SetYListKey(source.NodalSid[i], i)
        source.EntityData.Children.Append(types.GetSegmentPath(source.NodalSid[i]), types.YChild{"NodalSid", source.NodalSid[i]})
    }
    source.EntityData.Leafs = types.NewOrderedMap()
    source.EntityData.Leafs.Append("source-lsp-id", types.YLeaf{"SourceLspId", source.SourceLspId})
    source.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", source.SourceAddress})

    source.EntityData.YListKeys = []string {}

    return &(source.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Source_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "source"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/source/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "source"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/source/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetEntityData() *types.CommonEntityData {
    multicastSource.EntityData.YFilter = multicastSource.YFilter
    multicastSource.EntityData.YangName = "multicast-source"
    multicastSource.EntityData.BundleName = "cisco_ios_xr"
    multicastSource.EntityData.ParentYangName = "primary"
    multicastSource.EntityData.SegmentPath = "multicast-source" + types.AddNoKeyToken(multicastSource)
    multicastSource.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/" + multicastSource.EntityData.SegmentPath
    multicastSource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastSource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastSource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastSource.EntityData.Children = types.NewOrderedMap()
    multicastSource.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range multicastSource.Tags {
        types.SetYListKey(multicastSource.Tags[i], i)
        multicastSource.EntityData.Children.Append(types.GetSegmentPath(multicastSource.Tags[i]), types.YChild{"Tags", multicastSource.Tags[i]})
    }
    multicastSource.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range multicastSource.NodalSid {
        types.SetYListKey(multicastSource.NodalSid[i], i)
        multicastSource.EntityData.Children.Append(types.GetSegmentPath(multicastSource.NodalSid[i]), types.YChild{"NodalSid", multicastSource.NodalSid[i]})
    }
    multicastSource.EntityData.Leafs = types.NewOrderedMap()
    multicastSource.EntityData.Leafs.Append("source-lsp-id", types.YLeaf{"SourceLspId", multicastSource.SourceLspId})
    multicastSource.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", multicastSource.SourceAddress})

    multicastSource.EntityData.YListKeys = []string {}

    return &(multicastSource.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "multicast-source"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/multicast-source/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "multicast-source"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/primary/multicast-source/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup
// Backup paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths.
    Paths []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop.
    UcmpNextHop []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath.
    MulticastPath []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath.
    SrtePath []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath.
    ExplicitPath []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Source.
    Source []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource.
    MulticastSource []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup) GetEntityData() *types.CommonEntityData {
    backup.EntityData.YFilter = backup.YFilter
    backup.EntityData.YangName = "backup"
    backup.EntityData.BundleName = "cisco_ios_xr"
    backup.EntityData.ParentYangName = "native-details"
    backup.EntityData.SegmentPath = "backup" + types.AddNoKeyToken(backup)
    backup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/" + backup.EntityData.SegmentPath
    backup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backup.EntityData.Children = types.NewOrderedMap()
    backup.EntityData.Children.Append("paths", types.YChild{"Paths", nil})
    for i := range backup.Paths {
        types.SetYListKey(backup.Paths[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.Paths[i]), types.YChild{"Paths", backup.Paths[i]})
    }
    backup.EntityData.Children.Append("ucmp-next-hop", types.YChild{"UcmpNextHop", nil})
    for i := range backup.UcmpNextHop {
        types.SetYListKey(backup.UcmpNextHop[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.UcmpNextHop[i]), types.YChild{"UcmpNextHop", backup.UcmpNextHop[i]})
    }
    backup.EntityData.Children.Append("multicast-path", types.YChild{"MulticastPath", nil})
    for i := range backup.MulticastPath {
        types.SetYListKey(backup.MulticastPath[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.MulticastPath[i]), types.YChild{"MulticastPath", backup.MulticastPath[i]})
    }
    backup.EntityData.Children.Append("srte-path", types.YChild{"SrtePath", nil})
    for i := range backup.SrtePath {
        types.SetYListKey(backup.SrtePath[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.SrtePath[i]), types.YChild{"SrtePath", backup.SrtePath[i]})
    }
    backup.EntityData.Children.Append("explicit-path", types.YChild{"ExplicitPath", nil})
    for i := range backup.ExplicitPath {
        types.SetYListKey(backup.ExplicitPath[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.ExplicitPath[i]), types.YChild{"ExplicitPath", backup.ExplicitPath[i]})
    }
    backup.EntityData.Children.Append("source", types.YChild{"Source", nil})
    for i := range backup.Source {
        types.SetYListKey(backup.Source[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.Source[i]), types.YChild{"Source", backup.Source[i]})
    }
    backup.EntityData.Children.Append("multicast-source", types.YChild{"MulticastSource", nil})
    for i := range backup.MulticastSource {
        types.SetYListKey(backup.MulticastSource[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.MulticastSource[i]), types.YChild{"MulticastSource", backup.MulticastSource[i]})
    }
    backup.EntityData.Leafs = types.NewOrderedMap()
    backup.EntityData.Leafs.Append("origin", types.YLeaf{"Origin", backup.Origin})
    backup.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", backup.Metric})
    backup.EntityData.Leafs.Append("multicast-metric", types.YLeaf{"MulticastMetric", backup.MulticastMetric})
    backup.EntityData.Leafs.Append("is-external-metric", types.YLeaf{"IsExternalMetric", backup.IsExternalMetric})
    backup.EntityData.Leafs.Append("administrative-distance", types.YLeaf{"AdministrativeDistance", backup.AdministrativeDistance})

    backup.EntityData.YListKeys = []string {}

    return &(backup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths_Nnh
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "backup"
    paths.EntityData.SegmentPath = "paths" + types.AddNoKeyToken(paths)
    paths.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/" + paths.EntityData.SegmentPath
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = types.NewOrderedMap()
    paths.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &paths.FrrBackup})
    paths.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range paths.UloopExplicit {
        types.SetYListKey(paths.UloopExplicit[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.UloopExplicit[i]), types.YChild{"UloopExplicit", paths.UloopExplicit[i]})
    }
    paths.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range paths.Nnh {
        types.SetYListKey(paths.Nnh[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.Nnh[i]), types.YChild{"Nnh", paths.Nnh[i]})
    }
    paths.EntityData.Leafs = types.NewOrderedMap()
    paths.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", paths.NeighborId})
    paths.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", paths.EgressInterface})
    paths.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", paths.NeighborAddress})
    paths.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", paths.NeighborSnpa})
    paths.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", paths.Tag})
    paths.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", paths.TunnelInterface})
    paths.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", paths.SegmentRoutingSidValue})
    paths.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", paths.Weight})
    paths.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", paths.IsTeTunnelInterface})
    paths.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", paths.IsSrExcludeTunnelInterface})
    paths.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", paths.OutgoingLabel})

    paths.EntityData.YListKeys = []string {}

    return &(paths.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "paths"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/paths/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/paths/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/paths/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "paths"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/paths/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Paths_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "paths"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/paths/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetEntityData() *types.CommonEntityData {
    ucmpNextHop.EntityData.YFilter = ucmpNextHop.YFilter
    ucmpNextHop.EntityData.YangName = "ucmp-next-hop"
    ucmpNextHop.EntityData.BundleName = "cisco_ios_xr"
    ucmpNextHop.EntityData.ParentYangName = "backup"
    ucmpNextHop.EntityData.SegmentPath = "ucmp-next-hop" + types.AddNoKeyToken(ucmpNextHop)
    ucmpNextHop.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/" + ucmpNextHop.EntityData.SegmentPath
    ucmpNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ucmpNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ucmpNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ucmpNextHop.EntityData.Children = types.NewOrderedMap()
    ucmpNextHop.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &ucmpNextHop.FrrBackup})
    ucmpNextHop.EntityData.Leafs = types.NewOrderedMap()
    ucmpNextHop.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", ucmpNextHop.NeighborId})
    ucmpNextHop.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", ucmpNextHop.EgressInterface})
    ucmpNextHop.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", ucmpNextHop.NeighborAddress})
    ucmpNextHop.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", ucmpNextHop.NeighborSnpa})
    ucmpNextHop.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", ucmpNextHop.Tag})
    ucmpNextHop.EntityData.Leafs.Append("total-ucmp-distance", types.YLeaf{"TotalUcmpDistance", ucmpNextHop.TotalUcmpDistance})
    ucmpNextHop.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", ucmpNextHop.SegmentRoutingSidValue})
    ucmpNextHop.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", ucmpNextHop.Weight})
    ucmpNextHop.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", ucmpNextHop.IsTeTunnelInterface})
    ucmpNextHop.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", ucmpNextHop.IsSrExcludeTunnelInterface})
    ucmpNextHop.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", ucmpNextHop.OutgoingLabel})

    ucmpNextHop.EntityData.YListKeys = []string {}

    return &(ucmpNextHop.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "ucmp-next-hop"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/ucmp-next-hop/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/ucmp-next-hop/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/ucmp-next-hop/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetEntityData() *types.CommonEntityData {
    multicastPath.EntityData.YFilter = multicastPath.YFilter
    multicastPath.EntityData.YangName = "multicast-path"
    multicastPath.EntityData.BundleName = "cisco_ios_xr"
    multicastPath.EntityData.ParentYangName = "backup"
    multicastPath.EntityData.SegmentPath = "multicast-path" + types.AddNoKeyToken(multicastPath)
    multicastPath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/" + multicastPath.EntityData.SegmentPath
    multicastPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastPath.EntityData.Children = types.NewOrderedMap()
    multicastPath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &multicastPath.FrrBackup})
    multicastPath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range multicastPath.UloopExplicit {
        types.SetYListKey(multicastPath.UloopExplicit[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.UloopExplicit[i]), types.YChild{"UloopExplicit", multicastPath.UloopExplicit[i]})
    }
    multicastPath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range multicastPath.Nnh {
        types.SetYListKey(multicastPath.Nnh[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.Nnh[i]), types.YChild{"Nnh", multicastPath.Nnh[i]})
    }
    multicastPath.EntityData.Leafs = types.NewOrderedMap()
    multicastPath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", multicastPath.NeighborId})
    multicastPath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", multicastPath.EgressInterface})
    multicastPath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", multicastPath.NeighborAddress})
    multicastPath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", multicastPath.NeighborSnpa})
    multicastPath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", multicastPath.Tag})
    multicastPath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", multicastPath.TunnelInterface})
    multicastPath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", multicastPath.SegmentRoutingSidValue})
    multicastPath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", multicastPath.Weight})
    multicastPath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", multicastPath.IsTeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", multicastPath.IsSrExcludeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", multicastPath.OutgoingLabel})

    multicastPath.EntityData.YListKeys = []string {}

    return &(multicastPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "multicast-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/multicast-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/multicast-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/multicast-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "multicast-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/multicast-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "multicast-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/multicast-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_Nnh
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetEntityData() *types.CommonEntityData {
    srtePath.EntityData.YFilter = srtePath.YFilter
    srtePath.EntityData.YangName = "srte-path"
    srtePath.EntityData.BundleName = "cisco_ios_xr"
    srtePath.EntityData.ParentYangName = "backup"
    srtePath.EntityData.SegmentPath = "srte-path" + types.AddNoKeyToken(srtePath)
    srtePath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/" + srtePath.EntityData.SegmentPath
    srtePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srtePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srtePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srtePath.EntityData.Children = types.NewOrderedMap()
    srtePath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &srtePath.FrrBackup})
    srtePath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range srtePath.UloopExplicit {
        types.SetYListKey(srtePath.UloopExplicit[i], i)
        srtePath.EntityData.Children.Append(types.GetSegmentPath(srtePath.UloopExplicit[i]), types.YChild{"UloopExplicit", srtePath.UloopExplicit[i]})
    }
    srtePath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range srtePath.Nnh {
        types.SetYListKey(srtePath.Nnh[i], i)
        srtePath.EntityData.Children.Append(types.GetSegmentPath(srtePath.Nnh[i]), types.YChild{"Nnh", srtePath.Nnh[i]})
    }
    srtePath.EntityData.Leafs = types.NewOrderedMap()
    srtePath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", srtePath.NeighborId})
    srtePath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", srtePath.EgressInterface})
    srtePath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", srtePath.NeighborAddress})
    srtePath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", srtePath.NeighborSnpa})
    srtePath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", srtePath.Tag})
    srtePath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", srtePath.TunnelInterface})
    srtePath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", srtePath.SegmentRoutingSidValue})
    srtePath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", srtePath.Weight})
    srtePath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", srtePath.IsTeTunnelInterface})
    srtePath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", srtePath.IsSrExcludeTunnelInterface})
    srtePath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", srtePath.OutgoingLabel})

    srtePath.EntityData.YListKeys = []string {}

    return &(srtePath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "srte-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/srte-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/srte-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/srte-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "srte-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/srte-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "srte-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/srte-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetEntityData() *types.CommonEntityData {
    explicitPath.EntityData.YFilter = explicitPath.YFilter
    explicitPath.EntityData.YangName = "explicit-path"
    explicitPath.EntityData.BundleName = "cisco_ios_xr"
    explicitPath.EntityData.ParentYangName = "backup"
    explicitPath.EntityData.SegmentPath = "explicit-path" + types.AddNoKeyToken(explicitPath)
    explicitPath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/" + explicitPath.EntityData.SegmentPath
    explicitPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitPath.EntityData.Children = types.NewOrderedMap()
    explicitPath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &explicitPath.FrrBackup})
    explicitPath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range explicitPath.UloopExplicit {
        types.SetYListKey(explicitPath.UloopExplicit[i], i)
        explicitPath.EntityData.Children.Append(types.GetSegmentPath(explicitPath.UloopExplicit[i]), types.YChild{"UloopExplicit", explicitPath.UloopExplicit[i]})
    }
    explicitPath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range explicitPath.Nnh {
        types.SetYListKey(explicitPath.Nnh[i], i)
        explicitPath.EntityData.Children.Append(types.GetSegmentPath(explicitPath.Nnh[i]), types.YChild{"Nnh", explicitPath.Nnh[i]})
    }
    explicitPath.EntityData.Leafs = types.NewOrderedMap()
    explicitPath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", explicitPath.NeighborId})
    explicitPath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", explicitPath.EgressInterface})
    explicitPath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", explicitPath.NeighborAddress})
    explicitPath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", explicitPath.NeighborSnpa})
    explicitPath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", explicitPath.Tag})
    explicitPath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", explicitPath.TunnelInterface})
    explicitPath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", explicitPath.SegmentRoutingSidValue})
    explicitPath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", explicitPath.Weight})
    explicitPath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", explicitPath.IsTeTunnelInterface})
    explicitPath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", explicitPath.IsSrExcludeTunnelInterface})
    explicitPath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", explicitPath.OutgoingLabel})

    explicitPath.EntityData.YListKeys = []string {}

    return &(explicitPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // BAckup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "explicit-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/explicit-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/explicit-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
// BAckup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/explicit-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "explicit-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/explicit-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "explicit-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/explicit-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Source_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "backup"
    source.EntityData.SegmentPath = "source" + types.AddNoKeyToken(source)
    source.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/" + source.EntityData.SegmentPath
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = types.NewOrderedMap()
    source.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range source.Tags {
        types.SetYListKey(source.Tags[i], i)
        source.EntityData.Children.Append(types.GetSegmentPath(source.Tags[i]), types.YChild{"Tags", source.Tags[i]})
    }
    source.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range source.NodalSid {
        types.SetYListKey(source.NodalSid[i], i)
        source.EntityData.Children.Append(types.GetSegmentPath(source.NodalSid[i]), types.YChild{"NodalSid", source.NodalSid[i]})
    }
    source.EntityData.Leafs = types.NewOrderedMap()
    source.EntityData.Leafs.Append("source-lsp-id", types.YLeaf{"SourceLspId", source.SourceLspId})
    source.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", source.SourceAddress})

    source.EntityData.YListKeys = []string {}

    return &(source.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Source_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "source"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/source/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "source"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/source/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetEntityData() *types.CommonEntityData {
    multicastSource.EntityData.YFilter = multicastSource.YFilter
    multicastSource.EntityData.YangName = "multicast-source"
    multicastSource.EntityData.BundleName = "cisco_ios_xr"
    multicastSource.EntityData.ParentYangName = "backup"
    multicastSource.EntityData.SegmentPath = "multicast-source" + types.AddNoKeyToken(multicastSource)
    multicastSource.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/" + multicastSource.EntityData.SegmentPath
    multicastSource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastSource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastSource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastSource.EntityData.Children = types.NewOrderedMap()
    multicastSource.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range multicastSource.Tags {
        types.SetYListKey(multicastSource.Tags[i], i)
        multicastSource.EntityData.Children.Append(types.GetSegmentPath(multicastSource.Tags[i]), types.YChild{"Tags", multicastSource.Tags[i]})
    }
    multicastSource.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range multicastSource.NodalSid {
        types.SetYListKey(multicastSource.NodalSid[i], i)
        multicastSource.EntityData.Children.Append(types.GetSegmentPath(multicastSource.NodalSid[i]), types.YChild{"NodalSid", multicastSource.NodalSid[i]})
    }
    multicastSource.EntityData.Leafs = types.NewOrderedMap()
    multicastSource.EntityData.Leafs.Append("source-lsp-id", types.YLeaf{"SourceLspId", multicastSource.SourceLspId})
    multicastSource.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", multicastSource.SourceAddress})

    multicastSource.EntityData.YListKeys = []string {}

    return &(multicastSource.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "multicast-source"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/multicast-source/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "multicast-source"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/native-status/native-details/backup/multicast-source/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_PerLevelAdvertisingDetail
// Per level details of how the local system
// advertises the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_PerLevelAdvertisingDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Level in which the prefix is advertised. The type is IsisLevel.
    Level interface{}

    // The origin of the advertisement. The type is IsisShRouteAdvOrigin.
    AdvertisingOrigin interface{}

    // Metric with which the prefix is advertised. The type is interface{} with
    // range: 0..4294967295.
    Metric interface{}

    // Has the prefix been propagated from another level?. The type is bool.
    IsPropagated interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Is the prefix external to the IS-IS domain?. The type is bool.
    IsExternalReachability interface{}

    // Is the up/down bit set?. The type is bool.
    IsInterarea interface{}

    // Status of summarization for the prefix.
    SummarizationStatus Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_PerLevelAdvertisingDetail_SummarizationStatus

    // Tags associated with the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_PerLevelAdvertisingDetail_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_PerLevelAdvertisingDetail_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_PerLevelAdvertisingDetail_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_PerLevelAdvertisingDetail_NodalSid
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_PerLevelAdvertisingDetail) GetEntityData() *types.CommonEntityData {
    perLevelAdvertisingDetail.EntityData.YFilter = perLevelAdvertisingDetail.YFilter
    perLevelAdvertisingDetail.EntityData.YangName = "per-level-advertising-detail"
    perLevelAdvertisingDetail.EntityData.BundleName = "cisco_ios_xr"
    perLevelAdvertisingDetail.EntityData.ParentYangName = "ipv6frr-backup"
    perLevelAdvertisingDetail.EntityData.SegmentPath = "per-level-advertising-detail" + types.AddNoKeyToken(perLevelAdvertisingDetail)
    perLevelAdvertisingDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/" + perLevelAdvertisingDetail.EntityData.SegmentPath
    perLevelAdvertisingDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perLevelAdvertisingDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perLevelAdvertisingDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perLevelAdvertisingDetail.EntityData.Children = types.NewOrderedMap()
    perLevelAdvertisingDetail.EntityData.Children.Append("summarization-status", types.YChild{"SummarizationStatus", &perLevelAdvertisingDetail.SummarizationStatus})
    perLevelAdvertisingDetail.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range perLevelAdvertisingDetail.Tags {
        types.SetYListKey(perLevelAdvertisingDetail.Tags[i], i)
        perLevelAdvertisingDetail.EntityData.Children.Append(types.GetSegmentPath(perLevelAdvertisingDetail.Tags[i]), types.YChild{"Tags", perLevelAdvertisingDetail.Tags[i]})
    }
    perLevelAdvertisingDetail.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range perLevelAdvertisingDetail.NodalSid {
        types.SetYListKey(perLevelAdvertisingDetail.NodalSid[i], i)
        perLevelAdvertisingDetail.EntityData.Children.Append(types.GetSegmentPath(perLevelAdvertisingDetail.NodalSid[i]), types.YChild{"NodalSid", perLevelAdvertisingDetail.NodalSid[i]})
    }
    perLevelAdvertisingDetail.EntityData.Leafs = types.NewOrderedMap()
    perLevelAdvertisingDetail.EntityData.Leafs.Append("level", types.YLeaf{"Level", perLevelAdvertisingDetail.Level})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("advertising-origin", types.YLeaf{"AdvertisingOrigin", perLevelAdvertisingDetail.AdvertisingOrigin})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", perLevelAdvertisingDetail.Metric})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("is-propagated", types.YLeaf{"IsPropagated", perLevelAdvertisingDetail.IsPropagated})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("is-external-metric", types.YLeaf{"IsExternalMetric", perLevelAdvertisingDetail.IsExternalMetric})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("is-external-reachability", types.YLeaf{"IsExternalReachability", perLevelAdvertisingDetail.IsExternalReachability})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("is-interarea", types.YLeaf{"IsInterarea", perLevelAdvertisingDetail.IsInterarea})

    perLevelAdvertisingDetail.EntityData.YListKeys = []string {}

    return &(perLevelAdvertisingDetail.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_PerLevelAdvertisingDetail_SummarizationStatus
// Status of summarization for the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_PerLevelAdvertisingDetail_SummarizationStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Summarizing Prefix.
    SummaryPrefix Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetEntityData() *types.CommonEntityData {
    summarizationStatus.EntityData.YFilter = summarizationStatus.YFilter
    summarizationStatus.EntityData.YangName = "summarization-status"
    summarizationStatus.EntityData.BundleName = "cisco_ios_xr"
    summarizationStatus.EntityData.ParentYangName = "per-level-advertising-detail"
    summarizationStatus.EntityData.SegmentPath = "summarization-status"
    summarizationStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/per-level-advertising-detail/" + summarizationStatus.EntityData.SegmentPath
    summarizationStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summarizationStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summarizationStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summarizationStatus.EntityData.Children = types.NewOrderedMap()
    summarizationStatus.EntityData.Children.Append("summary-prefix", types.YChild{"SummaryPrefix", &summarizationStatus.SummaryPrefix})
    summarizationStatus.EntityData.Leafs = types.NewOrderedMap()
    summarizationStatus.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", summarizationStatus.IsValid})

    summarizationStatus.EntityData.YListKeys = []string {}

    return &(summarizationStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
// Summarizing Prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetEntityData() *types.CommonEntityData {
    summaryPrefix.EntityData.YFilter = summaryPrefix.YFilter
    summaryPrefix.EntityData.YangName = "summary-prefix"
    summaryPrefix.EntityData.BundleName = "cisco_ios_xr"
    summaryPrefix.EntityData.ParentYangName = "summarization-status"
    summaryPrefix.EntityData.SegmentPath = "summary-prefix"
    summaryPrefix.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/per-level-advertising-detail/summarization-status/" + summaryPrefix.EntityData.SegmentPath
    summaryPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryPrefix.EntityData.Children = types.NewOrderedMap()
    summaryPrefix.EntityData.Leafs = types.NewOrderedMap()
    summaryPrefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", summaryPrefix.Prefix})
    summaryPrefix.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", summaryPrefix.PrefixLength})

    summaryPrefix.EntityData.YListKeys = []string {}

    return &(summaryPrefix.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_PerLevelAdvertisingDetail_Tags
// Tags associated with the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_PerLevelAdvertisingDetail_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_PerLevelAdvertisingDetail_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "per-level-advertising-detail"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/per-level-advertising-detail/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_PerLevelAdvertisingDetail_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_PerLevelAdvertisingDetail_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv6frrBackups_Ipv6frrBackup_PerLevelAdvertisingDetail_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "per-level-advertising-detail"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv6frr-backups/ipv6frr-backup/per-level-advertising-detail/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups
// IPv4 FRR table
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FRR backup for an IPv4 network. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup.
    Ipv4frrBackup []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup
}

func (ipv4frrBackups *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups) GetEntityData() *types.CommonEntityData {
    ipv4frrBackups.EntityData.YFilter = ipv4frrBackups.YFilter
    ipv4frrBackups.EntityData.YangName = "ipv4frr-backups"
    ipv4frrBackups.EntityData.BundleName = "cisco_ios_xr"
    ipv4frrBackups.EntityData.ParentYangName = "topology"
    ipv4frrBackups.EntityData.SegmentPath = "ipv4frr-backups"
    ipv4frrBackups.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/" + ipv4frrBackups.EntityData.SegmentPath
    ipv4frrBackups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4frrBackups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4frrBackups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4frrBackups.EntityData.Children = types.NewOrderedMap()
    ipv4frrBackups.EntityData.Children.Append("ipv4frr-backup", types.YChild{"Ipv4frrBackup", nil})
    for i := range ipv4frrBackups.Ipv4frrBackup {
        types.SetYListKey(ipv4frrBackups.Ipv4frrBackup[i], i)
        ipv4frrBackups.EntityData.Children.Append(types.GetSegmentPath(ipv4frrBackups.Ipv4frrBackup[i]), types.YChild{"Ipv4frrBackup", ipv4frrBackups.Ipv4frrBackup[i]})
    }
    ipv4frrBackups.EntityData.Leafs = types.NewOrderedMap()

    ipv4frrBackups.EntityData.YListKeys = []string {}

    return &(ipv4frrBackups.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup
// FRR backup for an IPv4 network
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Status of IS-IS directly connected routes to the prefix.
    ConnectedStatus Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_ConnectedStatus

    // Status of other protocols' routes redistributed into IS-IS.
    RedistributedStatus Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_RedistributedStatus

    // Status of native IS-IS routes to the prefix.
    NativeStatus Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus

    // Per level details of how the local system advertises the prefix. The type
    // is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_PerLevelAdvertisingDetail.
    PerLevelAdvertisingDetail []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_PerLevelAdvertisingDetail
}

func (ipv4frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup) GetEntityData() *types.CommonEntityData {
    ipv4frrBackup.EntityData.YFilter = ipv4frrBackup.YFilter
    ipv4frrBackup.EntityData.YangName = "ipv4frr-backup"
    ipv4frrBackup.EntityData.BundleName = "cisco_ios_xr"
    ipv4frrBackup.EntityData.ParentYangName = "ipv4frr-backups"
    ipv4frrBackup.EntityData.SegmentPath = "ipv4frr-backup" + types.AddNoKeyToken(ipv4frrBackup)
    ipv4frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/" + ipv4frrBackup.EntityData.SegmentPath
    ipv4frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4frrBackup.EntityData.Children = types.NewOrderedMap()
    ipv4frrBackup.EntityData.Children.Append("connected-status", types.YChild{"ConnectedStatus", &ipv4frrBackup.ConnectedStatus})
    ipv4frrBackup.EntityData.Children.Append("redistributed-status", types.YChild{"RedistributedStatus", &ipv4frrBackup.RedistributedStatus})
    ipv4frrBackup.EntityData.Children.Append("native-status", types.YChild{"NativeStatus", &ipv4frrBackup.NativeStatus})
    ipv4frrBackup.EntityData.Children.Append("per-level-advertising-detail", types.YChild{"PerLevelAdvertisingDetail", nil})
    for i := range ipv4frrBackup.PerLevelAdvertisingDetail {
        types.SetYListKey(ipv4frrBackup.PerLevelAdvertisingDetail[i], i)
        ipv4frrBackup.EntityData.Children.Append(types.GetSegmentPath(ipv4frrBackup.PerLevelAdvertisingDetail[i]), types.YChild{"PerLevelAdvertisingDetail", ipv4frrBackup.PerLevelAdvertisingDetail[i]})
    }
    ipv4frrBackup.EntityData.Leafs = types.NewOrderedMap()
    ipv4frrBackup.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4frrBackup.Prefix})
    ipv4frrBackup.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4frrBackup.PrefixLength})

    ipv4frrBackup.EntityData.YListKeys = []string {}

    return &(ipv4frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_ConnectedStatus
// Status of IS-IS directly connected routes to the
// prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_ConnectedStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the directly connected prefix.
    ConnectedDetails Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_ConnectedStatus_ConnectedDetails
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_ConnectedStatus) GetEntityData() *types.CommonEntityData {
    connectedStatus.EntityData.YFilter = connectedStatus.YFilter
    connectedStatus.EntityData.YangName = "connected-status"
    connectedStatus.EntityData.BundleName = "cisco_ios_xr"
    connectedStatus.EntityData.ParentYangName = "ipv4frr-backup"
    connectedStatus.EntityData.SegmentPath = "connected-status"
    connectedStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/" + connectedStatus.EntityData.SegmentPath
    connectedStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedStatus.EntityData.Children = types.NewOrderedMap()
    connectedStatus.EntityData.Children.Append("connected-details", types.YChild{"ConnectedDetails", &connectedStatus.ConnectedDetails})
    connectedStatus.EntityData.Leafs = types.NewOrderedMap()
    connectedStatus.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", connectedStatus.IsValid})

    connectedStatus.EntityData.YListKeys = []string {}

    return &(connectedStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_ConnectedStatus_ConnectedDetails
// Details of the directly connected prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_ConnectedStatus_ConnectedDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interfaces. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_ConnectedStatus_ConnectedDetails_Interface.
    Interface []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_ConnectedStatus_ConnectedDetails_Interface
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_ConnectedStatus_ConnectedDetails) GetEntityData() *types.CommonEntityData {
    connectedDetails.EntityData.YFilter = connectedDetails.YFilter
    connectedDetails.EntityData.YangName = "connected-details"
    connectedDetails.EntityData.BundleName = "cisco_ios_xr"
    connectedDetails.EntityData.ParentYangName = "connected-status"
    connectedDetails.EntityData.SegmentPath = "connected-details"
    connectedDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/connected-status/" + connectedDetails.EntityData.SegmentPath
    connectedDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedDetails.EntityData.Children = types.NewOrderedMap()
    connectedDetails.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range connectedDetails.Interface {
        types.SetYListKey(connectedDetails.Interface[i], i)
        connectedDetails.EntityData.Children.Append(types.GetSegmentPath(connectedDetails.Interface[i]), types.YChild{"Interface", connectedDetails.Interface[i]})
    }
    connectedDetails.EntityData.Leafs = types.NewOrderedMap()

    connectedDetails.EntityData.YListKeys = []string {}

    return &(connectedDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_ConnectedStatus_ConnectedDetails_Interface
// Interfaces
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_ConnectedStatus_ConnectedDetails_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is string.
    Entry interface{}
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_ConnectedStatus_ConnectedDetails_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "connected-details"
    self.EntityData.SegmentPath = "interface" + types.AddNoKeyToken(self)
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/connected-status/connected-details/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", self.Entry})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_RedistributedStatus
// Status of other protocols' routes redistributed
// into IS-IS
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_RedistributedStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Per level details of the redistributed route.
    RedistributionDetails Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_RedistributedStatus_RedistributionDetails
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_RedistributedStatus) GetEntityData() *types.CommonEntityData {
    redistributedStatus.EntityData.YFilter = redistributedStatus.YFilter
    redistributedStatus.EntityData.YangName = "redistributed-status"
    redistributedStatus.EntityData.BundleName = "cisco_ios_xr"
    redistributedStatus.EntityData.ParentYangName = "ipv4frr-backup"
    redistributedStatus.EntityData.SegmentPath = "redistributed-status"
    redistributedStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/" + redistributedStatus.EntityData.SegmentPath
    redistributedStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributedStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributedStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributedStatus.EntityData.Children = types.NewOrderedMap()
    redistributedStatus.EntityData.Children.Append("redistribution-details", types.YChild{"RedistributionDetails", &redistributedStatus.RedistributionDetails})
    redistributedStatus.EntityData.Leafs = types.NewOrderedMap()
    redistributedStatus.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", redistributedStatus.IsValid})

    redistributedStatus.EntityData.YListKeys = []string {}

    return &(redistributedStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_RedistributedStatus_RedistributionDetails
// Per level details of the redistributed route
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_RedistributedStatus_RedistributionDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // isis sh route redist detail. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail.
    IsisShRouteRedistDetail []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_RedistributedStatus_RedistributionDetails) GetEntityData() *types.CommonEntityData {
    redistributionDetails.EntityData.YFilter = redistributionDetails.YFilter
    redistributionDetails.EntityData.YangName = "redistribution-details"
    redistributionDetails.EntityData.BundleName = "cisco_ios_xr"
    redistributionDetails.EntityData.ParentYangName = "redistributed-status"
    redistributionDetails.EntityData.SegmentPath = "redistribution-details"
    redistributionDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/redistributed-status/" + redistributionDetails.EntityData.SegmentPath
    redistributionDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributionDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributionDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributionDetails.EntityData.Children = types.NewOrderedMap()
    redistributionDetails.EntityData.Children.Append("isis-sh-route-redist-detail", types.YChild{"IsisShRouteRedistDetail", nil})
    for i := range redistributionDetails.IsisShRouteRedistDetail {
        types.SetYListKey(redistributionDetails.IsisShRouteRedistDetail[i], i)
        redistributionDetails.EntityData.Children.Append(types.GetSegmentPath(redistributionDetails.IsisShRouteRedistDetail[i]), types.YChild{"IsisShRouteRedistDetail", redistributionDetails.IsisShRouteRedistDetail[i]})
    }
    redistributionDetails.EntityData.Leafs = types.NewOrderedMap()

    redistributionDetails.EntityData.YListKeys = []string {}

    return &(redistributionDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
// isis sh route redist detail
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Level into which the route is redistributed. The type is IsisLevel.
    Level interface{}

    // Protocol redistributing the route.
    Owner Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetEntityData() *types.CommonEntityData {
    isisShRouteRedistDetail.EntityData.YFilter = isisShRouteRedistDetail.YFilter
    isisShRouteRedistDetail.EntityData.YangName = "isis-sh-route-redist-detail"
    isisShRouteRedistDetail.EntityData.BundleName = "cisco_ios_xr"
    isisShRouteRedistDetail.EntityData.ParentYangName = "redistribution-details"
    isisShRouteRedistDetail.EntityData.SegmentPath = "isis-sh-route-redist-detail" + types.AddNoKeyToken(isisShRouteRedistDetail)
    isisShRouteRedistDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/redistributed-status/redistribution-details/" + isisShRouteRedistDetail.EntityData.SegmentPath
    isisShRouteRedistDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isisShRouteRedistDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isisShRouteRedistDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isisShRouteRedistDetail.EntityData.Children = types.NewOrderedMap()
    isisShRouteRedistDetail.EntityData.Children.Append("owner", types.YChild{"Owner", &isisShRouteRedistDetail.Owner})
    isisShRouteRedistDetail.EntityData.Leafs = types.NewOrderedMap()
    isisShRouteRedistDetail.EntityData.Leafs.Append("level", types.YLeaf{"Level", isisShRouteRedistDetail.Level})

    isisShRouteRedistDetail.EntityData.YListKeys = []string {}

    return &(isisShRouteRedistDetail.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
// Protocol redistributing the route
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol. The type is IsisRedistProto.
    Protocol interface{}

    // IS-IS instance identifier. The type is string.
    IsisInstanceId interface{}

    // OSPF process identifier. The type is string.
    OspfProcessId interface{}

    // OSPFv3 process identifier. The type is string.
    Ospfv3ProcessId interface{}

    // BGP Autonomous System number. The type is string.
    BgpAsNumber interface{}

    // EIGRP Autonomous System number. The type is string.
    EigrpAsNumber interface{}

    // Application Name. The type is string.
    ApplicationName interface{}
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetEntityData() *types.CommonEntityData {
    owner.EntityData.YFilter = owner.YFilter
    owner.EntityData.YangName = "owner"
    owner.EntityData.BundleName = "cisco_ios_xr"
    owner.EntityData.ParentYangName = "isis-sh-route-redist-detail"
    owner.EntityData.SegmentPath = "owner"
    owner.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/redistributed-status/redistribution-details/isis-sh-route-redist-detail/" + owner.EntityData.SegmentPath
    owner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    owner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    owner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    owner.EntityData.Children = types.NewOrderedMap()
    owner.EntityData.Leafs = types.NewOrderedMap()
    owner.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", owner.Protocol})
    owner.EntityData.Leafs.Append("isis-instance-id", types.YLeaf{"IsisInstanceId", owner.IsisInstanceId})
    owner.EntityData.Leafs.Append("ospf-process-id", types.YLeaf{"OspfProcessId", owner.OspfProcessId})
    owner.EntityData.Leafs.Append("ospfv3-process-id", types.YLeaf{"Ospfv3ProcessId", owner.Ospfv3ProcessId})
    owner.EntityData.Leafs.Append("bgp-as-number", types.YLeaf{"BgpAsNumber", owner.BgpAsNumber})
    owner.EntityData.Leafs.Append("eigrp-as-number", types.YLeaf{"EigrpAsNumber", owner.EigrpAsNumber})
    owner.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", owner.ApplicationName})

    owner.EntityData.YListKeys = []string {}

    return &(owner.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus
// Status of native IS-IS routes to the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the native route.
    NativeDetails Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus) GetEntityData() *types.CommonEntityData {
    nativeStatus.EntityData.YFilter = nativeStatus.YFilter
    nativeStatus.EntityData.YangName = "native-status"
    nativeStatus.EntityData.BundleName = "cisco_ios_xr"
    nativeStatus.EntityData.ParentYangName = "ipv4frr-backup"
    nativeStatus.EntityData.SegmentPath = "native-status"
    nativeStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/" + nativeStatus.EntityData.SegmentPath
    nativeStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nativeStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nativeStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nativeStatus.EntityData.Children = types.NewOrderedMap()
    nativeStatus.EntityData.Children.Append("native-details", types.YChild{"NativeDetails", &nativeStatus.NativeDetails})
    nativeStatus.EntityData.Leafs = types.NewOrderedMap()
    nativeStatus.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", nativeStatus.IsValid})

    nativeStatus.EntityData.YListKeys = []string {}

    return &(nativeStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails
// Details of the native route
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Relative importance of the prefix. The type is IsisPrefixPriority.
    Priority interface{}

    // Prefix local label for SR-MPLS. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}

    // Primary paths to prefix.
    Primary Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary

    // Backup paths to prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup.
    Backup []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails) GetEntityData() *types.CommonEntityData {
    nativeDetails.EntityData.YFilter = nativeDetails.YFilter
    nativeDetails.EntityData.YangName = "native-details"
    nativeDetails.EntityData.BundleName = "cisco_ios_xr"
    nativeDetails.EntityData.ParentYangName = "native-status"
    nativeDetails.EntityData.SegmentPath = "native-details"
    nativeDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/" + nativeDetails.EntityData.SegmentPath
    nativeDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nativeDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nativeDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nativeDetails.EntityData.Children = types.NewOrderedMap()
    nativeDetails.EntityData.Children.Append("primary", types.YChild{"Primary", &nativeDetails.Primary})
    nativeDetails.EntityData.Children.Append("backup", types.YChild{"Backup", nil})
    for i := range nativeDetails.Backup {
        types.SetYListKey(nativeDetails.Backup[i], i)
        nativeDetails.EntityData.Children.Append(types.GetSegmentPath(nativeDetails.Backup[i]), types.YChild{"Backup", nativeDetails.Backup[i]})
    }
    nativeDetails.EntityData.Leafs = types.NewOrderedMap()
    nativeDetails.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", nativeDetails.Priority})
    nativeDetails.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", nativeDetails.LocalLabel})

    nativeDetails.EntityData.YListKeys = []string {}

    return &(nativeDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary
// Primary paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths.
    Paths []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop.
    UcmpNextHop []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath.
    MulticastPath []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath.
    SrtePath []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath.
    ExplicitPath []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Source.
    Source []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource.
    MulticastSource []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary) GetEntityData() *types.CommonEntityData {
    primary.EntityData.YFilter = primary.YFilter
    primary.EntityData.YangName = "primary"
    primary.EntityData.BundleName = "cisco_ios_xr"
    primary.EntityData.ParentYangName = "native-details"
    primary.EntityData.SegmentPath = "primary"
    primary.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/" + primary.EntityData.SegmentPath
    primary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    primary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    primary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    primary.EntityData.Children = types.NewOrderedMap()
    primary.EntityData.Children.Append("paths", types.YChild{"Paths", nil})
    for i := range primary.Paths {
        types.SetYListKey(primary.Paths[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.Paths[i]), types.YChild{"Paths", primary.Paths[i]})
    }
    primary.EntityData.Children.Append("ucmp-next-hop", types.YChild{"UcmpNextHop", nil})
    for i := range primary.UcmpNextHop {
        types.SetYListKey(primary.UcmpNextHop[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.UcmpNextHop[i]), types.YChild{"UcmpNextHop", primary.UcmpNextHop[i]})
    }
    primary.EntityData.Children.Append("multicast-path", types.YChild{"MulticastPath", nil})
    for i := range primary.MulticastPath {
        types.SetYListKey(primary.MulticastPath[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.MulticastPath[i]), types.YChild{"MulticastPath", primary.MulticastPath[i]})
    }
    primary.EntityData.Children.Append("srte-path", types.YChild{"SrtePath", nil})
    for i := range primary.SrtePath {
        types.SetYListKey(primary.SrtePath[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.SrtePath[i]), types.YChild{"SrtePath", primary.SrtePath[i]})
    }
    primary.EntityData.Children.Append("explicit-path", types.YChild{"ExplicitPath", nil})
    for i := range primary.ExplicitPath {
        types.SetYListKey(primary.ExplicitPath[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.ExplicitPath[i]), types.YChild{"ExplicitPath", primary.ExplicitPath[i]})
    }
    primary.EntityData.Children.Append("source", types.YChild{"Source", nil})
    for i := range primary.Source {
        types.SetYListKey(primary.Source[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.Source[i]), types.YChild{"Source", primary.Source[i]})
    }
    primary.EntityData.Children.Append("multicast-source", types.YChild{"MulticastSource", nil})
    for i := range primary.MulticastSource {
        types.SetYListKey(primary.MulticastSource[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.MulticastSource[i]), types.YChild{"MulticastSource", primary.MulticastSource[i]})
    }
    primary.EntityData.Leafs = types.NewOrderedMap()
    primary.EntityData.Leafs.Append("origin", types.YLeaf{"Origin", primary.Origin})
    primary.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", primary.Metric})
    primary.EntityData.Leafs.Append("multicast-metric", types.YLeaf{"MulticastMetric", primary.MulticastMetric})
    primary.EntityData.Leafs.Append("is-external-metric", types.YLeaf{"IsExternalMetric", primary.IsExternalMetric})
    primary.EntityData.Leafs.Append("administrative-distance", types.YLeaf{"AdministrativeDistance", primary.AdministrativeDistance})

    primary.EntityData.YListKeys = []string {}

    return &(primary.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths_Nnh
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "primary"
    paths.EntityData.SegmentPath = "paths" + types.AddNoKeyToken(paths)
    paths.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/" + paths.EntityData.SegmentPath
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = types.NewOrderedMap()
    paths.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &paths.FrrBackup})
    paths.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range paths.UloopExplicit {
        types.SetYListKey(paths.UloopExplicit[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.UloopExplicit[i]), types.YChild{"UloopExplicit", paths.UloopExplicit[i]})
    }
    paths.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range paths.Nnh {
        types.SetYListKey(paths.Nnh[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.Nnh[i]), types.YChild{"Nnh", paths.Nnh[i]})
    }
    paths.EntityData.Leafs = types.NewOrderedMap()
    paths.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", paths.NeighborId})
    paths.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", paths.EgressInterface})
    paths.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", paths.NeighborAddress})
    paths.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", paths.NeighborSnpa})
    paths.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", paths.Tag})
    paths.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", paths.TunnelInterface})
    paths.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", paths.SegmentRoutingSidValue})
    paths.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", paths.Weight})
    paths.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", paths.IsTeTunnelInterface})
    paths.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", paths.IsSrExcludeTunnelInterface})
    paths.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", paths.OutgoingLabel})

    paths.EntityData.YListKeys = []string {}

    return &(paths.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "paths"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/paths/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/paths/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/paths/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "paths"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/paths/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Paths_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "paths"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/paths/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetEntityData() *types.CommonEntityData {
    ucmpNextHop.EntityData.YFilter = ucmpNextHop.YFilter
    ucmpNextHop.EntityData.YangName = "ucmp-next-hop"
    ucmpNextHop.EntityData.BundleName = "cisco_ios_xr"
    ucmpNextHop.EntityData.ParentYangName = "primary"
    ucmpNextHop.EntityData.SegmentPath = "ucmp-next-hop" + types.AddNoKeyToken(ucmpNextHop)
    ucmpNextHop.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/" + ucmpNextHop.EntityData.SegmentPath
    ucmpNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ucmpNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ucmpNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ucmpNextHop.EntityData.Children = types.NewOrderedMap()
    ucmpNextHop.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &ucmpNextHop.FrrBackup})
    ucmpNextHop.EntityData.Leafs = types.NewOrderedMap()
    ucmpNextHop.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", ucmpNextHop.NeighborId})
    ucmpNextHop.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", ucmpNextHop.EgressInterface})
    ucmpNextHop.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", ucmpNextHop.NeighborAddress})
    ucmpNextHop.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", ucmpNextHop.NeighborSnpa})
    ucmpNextHop.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", ucmpNextHop.Tag})
    ucmpNextHop.EntityData.Leafs.Append("total-ucmp-distance", types.YLeaf{"TotalUcmpDistance", ucmpNextHop.TotalUcmpDistance})
    ucmpNextHop.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", ucmpNextHop.SegmentRoutingSidValue})
    ucmpNextHop.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", ucmpNextHop.Weight})
    ucmpNextHop.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", ucmpNextHop.IsTeTunnelInterface})
    ucmpNextHop.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", ucmpNextHop.IsSrExcludeTunnelInterface})
    ucmpNextHop.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", ucmpNextHop.OutgoingLabel})

    ucmpNextHop.EntityData.YListKeys = []string {}

    return &(ucmpNextHop.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "ucmp-next-hop"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/ucmp-next-hop/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/ucmp-next-hop/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/ucmp-next-hop/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath) GetEntityData() *types.CommonEntityData {
    multicastPath.EntityData.YFilter = multicastPath.YFilter
    multicastPath.EntityData.YangName = "multicast-path"
    multicastPath.EntityData.BundleName = "cisco_ios_xr"
    multicastPath.EntityData.ParentYangName = "primary"
    multicastPath.EntityData.SegmentPath = "multicast-path" + types.AddNoKeyToken(multicastPath)
    multicastPath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/" + multicastPath.EntityData.SegmentPath
    multicastPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastPath.EntityData.Children = types.NewOrderedMap()
    multicastPath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &multicastPath.FrrBackup})
    multicastPath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range multicastPath.UloopExplicit {
        types.SetYListKey(multicastPath.UloopExplicit[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.UloopExplicit[i]), types.YChild{"UloopExplicit", multicastPath.UloopExplicit[i]})
    }
    multicastPath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range multicastPath.Nnh {
        types.SetYListKey(multicastPath.Nnh[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.Nnh[i]), types.YChild{"Nnh", multicastPath.Nnh[i]})
    }
    multicastPath.EntityData.Leafs = types.NewOrderedMap()
    multicastPath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", multicastPath.NeighborId})
    multicastPath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", multicastPath.EgressInterface})
    multicastPath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", multicastPath.NeighborAddress})
    multicastPath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", multicastPath.NeighborSnpa})
    multicastPath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", multicastPath.Tag})
    multicastPath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", multicastPath.TunnelInterface})
    multicastPath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", multicastPath.SegmentRoutingSidValue})
    multicastPath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", multicastPath.Weight})
    multicastPath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", multicastPath.IsTeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", multicastPath.IsSrExcludeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", multicastPath.OutgoingLabel})

    multicastPath.EntityData.YListKeys = []string {}

    return &(multicastPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "multicast-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/multicast-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/multicast-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/multicast-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "multicast-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/multicast-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "multicast-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/multicast-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_Nnh
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath) GetEntityData() *types.CommonEntityData {
    srtePath.EntityData.YFilter = srtePath.YFilter
    srtePath.EntityData.YangName = "srte-path"
    srtePath.EntityData.BundleName = "cisco_ios_xr"
    srtePath.EntityData.ParentYangName = "primary"
    srtePath.EntityData.SegmentPath = "srte-path" + types.AddNoKeyToken(srtePath)
    srtePath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/" + srtePath.EntityData.SegmentPath
    srtePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srtePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srtePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srtePath.EntityData.Children = types.NewOrderedMap()
    srtePath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &srtePath.FrrBackup})
    srtePath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range srtePath.UloopExplicit {
        types.SetYListKey(srtePath.UloopExplicit[i], i)
        srtePath.EntityData.Children.Append(types.GetSegmentPath(srtePath.UloopExplicit[i]), types.YChild{"UloopExplicit", srtePath.UloopExplicit[i]})
    }
    srtePath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range srtePath.Nnh {
        types.SetYListKey(srtePath.Nnh[i], i)
        srtePath.EntityData.Children.Append(types.GetSegmentPath(srtePath.Nnh[i]), types.YChild{"Nnh", srtePath.Nnh[i]})
    }
    srtePath.EntityData.Leafs = types.NewOrderedMap()
    srtePath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", srtePath.NeighborId})
    srtePath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", srtePath.EgressInterface})
    srtePath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", srtePath.NeighborAddress})
    srtePath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", srtePath.NeighborSnpa})
    srtePath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", srtePath.Tag})
    srtePath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", srtePath.TunnelInterface})
    srtePath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", srtePath.SegmentRoutingSidValue})
    srtePath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", srtePath.Weight})
    srtePath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", srtePath.IsTeTunnelInterface})
    srtePath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", srtePath.IsSrExcludeTunnelInterface})
    srtePath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", srtePath.OutgoingLabel})

    srtePath.EntityData.YListKeys = []string {}

    return &(srtePath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "srte-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/srte-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/srte-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/srte-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "srte-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/srte-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_SrtePath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "srte-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/srte-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath) GetEntityData() *types.CommonEntityData {
    explicitPath.EntityData.YFilter = explicitPath.YFilter
    explicitPath.EntityData.YangName = "explicit-path"
    explicitPath.EntityData.BundleName = "cisco_ios_xr"
    explicitPath.EntityData.ParentYangName = "primary"
    explicitPath.EntityData.SegmentPath = "explicit-path" + types.AddNoKeyToken(explicitPath)
    explicitPath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/" + explicitPath.EntityData.SegmentPath
    explicitPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitPath.EntityData.Children = types.NewOrderedMap()
    explicitPath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &explicitPath.FrrBackup})
    explicitPath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range explicitPath.UloopExplicit {
        types.SetYListKey(explicitPath.UloopExplicit[i], i)
        explicitPath.EntityData.Children.Append(types.GetSegmentPath(explicitPath.UloopExplicit[i]), types.YChild{"UloopExplicit", explicitPath.UloopExplicit[i]})
    }
    explicitPath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range explicitPath.Nnh {
        types.SetYListKey(explicitPath.Nnh[i], i)
        explicitPath.EntityData.Children.Append(types.GetSegmentPath(explicitPath.Nnh[i]), types.YChild{"Nnh", explicitPath.Nnh[i]})
    }
    explicitPath.EntityData.Leafs = types.NewOrderedMap()
    explicitPath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", explicitPath.NeighborId})
    explicitPath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", explicitPath.EgressInterface})
    explicitPath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", explicitPath.NeighborAddress})
    explicitPath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", explicitPath.NeighborSnpa})
    explicitPath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", explicitPath.Tag})
    explicitPath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", explicitPath.TunnelInterface})
    explicitPath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", explicitPath.SegmentRoutingSidValue})
    explicitPath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", explicitPath.Weight})
    explicitPath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", explicitPath.IsTeTunnelInterface})
    explicitPath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", explicitPath.IsSrExcludeTunnelInterface})
    explicitPath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", explicitPath.OutgoingLabel})

    explicitPath.EntityData.YListKeys = []string {}

    return &(explicitPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "explicit-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/explicit-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/explicit-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/explicit-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "explicit-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/explicit-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "explicit-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/explicit-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Source_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "primary"
    source.EntityData.SegmentPath = "source" + types.AddNoKeyToken(source)
    source.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/" + source.EntityData.SegmentPath
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = types.NewOrderedMap()
    source.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range source.Tags {
        types.SetYListKey(source.Tags[i], i)
        source.EntityData.Children.Append(types.GetSegmentPath(source.Tags[i]), types.YChild{"Tags", source.Tags[i]})
    }
    source.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range source.NodalSid {
        types.SetYListKey(source.NodalSid[i], i)
        source.EntityData.Children.Append(types.GetSegmentPath(source.NodalSid[i]), types.YChild{"NodalSid", source.NodalSid[i]})
    }
    source.EntityData.Leafs = types.NewOrderedMap()
    source.EntityData.Leafs.Append("source-lsp-id", types.YLeaf{"SourceLspId", source.SourceLspId})
    source.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", source.SourceAddress})

    source.EntityData.YListKeys = []string {}

    return &(source.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Source_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Source_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "source"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/source/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "source"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/source/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource) GetEntityData() *types.CommonEntityData {
    multicastSource.EntityData.YFilter = multicastSource.YFilter
    multicastSource.EntityData.YangName = "multicast-source"
    multicastSource.EntityData.BundleName = "cisco_ios_xr"
    multicastSource.EntityData.ParentYangName = "primary"
    multicastSource.EntityData.SegmentPath = "multicast-source" + types.AddNoKeyToken(multicastSource)
    multicastSource.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/" + multicastSource.EntityData.SegmentPath
    multicastSource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastSource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastSource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastSource.EntityData.Children = types.NewOrderedMap()
    multicastSource.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range multicastSource.Tags {
        types.SetYListKey(multicastSource.Tags[i], i)
        multicastSource.EntityData.Children.Append(types.GetSegmentPath(multicastSource.Tags[i]), types.YChild{"Tags", multicastSource.Tags[i]})
    }
    multicastSource.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range multicastSource.NodalSid {
        types.SetYListKey(multicastSource.NodalSid[i], i)
        multicastSource.EntityData.Children.Append(types.GetSegmentPath(multicastSource.NodalSid[i]), types.YChild{"NodalSid", multicastSource.NodalSid[i]})
    }
    multicastSource.EntityData.Leafs = types.NewOrderedMap()
    multicastSource.EntityData.Leafs.Append("source-lsp-id", types.YLeaf{"SourceLspId", multicastSource.SourceLspId})
    multicastSource.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", multicastSource.SourceAddress})

    multicastSource.EntityData.YListKeys = []string {}

    return &(multicastSource.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "multicast-source"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/multicast-source/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "multicast-source"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/primary/multicast-source/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup
// Backup paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths.
    Paths []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop.
    UcmpNextHop []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath.
    MulticastPath []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath.
    SrtePath []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath.
    ExplicitPath []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Source.
    Source []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource.
    MulticastSource []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup) GetEntityData() *types.CommonEntityData {
    backup.EntityData.YFilter = backup.YFilter
    backup.EntityData.YangName = "backup"
    backup.EntityData.BundleName = "cisco_ios_xr"
    backup.EntityData.ParentYangName = "native-details"
    backup.EntityData.SegmentPath = "backup" + types.AddNoKeyToken(backup)
    backup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/" + backup.EntityData.SegmentPath
    backup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backup.EntityData.Children = types.NewOrderedMap()
    backup.EntityData.Children.Append("paths", types.YChild{"Paths", nil})
    for i := range backup.Paths {
        types.SetYListKey(backup.Paths[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.Paths[i]), types.YChild{"Paths", backup.Paths[i]})
    }
    backup.EntityData.Children.Append("ucmp-next-hop", types.YChild{"UcmpNextHop", nil})
    for i := range backup.UcmpNextHop {
        types.SetYListKey(backup.UcmpNextHop[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.UcmpNextHop[i]), types.YChild{"UcmpNextHop", backup.UcmpNextHop[i]})
    }
    backup.EntityData.Children.Append("multicast-path", types.YChild{"MulticastPath", nil})
    for i := range backup.MulticastPath {
        types.SetYListKey(backup.MulticastPath[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.MulticastPath[i]), types.YChild{"MulticastPath", backup.MulticastPath[i]})
    }
    backup.EntityData.Children.Append("srte-path", types.YChild{"SrtePath", nil})
    for i := range backup.SrtePath {
        types.SetYListKey(backup.SrtePath[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.SrtePath[i]), types.YChild{"SrtePath", backup.SrtePath[i]})
    }
    backup.EntityData.Children.Append("explicit-path", types.YChild{"ExplicitPath", nil})
    for i := range backup.ExplicitPath {
        types.SetYListKey(backup.ExplicitPath[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.ExplicitPath[i]), types.YChild{"ExplicitPath", backup.ExplicitPath[i]})
    }
    backup.EntityData.Children.Append("source", types.YChild{"Source", nil})
    for i := range backup.Source {
        types.SetYListKey(backup.Source[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.Source[i]), types.YChild{"Source", backup.Source[i]})
    }
    backup.EntityData.Children.Append("multicast-source", types.YChild{"MulticastSource", nil})
    for i := range backup.MulticastSource {
        types.SetYListKey(backup.MulticastSource[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.MulticastSource[i]), types.YChild{"MulticastSource", backup.MulticastSource[i]})
    }
    backup.EntityData.Leafs = types.NewOrderedMap()
    backup.EntityData.Leafs.Append("origin", types.YLeaf{"Origin", backup.Origin})
    backup.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", backup.Metric})
    backup.EntityData.Leafs.Append("multicast-metric", types.YLeaf{"MulticastMetric", backup.MulticastMetric})
    backup.EntityData.Leafs.Append("is-external-metric", types.YLeaf{"IsExternalMetric", backup.IsExternalMetric})
    backup.EntityData.Leafs.Append("administrative-distance", types.YLeaf{"AdministrativeDistance", backup.AdministrativeDistance})

    backup.EntityData.YListKeys = []string {}

    return &(backup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths_Nnh
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "backup"
    paths.EntityData.SegmentPath = "paths" + types.AddNoKeyToken(paths)
    paths.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/" + paths.EntityData.SegmentPath
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = types.NewOrderedMap()
    paths.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &paths.FrrBackup})
    paths.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range paths.UloopExplicit {
        types.SetYListKey(paths.UloopExplicit[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.UloopExplicit[i]), types.YChild{"UloopExplicit", paths.UloopExplicit[i]})
    }
    paths.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range paths.Nnh {
        types.SetYListKey(paths.Nnh[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.Nnh[i]), types.YChild{"Nnh", paths.Nnh[i]})
    }
    paths.EntityData.Leafs = types.NewOrderedMap()
    paths.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", paths.NeighborId})
    paths.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", paths.EgressInterface})
    paths.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", paths.NeighborAddress})
    paths.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", paths.NeighborSnpa})
    paths.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", paths.Tag})
    paths.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", paths.TunnelInterface})
    paths.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", paths.SegmentRoutingSidValue})
    paths.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", paths.Weight})
    paths.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", paths.IsTeTunnelInterface})
    paths.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", paths.IsSrExcludeTunnelInterface})
    paths.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", paths.OutgoingLabel})

    paths.EntityData.YListKeys = []string {}

    return &(paths.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "paths"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/paths/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/paths/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/paths/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "paths"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/paths/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Paths_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "paths"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/paths/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetEntityData() *types.CommonEntityData {
    ucmpNextHop.EntityData.YFilter = ucmpNextHop.YFilter
    ucmpNextHop.EntityData.YangName = "ucmp-next-hop"
    ucmpNextHop.EntityData.BundleName = "cisco_ios_xr"
    ucmpNextHop.EntityData.ParentYangName = "backup"
    ucmpNextHop.EntityData.SegmentPath = "ucmp-next-hop" + types.AddNoKeyToken(ucmpNextHop)
    ucmpNextHop.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/" + ucmpNextHop.EntityData.SegmentPath
    ucmpNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ucmpNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ucmpNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ucmpNextHop.EntityData.Children = types.NewOrderedMap()
    ucmpNextHop.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &ucmpNextHop.FrrBackup})
    ucmpNextHop.EntityData.Leafs = types.NewOrderedMap()
    ucmpNextHop.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", ucmpNextHop.NeighborId})
    ucmpNextHop.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", ucmpNextHop.EgressInterface})
    ucmpNextHop.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", ucmpNextHop.NeighborAddress})
    ucmpNextHop.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", ucmpNextHop.NeighborSnpa})
    ucmpNextHop.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", ucmpNextHop.Tag})
    ucmpNextHop.EntityData.Leafs.Append("total-ucmp-distance", types.YLeaf{"TotalUcmpDistance", ucmpNextHop.TotalUcmpDistance})
    ucmpNextHop.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", ucmpNextHop.SegmentRoutingSidValue})
    ucmpNextHop.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", ucmpNextHop.Weight})
    ucmpNextHop.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", ucmpNextHop.IsTeTunnelInterface})
    ucmpNextHop.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", ucmpNextHop.IsSrExcludeTunnelInterface})
    ucmpNextHop.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", ucmpNextHop.OutgoingLabel})

    ucmpNextHop.EntityData.YListKeys = []string {}

    return &(ucmpNextHop.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "ucmp-next-hop"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/ucmp-next-hop/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/ucmp-next-hop/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/ucmp-next-hop/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath) GetEntityData() *types.CommonEntityData {
    multicastPath.EntityData.YFilter = multicastPath.YFilter
    multicastPath.EntityData.YangName = "multicast-path"
    multicastPath.EntityData.BundleName = "cisco_ios_xr"
    multicastPath.EntityData.ParentYangName = "backup"
    multicastPath.EntityData.SegmentPath = "multicast-path" + types.AddNoKeyToken(multicastPath)
    multicastPath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/" + multicastPath.EntityData.SegmentPath
    multicastPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastPath.EntityData.Children = types.NewOrderedMap()
    multicastPath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &multicastPath.FrrBackup})
    multicastPath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range multicastPath.UloopExplicit {
        types.SetYListKey(multicastPath.UloopExplicit[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.UloopExplicit[i]), types.YChild{"UloopExplicit", multicastPath.UloopExplicit[i]})
    }
    multicastPath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range multicastPath.Nnh {
        types.SetYListKey(multicastPath.Nnh[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.Nnh[i]), types.YChild{"Nnh", multicastPath.Nnh[i]})
    }
    multicastPath.EntityData.Leafs = types.NewOrderedMap()
    multicastPath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", multicastPath.NeighborId})
    multicastPath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", multicastPath.EgressInterface})
    multicastPath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", multicastPath.NeighborAddress})
    multicastPath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", multicastPath.NeighborSnpa})
    multicastPath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", multicastPath.Tag})
    multicastPath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", multicastPath.TunnelInterface})
    multicastPath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", multicastPath.SegmentRoutingSidValue})
    multicastPath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", multicastPath.Weight})
    multicastPath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", multicastPath.IsTeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", multicastPath.IsSrExcludeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", multicastPath.OutgoingLabel})

    multicastPath.EntityData.YListKeys = []string {}

    return &(multicastPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "multicast-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/multicast-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/multicast-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/multicast-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "multicast-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/multicast-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "multicast-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/multicast-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_Nnh
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath) GetEntityData() *types.CommonEntityData {
    srtePath.EntityData.YFilter = srtePath.YFilter
    srtePath.EntityData.YangName = "srte-path"
    srtePath.EntityData.BundleName = "cisco_ios_xr"
    srtePath.EntityData.ParentYangName = "backup"
    srtePath.EntityData.SegmentPath = "srte-path" + types.AddNoKeyToken(srtePath)
    srtePath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/" + srtePath.EntityData.SegmentPath
    srtePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srtePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srtePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srtePath.EntityData.Children = types.NewOrderedMap()
    srtePath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &srtePath.FrrBackup})
    srtePath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range srtePath.UloopExplicit {
        types.SetYListKey(srtePath.UloopExplicit[i], i)
        srtePath.EntityData.Children.Append(types.GetSegmentPath(srtePath.UloopExplicit[i]), types.YChild{"UloopExplicit", srtePath.UloopExplicit[i]})
    }
    srtePath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range srtePath.Nnh {
        types.SetYListKey(srtePath.Nnh[i], i)
        srtePath.EntityData.Children.Append(types.GetSegmentPath(srtePath.Nnh[i]), types.YChild{"Nnh", srtePath.Nnh[i]})
    }
    srtePath.EntityData.Leafs = types.NewOrderedMap()
    srtePath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", srtePath.NeighborId})
    srtePath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", srtePath.EgressInterface})
    srtePath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", srtePath.NeighborAddress})
    srtePath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", srtePath.NeighborSnpa})
    srtePath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", srtePath.Tag})
    srtePath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", srtePath.TunnelInterface})
    srtePath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", srtePath.SegmentRoutingSidValue})
    srtePath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", srtePath.Weight})
    srtePath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", srtePath.IsTeTunnelInterface})
    srtePath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", srtePath.IsSrExcludeTunnelInterface})
    srtePath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", srtePath.OutgoingLabel})

    srtePath.EntityData.YListKeys = []string {}

    return &(srtePath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "srte-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/srte-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/srte-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/srte-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "srte-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/srte-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_SrtePath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "srte-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/srte-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath) GetEntityData() *types.CommonEntityData {
    explicitPath.EntityData.YFilter = explicitPath.YFilter
    explicitPath.EntityData.YangName = "explicit-path"
    explicitPath.EntityData.BundleName = "cisco_ios_xr"
    explicitPath.EntityData.ParentYangName = "backup"
    explicitPath.EntityData.SegmentPath = "explicit-path" + types.AddNoKeyToken(explicitPath)
    explicitPath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/" + explicitPath.EntityData.SegmentPath
    explicitPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitPath.EntityData.Children = types.NewOrderedMap()
    explicitPath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &explicitPath.FrrBackup})
    explicitPath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range explicitPath.UloopExplicit {
        types.SetYListKey(explicitPath.UloopExplicit[i], i)
        explicitPath.EntityData.Children.Append(types.GetSegmentPath(explicitPath.UloopExplicit[i]), types.YChild{"UloopExplicit", explicitPath.UloopExplicit[i]})
    }
    explicitPath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range explicitPath.Nnh {
        types.SetYListKey(explicitPath.Nnh[i], i)
        explicitPath.EntityData.Children.Append(types.GetSegmentPath(explicitPath.Nnh[i]), types.YChild{"Nnh", explicitPath.Nnh[i]})
    }
    explicitPath.EntityData.Leafs = types.NewOrderedMap()
    explicitPath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", explicitPath.NeighborId})
    explicitPath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", explicitPath.EgressInterface})
    explicitPath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", explicitPath.NeighborAddress})
    explicitPath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", explicitPath.NeighborSnpa})
    explicitPath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", explicitPath.Tag})
    explicitPath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", explicitPath.TunnelInterface})
    explicitPath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", explicitPath.SegmentRoutingSidValue})
    explicitPath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", explicitPath.Weight})
    explicitPath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", explicitPath.IsTeTunnelInterface})
    explicitPath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", explicitPath.IsSrExcludeTunnelInterface})
    explicitPath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", explicitPath.OutgoingLabel})

    explicitPath.EntityData.YListKeys = []string {}

    return &(explicitPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "explicit-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/explicit-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/explicit-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/explicit-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "explicit-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/explicit-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "explicit-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/explicit-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Source_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "backup"
    source.EntityData.SegmentPath = "source" + types.AddNoKeyToken(source)
    source.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/" + source.EntityData.SegmentPath
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = types.NewOrderedMap()
    source.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range source.Tags {
        types.SetYListKey(source.Tags[i], i)
        source.EntityData.Children.Append(types.GetSegmentPath(source.Tags[i]), types.YChild{"Tags", source.Tags[i]})
    }
    source.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range source.NodalSid {
        types.SetYListKey(source.NodalSid[i], i)
        source.EntityData.Children.Append(types.GetSegmentPath(source.NodalSid[i]), types.YChild{"NodalSid", source.NodalSid[i]})
    }
    source.EntityData.Leafs = types.NewOrderedMap()
    source.EntityData.Leafs.Append("source-lsp-id", types.YLeaf{"SourceLspId", source.SourceLspId})
    source.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", source.SourceAddress})

    source.EntityData.YListKeys = []string {}

    return &(source.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Source_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Source_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "source"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/source/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "source"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/source/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource) GetEntityData() *types.CommonEntityData {
    multicastSource.EntityData.YFilter = multicastSource.YFilter
    multicastSource.EntityData.YangName = "multicast-source"
    multicastSource.EntityData.BundleName = "cisco_ios_xr"
    multicastSource.EntityData.ParentYangName = "backup"
    multicastSource.EntityData.SegmentPath = "multicast-source" + types.AddNoKeyToken(multicastSource)
    multicastSource.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/" + multicastSource.EntityData.SegmentPath
    multicastSource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastSource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastSource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastSource.EntityData.Children = types.NewOrderedMap()
    multicastSource.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range multicastSource.Tags {
        types.SetYListKey(multicastSource.Tags[i], i)
        multicastSource.EntityData.Children.Append(types.GetSegmentPath(multicastSource.Tags[i]), types.YChild{"Tags", multicastSource.Tags[i]})
    }
    multicastSource.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range multicastSource.NodalSid {
        types.SetYListKey(multicastSource.NodalSid[i], i)
        multicastSource.EntityData.Children.Append(types.GetSegmentPath(multicastSource.NodalSid[i]), types.YChild{"NodalSid", multicastSource.NodalSid[i]})
    }
    multicastSource.EntityData.Leafs = types.NewOrderedMap()
    multicastSource.EntityData.Leafs.Append("source-lsp-id", types.YLeaf{"SourceLspId", multicastSource.SourceLspId})
    multicastSource.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", multicastSource.SourceAddress})

    multicastSource.EntityData.YListKeys = []string {}

    return &(multicastSource.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "multicast-source"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/multicast-source/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "multicast-source"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/native-status/native-details/backup/multicast-source/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_PerLevelAdvertisingDetail
// Per level details of how the local system
// advertises the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_PerLevelAdvertisingDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Level in which the prefix is advertised. The type is IsisLevel.
    Level interface{}

    // The origin of the advertisement. The type is IsisShRouteAdvOrigin.
    AdvertisingOrigin interface{}

    // Metric with which the prefix is advertised. The type is interface{} with
    // range: 0..4294967295.
    Metric interface{}

    // Has the prefix been propagated from another level?. The type is bool.
    IsPropagated interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Is the prefix external to the IS-IS domain?. The type is bool.
    IsExternalReachability interface{}

    // Is the up/down bit set?. The type is bool.
    IsInterarea interface{}

    // Status of summarization for the prefix.
    SummarizationStatus Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_PerLevelAdvertisingDetail_SummarizationStatus

    // Tags associated with the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_PerLevelAdvertisingDetail_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_PerLevelAdvertisingDetail_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_PerLevelAdvertisingDetail_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_PerLevelAdvertisingDetail_NodalSid
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_PerLevelAdvertisingDetail) GetEntityData() *types.CommonEntityData {
    perLevelAdvertisingDetail.EntityData.YFilter = perLevelAdvertisingDetail.YFilter
    perLevelAdvertisingDetail.EntityData.YangName = "per-level-advertising-detail"
    perLevelAdvertisingDetail.EntityData.BundleName = "cisco_ios_xr"
    perLevelAdvertisingDetail.EntityData.ParentYangName = "ipv4frr-backup"
    perLevelAdvertisingDetail.EntityData.SegmentPath = "per-level-advertising-detail" + types.AddNoKeyToken(perLevelAdvertisingDetail)
    perLevelAdvertisingDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/" + perLevelAdvertisingDetail.EntityData.SegmentPath
    perLevelAdvertisingDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perLevelAdvertisingDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perLevelAdvertisingDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perLevelAdvertisingDetail.EntityData.Children = types.NewOrderedMap()
    perLevelAdvertisingDetail.EntityData.Children.Append("summarization-status", types.YChild{"SummarizationStatus", &perLevelAdvertisingDetail.SummarizationStatus})
    perLevelAdvertisingDetail.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range perLevelAdvertisingDetail.Tags {
        types.SetYListKey(perLevelAdvertisingDetail.Tags[i], i)
        perLevelAdvertisingDetail.EntityData.Children.Append(types.GetSegmentPath(perLevelAdvertisingDetail.Tags[i]), types.YChild{"Tags", perLevelAdvertisingDetail.Tags[i]})
    }
    perLevelAdvertisingDetail.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range perLevelAdvertisingDetail.NodalSid {
        types.SetYListKey(perLevelAdvertisingDetail.NodalSid[i], i)
        perLevelAdvertisingDetail.EntityData.Children.Append(types.GetSegmentPath(perLevelAdvertisingDetail.NodalSid[i]), types.YChild{"NodalSid", perLevelAdvertisingDetail.NodalSid[i]})
    }
    perLevelAdvertisingDetail.EntityData.Leafs = types.NewOrderedMap()
    perLevelAdvertisingDetail.EntityData.Leafs.Append("level", types.YLeaf{"Level", perLevelAdvertisingDetail.Level})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("advertising-origin", types.YLeaf{"AdvertisingOrigin", perLevelAdvertisingDetail.AdvertisingOrigin})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", perLevelAdvertisingDetail.Metric})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("is-propagated", types.YLeaf{"IsPropagated", perLevelAdvertisingDetail.IsPropagated})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("is-external-metric", types.YLeaf{"IsExternalMetric", perLevelAdvertisingDetail.IsExternalMetric})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("is-external-reachability", types.YLeaf{"IsExternalReachability", perLevelAdvertisingDetail.IsExternalReachability})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("is-interarea", types.YLeaf{"IsInterarea", perLevelAdvertisingDetail.IsInterarea})

    perLevelAdvertisingDetail.EntityData.YListKeys = []string {}

    return &(perLevelAdvertisingDetail.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_PerLevelAdvertisingDetail_SummarizationStatus
// Status of summarization for the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_PerLevelAdvertisingDetail_SummarizationStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Summarizing Prefix.
    SummaryPrefix Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_PerLevelAdvertisingDetail_SummarizationStatus) GetEntityData() *types.CommonEntityData {
    summarizationStatus.EntityData.YFilter = summarizationStatus.YFilter
    summarizationStatus.EntityData.YangName = "summarization-status"
    summarizationStatus.EntityData.BundleName = "cisco_ios_xr"
    summarizationStatus.EntityData.ParentYangName = "per-level-advertising-detail"
    summarizationStatus.EntityData.SegmentPath = "summarization-status"
    summarizationStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/per-level-advertising-detail/" + summarizationStatus.EntityData.SegmentPath
    summarizationStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summarizationStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summarizationStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summarizationStatus.EntityData.Children = types.NewOrderedMap()
    summarizationStatus.EntityData.Children.Append("summary-prefix", types.YChild{"SummaryPrefix", &summarizationStatus.SummaryPrefix})
    summarizationStatus.EntityData.Leafs = types.NewOrderedMap()
    summarizationStatus.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", summarizationStatus.IsValid})

    summarizationStatus.EntityData.YListKeys = []string {}

    return &(summarizationStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
// Summarizing Prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetEntityData() *types.CommonEntityData {
    summaryPrefix.EntityData.YFilter = summaryPrefix.YFilter
    summaryPrefix.EntityData.YangName = "summary-prefix"
    summaryPrefix.EntityData.BundleName = "cisco_ios_xr"
    summaryPrefix.EntityData.ParentYangName = "summarization-status"
    summaryPrefix.EntityData.SegmentPath = "summary-prefix"
    summaryPrefix.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/per-level-advertising-detail/summarization-status/" + summaryPrefix.EntityData.SegmentPath
    summaryPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryPrefix.EntityData.Children = types.NewOrderedMap()
    summaryPrefix.EntityData.Leafs = types.NewOrderedMap()
    summaryPrefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", summaryPrefix.Prefix})
    summaryPrefix.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", summaryPrefix.PrefixLength})

    summaryPrefix.EntityData.YListKeys = []string {}

    return &(summaryPrefix.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_PerLevelAdvertisingDetail_Tags
// Tags associated with the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_PerLevelAdvertisingDetail_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_PerLevelAdvertisingDetail_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "per-level-advertising-detail"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/per-level-advertising-detail/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_PerLevelAdvertisingDetail_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_PerLevelAdvertisingDetail_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4frrBackups_Ipv4frrBackup_PerLevelAdvertisingDetail_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "per-level-advertising-detail"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4frr-backups/ipv4frr-backup/per-level-advertising-detail/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables
// IPv4 Flex-Algo local route tables
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 Flex-Algo local route table. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable.
    Ipv4FlexRouteTable []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable
}

func (ipv4FlexRouteTables *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables) GetEntityData() *types.CommonEntityData {
    ipv4FlexRouteTables.EntityData.YFilter = ipv4FlexRouteTables.YFilter
    ipv4FlexRouteTables.EntityData.YangName = "ipv4-flex-route-tables"
    ipv4FlexRouteTables.EntityData.BundleName = "cisco_ios_xr"
    ipv4FlexRouteTables.EntityData.ParentYangName = "topology"
    ipv4FlexRouteTables.EntityData.SegmentPath = "ipv4-flex-route-tables"
    ipv4FlexRouteTables.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/" + ipv4FlexRouteTables.EntityData.SegmentPath
    ipv4FlexRouteTables.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4FlexRouteTables.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4FlexRouteTables.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4FlexRouteTables.EntityData.Children = types.NewOrderedMap()
    ipv4FlexRouteTables.EntityData.Children.Append("ipv4-flex-route-table", types.YChild{"Ipv4FlexRouteTable", nil})
    for i := range ipv4FlexRouteTables.Ipv4FlexRouteTable {
        ipv4FlexRouteTables.EntityData.Children.Append(types.GetSegmentPath(ipv4FlexRouteTables.Ipv4FlexRouteTable[i]), types.YChild{"Ipv4FlexRouteTable", ipv4FlexRouteTables.Ipv4FlexRouteTable[i]})
    }
    ipv4FlexRouteTables.EntityData.Leafs = types.NewOrderedMap()

    ipv4FlexRouteTables.EntityData.YListKeys = []string {}

    return &(ipv4FlexRouteTables.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable
// IPv4 Flex-Algo local route table
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Flex Algo. The type is interface{} with range:
    // 0..4294967295.
    FlexAlg interface{}

    // An IPv4 route known to IS-IS. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute.
    Ipv4FlexRoute []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute
}

func (ipv4FlexRouteTable *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable) GetEntityData() *types.CommonEntityData {
    ipv4FlexRouteTable.EntityData.YFilter = ipv4FlexRouteTable.YFilter
    ipv4FlexRouteTable.EntityData.YangName = "ipv4-flex-route-table"
    ipv4FlexRouteTable.EntityData.BundleName = "cisco_ios_xr"
    ipv4FlexRouteTable.EntityData.ParentYangName = "ipv4-flex-route-tables"
    ipv4FlexRouteTable.EntityData.SegmentPath = "ipv4-flex-route-table" + types.AddKeyToken(ipv4FlexRouteTable.FlexAlg, "flex-alg")
    ipv4FlexRouteTable.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/" + ipv4FlexRouteTable.EntityData.SegmentPath
    ipv4FlexRouteTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4FlexRouteTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4FlexRouteTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4FlexRouteTable.EntityData.Children = types.NewOrderedMap()
    ipv4FlexRouteTable.EntityData.Children.Append("ipv4-flex-route", types.YChild{"Ipv4FlexRoute", nil})
    for i := range ipv4FlexRouteTable.Ipv4FlexRoute {
        types.SetYListKey(ipv4FlexRouteTable.Ipv4FlexRoute[i], i)
        ipv4FlexRouteTable.EntityData.Children.Append(types.GetSegmentPath(ipv4FlexRouteTable.Ipv4FlexRoute[i]), types.YChild{"Ipv4FlexRoute", ipv4FlexRouteTable.Ipv4FlexRoute[i]})
    }
    ipv4FlexRouteTable.EntityData.Leafs = types.NewOrderedMap()
    ipv4FlexRouteTable.EntityData.Leafs.Append("flex-alg", types.YLeaf{"FlexAlg", ipv4FlexRouteTable.FlexAlg})

    ipv4FlexRouteTable.EntityData.YListKeys = []string {"FlexAlg"}

    return &(ipv4FlexRouteTable.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute
// An IPv4 route known to IS-IS
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Status of IS-IS directly connected routes to the prefix.
    ConnectedStatus Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_ConnectedStatus

    // Status of other protocols' routes redistributed into IS-IS.
    RedistributedStatus Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_RedistributedStatus

    // Status of native IS-IS routes to the prefix.
    NativeStatus Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus

    // Per level details of how the local system advertises the prefix. The type
    // is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_PerLevelAdvertisingDetail.
    PerLevelAdvertisingDetail []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_PerLevelAdvertisingDetail
}

func (ipv4FlexRoute *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute) GetEntityData() *types.CommonEntityData {
    ipv4FlexRoute.EntityData.YFilter = ipv4FlexRoute.YFilter
    ipv4FlexRoute.EntityData.YangName = "ipv4-flex-route"
    ipv4FlexRoute.EntityData.BundleName = "cisco_ios_xr"
    ipv4FlexRoute.EntityData.ParentYangName = "ipv4-flex-route-table"
    ipv4FlexRoute.EntityData.SegmentPath = "ipv4-flex-route" + types.AddNoKeyToken(ipv4FlexRoute)
    ipv4FlexRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/" + ipv4FlexRoute.EntityData.SegmentPath
    ipv4FlexRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4FlexRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4FlexRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4FlexRoute.EntityData.Children = types.NewOrderedMap()
    ipv4FlexRoute.EntityData.Children.Append("connected-status", types.YChild{"ConnectedStatus", &ipv4FlexRoute.ConnectedStatus})
    ipv4FlexRoute.EntityData.Children.Append("redistributed-status", types.YChild{"RedistributedStatus", &ipv4FlexRoute.RedistributedStatus})
    ipv4FlexRoute.EntityData.Children.Append("native-status", types.YChild{"NativeStatus", &ipv4FlexRoute.NativeStatus})
    ipv4FlexRoute.EntityData.Children.Append("per-level-advertising-detail", types.YChild{"PerLevelAdvertisingDetail", nil})
    for i := range ipv4FlexRoute.PerLevelAdvertisingDetail {
        types.SetYListKey(ipv4FlexRoute.PerLevelAdvertisingDetail[i], i)
        ipv4FlexRoute.EntityData.Children.Append(types.GetSegmentPath(ipv4FlexRoute.PerLevelAdvertisingDetail[i]), types.YChild{"PerLevelAdvertisingDetail", ipv4FlexRoute.PerLevelAdvertisingDetail[i]})
    }
    ipv4FlexRoute.EntityData.Leafs = types.NewOrderedMap()
    ipv4FlexRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4FlexRoute.Prefix})
    ipv4FlexRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4FlexRoute.PrefixLength})

    ipv4FlexRoute.EntityData.YListKeys = []string {}

    return &(ipv4FlexRoute.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_ConnectedStatus
// Status of IS-IS directly connected routes to the
// prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_ConnectedStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the directly connected prefix.
    ConnectedDetails Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_ConnectedStatus_ConnectedDetails
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_ConnectedStatus) GetEntityData() *types.CommonEntityData {
    connectedStatus.EntityData.YFilter = connectedStatus.YFilter
    connectedStatus.EntityData.YangName = "connected-status"
    connectedStatus.EntityData.BundleName = "cisco_ios_xr"
    connectedStatus.EntityData.ParentYangName = "ipv4-flex-route"
    connectedStatus.EntityData.SegmentPath = "connected-status"
    connectedStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/" + connectedStatus.EntityData.SegmentPath
    connectedStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedStatus.EntityData.Children = types.NewOrderedMap()
    connectedStatus.EntityData.Children.Append("connected-details", types.YChild{"ConnectedDetails", &connectedStatus.ConnectedDetails})
    connectedStatus.EntityData.Leafs = types.NewOrderedMap()
    connectedStatus.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", connectedStatus.IsValid})

    connectedStatus.EntityData.YListKeys = []string {}

    return &(connectedStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_ConnectedStatus_ConnectedDetails
// Details of the directly connected prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_ConnectedStatus_ConnectedDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interfaces. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_ConnectedStatus_ConnectedDetails_Interface.
    Interface []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_ConnectedStatus_ConnectedDetails_Interface
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_ConnectedStatus_ConnectedDetails) GetEntityData() *types.CommonEntityData {
    connectedDetails.EntityData.YFilter = connectedDetails.YFilter
    connectedDetails.EntityData.YangName = "connected-details"
    connectedDetails.EntityData.BundleName = "cisco_ios_xr"
    connectedDetails.EntityData.ParentYangName = "connected-status"
    connectedDetails.EntityData.SegmentPath = "connected-details"
    connectedDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/connected-status/" + connectedDetails.EntityData.SegmentPath
    connectedDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedDetails.EntityData.Children = types.NewOrderedMap()
    connectedDetails.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range connectedDetails.Interface {
        types.SetYListKey(connectedDetails.Interface[i], i)
        connectedDetails.EntityData.Children.Append(types.GetSegmentPath(connectedDetails.Interface[i]), types.YChild{"Interface", connectedDetails.Interface[i]})
    }
    connectedDetails.EntityData.Leafs = types.NewOrderedMap()

    connectedDetails.EntityData.YListKeys = []string {}

    return &(connectedDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_ConnectedStatus_ConnectedDetails_Interface
// Interfaces
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_ConnectedStatus_ConnectedDetails_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is string.
    Entry interface{}
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_ConnectedStatus_ConnectedDetails_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "connected-details"
    self.EntityData.SegmentPath = "interface" + types.AddNoKeyToken(self)
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/connected-status/connected-details/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", self.Entry})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_RedistributedStatus
// Status of other protocols' routes redistributed
// into IS-IS
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_RedistributedStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Per level details of the redistributed route.
    RedistributionDetails Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_RedistributedStatus_RedistributionDetails
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_RedistributedStatus) GetEntityData() *types.CommonEntityData {
    redistributedStatus.EntityData.YFilter = redistributedStatus.YFilter
    redistributedStatus.EntityData.YangName = "redistributed-status"
    redistributedStatus.EntityData.BundleName = "cisco_ios_xr"
    redistributedStatus.EntityData.ParentYangName = "ipv4-flex-route"
    redistributedStatus.EntityData.SegmentPath = "redistributed-status"
    redistributedStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/" + redistributedStatus.EntityData.SegmentPath
    redistributedStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributedStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributedStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributedStatus.EntityData.Children = types.NewOrderedMap()
    redistributedStatus.EntityData.Children.Append("redistribution-details", types.YChild{"RedistributionDetails", &redistributedStatus.RedistributionDetails})
    redistributedStatus.EntityData.Leafs = types.NewOrderedMap()
    redistributedStatus.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", redistributedStatus.IsValid})

    redistributedStatus.EntityData.YListKeys = []string {}

    return &(redistributedStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_RedistributedStatus_RedistributionDetails
// Per level details of the redistributed route
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_RedistributedStatus_RedistributionDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // isis sh route redist detail. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail.
    IsisShRouteRedistDetail []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_RedistributedStatus_RedistributionDetails) GetEntityData() *types.CommonEntityData {
    redistributionDetails.EntityData.YFilter = redistributionDetails.YFilter
    redistributionDetails.EntityData.YangName = "redistribution-details"
    redistributionDetails.EntityData.BundleName = "cisco_ios_xr"
    redistributionDetails.EntityData.ParentYangName = "redistributed-status"
    redistributionDetails.EntityData.SegmentPath = "redistribution-details"
    redistributionDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/redistributed-status/" + redistributionDetails.EntityData.SegmentPath
    redistributionDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributionDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributionDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributionDetails.EntityData.Children = types.NewOrderedMap()
    redistributionDetails.EntityData.Children.Append("isis-sh-route-redist-detail", types.YChild{"IsisShRouteRedistDetail", nil})
    for i := range redistributionDetails.IsisShRouteRedistDetail {
        types.SetYListKey(redistributionDetails.IsisShRouteRedistDetail[i], i)
        redistributionDetails.EntityData.Children.Append(types.GetSegmentPath(redistributionDetails.IsisShRouteRedistDetail[i]), types.YChild{"IsisShRouteRedistDetail", redistributionDetails.IsisShRouteRedistDetail[i]})
    }
    redistributionDetails.EntityData.Leafs = types.NewOrderedMap()

    redistributionDetails.EntityData.YListKeys = []string {}

    return &(redistributionDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
// isis sh route redist detail
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Level into which the route is redistributed. The type is IsisLevel.
    Level interface{}

    // Protocol redistributing the route.
    Owner Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetEntityData() *types.CommonEntityData {
    isisShRouteRedistDetail.EntityData.YFilter = isisShRouteRedistDetail.YFilter
    isisShRouteRedistDetail.EntityData.YangName = "isis-sh-route-redist-detail"
    isisShRouteRedistDetail.EntityData.BundleName = "cisco_ios_xr"
    isisShRouteRedistDetail.EntityData.ParentYangName = "redistribution-details"
    isisShRouteRedistDetail.EntityData.SegmentPath = "isis-sh-route-redist-detail" + types.AddNoKeyToken(isisShRouteRedistDetail)
    isisShRouteRedistDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/redistributed-status/redistribution-details/" + isisShRouteRedistDetail.EntityData.SegmentPath
    isisShRouteRedistDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isisShRouteRedistDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isisShRouteRedistDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isisShRouteRedistDetail.EntityData.Children = types.NewOrderedMap()
    isisShRouteRedistDetail.EntityData.Children.Append("owner", types.YChild{"Owner", &isisShRouteRedistDetail.Owner})
    isisShRouteRedistDetail.EntityData.Leafs = types.NewOrderedMap()
    isisShRouteRedistDetail.EntityData.Leafs.Append("level", types.YLeaf{"Level", isisShRouteRedistDetail.Level})

    isisShRouteRedistDetail.EntityData.YListKeys = []string {}

    return &(isisShRouteRedistDetail.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
// Protocol redistributing the route
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol. The type is IsisRedistProto.
    Protocol interface{}

    // IS-IS instance identifier. The type is string.
    IsisInstanceId interface{}

    // OSPF process identifier. The type is string.
    OspfProcessId interface{}

    // OSPFv3 process identifier. The type is string.
    Ospfv3ProcessId interface{}

    // BGP Autonomous System number. The type is string.
    BgpAsNumber interface{}

    // EIGRP Autonomous System number. The type is string.
    EigrpAsNumber interface{}

    // Application Name. The type is string.
    ApplicationName interface{}
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetEntityData() *types.CommonEntityData {
    owner.EntityData.YFilter = owner.YFilter
    owner.EntityData.YangName = "owner"
    owner.EntityData.BundleName = "cisco_ios_xr"
    owner.EntityData.ParentYangName = "isis-sh-route-redist-detail"
    owner.EntityData.SegmentPath = "owner"
    owner.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/redistributed-status/redistribution-details/isis-sh-route-redist-detail/" + owner.EntityData.SegmentPath
    owner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    owner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    owner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    owner.EntityData.Children = types.NewOrderedMap()
    owner.EntityData.Leafs = types.NewOrderedMap()
    owner.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", owner.Protocol})
    owner.EntityData.Leafs.Append("isis-instance-id", types.YLeaf{"IsisInstanceId", owner.IsisInstanceId})
    owner.EntityData.Leafs.Append("ospf-process-id", types.YLeaf{"OspfProcessId", owner.OspfProcessId})
    owner.EntityData.Leafs.Append("ospfv3-process-id", types.YLeaf{"Ospfv3ProcessId", owner.Ospfv3ProcessId})
    owner.EntityData.Leafs.Append("bgp-as-number", types.YLeaf{"BgpAsNumber", owner.BgpAsNumber})
    owner.EntityData.Leafs.Append("eigrp-as-number", types.YLeaf{"EigrpAsNumber", owner.EigrpAsNumber})
    owner.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", owner.ApplicationName})

    owner.EntityData.YListKeys = []string {}

    return &(owner.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus
// Status of native IS-IS routes to the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the native route.
    NativeDetails Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus) GetEntityData() *types.CommonEntityData {
    nativeStatus.EntityData.YFilter = nativeStatus.YFilter
    nativeStatus.EntityData.YangName = "native-status"
    nativeStatus.EntityData.BundleName = "cisco_ios_xr"
    nativeStatus.EntityData.ParentYangName = "ipv4-flex-route"
    nativeStatus.EntityData.SegmentPath = "native-status"
    nativeStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/" + nativeStatus.EntityData.SegmentPath
    nativeStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nativeStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nativeStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nativeStatus.EntityData.Children = types.NewOrderedMap()
    nativeStatus.EntityData.Children.Append("native-details", types.YChild{"NativeDetails", &nativeStatus.NativeDetails})
    nativeStatus.EntityData.Leafs = types.NewOrderedMap()
    nativeStatus.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", nativeStatus.IsValid})

    nativeStatus.EntityData.YListKeys = []string {}

    return &(nativeStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails
// Details of the native route
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Relative importance of the prefix. The type is IsisPrefixPriority.
    Priority interface{}

    // Prefix local label for SR-MPLS. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}

    // Primary paths to prefix.
    Primary Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary

    // Backup paths to prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup.
    Backup []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails) GetEntityData() *types.CommonEntityData {
    nativeDetails.EntityData.YFilter = nativeDetails.YFilter
    nativeDetails.EntityData.YangName = "native-details"
    nativeDetails.EntityData.BundleName = "cisco_ios_xr"
    nativeDetails.EntityData.ParentYangName = "native-status"
    nativeDetails.EntityData.SegmentPath = "native-details"
    nativeDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/" + nativeDetails.EntityData.SegmentPath
    nativeDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nativeDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nativeDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nativeDetails.EntityData.Children = types.NewOrderedMap()
    nativeDetails.EntityData.Children.Append("primary", types.YChild{"Primary", &nativeDetails.Primary})
    nativeDetails.EntityData.Children.Append("backup", types.YChild{"Backup", nil})
    for i := range nativeDetails.Backup {
        types.SetYListKey(nativeDetails.Backup[i], i)
        nativeDetails.EntityData.Children.Append(types.GetSegmentPath(nativeDetails.Backup[i]), types.YChild{"Backup", nativeDetails.Backup[i]})
    }
    nativeDetails.EntityData.Leafs = types.NewOrderedMap()
    nativeDetails.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", nativeDetails.Priority})
    nativeDetails.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", nativeDetails.LocalLabel})

    nativeDetails.EntityData.YListKeys = []string {}

    return &(nativeDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary
// Primary paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths.
    Paths []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop.
    UcmpNextHop []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath.
    MulticastPath []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath.
    SrtePath []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath.
    ExplicitPath []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Source.
    Source []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource.
    MulticastSource []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary) GetEntityData() *types.CommonEntityData {
    primary.EntityData.YFilter = primary.YFilter
    primary.EntityData.YangName = "primary"
    primary.EntityData.BundleName = "cisco_ios_xr"
    primary.EntityData.ParentYangName = "native-details"
    primary.EntityData.SegmentPath = "primary"
    primary.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/" + primary.EntityData.SegmentPath
    primary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    primary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    primary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    primary.EntityData.Children = types.NewOrderedMap()
    primary.EntityData.Children.Append("paths", types.YChild{"Paths", nil})
    for i := range primary.Paths {
        types.SetYListKey(primary.Paths[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.Paths[i]), types.YChild{"Paths", primary.Paths[i]})
    }
    primary.EntityData.Children.Append("ucmp-next-hop", types.YChild{"UcmpNextHop", nil})
    for i := range primary.UcmpNextHop {
        types.SetYListKey(primary.UcmpNextHop[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.UcmpNextHop[i]), types.YChild{"UcmpNextHop", primary.UcmpNextHop[i]})
    }
    primary.EntityData.Children.Append("multicast-path", types.YChild{"MulticastPath", nil})
    for i := range primary.MulticastPath {
        types.SetYListKey(primary.MulticastPath[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.MulticastPath[i]), types.YChild{"MulticastPath", primary.MulticastPath[i]})
    }
    primary.EntityData.Children.Append("srte-path", types.YChild{"SrtePath", nil})
    for i := range primary.SrtePath {
        types.SetYListKey(primary.SrtePath[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.SrtePath[i]), types.YChild{"SrtePath", primary.SrtePath[i]})
    }
    primary.EntityData.Children.Append("explicit-path", types.YChild{"ExplicitPath", nil})
    for i := range primary.ExplicitPath {
        types.SetYListKey(primary.ExplicitPath[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.ExplicitPath[i]), types.YChild{"ExplicitPath", primary.ExplicitPath[i]})
    }
    primary.EntityData.Children.Append("source", types.YChild{"Source", nil})
    for i := range primary.Source {
        types.SetYListKey(primary.Source[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.Source[i]), types.YChild{"Source", primary.Source[i]})
    }
    primary.EntityData.Children.Append("multicast-source", types.YChild{"MulticastSource", nil})
    for i := range primary.MulticastSource {
        types.SetYListKey(primary.MulticastSource[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.MulticastSource[i]), types.YChild{"MulticastSource", primary.MulticastSource[i]})
    }
    primary.EntityData.Leafs = types.NewOrderedMap()
    primary.EntityData.Leafs.Append("origin", types.YLeaf{"Origin", primary.Origin})
    primary.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", primary.Metric})
    primary.EntityData.Leafs.Append("multicast-metric", types.YLeaf{"MulticastMetric", primary.MulticastMetric})
    primary.EntityData.Leafs.Append("is-external-metric", types.YLeaf{"IsExternalMetric", primary.IsExternalMetric})
    primary.EntityData.Leafs.Append("administrative-distance", types.YLeaf{"AdministrativeDistance", primary.AdministrativeDistance})

    primary.EntityData.YListKeys = []string {}

    return &(primary.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths_Nnh
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "primary"
    paths.EntityData.SegmentPath = "paths" + types.AddNoKeyToken(paths)
    paths.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/" + paths.EntityData.SegmentPath
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = types.NewOrderedMap()
    paths.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &paths.FrrBackup})
    paths.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range paths.UloopExplicit {
        types.SetYListKey(paths.UloopExplicit[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.UloopExplicit[i]), types.YChild{"UloopExplicit", paths.UloopExplicit[i]})
    }
    paths.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range paths.Nnh {
        types.SetYListKey(paths.Nnh[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.Nnh[i]), types.YChild{"Nnh", paths.Nnh[i]})
    }
    paths.EntityData.Leafs = types.NewOrderedMap()
    paths.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", paths.NeighborId})
    paths.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", paths.EgressInterface})
    paths.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", paths.NeighborAddress})
    paths.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", paths.NeighborSnpa})
    paths.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", paths.Tag})
    paths.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", paths.TunnelInterface})
    paths.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", paths.SegmentRoutingSidValue})
    paths.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", paths.Weight})
    paths.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", paths.IsTeTunnelInterface})
    paths.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", paths.IsSrExcludeTunnelInterface})
    paths.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", paths.OutgoingLabel})

    paths.EntityData.YListKeys = []string {}

    return &(paths.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "paths"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/paths/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/paths/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/paths/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "paths"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/paths/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Paths_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "paths"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/paths/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetEntityData() *types.CommonEntityData {
    ucmpNextHop.EntityData.YFilter = ucmpNextHop.YFilter
    ucmpNextHop.EntityData.YangName = "ucmp-next-hop"
    ucmpNextHop.EntityData.BundleName = "cisco_ios_xr"
    ucmpNextHop.EntityData.ParentYangName = "primary"
    ucmpNextHop.EntityData.SegmentPath = "ucmp-next-hop" + types.AddNoKeyToken(ucmpNextHop)
    ucmpNextHop.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/" + ucmpNextHop.EntityData.SegmentPath
    ucmpNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ucmpNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ucmpNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ucmpNextHop.EntityData.Children = types.NewOrderedMap()
    ucmpNextHop.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &ucmpNextHop.FrrBackup})
    ucmpNextHop.EntityData.Leafs = types.NewOrderedMap()
    ucmpNextHop.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", ucmpNextHop.NeighborId})
    ucmpNextHop.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", ucmpNextHop.EgressInterface})
    ucmpNextHop.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", ucmpNextHop.NeighborAddress})
    ucmpNextHop.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", ucmpNextHop.NeighborSnpa})
    ucmpNextHop.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", ucmpNextHop.Tag})
    ucmpNextHop.EntityData.Leafs.Append("total-ucmp-distance", types.YLeaf{"TotalUcmpDistance", ucmpNextHop.TotalUcmpDistance})
    ucmpNextHop.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", ucmpNextHop.SegmentRoutingSidValue})
    ucmpNextHop.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", ucmpNextHop.Weight})
    ucmpNextHop.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", ucmpNextHop.IsTeTunnelInterface})
    ucmpNextHop.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", ucmpNextHop.IsSrExcludeTunnelInterface})
    ucmpNextHop.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", ucmpNextHop.OutgoingLabel})

    ucmpNextHop.EntityData.YListKeys = []string {}

    return &(ucmpNextHop.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "ucmp-next-hop"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/ucmp-next-hop/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/ucmp-next-hop/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/ucmp-next-hop/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath) GetEntityData() *types.CommonEntityData {
    multicastPath.EntityData.YFilter = multicastPath.YFilter
    multicastPath.EntityData.YangName = "multicast-path"
    multicastPath.EntityData.BundleName = "cisco_ios_xr"
    multicastPath.EntityData.ParentYangName = "primary"
    multicastPath.EntityData.SegmentPath = "multicast-path" + types.AddNoKeyToken(multicastPath)
    multicastPath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/" + multicastPath.EntityData.SegmentPath
    multicastPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastPath.EntityData.Children = types.NewOrderedMap()
    multicastPath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &multicastPath.FrrBackup})
    multicastPath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range multicastPath.UloopExplicit {
        types.SetYListKey(multicastPath.UloopExplicit[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.UloopExplicit[i]), types.YChild{"UloopExplicit", multicastPath.UloopExplicit[i]})
    }
    multicastPath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range multicastPath.Nnh {
        types.SetYListKey(multicastPath.Nnh[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.Nnh[i]), types.YChild{"Nnh", multicastPath.Nnh[i]})
    }
    multicastPath.EntityData.Leafs = types.NewOrderedMap()
    multicastPath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", multicastPath.NeighborId})
    multicastPath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", multicastPath.EgressInterface})
    multicastPath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", multicastPath.NeighborAddress})
    multicastPath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", multicastPath.NeighborSnpa})
    multicastPath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", multicastPath.Tag})
    multicastPath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", multicastPath.TunnelInterface})
    multicastPath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", multicastPath.SegmentRoutingSidValue})
    multicastPath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", multicastPath.Weight})
    multicastPath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", multicastPath.IsTeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", multicastPath.IsSrExcludeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", multicastPath.OutgoingLabel})

    multicastPath.EntityData.YListKeys = []string {}

    return &(multicastPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "multicast-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/multicast-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/multicast-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/multicast-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "multicast-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/multicast-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "multicast-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/multicast-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_Nnh
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath) GetEntityData() *types.CommonEntityData {
    srtePath.EntityData.YFilter = srtePath.YFilter
    srtePath.EntityData.YangName = "srte-path"
    srtePath.EntityData.BundleName = "cisco_ios_xr"
    srtePath.EntityData.ParentYangName = "primary"
    srtePath.EntityData.SegmentPath = "srte-path" + types.AddNoKeyToken(srtePath)
    srtePath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/" + srtePath.EntityData.SegmentPath
    srtePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srtePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srtePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srtePath.EntityData.Children = types.NewOrderedMap()
    srtePath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &srtePath.FrrBackup})
    srtePath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range srtePath.UloopExplicit {
        types.SetYListKey(srtePath.UloopExplicit[i], i)
        srtePath.EntityData.Children.Append(types.GetSegmentPath(srtePath.UloopExplicit[i]), types.YChild{"UloopExplicit", srtePath.UloopExplicit[i]})
    }
    srtePath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range srtePath.Nnh {
        types.SetYListKey(srtePath.Nnh[i], i)
        srtePath.EntityData.Children.Append(types.GetSegmentPath(srtePath.Nnh[i]), types.YChild{"Nnh", srtePath.Nnh[i]})
    }
    srtePath.EntityData.Leafs = types.NewOrderedMap()
    srtePath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", srtePath.NeighborId})
    srtePath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", srtePath.EgressInterface})
    srtePath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", srtePath.NeighborAddress})
    srtePath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", srtePath.NeighborSnpa})
    srtePath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", srtePath.Tag})
    srtePath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", srtePath.TunnelInterface})
    srtePath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", srtePath.SegmentRoutingSidValue})
    srtePath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", srtePath.Weight})
    srtePath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", srtePath.IsTeTunnelInterface})
    srtePath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", srtePath.IsSrExcludeTunnelInterface})
    srtePath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", srtePath.OutgoingLabel})

    srtePath.EntityData.YListKeys = []string {}

    return &(srtePath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "srte-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/srte-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/srte-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/srte-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "srte-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/srte-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_SrtePath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "srte-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/srte-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath) GetEntityData() *types.CommonEntityData {
    explicitPath.EntityData.YFilter = explicitPath.YFilter
    explicitPath.EntityData.YangName = "explicit-path"
    explicitPath.EntityData.BundleName = "cisco_ios_xr"
    explicitPath.EntityData.ParentYangName = "primary"
    explicitPath.EntityData.SegmentPath = "explicit-path" + types.AddNoKeyToken(explicitPath)
    explicitPath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/" + explicitPath.EntityData.SegmentPath
    explicitPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitPath.EntityData.Children = types.NewOrderedMap()
    explicitPath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &explicitPath.FrrBackup})
    explicitPath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range explicitPath.UloopExplicit {
        types.SetYListKey(explicitPath.UloopExplicit[i], i)
        explicitPath.EntityData.Children.Append(types.GetSegmentPath(explicitPath.UloopExplicit[i]), types.YChild{"UloopExplicit", explicitPath.UloopExplicit[i]})
    }
    explicitPath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range explicitPath.Nnh {
        types.SetYListKey(explicitPath.Nnh[i], i)
        explicitPath.EntityData.Children.Append(types.GetSegmentPath(explicitPath.Nnh[i]), types.YChild{"Nnh", explicitPath.Nnh[i]})
    }
    explicitPath.EntityData.Leafs = types.NewOrderedMap()
    explicitPath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", explicitPath.NeighborId})
    explicitPath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", explicitPath.EgressInterface})
    explicitPath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", explicitPath.NeighborAddress})
    explicitPath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", explicitPath.NeighborSnpa})
    explicitPath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", explicitPath.Tag})
    explicitPath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", explicitPath.TunnelInterface})
    explicitPath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", explicitPath.SegmentRoutingSidValue})
    explicitPath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", explicitPath.Weight})
    explicitPath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", explicitPath.IsTeTunnelInterface})
    explicitPath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", explicitPath.IsSrExcludeTunnelInterface})
    explicitPath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", explicitPath.OutgoingLabel})

    explicitPath.EntityData.YListKeys = []string {}

    return &(explicitPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "explicit-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/explicit-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/explicit-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/explicit-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "explicit-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/explicit-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "explicit-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/explicit-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Source_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Source_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "primary"
    source.EntityData.SegmentPath = "source" + types.AddNoKeyToken(source)
    source.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/" + source.EntityData.SegmentPath
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = types.NewOrderedMap()
    source.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range source.Tags {
        types.SetYListKey(source.Tags[i], i)
        source.EntityData.Children.Append(types.GetSegmentPath(source.Tags[i]), types.YChild{"Tags", source.Tags[i]})
    }
    source.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range source.NodalSid {
        types.SetYListKey(source.NodalSid[i], i)
        source.EntityData.Children.Append(types.GetSegmentPath(source.NodalSid[i]), types.YChild{"NodalSid", source.NodalSid[i]})
    }
    source.EntityData.Leafs = types.NewOrderedMap()
    source.EntityData.Leafs.Append("source-lsp-id", types.YLeaf{"SourceLspId", source.SourceLspId})
    source.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", source.SourceAddress})

    source.EntityData.YListKeys = []string {}

    return &(source.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Source_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Source_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "source"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/source/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Source_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "source"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/source/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource) GetEntityData() *types.CommonEntityData {
    multicastSource.EntityData.YFilter = multicastSource.YFilter
    multicastSource.EntityData.YangName = "multicast-source"
    multicastSource.EntityData.BundleName = "cisco_ios_xr"
    multicastSource.EntityData.ParentYangName = "primary"
    multicastSource.EntityData.SegmentPath = "multicast-source" + types.AddNoKeyToken(multicastSource)
    multicastSource.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/" + multicastSource.EntityData.SegmentPath
    multicastSource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastSource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastSource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastSource.EntityData.Children = types.NewOrderedMap()
    multicastSource.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range multicastSource.Tags {
        types.SetYListKey(multicastSource.Tags[i], i)
        multicastSource.EntityData.Children.Append(types.GetSegmentPath(multicastSource.Tags[i]), types.YChild{"Tags", multicastSource.Tags[i]})
    }
    multicastSource.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range multicastSource.NodalSid {
        types.SetYListKey(multicastSource.NodalSid[i], i)
        multicastSource.EntityData.Children.Append(types.GetSegmentPath(multicastSource.NodalSid[i]), types.YChild{"NodalSid", multicastSource.NodalSid[i]})
    }
    multicastSource.EntityData.Leafs = types.NewOrderedMap()
    multicastSource.EntityData.Leafs.Append("source-lsp-id", types.YLeaf{"SourceLspId", multicastSource.SourceLspId})
    multicastSource.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", multicastSource.SourceAddress})

    multicastSource.EntityData.YListKeys = []string {}

    return &(multicastSource.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "multicast-source"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/multicast-source/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "multicast-source"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/primary/multicast-source/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup
// Backup paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths.
    Paths []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop.
    UcmpNextHop []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath.
    MulticastPath []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath.
    SrtePath []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath.
    ExplicitPath []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Source.
    Source []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource.
    MulticastSource []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup) GetEntityData() *types.CommonEntityData {
    backup.EntityData.YFilter = backup.YFilter
    backup.EntityData.YangName = "backup"
    backup.EntityData.BundleName = "cisco_ios_xr"
    backup.EntityData.ParentYangName = "native-details"
    backup.EntityData.SegmentPath = "backup" + types.AddNoKeyToken(backup)
    backup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/" + backup.EntityData.SegmentPath
    backup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backup.EntityData.Children = types.NewOrderedMap()
    backup.EntityData.Children.Append("paths", types.YChild{"Paths", nil})
    for i := range backup.Paths {
        types.SetYListKey(backup.Paths[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.Paths[i]), types.YChild{"Paths", backup.Paths[i]})
    }
    backup.EntityData.Children.Append("ucmp-next-hop", types.YChild{"UcmpNextHop", nil})
    for i := range backup.UcmpNextHop {
        types.SetYListKey(backup.UcmpNextHop[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.UcmpNextHop[i]), types.YChild{"UcmpNextHop", backup.UcmpNextHop[i]})
    }
    backup.EntityData.Children.Append("multicast-path", types.YChild{"MulticastPath", nil})
    for i := range backup.MulticastPath {
        types.SetYListKey(backup.MulticastPath[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.MulticastPath[i]), types.YChild{"MulticastPath", backup.MulticastPath[i]})
    }
    backup.EntityData.Children.Append("srte-path", types.YChild{"SrtePath", nil})
    for i := range backup.SrtePath {
        types.SetYListKey(backup.SrtePath[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.SrtePath[i]), types.YChild{"SrtePath", backup.SrtePath[i]})
    }
    backup.EntityData.Children.Append("explicit-path", types.YChild{"ExplicitPath", nil})
    for i := range backup.ExplicitPath {
        types.SetYListKey(backup.ExplicitPath[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.ExplicitPath[i]), types.YChild{"ExplicitPath", backup.ExplicitPath[i]})
    }
    backup.EntityData.Children.Append("source", types.YChild{"Source", nil})
    for i := range backup.Source {
        types.SetYListKey(backup.Source[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.Source[i]), types.YChild{"Source", backup.Source[i]})
    }
    backup.EntityData.Children.Append("multicast-source", types.YChild{"MulticastSource", nil})
    for i := range backup.MulticastSource {
        types.SetYListKey(backup.MulticastSource[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.MulticastSource[i]), types.YChild{"MulticastSource", backup.MulticastSource[i]})
    }
    backup.EntityData.Leafs = types.NewOrderedMap()
    backup.EntityData.Leafs.Append("origin", types.YLeaf{"Origin", backup.Origin})
    backup.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", backup.Metric})
    backup.EntityData.Leafs.Append("multicast-metric", types.YLeaf{"MulticastMetric", backup.MulticastMetric})
    backup.EntityData.Leafs.Append("is-external-metric", types.YLeaf{"IsExternalMetric", backup.IsExternalMetric})
    backup.EntityData.Leafs.Append("administrative-distance", types.YLeaf{"AdministrativeDistance", backup.AdministrativeDistance})

    backup.EntityData.YListKeys = []string {}

    return &(backup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths_Nnh
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "backup"
    paths.EntityData.SegmentPath = "paths" + types.AddNoKeyToken(paths)
    paths.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/" + paths.EntityData.SegmentPath
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = types.NewOrderedMap()
    paths.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &paths.FrrBackup})
    paths.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range paths.UloopExplicit {
        types.SetYListKey(paths.UloopExplicit[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.UloopExplicit[i]), types.YChild{"UloopExplicit", paths.UloopExplicit[i]})
    }
    paths.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range paths.Nnh {
        types.SetYListKey(paths.Nnh[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.Nnh[i]), types.YChild{"Nnh", paths.Nnh[i]})
    }
    paths.EntityData.Leafs = types.NewOrderedMap()
    paths.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", paths.NeighborId})
    paths.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", paths.EgressInterface})
    paths.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", paths.NeighborAddress})
    paths.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", paths.NeighborSnpa})
    paths.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", paths.Tag})
    paths.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", paths.TunnelInterface})
    paths.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", paths.SegmentRoutingSidValue})
    paths.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", paths.Weight})
    paths.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", paths.IsTeTunnelInterface})
    paths.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", paths.IsSrExcludeTunnelInterface})
    paths.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", paths.OutgoingLabel})

    paths.EntityData.YListKeys = []string {}

    return &(paths.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "paths"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/paths/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/paths/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/paths/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "paths"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/paths/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Paths_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "paths"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/paths/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetEntityData() *types.CommonEntityData {
    ucmpNextHop.EntityData.YFilter = ucmpNextHop.YFilter
    ucmpNextHop.EntityData.YangName = "ucmp-next-hop"
    ucmpNextHop.EntityData.BundleName = "cisco_ios_xr"
    ucmpNextHop.EntityData.ParentYangName = "backup"
    ucmpNextHop.EntityData.SegmentPath = "ucmp-next-hop" + types.AddNoKeyToken(ucmpNextHop)
    ucmpNextHop.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/" + ucmpNextHop.EntityData.SegmentPath
    ucmpNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ucmpNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ucmpNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ucmpNextHop.EntityData.Children = types.NewOrderedMap()
    ucmpNextHop.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &ucmpNextHop.FrrBackup})
    ucmpNextHop.EntityData.Leafs = types.NewOrderedMap()
    ucmpNextHop.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", ucmpNextHop.NeighborId})
    ucmpNextHop.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", ucmpNextHop.EgressInterface})
    ucmpNextHop.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", ucmpNextHop.NeighborAddress})
    ucmpNextHop.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", ucmpNextHop.NeighborSnpa})
    ucmpNextHop.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", ucmpNextHop.Tag})
    ucmpNextHop.EntityData.Leafs.Append("total-ucmp-distance", types.YLeaf{"TotalUcmpDistance", ucmpNextHop.TotalUcmpDistance})
    ucmpNextHop.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", ucmpNextHop.SegmentRoutingSidValue})
    ucmpNextHop.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", ucmpNextHop.Weight})
    ucmpNextHop.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", ucmpNextHop.IsTeTunnelInterface})
    ucmpNextHop.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", ucmpNextHop.IsSrExcludeTunnelInterface})
    ucmpNextHop.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", ucmpNextHop.OutgoingLabel})

    ucmpNextHop.EntityData.YListKeys = []string {}

    return &(ucmpNextHop.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "ucmp-next-hop"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/ucmp-next-hop/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/ucmp-next-hop/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/ucmp-next-hop/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath) GetEntityData() *types.CommonEntityData {
    multicastPath.EntityData.YFilter = multicastPath.YFilter
    multicastPath.EntityData.YangName = "multicast-path"
    multicastPath.EntityData.BundleName = "cisco_ios_xr"
    multicastPath.EntityData.ParentYangName = "backup"
    multicastPath.EntityData.SegmentPath = "multicast-path" + types.AddNoKeyToken(multicastPath)
    multicastPath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/" + multicastPath.EntityData.SegmentPath
    multicastPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastPath.EntityData.Children = types.NewOrderedMap()
    multicastPath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &multicastPath.FrrBackup})
    multicastPath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range multicastPath.UloopExplicit {
        types.SetYListKey(multicastPath.UloopExplicit[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.UloopExplicit[i]), types.YChild{"UloopExplicit", multicastPath.UloopExplicit[i]})
    }
    multicastPath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range multicastPath.Nnh {
        types.SetYListKey(multicastPath.Nnh[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.Nnh[i]), types.YChild{"Nnh", multicastPath.Nnh[i]})
    }
    multicastPath.EntityData.Leafs = types.NewOrderedMap()
    multicastPath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", multicastPath.NeighborId})
    multicastPath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", multicastPath.EgressInterface})
    multicastPath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", multicastPath.NeighborAddress})
    multicastPath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", multicastPath.NeighborSnpa})
    multicastPath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", multicastPath.Tag})
    multicastPath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", multicastPath.TunnelInterface})
    multicastPath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", multicastPath.SegmentRoutingSidValue})
    multicastPath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", multicastPath.Weight})
    multicastPath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", multicastPath.IsTeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", multicastPath.IsSrExcludeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", multicastPath.OutgoingLabel})

    multicastPath.EntityData.YListKeys = []string {}

    return &(multicastPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "multicast-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/multicast-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/multicast-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/multicast-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "multicast-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/multicast-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "multicast-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/multicast-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_Nnh
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath) GetEntityData() *types.CommonEntityData {
    srtePath.EntityData.YFilter = srtePath.YFilter
    srtePath.EntityData.YangName = "srte-path"
    srtePath.EntityData.BundleName = "cisco_ios_xr"
    srtePath.EntityData.ParentYangName = "backup"
    srtePath.EntityData.SegmentPath = "srte-path" + types.AddNoKeyToken(srtePath)
    srtePath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/" + srtePath.EntityData.SegmentPath
    srtePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srtePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srtePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srtePath.EntityData.Children = types.NewOrderedMap()
    srtePath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &srtePath.FrrBackup})
    srtePath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range srtePath.UloopExplicit {
        types.SetYListKey(srtePath.UloopExplicit[i], i)
        srtePath.EntityData.Children.Append(types.GetSegmentPath(srtePath.UloopExplicit[i]), types.YChild{"UloopExplicit", srtePath.UloopExplicit[i]})
    }
    srtePath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range srtePath.Nnh {
        types.SetYListKey(srtePath.Nnh[i], i)
        srtePath.EntityData.Children.Append(types.GetSegmentPath(srtePath.Nnh[i]), types.YChild{"Nnh", srtePath.Nnh[i]})
    }
    srtePath.EntityData.Leafs = types.NewOrderedMap()
    srtePath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", srtePath.NeighborId})
    srtePath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", srtePath.EgressInterface})
    srtePath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", srtePath.NeighborAddress})
    srtePath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", srtePath.NeighborSnpa})
    srtePath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", srtePath.Tag})
    srtePath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", srtePath.TunnelInterface})
    srtePath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", srtePath.SegmentRoutingSidValue})
    srtePath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", srtePath.Weight})
    srtePath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", srtePath.IsTeTunnelInterface})
    srtePath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", srtePath.IsSrExcludeTunnelInterface})
    srtePath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", srtePath.OutgoingLabel})

    srtePath.EntityData.YListKeys = []string {}

    return &(srtePath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "srte-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/srte-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/srte-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/srte-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "srte-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/srte-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_SrtePath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "srte-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/srte-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath) GetEntityData() *types.CommonEntityData {
    explicitPath.EntityData.YFilter = explicitPath.YFilter
    explicitPath.EntityData.YangName = "explicit-path"
    explicitPath.EntityData.BundleName = "cisco_ios_xr"
    explicitPath.EntityData.ParentYangName = "backup"
    explicitPath.EntityData.SegmentPath = "explicit-path" + types.AddNoKeyToken(explicitPath)
    explicitPath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/" + explicitPath.EntityData.SegmentPath
    explicitPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitPath.EntityData.Children = types.NewOrderedMap()
    explicitPath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &explicitPath.FrrBackup})
    explicitPath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range explicitPath.UloopExplicit {
        types.SetYListKey(explicitPath.UloopExplicit[i], i)
        explicitPath.EntityData.Children.Append(types.GetSegmentPath(explicitPath.UloopExplicit[i]), types.YChild{"UloopExplicit", explicitPath.UloopExplicit[i]})
    }
    explicitPath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range explicitPath.Nnh {
        types.SetYListKey(explicitPath.Nnh[i], i)
        explicitPath.EntityData.Children.Append(types.GetSegmentPath(explicitPath.Nnh[i]), types.YChild{"Nnh", explicitPath.Nnh[i]})
    }
    explicitPath.EntityData.Leafs = types.NewOrderedMap()
    explicitPath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", explicitPath.NeighborId})
    explicitPath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", explicitPath.EgressInterface})
    explicitPath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", explicitPath.NeighborAddress})
    explicitPath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", explicitPath.NeighborSnpa})
    explicitPath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", explicitPath.Tag})
    explicitPath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", explicitPath.TunnelInterface})
    explicitPath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", explicitPath.SegmentRoutingSidValue})
    explicitPath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", explicitPath.Weight})
    explicitPath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", explicitPath.IsTeTunnelInterface})
    explicitPath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", explicitPath.IsSrExcludeTunnelInterface})
    explicitPath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", explicitPath.OutgoingLabel})

    explicitPath.EntityData.YListKeys = []string {}

    return &(explicitPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "explicit-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/explicit-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/explicit-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/explicit-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "explicit-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/explicit-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "explicit-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/explicit-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Source_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Source_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "backup"
    source.EntityData.SegmentPath = "source" + types.AddNoKeyToken(source)
    source.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/" + source.EntityData.SegmentPath
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = types.NewOrderedMap()
    source.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range source.Tags {
        types.SetYListKey(source.Tags[i], i)
        source.EntityData.Children.Append(types.GetSegmentPath(source.Tags[i]), types.YChild{"Tags", source.Tags[i]})
    }
    source.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range source.NodalSid {
        types.SetYListKey(source.NodalSid[i], i)
        source.EntityData.Children.Append(types.GetSegmentPath(source.NodalSid[i]), types.YChild{"NodalSid", source.NodalSid[i]})
    }
    source.EntityData.Leafs = types.NewOrderedMap()
    source.EntityData.Leafs.Append("source-lsp-id", types.YLeaf{"SourceLspId", source.SourceLspId})
    source.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", source.SourceAddress})

    source.EntityData.YListKeys = []string {}

    return &(source.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Source_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Source_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "source"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/source/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Source_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "source"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/source/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource) GetEntityData() *types.CommonEntityData {
    multicastSource.EntityData.YFilter = multicastSource.YFilter
    multicastSource.EntityData.YangName = "multicast-source"
    multicastSource.EntityData.BundleName = "cisco_ios_xr"
    multicastSource.EntityData.ParentYangName = "backup"
    multicastSource.EntityData.SegmentPath = "multicast-source" + types.AddNoKeyToken(multicastSource)
    multicastSource.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/" + multicastSource.EntityData.SegmentPath
    multicastSource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastSource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastSource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastSource.EntityData.Children = types.NewOrderedMap()
    multicastSource.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range multicastSource.Tags {
        types.SetYListKey(multicastSource.Tags[i], i)
        multicastSource.EntityData.Children.Append(types.GetSegmentPath(multicastSource.Tags[i]), types.YChild{"Tags", multicastSource.Tags[i]})
    }
    multicastSource.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range multicastSource.NodalSid {
        types.SetYListKey(multicastSource.NodalSid[i], i)
        multicastSource.EntityData.Children.Append(types.GetSegmentPath(multicastSource.NodalSid[i]), types.YChild{"NodalSid", multicastSource.NodalSid[i]})
    }
    multicastSource.EntityData.Leafs = types.NewOrderedMap()
    multicastSource.EntityData.Leafs.Append("source-lsp-id", types.YLeaf{"SourceLspId", multicastSource.SourceLspId})
    multicastSource.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", multicastSource.SourceAddress})

    multicastSource.EntityData.YListKeys = []string {}

    return &(multicastSource.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "multicast-source"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/multicast-source/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "multicast-source"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/native-status/native-details/backup/multicast-source/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_PerLevelAdvertisingDetail
// Per level details of how the local system
// advertises the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_PerLevelAdvertisingDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Level in which the prefix is advertised. The type is IsisLevel.
    Level interface{}

    // The origin of the advertisement. The type is IsisShRouteAdvOrigin.
    AdvertisingOrigin interface{}

    // Metric with which the prefix is advertised. The type is interface{} with
    // range: 0..4294967295.
    Metric interface{}

    // Has the prefix been propagated from another level?. The type is bool.
    IsPropagated interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Is the prefix external to the IS-IS domain?. The type is bool.
    IsExternalReachability interface{}

    // Is the up/down bit set?. The type is bool.
    IsInterarea interface{}

    // Status of summarization for the prefix.
    SummarizationStatus Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_PerLevelAdvertisingDetail_SummarizationStatus

    // Tags associated with the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_PerLevelAdvertisingDetail_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_PerLevelAdvertisingDetail_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_PerLevelAdvertisingDetail_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_PerLevelAdvertisingDetail_NodalSid
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_PerLevelAdvertisingDetail) GetEntityData() *types.CommonEntityData {
    perLevelAdvertisingDetail.EntityData.YFilter = perLevelAdvertisingDetail.YFilter
    perLevelAdvertisingDetail.EntityData.YangName = "per-level-advertising-detail"
    perLevelAdvertisingDetail.EntityData.BundleName = "cisco_ios_xr"
    perLevelAdvertisingDetail.EntityData.ParentYangName = "ipv4-flex-route"
    perLevelAdvertisingDetail.EntityData.SegmentPath = "per-level-advertising-detail" + types.AddNoKeyToken(perLevelAdvertisingDetail)
    perLevelAdvertisingDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/" + perLevelAdvertisingDetail.EntityData.SegmentPath
    perLevelAdvertisingDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perLevelAdvertisingDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perLevelAdvertisingDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perLevelAdvertisingDetail.EntityData.Children = types.NewOrderedMap()
    perLevelAdvertisingDetail.EntityData.Children.Append("summarization-status", types.YChild{"SummarizationStatus", &perLevelAdvertisingDetail.SummarizationStatus})
    perLevelAdvertisingDetail.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range perLevelAdvertisingDetail.Tags {
        types.SetYListKey(perLevelAdvertisingDetail.Tags[i], i)
        perLevelAdvertisingDetail.EntityData.Children.Append(types.GetSegmentPath(perLevelAdvertisingDetail.Tags[i]), types.YChild{"Tags", perLevelAdvertisingDetail.Tags[i]})
    }
    perLevelAdvertisingDetail.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range perLevelAdvertisingDetail.NodalSid {
        types.SetYListKey(perLevelAdvertisingDetail.NodalSid[i], i)
        perLevelAdvertisingDetail.EntityData.Children.Append(types.GetSegmentPath(perLevelAdvertisingDetail.NodalSid[i]), types.YChild{"NodalSid", perLevelAdvertisingDetail.NodalSid[i]})
    }
    perLevelAdvertisingDetail.EntityData.Leafs = types.NewOrderedMap()
    perLevelAdvertisingDetail.EntityData.Leafs.Append("level", types.YLeaf{"Level", perLevelAdvertisingDetail.Level})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("advertising-origin", types.YLeaf{"AdvertisingOrigin", perLevelAdvertisingDetail.AdvertisingOrigin})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", perLevelAdvertisingDetail.Metric})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("is-propagated", types.YLeaf{"IsPropagated", perLevelAdvertisingDetail.IsPropagated})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("is-external-metric", types.YLeaf{"IsExternalMetric", perLevelAdvertisingDetail.IsExternalMetric})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("is-external-reachability", types.YLeaf{"IsExternalReachability", perLevelAdvertisingDetail.IsExternalReachability})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("is-interarea", types.YLeaf{"IsInterarea", perLevelAdvertisingDetail.IsInterarea})

    perLevelAdvertisingDetail.EntityData.YListKeys = []string {}

    return &(perLevelAdvertisingDetail.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_PerLevelAdvertisingDetail_SummarizationStatus
// Status of summarization for the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_PerLevelAdvertisingDetail_SummarizationStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Summarizing Prefix.
    SummaryPrefix Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_PerLevelAdvertisingDetail_SummarizationStatus) GetEntityData() *types.CommonEntityData {
    summarizationStatus.EntityData.YFilter = summarizationStatus.YFilter
    summarizationStatus.EntityData.YangName = "summarization-status"
    summarizationStatus.EntityData.BundleName = "cisco_ios_xr"
    summarizationStatus.EntityData.ParentYangName = "per-level-advertising-detail"
    summarizationStatus.EntityData.SegmentPath = "summarization-status"
    summarizationStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/per-level-advertising-detail/" + summarizationStatus.EntityData.SegmentPath
    summarizationStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summarizationStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summarizationStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summarizationStatus.EntityData.Children = types.NewOrderedMap()
    summarizationStatus.EntityData.Children.Append("summary-prefix", types.YChild{"SummaryPrefix", &summarizationStatus.SummaryPrefix})
    summarizationStatus.EntityData.Leafs = types.NewOrderedMap()
    summarizationStatus.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", summarizationStatus.IsValid})

    summarizationStatus.EntityData.YListKeys = []string {}

    return &(summarizationStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
// Summarizing Prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetEntityData() *types.CommonEntityData {
    summaryPrefix.EntityData.YFilter = summaryPrefix.YFilter
    summaryPrefix.EntityData.YangName = "summary-prefix"
    summaryPrefix.EntityData.BundleName = "cisco_ios_xr"
    summaryPrefix.EntityData.ParentYangName = "summarization-status"
    summaryPrefix.EntityData.SegmentPath = "summary-prefix"
    summaryPrefix.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/per-level-advertising-detail/summarization-status/" + summaryPrefix.EntityData.SegmentPath
    summaryPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryPrefix.EntityData.Children = types.NewOrderedMap()
    summaryPrefix.EntityData.Leafs = types.NewOrderedMap()
    summaryPrefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", summaryPrefix.Prefix})
    summaryPrefix.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", summaryPrefix.PrefixLength})

    summaryPrefix.EntityData.YListKeys = []string {}

    return &(summaryPrefix.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_PerLevelAdvertisingDetail_Tags
// Tags associated with the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_PerLevelAdvertisingDetail_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_PerLevelAdvertisingDetail_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "per-level-advertising-detail"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/per-level-advertising-detail/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_PerLevelAdvertisingDetail_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_PerLevelAdvertisingDetail_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4FlexRouteTables_Ipv4FlexRouteTable_Ipv4FlexRoute_PerLevelAdvertisingDetail_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "per-level-advertising-detail"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-flex-route-tables/ipv4-flex-route-table/ipv4-flex-route/per-level-advertising-detail/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes
// IPv4 local route table
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An IPv4 route known to IS-IS. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route.
    Ipv4Route []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route
}

func (ipv4Routes *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes) GetEntityData() *types.CommonEntityData {
    ipv4Routes.EntityData.YFilter = ipv4Routes.YFilter
    ipv4Routes.EntityData.YangName = "ipv4-routes"
    ipv4Routes.EntityData.BundleName = "cisco_ios_xr"
    ipv4Routes.EntityData.ParentYangName = "topology"
    ipv4Routes.EntityData.SegmentPath = "ipv4-routes"
    ipv4Routes.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/" + ipv4Routes.EntityData.SegmentPath
    ipv4Routes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Routes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Routes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Routes.EntityData.Children = types.NewOrderedMap()
    ipv4Routes.EntityData.Children.Append("ipv4-route", types.YChild{"Ipv4Route", nil})
    for i := range ipv4Routes.Ipv4Route {
        types.SetYListKey(ipv4Routes.Ipv4Route[i], i)
        ipv4Routes.EntityData.Children.Append(types.GetSegmentPath(ipv4Routes.Ipv4Route[i]), types.YChild{"Ipv4Route", ipv4Routes.Ipv4Route[i]})
    }
    ipv4Routes.EntityData.Leafs = types.NewOrderedMap()

    ipv4Routes.EntityData.YListKeys = []string {}

    return &(ipv4Routes.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route
// An IPv4 route known to IS-IS
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Status of IS-IS directly connected routes to the prefix.
    ConnectedStatus Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus

    // Status of other protocols' routes redistributed into IS-IS.
    RedistributedStatus Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus

    // Status of native IS-IS routes to the prefix.
    NativeStatus Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus

    // Per level details of how the local system advertises the prefix. The type
    // is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail.
    PerLevelAdvertisingDetail []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail
}

func (ipv4Route *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route) GetEntityData() *types.CommonEntityData {
    ipv4Route.EntityData.YFilter = ipv4Route.YFilter
    ipv4Route.EntityData.YangName = "ipv4-route"
    ipv4Route.EntityData.BundleName = "cisco_ios_xr"
    ipv4Route.EntityData.ParentYangName = "ipv4-routes"
    ipv4Route.EntityData.SegmentPath = "ipv4-route" + types.AddNoKeyToken(ipv4Route)
    ipv4Route.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/" + ipv4Route.EntityData.SegmentPath
    ipv4Route.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Route.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Route.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Route.EntityData.Children = types.NewOrderedMap()
    ipv4Route.EntityData.Children.Append("connected-status", types.YChild{"ConnectedStatus", &ipv4Route.ConnectedStatus})
    ipv4Route.EntityData.Children.Append("redistributed-status", types.YChild{"RedistributedStatus", &ipv4Route.RedistributedStatus})
    ipv4Route.EntityData.Children.Append("native-status", types.YChild{"NativeStatus", &ipv4Route.NativeStatus})
    ipv4Route.EntityData.Children.Append("per-level-advertising-detail", types.YChild{"PerLevelAdvertisingDetail", nil})
    for i := range ipv4Route.PerLevelAdvertisingDetail {
        types.SetYListKey(ipv4Route.PerLevelAdvertisingDetail[i], i)
        ipv4Route.EntityData.Children.Append(types.GetSegmentPath(ipv4Route.PerLevelAdvertisingDetail[i]), types.YChild{"PerLevelAdvertisingDetail", ipv4Route.PerLevelAdvertisingDetail[i]})
    }
    ipv4Route.EntityData.Leafs = types.NewOrderedMap()
    ipv4Route.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Route.Prefix})
    ipv4Route.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Route.PrefixLength})

    ipv4Route.EntityData.YListKeys = []string {}

    return &(ipv4Route.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus
// Status of IS-IS directly connected routes to the
// prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the directly connected prefix.
    ConnectedDetails Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails
}

func (connectedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus) GetEntityData() *types.CommonEntityData {
    connectedStatus.EntityData.YFilter = connectedStatus.YFilter
    connectedStatus.EntityData.YangName = "connected-status"
    connectedStatus.EntityData.BundleName = "cisco_ios_xr"
    connectedStatus.EntityData.ParentYangName = "ipv4-route"
    connectedStatus.EntityData.SegmentPath = "connected-status"
    connectedStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/" + connectedStatus.EntityData.SegmentPath
    connectedStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedStatus.EntityData.Children = types.NewOrderedMap()
    connectedStatus.EntityData.Children.Append("connected-details", types.YChild{"ConnectedDetails", &connectedStatus.ConnectedDetails})
    connectedStatus.EntityData.Leafs = types.NewOrderedMap()
    connectedStatus.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", connectedStatus.IsValid})

    connectedStatus.EntityData.YListKeys = []string {}

    return &(connectedStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails
// Details of the directly connected prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interfaces. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface.
    Interface []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface
}

func (connectedDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails) GetEntityData() *types.CommonEntityData {
    connectedDetails.EntityData.YFilter = connectedDetails.YFilter
    connectedDetails.EntityData.YangName = "connected-details"
    connectedDetails.EntityData.BundleName = "cisco_ios_xr"
    connectedDetails.EntityData.ParentYangName = "connected-status"
    connectedDetails.EntityData.SegmentPath = "connected-details"
    connectedDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/connected-status/" + connectedDetails.EntityData.SegmentPath
    connectedDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedDetails.EntityData.Children = types.NewOrderedMap()
    connectedDetails.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range connectedDetails.Interface {
        types.SetYListKey(connectedDetails.Interface[i], i)
        connectedDetails.EntityData.Children.Append(types.GetSegmentPath(connectedDetails.Interface[i]), types.YChild{"Interface", connectedDetails.Interface[i]})
    }
    connectedDetails.EntityData.Leafs = types.NewOrderedMap()

    connectedDetails.EntityData.YListKeys = []string {}

    return &(connectedDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface
// Interfaces
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is string.
    Entry interface{}
}

func (self *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_ConnectedStatus_ConnectedDetails_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "connected-details"
    self.EntityData.SegmentPath = "interface" + types.AddNoKeyToken(self)
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/connected-status/connected-details/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", self.Entry})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus
// Status of other protocols' routes redistributed
// into IS-IS
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Per level details of the redistributed route.
    RedistributionDetails Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails
}

func (redistributedStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus) GetEntityData() *types.CommonEntityData {
    redistributedStatus.EntityData.YFilter = redistributedStatus.YFilter
    redistributedStatus.EntityData.YangName = "redistributed-status"
    redistributedStatus.EntityData.BundleName = "cisco_ios_xr"
    redistributedStatus.EntityData.ParentYangName = "ipv4-route"
    redistributedStatus.EntityData.SegmentPath = "redistributed-status"
    redistributedStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/" + redistributedStatus.EntityData.SegmentPath
    redistributedStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributedStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributedStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributedStatus.EntityData.Children = types.NewOrderedMap()
    redistributedStatus.EntityData.Children.Append("redistribution-details", types.YChild{"RedistributionDetails", &redistributedStatus.RedistributionDetails})
    redistributedStatus.EntityData.Leafs = types.NewOrderedMap()
    redistributedStatus.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", redistributedStatus.IsValid})

    redistributedStatus.EntityData.YListKeys = []string {}

    return &(redistributedStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails
// Per level details of the redistributed route
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // isis sh route redist detail. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail.
    IsisShRouteRedistDetail []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
}

func (redistributionDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails) GetEntityData() *types.CommonEntityData {
    redistributionDetails.EntityData.YFilter = redistributionDetails.YFilter
    redistributionDetails.EntityData.YangName = "redistribution-details"
    redistributionDetails.EntityData.BundleName = "cisco_ios_xr"
    redistributionDetails.EntityData.ParentYangName = "redistributed-status"
    redistributionDetails.EntityData.SegmentPath = "redistribution-details"
    redistributionDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/redistributed-status/" + redistributionDetails.EntityData.SegmentPath
    redistributionDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributionDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributionDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributionDetails.EntityData.Children = types.NewOrderedMap()
    redistributionDetails.EntityData.Children.Append("isis-sh-route-redist-detail", types.YChild{"IsisShRouteRedistDetail", nil})
    for i := range redistributionDetails.IsisShRouteRedistDetail {
        types.SetYListKey(redistributionDetails.IsisShRouteRedistDetail[i], i)
        redistributionDetails.EntityData.Children.Append(types.GetSegmentPath(redistributionDetails.IsisShRouteRedistDetail[i]), types.YChild{"IsisShRouteRedistDetail", redistributionDetails.IsisShRouteRedistDetail[i]})
    }
    redistributionDetails.EntityData.Leafs = types.NewOrderedMap()

    redistributionDetails.EntityData.YListKeys = []string {}

    return &(redistributionDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail
// isis sh route redist detail
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Level into which the route is redistributed. The type is IsisLevel.
    Level interface{}

    // Protocol redistributing the route.
    Owner Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
}

func (isisShRouteRedistDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail) GetEntityData() *types.CommonEntityData {
    isisShRouteRedistDetail.EntityData.YFilter = isisShRouteRedistDetail.YFilter
    isisShRouteRedistDetail.EntityData.YangName = "isis-sh-route-redist-detail"
    isisShRouteRedistDetail.EntityData.BundleName = "cisco_ios_xr"
    isisShRouteRedistDetail.EntityData.ParentYangName = "redistribution-details"
    isisShRouteRedistDetail.EntityData.SegmentPath = "isis-sh-route-redist-detail" + types.AddNoKeyToken(isisShRouteRedistDetail)
    isisShRouteRedistDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/redistributed-status/redistribution-details/" + isisShRouteRedistDetail.EntityData.SegmentPath
    isisShRouteRedistDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isisShRouteRedistDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isisShRouteRedistDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isisShRouteRedistDetail.EntityData.Children = types.NewOrderedMap()
    isisShRouteRedistDetail.EntityData.Children.Append("owner", types.YChild{"Owner", &isisShRouteRedistDetail.Owner})
    isisShRouteRedistDetail.EntityData.Leafs = types.NewOrderedMap()
    isisShRouteRedistDetail.EntityData.Leafs.Append("level", types.YLeaf{"Level", isisShRouteRedistDetail.Level})

    isisShRouteRedistDetail.EntityData.YListKeys = []string {}

    return &(isisShRouteRedistDetail.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner
// Protocol redistributing the route
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol. The type is IsisRedistProto.
    Protocol interface{}

    // IS-IS instance identifier. The type is string.
    IsisInstanceId interface{}

    // OSPF process identifier. The type is string.
    OspfProcessId interface{}

    // OSPFv3 process identifier. The type is string.
    Ospfv3ProcessId interface{}

    // BGP Autonomous System number. The type is string.
    BgpAsNumber interface{}

    // EIGRP Autonomous System number. The type is string.
    EigrpAsNumber interface{}

    // Application Name. The type is string.
    ApplicationName interface{}
}

func (owner *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_RedistributedStatus_RedistributionDetails_IsisShRouteRedistDetail_Owner) GetEntityData() *types.CommonEntityData {
    owner.EntityData.YFilter = owner.YFilter
    owner.EntityData.YangName = "owner"
    owner.EntityData.BundleName = "cisco_ios_xr"
    owner.EntityData.ParentYangName = "isis-sh-route-redist-detail"
    owner.EntityData.SegmentPath = "owner"
    owner.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/redistributed-status/redistribution-details/isis-sh-route-redist-detail/" + owner.EntityData.SegmentPath
    owner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    owner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    owner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    owner.EntityData.Children = types.NewOrderedMap()
    owner.EntityData.Leafs = types.NewOrderedMap()
    owner.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", owner.Protocol})
    owner.EntityData.Leafs.Append("isis-instance-id", types.YLeaf{"IsisInstanceId", owner.IsisInstanceId})
    owner.EntityData.Leafs.Append("ospf-process-id", types.YLeaf{"OspfProcessId", owner.OspfProcessId})
    owner.EntityData.Leafs.Append("ospfv3-process-id", types.YLeaf{"Ospfv3ProcessId", owner.Ospfv3ProcessId})
    owner.EntityData.Leafs.Append("bgp-as-number", types.YLeaf{"BgpAsNumber", owner.BgpAsNumber})
    owner.EntityData.Leafs.Append("eigrp-as-number", types.YLeaf{"EigrpAsNumber", owner.EigrpAsNumber})
    owner.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", owner.ApplicationName})

    owner.EntityData.YListKeys = []string {}

    return &(owner.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus
// Status of native IS-IS routes to the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Details of the native route.
    NativeDetails Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails
}

func (nativeStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus) GetEntityData() *types.CommonEntityData {
    nativeStatus.EntityData.YFilter = nativeStatus.YFilter
    nativeStatus.EntityData.YangName = "native-status"
    nativeStatus.EntityData.BundleName = "cisco_ios_xr"
    nativeStatus.EntityData.ParentYangName = "ipv4-route"
    nativeStatus.EntityData.SegmentPath = "native-status"
    nativeStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/" + nativeStatus.EntityData.SegmentPath
    nativeStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nativeStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nativeStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nativeStatus.EntityData.Children = types.NewOrderedMap()
    nativeStatus.EntityData.Children.Append("native-details", types.YChild{"NativeDetails", &nativeStatus.NativeDetails})
    nativeStatus.EntityData.Leafs = types.NewOrderedMap()
    nativeStatus.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", nativeStatus.IsValid})

    nativeStatus.EntityData.YListKeys = []string {}

    return &(nativeStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails
// Details of the native route
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Relative importance of the prefix. The type is IsisPrefixPriority.
    Priority interface{}

    // Prefix local label for SR-MPLS. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}

    // Primary paths to prefix.
    Primary Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary

    // Backup paths to prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup.
    Backup []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup
}

func (nativeDetails *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails) GetEntityData() *types.CommonEntityData {
    nativeDetails.EntityData.YFilter = nativeDetails.YFilter
    nativeDetails.EntityData.YangName = "native-details"
    nativeDetails.EntityData.BundleName = "cisco_ios_xr"
    nativeDetails.EntityData.ParentYangName = "native-status"
    nativeDetails.EntityData.SegmentPath = "native-details"
    nativeDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/" + nativeDetails.EntityData.SegmentPath
    nativeDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nativeDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nativeDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nativeDetails.EntityData.Children = types.NewOrderedMap()
    nativeDetails.EntityData.Children.Append("primary", types.YChild{"Primary", &nativeDetails.Primary})
    nativeDetails.EntityData.Children.Append("backup", types.YChild{"Backup", nil})
    for i := range nativeDetails.Backup {
        types.SetYListKey(nativeDetails.Backup[i], i)
        nativeDetails.EntityData.Children.Append(types.GetSegmentPath(nativeDetails.Backup[i]), types.YChild{"Backup", nativeDetails.Backup[i]})
    }
    nativeDetails.EntityData.Leafs = types.NewOrderedMap()
    nativeDetails.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", nativeDetails.Priority})
    nativeDetails.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", nativeDetails.LocalLabel})

    nativeDetails.EntityData.YListKeys = []string {}

    return &(nativeDetails.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary
// Primary paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths.
    Paths []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop.
    UcmpNextHop []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath.
    MulticastPath []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath.
    SrtePath []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath.
    ExplicitPath []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source.
    Source []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource.
    MulticastSource []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource
}

func (primary *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary) GetEntityData() *types.CommonEntityData {
    primary.EntityData.YFilter = primary.YFilter
    primary.EntityData.YangName = "primary"
    primary.EntityData.BundleName = "cisco_ios_xr"
    primary.EntityData.ParentYangName = "native-details"
    primary.EntityData.SegmentPath = "primary"
    primary.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/" + primary.EntityData.SegmentPath
    primary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    primary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    primary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    primary.EntityData.Children = types.NewOrderedMap()
    primary.EntityData.Children.Append("paths", types.YChild{"Paths", nil})
    for i := range primary.Paths {
        types.SetYListKey(primary.Paths[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.Paths[i]), types.YChild{"Paths", primary.Paths[i]})
    }
    primary.EntityData.Children.Append("ucmp-next-hop", types.YChild{"UcmpNextHop", nil})
    for i := range primary.UcmpNextHop {
        types.SetYListKey(primary.UcmpNextHop[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.UcmpNextHop[i]), types.YChild{"UcmpNextHop", primary.UcmpNextHop[i]})
    }
    primary.EntityData.Children.Append("multicast-path", types.YChild{"MulticastPath", nil})
    for i := range primary.MulticastPath {
        types.SetYListKey(primary.MulticastPath[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.MulticastPath[i]), types.YChild{"MulticastPath", primary.MulticastPath[i]})
    }
    primary.EntityData.Children.Append("srte-path", types.YChild{"SrtePath", nil})
    for i := range primary.SrtePath {
        types.SetYListKey(primary.SrtePath[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.SrtePath[i]), types.YChild{"SrtePath", primary.SrtePath[i]})
    }
    primary.EntityData.Children.Append("explicit-path", types.YChild{"ExplicitPath", nil})
    for i := range primary.ExplicitPath {
        types.SetYListKey(primary.ExplicitPath[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.ExplicitPath[i]), types.YChild{"ExplicitPath", primary.ExplicitPath[i]})
    }
    primary.EntityData.Children.Append("source", types.YChild{"Source", nil})
    for i := range primary.Source {
        types.SetYListKey(primary.Source[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.Source[i]), types.YChild{"Source", primary.Source[i]})
    }
    primary.EntityData.Children.Append("multicast-source", types.YChild{"MulticastSource", nil})
    for i := range primary.MulticastSource {
        types.SetYListKey(primary.MulticastSource[i], i)
        primary.EntityData.Children.Append(types.GetSegmentPath(primary.MulticastSource[i]), types.YChild{"MulticastSource", primary.MulticastSource[i]})
    }
    primary.EntityData.Leafs = types.NewOrderedMap()
    primary.EntityData.Leafs.Append("origin", types.YLeaf{"Origin", primary.Origin})
    primary.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", primary.Metric})
    primary.EntityData.Leafs.Append("multicast-metric", types.YLeaf{"MulticastMetric", primary.MulticastMetric})
    primary.EntityData.Leafs.Append("is-external-metric", types.YLeaf{"IsExternalMetric", primary.IsExternalMetric})
    primary.EntityData.Leafs.Append("administrative-distance", types.YLeaf{"AdministrativeDistance", primary.AdministrativeDistance})

    primary.EntityData.YListKeys = []string {}

    return &(primary.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_Nnh
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "primary"
    paths.EntityData.SegmentPath = "paths" + types.AddNoKeyToken(paths)
    paths.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/" + paths.EntityData.SegmentPath
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = types.NewOrderedMap()
    paths.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &paths.FrrBackup})
    paths.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range paths.UloopExplicit {
        types.SetYListKey(paths.UloopExplicit[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.UloopExplicit[i]), types.YChild{"UloopExplicit", paths.UloopExplicit[i]})
    }
    paths.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range paths.Nnh {
        types.SetYListKey(paths.Nnh[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.Nnh[i]), types.YChild{"Nnh", paths.Nnh[i]})
    }
    paths.EntityData.Leafs = types.NewOrderedMap()
    paths.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", paths.NeighborId})
    paths.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", paths.EgressInterface})
    paths.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", paths.NeighborAddress})
    paths.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", paths.NeighborSnpa})
    paths.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", paths.Tag})
    paths.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", paths.TunnelInterface})
    paths.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", paths.SegmentRoutingSidValue})
    paths.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", paths.Weight})
    paths.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", paths.IsTeTunnelInterface})
    paths.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", paths.IsSrExcludeTunnelInterface})
    paths.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", paths.OutgoingLabel})

    paths.EntityData.YListKeys = []string {}

    return &(paths.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "paths"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/paths/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/paths/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/paths/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "paths"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/paths/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Paths_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "paths"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/paths/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop) GetEntityData() *types.CommonEntityData {
    ucmpNextHop.EntityData.YFilter = ucmpNextHop.YFilter
    ucmpNextHop.EntityData.YangName = "ucmp-next-hop"
    ucmpNextHop.EntityData.BundleName = "cisco_ios_xr"
    ucmpNextHop.EntityData.ParentYangName = "primary"
    ucmpNextHop.EntityData.SegmentPath = "ucmp-next-hop" + types.AddNoKeyToken(ucmpNextHop)
    ucmpNextHop.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/" + ucmpNextHop.EntityData.SegmentPath
    ucmpNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ucmpNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ucmpNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ucmpNextHop.EntityData.Children = types.NewOrderedMap()
    ucmpNextHop.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &ucmpNextHop.FrrBackup})
    ucmpNextHop.EntityData.Leafs = types.NewOrderedMap()
    ucmpNextHop.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", ucmpNextHop.NeighborId})
    ucmpNextHop.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", ucmpNextHop.EgressInterface})
    ucmpNextHop.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", ucmpNextHop.NeighborAddress})
    ucmpNextHop.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", ucmpNextHop.NeighborSnpa})
    ucmpNextHop.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", ucmpNextHop.Tag})
    ucmpNextHop.EntityData.Leafs.Append("total-ucmp-distance", types.YLeaf{"TotalUcmpDistance", ucmpNextHop.TotalUcmpDistance})
    ucmpNextHop.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", ucmpNextHop.SegmentRoutingSidValue})
    ucmpNextHop.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", ucmpNextHop.Weight})
    ucmpNextHop.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", ucmpNextHop.IsTeTunnelInterface})
    ucmpNextHop.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", ucmpNextHop.IsSrExcludeTunnelInterface})
    ucmpNextHop.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", ucmpNextHop.OutgoingLabel})

    ucmpNextHop.EntityData.YListKeys = []string {}

    return &(ucmpNextHop.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "ucmp-next-hop"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/ucmp-next-hop/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/ucmp-next-hop/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_UcmpNextHop_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/ucmp-next-hop/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath) GetEntityData() *types.CommonEntityData {
    multicastPath.EntityData.YFilter = multicastPath.YFilter
    multicastPath.EntityData.YangName = "multicast-path"
    multicastPath.EntityData.BundleName = "cisco_ios_xr"
    multicastPath.EntityData.ParentYangName = "primary"
    multicastPath.EntityData.SegmentPath = "multicast-path" + types.AddNoKeyToken(multicastPath)
    multicastPath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/" + multicastPath.EntityData.SegmentPath
    multicastPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastPath.EntityData.Children = types.NewOrderedMap()
    multicastPath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &multicastPath.FrrBackup})
    multicastPath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range multicastPath.UloopExplicit {
        types.SetYListKey(multicastPath.UloopExplicit[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.UloopExplicit[i]), types.YChild{"UloopExplicit", multicastPath.UloopExplicit[i]})
    }
    multicastPath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range multicastPath.Nnh {
        types.SetYListKey(multicastPath.Nnh[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.Nnh[i]), types.YChild{"Nnh", multicastPath.Nnh[i]})
    }
    multicastPath.EntityData.Leafs = types.NewOrderedMap()
    multicastPath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", multicastPath.NeighborId})
    multicastPath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", multicastPath.EgressInterface})
    multicastPath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", multicastPath.NeighborAddress})
    multicastPath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", multicastPath.NeighborSnpa})
    multicastPath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", multicastPath.Tag})
    multicastPath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", multicastPath.TunnelInterface})
    multicastPath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", multicastPath.SegmentRoutingSidValue})
    multicastPath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", multicastPath.Weight})
    multicastPath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", multicastPath.IsTeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", multicastPath.IsSrExcludeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", multicastPath.OutgoingLabel})

    multicastPath.EntityData.YListKeys = []string {}

    return &(multicastPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "multicast-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/multicast-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/multicast-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/multicast-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "multicast-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/multicast-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastPath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "multicast-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/multicast-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_Nnh
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath) GetEntityData() *types.CommonEntityData {
    srtePath.EntityData.YFilter = srtePath.YFilter
    srtePath.EntityData.YangName = "srte-path"
    srtePath.EntityData.BundleName = "cisco_ios_xr"
    srtePath.EntityData.ParentYangName = "primary"
    srtePath.EntityData.SegmentPath = "srte-path" + types.AddNoKeyToken(srtePath)
    srtePath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/" + srtePath.EntityData.SegmentPath
    srtePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srtePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srtePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srtePath.EntityData.Children = types.NewOrderedMap()
    srtePath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &srtePath.FrrBackup})
    srtePath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range srtePath.UloopExplicit {
        types.SetYListKey(srtePath.UloopExplicit[i], i)
        srtePath.EntityData.Children.Append(types.GetSegmentPath(srtePath.UloopExplicit[i]), types.YChild{"UloopExplicit", srtePath.UloopExplicit[i]})
    }
    srtePath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range srtePath.Nnh {
        types.SetYListKey(srtePath.Nnh[i], i)
        srtePath.EntityData.Children.Append(types.GetSegmentPath(srtePath.Nnh[i]), types.YChild{"Nnh", srtePath.Nnh[i]})
    }
    srtePath.EntityData.Leafs = types.NewOrderedMap()
    srtePath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", srtePath.NeighborId})
    srtePath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", srtePath.EgressInterface})
    srtePath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", srtePath.NeighborAddress})
    srtePath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", srtePath.NeighborSnpa})
    srtePath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", srtePath.Tag})
    srtePath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", srtePath.TunnelInterface})
    srtePath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", srtePath.SegmentRoutingSidValue})
    srtePath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", srtePath.Weight})
    srtePath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", srtePath.IsTeTunnelInterface})
    srtePath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", srtePath.IsSrExcludeTunnelInterface})
    srtePath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", srtePath.OutgoingLabel})

    srtePath.EntityData.YListKeys = []string {}

    return &(srtePath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "srte-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/srte-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/srte-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/srte-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "srte-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/srte-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_SrtePath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "srte-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/srte-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath) GetEntityData() *types.CommonEntityData {
    explicitPath.EntityData.YFilter = explicitPath.YFilter
    explicitPath.EntityData.YangName = "explicit-path"
    explicitPath.EntityData.BundleName = "cisco_ios_xr"
    explicitPath.EntityData.ParentYangName = "primary"
    explicitPath.EntityData.SegmentPath = "explicit-path" + types.AddNoKeyToken(explicitPath)
    explicitPath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/" + explicitPath.EntityData.SegmentPath
    explicitPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitPath.EntityData.Children = types.NewOrderedMap()
    explicitPath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &explicitPath.FrrBackup})
    explicitPath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range explicitPath.UloopExplicit {
        types.SetYListKey(explicitPath.UloopExplicit[i], i)
        explicitPath.EntityData.Children.Append(types.GetSegmentPath(explicitPath.UloopExplicit[i]), types.YChild{"UloopExplicit", explicitPath.UloopExplicit[i]})
    }
    explicitPath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range explicitPath.Nnh {
        types.SetYListKey(explicitPath.Nnh[i], i)
        explicitPath.EntityData.Children.Append(types.GetSegmentPath(explicitPath.Nnh[i]), types.YChild{"Nnh", explicitPath.Nnh[i]})
    }
    explicitPath.EntityData.Leafs = types.NewOrderedMap()
    explicitPath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", explicitPath.NeighborId})
    explicitPath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", explicitPath.EgressInterface})
    explicitPath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", explicitPath.NeighborAddress})
    explicitPath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", explicitPath.NeighborSnpa})
    explicitPath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", explicitPath.Tag})
    explicitPath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", explicitPath.TunnelInterface})
    explicitPath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", explicitPath.SegmentRoutingSidValue})
    explicitPath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", explicitPath.Weight})
    explicitPath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", explicitPath.IsTeTunnelInterface})
    explicitPath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", explicitPath.IsSrExcludeTunnelInterface})
    explicitPath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", explicitPath.OutgoingLabel})

    explicitPath.EntityData.YListKeys = []string {}

    return &(explicitPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "explicit-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/explicit-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/explicit-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/explicit-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "explicit-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/explicit-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_ExplicitPath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "explicit-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/explicit-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "primary"
    source.EntityData.SegmentPath = "source" + types.AddNoKeyToken(source)
    source.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/" + source.EntityData.SegmentPath
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = types.NewOrderedMap()
    source.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range source.Tags {
        types.SetYListKey(source.Tags[i], i)
        source.EntityData.Children.Append(types.GetSegmentPath(source.Tags[i]), types.YChild{"Tags", source.Tags[i]})
    }
    source.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range source.NodalSid {
        types.SetYListKey(source.NodalSid[i], i)
        source.EntityData.Children.Append(types.GetSegmentPath(source.NodalSid[i]), types.YChild{"NodalSid", source.NodalSid[i]})
    }
    source.EntityData.Leafs = types.NewOrderedMap()
    source.EntityData.Leafs.Append("source-lsp-id", types.YLeaf{"SourceLspId", source.SourceLspId})
    source.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", source.SourceAddress})

    source.EntityData.YListKeys = []string {}

    return &(source.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "source"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/source/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_Source_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "source"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/source/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource) GetEntityData() *types.CommonEntityData {
    multicastSource.EntityData.YFilter = multicastSource.YFilter
    multicastSource.EntityData.YangName = "multicast-source"
    multicastSource.EntityData.BundleName = "cisco_ios_xr"
    multicastSource.EntityData.ParentYangName = "primary"
    multicastSource.EntityData.SegmentPath = "multicast-source" + types.AddNoKeyToken(multicastSource)
    multicastSource.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/" + multicastSource.EntityData.SegmentPath
    multicastSource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastSource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastSource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastSource.EntityData.Children = types.NewOrderedMap()
    multicastSource.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range multicastSource.Tags {
        types.SetYListKey(multicastSource.Tags[i], i)
        multicastSource.EntityData.Children.Append(types.GetSegmentPath(multicastSource.Tags[i]), types.YChild{"Tags", multicastSource.Tags[i]})
    }
    multicastSource.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range multicastSource.NodalSid {
        types.SetYListKey(multicastSource.NodalSid[i], i)
        multicastSource.EntityData.Children.Append(types.GetSegmentPath(multicastSource.NodalSid[i]), types.YChild{"NodalSid", multicastSource.NodalSid[i]})
    }
    multicastSource.EntityData.Leafs = types.NewOrderedMap()
    multicastSource.EntityData.Leafs.Append("source-lsp-id", types.YLeaf{"SourceLspId", multicastSource.SourceLspId})
    multicastSource.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", multicastSource.SourceAddress})

    multicastSource.EntityData.YListKeys = []string {}

    return &(multicastSource.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "multicast-source"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/multicast-source/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Primary_MulticastSource_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "multicast-source"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/primary/multicast-source/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup
// Backup paths to prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Origin of route. The type is IsisPrefixOrigin.
    Origin interface{}

    // Distance to network. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Multicast-intact distance to network. The type is interface{} with range:
    // 0..4294967295.
    MulticastMetric interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Administrative Distance. The type is interface{} with range: 0..65535.
    AdministrativeDistance interface{}

    // First hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths.
    Paths []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths

    // UCMP first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop.
    UcmpNextHop []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop

    // Multicast intact first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath.
    MulticastPath []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath

    // SR-TE native first hops toward the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath.
    SrtePath []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath

    // SR microloop avoidance paths. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath.
    ExplicitPath []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath

    // Sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source.
    Source []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source

    // Multicast-intact sources advertising the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource.
    MulticastSource []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource
}

func (backup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup) GetEntityData() *types.CommonEntityData {
    backup.EntityData.YFilter = backup.YFilter
    backup.EntityData.YangName = "backup"
    backup.EntityData.BundleName = "cisco_ios_xr"
    backup.EntityData.ParentYangName = "native-details"
    backup.EntityData.SegmentPath = "backup" + types.AddNoKeyToken(backup)
    backup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/" + backup.EntityData.SegmentPath
    backup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backup.EntityData.Children = types.NewOrderedMap()
    backup.EntityData.Children.Append("paths", types.YChild{"Paths", nil})
    for i := range backup.Paths {
        types.SetYListKey(backup.Paths[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.Paths[i]), types.YChild{"Paths", backup.Paths[i]})
    }
    backup.EntityData.Children.Append("ucmp-next-hop", types.YChild{"UcmpNextHop", nil})
    for i := range backup.UcmpNextHop {
        types.SetYListKey(backup.UcmpNextHop[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.UcmpNextHop[i]), types.YChild{"UcmpNextHop", backup.UcmpNextHop[i]})
    }
    backup.EntityData.Children.Append("multicast-path", types.YChild{"MulticastPath", nil})
    for i := range backup.MulticastPath {
        types.SetYListKey(backup.MulticastPath[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.MulticastPath[i]), types.YChild{"MulticastPath", backup.MulticastPath[i]})
    }
    backup.EntityData.Children.Append("srte-path", types.YChild{"SrtePath", nil})
    for i := range backup.SrtePath {
        types.SetYListKey(backup.SrtePath[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.SrtePath[i]), types.YChild{"SrtePath", backup.SrtePath[i]})
    }
    backup.EntityData.Children.Append("explicit-path", types.YChild{"ExplicitPath", nil})
    for i := range backup.ExplicitPath {
        types.SetYListKey(backup.ExplicitPath[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.ExplicitPath[i]), types.YChild{"ExplicitPath", backup.ExplicitPath[i]})
    }
    backup.EntityData.Children.Append("source", types.YChild{"Source", nil})
    for i := range backup.Source {
        types.SetYListKey(backup.Source[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.Source[i]), types.YChild{"Source", backup.Source[i]})
    }
    backup.EntityData.Children.Append("multicast-source", types.YChild{"MulticastSource", nil})
    for i := range backup.MulticastSource {
        types.SetYListKey(backup.MulticastSource[i], i)
        backup.EntityData.Children.Append(types.GetSegmentPath(backup.MulticastSource[i]), types.YChild{"MulticastSource", backup.MulticastSource[i]})
    }
    backup.EntityData.Leafs = types.NewOrderedMap()
    backup.EntityData.Leafs.Append("origin", types.YLeaf{"Origin", backup.Origin})
    backup.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", backup.Metric})
    backup.EntityData.Leafs.Append("multicast-metric", types.YLeaf{"MulticastMetric", backup.MulticastMetric})
    backup.EntityData.Leafs.Append("is-external-metric", types.YLeaf{"IsExternalMetric", backup.IsExternalMetric})
    backup.EntityData.Leafs.Append("administrative-distance", types.YLeaf{"AdministrativeDistance", backup.AdministrativeDistance})

    backup.EntityData.YListKeys = []string {}

    return &(backup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths
// First hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_Nnh
}

func (paths *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "backup"
    paths.EntityData.SegmentPath = "paths" + types.AddNoKeyToken(paths)
    paths.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/" + paths.EntityData.SegmentPath
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = types.NewOrderedMap()
    paths.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &paths.FrrBackup})
    paths.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range paths.UloopExplicit {
        types.SetYListKey(paths.UloopExplicit[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.UloopExplicit[i]), types.YChild{"UloopExplicit", paths.UloopExplicit[i]})
    }
    paths.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range paths.Nnh {
        types.SetYListKey(paths.Nnh[i], i)
        paths.EntityData.Children.Append(types.GetSegmentPath(paths.Nnh[i]), types.YChild{"Nnh", paths.Nnh[i]})
    }
    paths.EntityData.Leafs = types.NewOrderedMap()
    paths.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", paths.NeighborId})
    paths.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", paths.EgressInterface})
    paths.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", paths.NeighborAddress})
    paths.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", paths.NeighborSnpa})
    paths.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", paths.Tag})
    paths.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", paths.TunnelInterface})
    paths.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", paths.SegmentRoutingSidValue})
    paths.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", paths.Weight})
    paths.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", paths.IsTeTunnelInterface})
    paths.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", paths.IsSrExcludeTunnelInterface})
    paths.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", paths.OutgoingLabel})

    paths.EntityData.YListKeys = []string {}

    return &(paths.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "paths"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/paths/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/paths/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/paths/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "paths"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/paths/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Paths_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "paths"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/paths/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop
// UCMP first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance to the network via this UCMP next hop. The type is interface{}
    // with range: 0..4294967295.
    TotalUcmpDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
}

func (ucmpNextHop *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop) GetEntityData() *types.CommonEntityData {
    ucmpNextHop.EntityData.YFilter = ucmpNextHop.YFilter
    ucmpNextHop.EntityData.YangName = "ucmp-next-hop"
    ucmpNextHop.EntityData.BundleName = "cisco_ios_xr"
    ucmpNextHop.EntityData.ParentYangName = "backup"
    ucmpNextHop.EntityData.SegmentPath = "ucmp-next-hop" + types.AddNoKeyToken(ucmpNextHop)
    ucmpNextHop.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/" + ucmpNextHop.EntityData.SegmentPath
    ucmpNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ucmpNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ucmpNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ucmpNextHop.EntityData.Children = types.NewOrderedMap()
    ucmpNextHop.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &ucmpNextHop.FrrBackup})
    ucmpNextHop.EntityData.Leafs = types.NewOrderedMap()
    ucmpNextHop.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", ucmpNextHop.NeighborId})
    ucmpNextHop.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", ucmpNextHop.EgressInterface})
    ucmpNextHop.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", ucmpNextHop.NeighborAddress})
    ucmpNextHop.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", ucmpNextHop.NeighborSnpa})
    ucmpNextHop.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", ucmpNextHop.Tag})
    ucmpNextHop.EntityData.Leafs.Append("total-ucmp-distance", types.YLeaf{"TotalUcmpDistance", ucmpNextHop.TotalUcmpDistance})
    ucmpNextHop.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", ucmpNextHop.SegmentRoutingSidValue})
    ucmpNextHop.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", ucmpNextHop.Weight})
    ucmpNextHop.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", ucmpNextHop.IsTeTunnelInterface})
    ucmpNextHop.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", ucmpNextHop.IsSrExcludeTunnelInterface})
    ucmpNextHop.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", ucmpNextHop.OutgoingLabel})

    ucmpNextHop.EntityData.YListKeys = []string {}

    return &(ucmpNextHop.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "ucmp-next-hop"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/ucmp-next-hop/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/ucmp-next-hop/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_UcmpNextHop_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/ucmp-next-hop/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath
// Multicast intact first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh
}

func (multicastPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath) GetEntityData() *types.CommonEntityData {
    multicastPath.EntityData.YFilter = multicastPath.YFilter
    multicastPath.EntityData.YangName = "multicast-path"
    multicastPath.EntityData.BundleName = "cisco_ios_xr"
    multicastPath.EntityData.ParentYangName = "backup"
    multicastPath.EntityData.SegmentPath = "multicast-path" + types.AddNoKeyToken(multicastPath)
    multicastPath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/" + multicastPath.EntityData.SegmentPath
    multicastPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastPath.EntityData.Children = types.NewOrderedMap()
    multicastPath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &multicastPath.FrrBackup})
    multicastPath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range multicastPath.UloopExplicit {
        types.SetYListKey(multicastPath.UloopExplicit[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.UloopExplicit[i]), types.YChild{"UloopExplicit", multicastPath.UloopExplicit[i]})
    }
    multicastPath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range multicastPath.Nnh {
        types.SetYListKey(multicastPath.Nnh[i], i)
        multicastPath.EntityData.Children.Append(types.GetSegmentPath(multicastPath.Nnh[i]), types.YChild{"Nnh", multicastPath.Nnh[i]})
    }
    multicastPath.EntityData.Leafs = types.NewOrderedMap()
    multicastPath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", multicastPath.NeighborId})
    multicastPath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", multicastPath.EgressInterface})
    multicastPath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", multicastPath.NeighborAddress})
    multicastPath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", multicastPath.NeighborSnpa})
    multicastPath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", multicastPath.Tag})
    multicastPath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", multicastPath.TunnelInterface})
    multicastPath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", multicastPath.SegmentRoutingSidValue})
    multicastPath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", multicastPath.Weight})
    multicastPath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", multicastPath.IsTeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", multicastPath.IsSrExcludeTunnelInterface})
    multicastPath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", multicastPath.OutgoingLabel})

    multicastPath.EntityData.YListKeys = []string {}

    return &(multicastPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "multicast-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/multicast-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/multicast-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/multicast-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "multicast-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/multicast-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastPath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "multicast-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/multicast-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath
// SR-TE native first hops toward the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_Nnh
}

func (srtePath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath) GetEntityData() *types.CommonEntityData {
    srtePath.EntityData.YFilter = srtePath.YFilter
    srtePath.EntityData.YangName = "srte-path"
    srtePath.EntityData.BundleName = "cisco_ios_xr"
    srtePath.EntityData.ParentYangName = "backup"
    srtePath.EntityData.SegmentPath = "srte-path" + types.AddNoKeyToken(srtePath)
    srtePath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/" + srtePath.EntityData.SegmentPath
    srtePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srtePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srtePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srtePath.EntityData.Children = types.NewOrderedMap()
    srtePath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &srtePath.FrrBackup})
    srtePath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range srtePath.UloopExplicit {
        types.SetYListKey(srtePath.UloopExplicit[i], i)
        srtePath.EntityData.Children.Append(types.GetSegmentPath(srtePath.UloopExplicit[i]), types.YChild{"UloopExplicit", srtePath.UloopExplicit[i]})
    }
    srtePath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range srtePath.Nnh {
        types.SetYListKey(srtePath.Nnh[i], i)
        srtePath.EntityData.Children.Append(types.GetSegmentPath(srtePath.Nnh[i]), types.YChild{"Nnh", srtePath.Nnh[i]})
    }
    srtePath.EntityData.Leafs = types.NewOrderedMap()
    srtePath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", srtePath.NeighborId})
    srtePath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", srtePath.EgressInterface})
    srtePath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", srtePath.NeighborAddress})
    srtePath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", srtePath.NeighborSnpa})
    srtePath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", srtePath.Tag})
    srtePath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", srtePath.TunnelInterface})
    srtePath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", srtePath.SegmentRoutingSidValue})
    srtePath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", srtePath.Weight})
    srtePath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", srtePath.IsTeTunnelInterface})
    srtePath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", srtePath.IsSrExcludeTunnelInterface})
    srtePath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", srtePath.OutgoingLabel})

    srtePath.EntityData.YListKeys = []string {}

    return &(srtePath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "srte-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/srte-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/srte-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/srte-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "srte-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/srte-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_SrtePath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "srte-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/srte-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath
// SR microloop avoidance paths
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Tag associated with the path. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Explicit path tunnel interface. The type is string.
    TunnelInterface interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // Is path via a TE tunnel. The type is bool.
    IsTeTunnelInterface interface{}

    // Is path via an SR-exclude TE tunnel. The type is bool.
    IsSrExcludeTunnelInterface interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // FRR backup for this path.
    FrrBackup Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup

    // Uloop Explicit List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit.
    UloopExplicit []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit

    // Next next hops. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh.
    Nnh []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh
}

func (explicitPath *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath) GetEntityData() *types.CommonEntityData {
    explicitPath.EntityData.YFilter = explicitPath.YFilter
    explicitPath.EntityData.YangName = "explicit-path"
    explicitPath.EntityData.BundleName = "cisco_ios_xr"
    explicitPath.EntityData.ParentYangName = "backup"
    explicitPath.EntityData.SegmentPath = "explicit-path" + types.AddNoKeyToken(explicitPath)
    explicitPath.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/" + explicitPath.EntityData.SegmentPath
    explicitPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    explicitPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    explicitPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    explicitPath.EntityData.Children = types.NewOrderedMap()
    explicitPath.EntityData.Children.Append("frr-backup", types.YChild{"FrrBackup", &explicitPath.FrrBackup})
    explicitPath.EntityData.Children.Append("uloop-explicit", types.YChild{"UloopExplicit", nil})
    for i := range explicitPath.UloopExplicit {
        types.SetYListKey(explicitPath.UloopExplicit[i], i)
        explicitPath.EntityData.Children.Append(types.GetSegmentPath(explicitPath.UloopExplicit[i]), types.YChild{"UloopExplicit", explicitPath.UloopExplicit[i]})
    }
    explicitPath.EntityData.Children.Append("nnh", types.YChild{"Nnh", nil})
    for i := range explicitPath.Nnh {
        types.SetYListKey(explicitPath.Nnh[i], i)
        explicitPath.EntityData.Children.Append(types.GetSegmentPath(explicitPath.Nnh[i]), types.YChild{"Nnh", explicitPath.Nnh[i]})
    }
    explicitPath.EntityData.Leafs = types.NewOrderedMap()
    explicitPath.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", explicitPath.NeighborId})
    explicitPath.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", explicitPath.EgressInterface})
    explicitPath.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", explicitPath.NeighborAddress})
    explicitPath.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", explicitPath.NeighborSnpa})
    explicitPath.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", explicitPath.Tag})
    explicitPath.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", explicitPath.TunnelInterface})
    explicitPath.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", explicitPath.SegmentRoutingSidValue})
    explicitPath.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", explicitPath.Weight})
    explicitPath.EntityData.Leafs.Append("is-te-tunnel-interface", types.YLeaf{"IsTeTunnelInterface", explicitPath.IsTeTunnelInterface})
    explicitPath.EntityData.Leafs.Append("is-sr-exclude-tunnel-interface", types.YLeaf{"IsSrExcludeTunnelInterface", explicitPath.IsSrExcludeTunnelInterface})
    explicitPath.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", explicitPath.OutgoingLabel})

    explicitPath.EntityData.YListKeys = []string {}

    return &(explicitPath.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup
// FRR backup for this path
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop neighbor ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborId interface{}

    // Interface to send the packet out of. The type is string.
    EgressInterface interface{}

    // Next hop neighbor's forwarding address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Tunnel Interface to send the packet out of. The type is string.
    TunnelEgressInterface interface{}

    // Next hop neighbor's SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NeighborSnpa interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemId interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterId interface{}

    // Remote LFA PQ Node's ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    RemoteLfaSystemPid interface{}

    // Remote LFA Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteLfaRouterPid interface{}

    // Distance to the network via this backup path. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupDistance interface{}

    // Segment routing sid value received from first hop. The type is interface{}
    // with range: 0..4294967295.
    SegmentRoutingSidValue interface{}

    // Number of SIDs in TI-LFA/rLFA. The type is interface{} with range:
    // 0..4294967295.
    NumSid interface{}

    // Backup Repair List Size. The type is interface{} with range: 0..4294967295.
    BackupRepairListSize interface{}

    // Ti LFA computation which provided backup path. The type is
    // IsisTilfaComputation.
    TilfaComputation interface{}

    // PrefixSourceNodeID. The type is string.
    PrefixSourceNodeId interface{}

    // Is the backup path via downstream node?. The type is bool.
    IsDownstream interface{}

    // Is the backup path line card disjoint with primary?. The type is bool.
    IsLcDisjoint interface{}

    // Is the backup path node protecting?. The type is bool.
    IsNodeProtecting interface{}

    // Is the backup path an ECMP to the network?. The type is bool.
    IsPrimaryPath interface{}

    // Is the backup path SRLG disjoint with primary?. The type is bool.
    IsSrlgDisjoint interface{}

    // Is the backup path via a Remote LFA?. The type is bool.
    IsRemoteLfa interface{}

    // Is the backup path via a TI-LFA?. The type is bool.
    IsEpcfrrLfa interface{}

    // Is the backup path TI-LFA strict SPF?. The type is bool.
    IsStrictSpflfa interface{}

    // Is SR TE tunnel requested. The type is bool.
    IsTunnelRequested interface{}

    // Weight configured on the interface. The type is interface{} with range:
    // 0..4294967295.
    Weight interface{}

    // SR-MPLS label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Segment routing sid values for TI-LFA/rLFA. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry.
    SegmentRoutingSidValueEntry []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry

    // Backup Repair List. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair.
    BackupRepair []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
}

func (frrBackup *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup) GetEntityData() *types.CommonEntityData {
    frrBackup.EntityData.YFilter = frrBackup.YFilter
    frrBackup.EntityData.YangName = "frr-backup"
    frrBackup.EntityData.BundleName = "cisco_ios_xr"
    frrBackup.EntityData.ParentYangName = "explicit-path"
    frrBackup.EntityData.SegmentPath = "frr-backup"
    frrBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/explicit-path/" + frrBackup.EntityData.SegmentPath
    frrBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrBackup.EntityData.Children = types.NewOrderedMap()
    frrBackup.EntityData.Children.Append("segment-routing-sid-value-entry", types.YChild{"SegmentRoutingSidValueEntry", nil})
    for i := range frrBackup.SegmentRoutingSidValueEntry {
        types.SetYListKey(frrBackup.SegmentRoutingSidValueEntry[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.SegmentRoutingSidValueEntry[i]), types.YChild{"SegmentRoutingSidValueEntry", frrBackup.SegmentRoutingSidValueEntry[i]})
    }
    frrBackup.EntityData.Children.Append("backup-repair", types.YChild{"BackupRepair", nil})
    for i := range frrBackup.BackupRepair {
        types.SetYListKey(frrBackup.BackupRepair[i], i)
        frrBackup.EntityData.Children.Append(types.GetSegmentPath(frrBackup.BackupRepair[i]), types.YChild{"BackupRepair", frrBackup.BackupRepair[i]})
    }
    frrBackup.EntityData.Leafs = types.NewOrderedMap()
    frrBackup.EntityData.Leafs.Append("neighbor-id", types.YLeaf{"NeighborId", frrBackup.NeighborId})
    frrBackup.EntityData.Leafs.Append("egress-interface", types.YLeaf{"EgressInterface", frrBackup.EgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", frrBackup.NeighborAddress})
    frrBackup.EntityData.Leafs.Append("tunnel-egress-interface", types.YLeaf{"TunnelEgressInterface", frrBackup.TunnelEgressInterface})
    frrBackup.EntityData.Leafs.Append("neighbor-snpa", types.YLeaf{"NeighborSnpa", frrBackup.NeighborSnpa})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-id", types.YLeaf{"RemoteLfaSystemId", frrBackup.RemoteLfaSystemId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-id", types.YLeaf{"RemoteLfaRouterId", frrBackup.RemoteLfaRouterId})
    frrBackup.EntityData.Leafs.Append("remote-lfa-system-pid", types.YLeaf{"RemoteLfaSystemPid", frrBackup.RemoteLfaSystemPid})
    frrBackup.EntityData.Leafs.Append("remote-lfa-router-pid", types.YLeaf{"RemoteLfaRouterPid", frrBackup.RemoteLfaRouterPid})
    frrBackup.EntityData.Leafs.Append("total-backup-distance", types.YLeaf{"TotalBackupDistance", frrBackup.TotalBackupDistance})
    frrBackup.EntityData.Leafs.Append("segment-routing-sid-value", types.YLeaf{"SegmentRoutingSidValue", frrBackup.SegmentRoutingSidValue})
    frrBackup.EntityData.Leafs.Append("num-sid", types.YLeaf{"NumSid", frrBackup.NumSid})
    frrBackup.EntityData.Leafs.Append("backup-repair-list-size", types.YLeaf{"BackupRepairListSize", frrBackup.BackupRepairListSize})
    frrBackup.EntityData.Leafs.Append("tilfa-computation", types.YLeaf{"TilfaComputation", frrBackup.TilfaComputation})
    frrBackup.EntityData.Leafs.Append("prefix-source-node-id", types.YLeaf{"PrefixSourceNodeId", frrBackup.PrefixSourceNodeId})
    frrBackup.EntityData.Leafs.Append("is-downstream", types.YLeaf{"IsDownstream", frrBackup.IsDownstream})
    frrBackup.EntityData.Leafs.Append("is-lc-disjoint", types.YLeaf{"IsLcDisjoint", frrBackup.IsLcDisjoint})
    frrBackup.EntityData.Leafs.Append("is-node-protecting", types.YLeaf{"IsNodeProtecting", frrBackup.IsNodeProtecting})
    frrBackup.EntityData.Leafs.Append("is-primary-path", types.YLeaf{"IsPrimaryPath", frrBackup.IsPrimaryPath})
    frrBackup.EntityData.Leafs.Append("is-srlg-disjoint", types.YLeaf{"IsSrlgDisjoint", frrBackup.IsSrlgDisjoint})
    frrBackup.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", frrBackup.IsRemoteLfa})
    frrBackup.EntityData.Leafs.Append("is-epcfrr-lfa", types.YLeaf{"IsEpcfrrLfa", frrBackup.IsEpcfrrLfa})
    frrBackup.EntityData.Leafs.Append("is-strict-spflfa", types.YLeaf{"IsStrictSpflfa", frrBackup.IsStrictSpflfa})
    frrBackup.EntityData.Leafs.Append("is-tunnel-requested", types.YLeaf{"IsTunnelRequested", frrBackup.IsTunnelRequested})
    frrBackup.EntityData.Leafs.Append("weight", types.YLeaf{"Weight", frrBackup.Weight})
    frrBackup.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", frrBackup.OutgoingLabel})

    frrBackup.EntityData.YListKeys = []string {}

    return &(frrBackup.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry
// Segment routing sid values for TI-LFA/rLFA
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (segmentRoutingSidValueEntry *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_SegmentRoutingSidValueEntry) GetEntityData() *types.CommonEntityData {
    segmentRoutingSidValueEntry.EntityData.YFilter = segmentRoutingSidValueEntry.YFilter
    segmentRoutingSidValueEntry.EntityData.YangName = "segment-routing-sid-value-entry"
    segmentRoutingSidValueEntry.EntityData.BundleName = "cisco_ios_xr"
    segmentRoutingSidValueEntry.EntityData.ParentYangName = "frr-backup"
    segmentRoutingSidValueEntry.EntityData.SegmentPath = "segment-routing-sid-value-entry" + types.AddNoKeyToken(segmentRoutingSidValueEntry)
    segmentRoutingSidValueEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/explicit-path/frr-backup/" + segmentRoutingSidValueEntry.EntityData.SegmentPath
    segmentRoutingSidValueEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRoutingSidValueEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRoutingSidValueEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRoutingSidValueEntry.EntityData.Children = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs = types.NewOrderedMap()
    segmentRoutingSidValueEntry.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", segmentRoutingSidValueEntry.Entry})

    segmentRoutingSidValueEntry.EntityData.YListKeys = []string {}

    return &(segmentRoutingSidValueEntry.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair
// Backup Repair List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (backupRepair *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_FrrBackup_BackupRepair) GetEntityData() *types.CommonEntityData {
    backupRepair.EntityData.YFilter = backupRepair.YFilter
    backupRepair.EntityData.YangName = "backup-repair"
    backupRepair.EntityData.BundleName = "cisco_ios_xr"
    backupRepair.EntityData.ParentYangName = "frr-backup"
    backupRepair.EntityData.SegmentPath = "backup-repair" + types.AddNoKeyToken(backupRepair)
    backupRepair.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/explicit-path/frr-backup/" + backupRepair.EntityData.SegmentPath
    backupRepair.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRepair.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRepair.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRepair.EntityData.Children = types.NewOrderedMap()
    backupRepair.EntityData.Leafs = types.NewOrderedMap()
    backupRepair.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", backupRepair.RepairElementNodeId})
    backupRepair.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", backupRepair.RepairIpv4Addr})
    backupRepair.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", backupRepair.RepairIpv6Addr})
    backupRepair.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", backupRepair.RepairLabel})
    backupRepair.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", backupRepair.RepairElementType})
    backupRepair.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", backupRepair.RepairStrictSpfLabel})

    backupRepair.EntityData.YListKeys = []string {}

    return &(backupRepair.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit
// Uloop Explicit List
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RepairElementNodeID. The type is string.
    RepairElementNodeId interface{}

    // RepairIPv4Addr. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RepairIpv4Addr interface{}

    // RepairIPv6Addr. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RepairIpv6Addr interface{}

    // Repair Label. The type is interface{} with range: 0..4294967295.
    RepairLabel interface{}

    // Repair Element Type. The type is interface{} with range: 0..4294967295.
    RepairElementType interface{}

    // Repair Strict SPF Label. The type is interface{} with range: 0..4294967295.
    RepairStrictSpfLabel interface{}
}

func (uloopExplicit *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_UloopExplicit) GetEntityData() *types.CommonEntityData {
    uloopExplicit.EntityData.YFilter = uloopExplicit.YFilter
    uloopExplicit.EntityData.YangName = "uloop-explicit"
    uloopExplicit.EntityData.BundleName = "cisco_ios_xr"
    uloopExplicit.EntityData.ParentYangName = "explicit-path"
    uloopExplicit.EntityData.SegmentPath = "uloop-explicit" + types.AddNoKeyToken(uloopExplicit)
    uloopExplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/explicit-path/" + uloopExplicit.EntityData.SegmentPath
    uloopExplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uloopExplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uloopExplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uloopExplicit.EntityData.Children = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs = types.NewOrderedMap()
    uloopExplicit.EntityData.Leafs.Append("repair-element-node-id", types.YLeaf{"RepairElementNodeId", uloopExplicit.RepairElementNodeId})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv4-addr", types.YLeaf{"RepairIpv4Addr", uloopExplicit.RepairIpv4Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-ipv6-addr", types.YLeaf{"RepairIpv6Addr", uloopExplicit.RepairIpv6Addr})
    uloopExplicit.EntityData.Leafs.Append("repair-label", types.YLeaf{"RepairLabel", uloopExplicit.RepairLabel})
    uloopExplicit.EntityData.Leafs.Append("repair-element-type", types.YLeaf{"RepairElementType", uloopExplicit.RepairElementType})
    uloopExplicit.EntityData.Leafs.Append("repair-strict-spf-label", types.YLeaf{"RepairStrictSpfLabel", uloopExplicit.RepairStrictSpfLabel})

    uloopExplicit.EntityData.YListKeys = []string {}

    return &(uloopExplicit.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh
// Next next hops
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If link_id is given. The type is bool.
    LinkIdSet interface{}

    // If ipv4 address is given. The type is bool.
    Ipv4Set interface{}

    // link ID of the next next hop. The type is interface{} with range:
    // 0..4294967295.
    LinkId interface{}

    // Ipv4 address of the next next hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}
}

func (nnh *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_ExplicitPath_Nnh) GetEntityData() *types.CommonEntityData {
    nnh.EntityData.YFilter = nnh.YFilter
    nnh.EntityData.YangName = "nnh"
    nnh.EntityData.BundleName = "cisco_ios_xr"
    nnh.EntityData.ParentYangName = "explicit-path"
    nnh.EntityData.SegmentPath = "nnh" + types.AddNoKeyToken(nnh)
    nnh.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/explicit-path/" + nnh.EntityData.SegmentPath
    nnh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnh.EntityData.Children = types.NewOrderedMap()
    nnh.EntityData.Leafs = types.NewOrderedMap()
    nnh.EntityData.Leafs.Append("link-id-set", types.YLeaf{"LinkIdSet", nnh.LinkIdSet})
    nnh.EntityData.Leafs.Append("ipv4-set", types.YLeaf{"Ipv4Set", nnh.Ipv4Set})
    nnh.EntityData.Leafs.Append("link-id", types.YLeaf{"LinkId", nnh.LinkId})
    nnh.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nnh.Ipv4Address})

    nnh.EntityData.YListKeys = []string {}

    return &(nnh.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source
// Sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid
}

func (source *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source) GetEntityData() *types.CommonEntityData {
    source.EntityData.YFilter = source.YFilter
    source.EntityData.YangName = "source"
    source.EntityData.BundleName = "cisco_ios_xr"
    source.EntityData.ParentYangName = "backup"
    source.EntityData.SegmentPath = "source" + types.AddNoKeyToken(source)
    source.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/" + source.EntityData.SegmentPath
    source.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    source.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    source.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    source.EntityData.Children = types.NewOrderedMap()
    source.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range source.Tags {
        types.SetYListKey(source.Tags[i], i)
        source.EntityData.Children.Append(types.GetSegmentPath(source.Tags[i]), types.YChild{"Tags", source.Tags[i]})
    }
    source.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range source.NodalSid {
        types.SetYListKey(source.NodalSid[i], i)
        source.EntityData.Children.Append(types.GetSegmentPath(source.NodalSid[i]), types.YChild{"NodalSid", source.NodalSid[i]})
    }
    source.EntityData.Leafs = types.NewOrderedMap()
    source.EntityData.Leafs.Append("source-lsp-id", types.YLeaf{"SourceLspId", source.SourceLspId})
    source.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", source.SourceAddress})

    source.EntityData.YListKeys = []string {}

    return &(source.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "source"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/source/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_Source_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "source"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/source/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource
// Multicast-intact sources advertising the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ID of the LSP advertising the prefix. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    SourceLspId interface{}

    // Source address of the IS advertising the prefix. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Tags associated with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
}

func (multicastSource *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource) GetEntityData() *types.CommonEntityData {
    multicastSource.EntityData.YFilter = multicastSource.YFilter
    multicastSource.EntityData.YangName = "multicast-source"
    multicastSource.EntityData.BundleName = "cisco_ios_xr"
    multicastSource.EntityData.ParentYangName = "backup"
    multicastSource.EntityData.SegmentPath = "multicast-source" + types.AddNoKeyToken(multicastSource)
    multicastSource.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/" + multicastSource.EntityData.SegmentPath
    multicastSource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastSource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastSource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastSource.EntityData.Children = types.NewOrderedMap()
    multicastSource.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range multicastSource.Tags {
        types.SetYListKey(multicastSource.Tags[i], i)
        multicastSource.EntityData.Children.Append(types.GetSegmentPath(multicastSource.Tags[i]), types.YChild{"Tags", multicastSource.Tags[i]})
    }
    multicastSource.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range multicastSource.NodalSid {
        types.SetYListKey(multicastSource.NodalSid[i], i)
        multicastSource.EntityData.Children.Append(types.GetSegmentPath(multicastSource.NodalSid[i]), types.YChild{"NodalSid", multicastSource.NodalSid[i]})
    }
    multicastSource.EntityData.Leafs = types.NewOrderedMap()
    multicastSource.EntityData.Leafs.Append("source-lsp-id", types.YLeaf{"SourceLspId", multicastSource.SourceLspId})
    multicastSource.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", multicastSource.SourceAddress})

    multicastSource.EntityData.YListKeys = []string {}

    return &(multicastSource.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags
// Tags associated with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "multicast-source"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/multicast-source/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_NativeStatus_NativeDetails_Backup_MulticastSource_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "multicast-source"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/native-status/native-details/backup/multicast-source/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail
// Per level details of how the local system
// advertises the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Level in which the prefix is advertised. The type is IsisLevel.
    Level interface{}

    // The origin of the advertisement. The type is IsisShRouteAdvOrigin.
    AdvertisingOrigin interface{}

    // Metric with which the prefix is advertised. The type is interface{} with
    // range: 0..4294967295.
    Metric interface{}

    // Has the prefix been propagated from another level?. The type is bool.
    IsPropagated interface{}

    // Is the metric an external metric?. The type is bool.
    IsExternalMetric interface{}

    // Is the prefix external to the IS-IS domain?. The type is bool.
    IsExternalReachability interface{}

    // Is the up/down bit set?. The type is bool.
    IsInterarea interface{}

    // Status of summarization for the prefix.
    SummarizationStatus Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus

    // Tags associated with the prefix. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags.
    Tags []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags

    // Nodal SIDs with the prefix item. The type is slice of
    // Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid.
    NodalSid []*Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid
}

func (perLevelAdvertisingDetail *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail) GetEntityData() *types.CommonEntityData {
    perLevelAdvertisingDetail.EntityData.YFilter = perLevelAdvertisingDetail.YFilter
    perLevelAdvertisingDetail.EntityData.YangName = "per-level-advertising-detail"
    perLevelAdvertisingDetail.EntityData.BundleName = "cisco_ios_xr"
    perLevelAdvertisingDetail.EntityData.ParentYangName = "ipv4-route"
    perLevelAdvertisingDetail.EntityData.SegmentPath = "per-level-advertising-detail" + types.AddNoKeyToken(perLevelAdvertisingDetail)
    perLevelAdvertisingDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/" + perLevelAdvertisingDetail.EntityData.SegmentPath
    perLevelAdvertisingDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perLevelAdvertisingDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perLevelAdvertisingDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perLevelAdvertisingDetail.EntityData.Children = types.NewOrderedMap()
    perLevelAdvertisingDetail.EntityData.Children.Append("summarization-status", types.YChild{"SummarizationStatus", &perLevelAdvertisingDetail.SummarizationStatus})
    perLevelAdvertisingDetail.EntityData.Children.Append("tags", types.YChild{"Tags", nil})
    for i := range perLevelAdvertisingDetail.Tags {
        types.SetYListKey(perLevelAdvertisingDetail.Tags[i], i)
        perLevelAdvertisingDetail.EntityData.Children.Append(types.GetSegmentPath(perLevelAdvertisingDetail.Tags[i]), types.YChild{"Tags", perLevelAdvertisingDetail.Tags[i]})
    }
    perLevelAdvertisingDetail.EntityData.Children.Append("nodal-sid", types.YChild{"NodalSid", nil})
    for i := range perLevelAdvertisingDetail.NodalSid {
        types.SetYListKey(perLevelAdvertisingDetail.NodalSid[i], i)
        perLevelAdvertisingDetail.EntityData.Children.Append(types.GetSegmentPath(perLevelAdvertisingDetail.NodalSid[i]), types.YChild{"NodalSid", perLevelAdvertisingDetail.NodalSid[i]})
    }
    perLevelAdvertisingDetail.EntityData.Leafs = types.NewOrderedMap()
    perLevelAdvertisingDetail.EntityData.Leafs.Append("level", types.YLeaf{"Level", perLevelAdvertisingDetail.Level})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("advertising-origin", types.YLeaf{"AdvertisingOrigin", perLevelAdvertisingDetail.AdvertisingOrigin})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", perLevelAdvertisingDetail.Metric})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("is-propagated", types.YLeaf{"IsPropagated", perLevelAdvertisingDetail.IsPropagated})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("is-external-metric", types.YLeaf{"IsExternalMetric", perLevelAdvertisingDetail.IsExternalMetric})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("is-external-reachability", types.YLeaf{"IsExternalReachability", perLevelAdvertisingDetail.IsExternalReachability})
    perLevelAdvertisingDetail.EntityData.Leafs.Append("is-interarea", types.YLeaf{"IsInterarea", perLevelAdvertisingDetail.IsInterarea})

    perLevelAdvertisingDetail.EntityData.YListKeys = []string {}

    return &(perLevelAdvertisingDetail.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus
// Status of summarization for the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IsValid. The type is IsisValid.
    IsValid interface{}

    // Summarizing Prefix.
    SummaryPrefix Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
}

func (summarizationStatus *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus) GetEntityData() *types.CommonEntityData {
    summarizationStatus.EntityData.YFilter = summarizationStatus.YFilter
    summarizationStatus.EntityData.YangName = "summarization-status"
    summarizationStatus.EntityData.BundleName = "cisco_ios_xr"
    summarizationStatus.EntityData.ParentYangName = "per-level-advertising-detail"
    summarizationStatus.EntityData.SegmentPath = "summarization-status"
    summarizationStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/per-level-advertising-detail/" + summarizationStatus.EntityData.SegmentPath
    summarizationStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summarizationStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summarizationStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summarizationStatus.EntityData.Children = types.NewOrderedMap()
    summarizationStatus.EntityData.Children.Append("summary-prefix", types.YChild{"SummaryPrefix", &summarizationStatus.SummaryPrefix})
    summarizationStatus.EntityData.Leafs = types.NewOrderedMap()
    summarizationStatus.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", summarizationStatus.IsValid})

    summarizationStatus.EntityData.YListKeys = []string {}

    return &(summarizationStatus.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix
// Summarizing Prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (summaryPrefix *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_SummarizationStatus_SummaryPrefix) GetEntityData() *types.CommonEntityData {
    summaryPrefix.EntityData.YFilter = summaryPrefix.YFilter
    summaryPrefix.EntityData.YangName = "summary-prefix"
    summaryPrefix.EntityData.BundleName = "cisco_ios_xr"
    summaryPrefix.EntityData.ParentYangName = "summarization-status"
    summaryPrefix.EntityData.SegmentPath = "summary-prefix"
    summaryPrefix.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/per-level-advertising-detail/summarization-status/" + summaryPrefix.EntityData.SegmentPath
    summaryPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryPrefix.EntityData.Children = types.NewOrderedMap()
    summaryPrefix.EntityData.Leafs = types.NewOrderedMap()
    summaryPrefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", summaryPrefix.Prefix})
    summaryPrefix.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", summaryPrefix.PrefixLength})

    summaryPrefix.EntityData.YListKeys = []string {}

    return &(summaryPrefix.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags
// Tags associated with the prefix
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (tags *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_Tags) GetEntityData() *types.CommonEntityData {
    tags.EntityData.YFilter = tags.YFilter
    tags.EntityData.YangName = "tags"
    tags.EntityData.BundleName = "cisco_ios_xr"
    tags.EntityData.ParentYangName = "per-level-advertising-detail"
    tags.EntityData.SegmentPath = "tags" + types.AddNoKeyToken(tags)
    tags.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/per-level-advertising-detail/" + tags.EntityData.SegmentPath
    tags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tags.EntityData.Children = types.NewOrderedMap()
    tags.EntityData.Leafs = types.NewOrderedMap()
    tags.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", tags.Entry})

    tags.EntityData.YListKeys = []string {}

    return &(tags.EntityData)
}

// Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid
// Nodal SIDs with the prefix item
type Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // sid value. The type is interface{} with range: 0..4294967295.
    SidValue interface{}

    // rflag. The type is interface{} with range: 0..255.
    Rflag interface{}

    // nflag. The type is interface{} with range: 0..255.
    Nflag interface{}

    // pflag. The type is interface{} with range: 0..255.
    Pflag interface{}

    // eflag. The type is interface{} with range: 0..255.
    Eflag interface{}

    // vflag. The type is interface{} with range: 0..255.
    Vflag interface{}

    // lflag. The type is interface{} with range: 0..255.
    Lflag interface{}

    // algorithm. The type is interface{} with range: 0..255.
    Algorithm interface{}
}

func (nodalSid *Isis_Instances_Instance_Topologies_Topology_Ipv4Routes_Ipv4Route_PerLevelAdvertisingDetail_NodalSid) GetEntityData() *types.CommonEntityData {
    nodalSid.EntityData.YFilter = nodalSid.YFilter
    nodalSid.EntityData.YangName = "nodal-sid"
    nodalSid.EntityData.BundleName = "cisco_ios_xr"
    nodalSid.EntityData.ParentYangName = "per-level-advertising-detail"
    nodalSid.EntityData.SegmentPath = "nodal-sid" + types.AddNoKeyToken(nodalSid)
    nodalSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/topologies/topology/ipv4-routes/ipv4-route/per-level-advertising-detail/" + nodalSid.EntityData.SegmentPath
    nodalSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodalSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodalSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodalSid.EntityData.Children = types.NewOrderedMap()
    nodalSid.EntityData.Leafs = types.NewOrderedMap()
    nodalSid.EntityData.Leafs.Append("sid-value", types.YLeaf{"SidValue", nodalSid.SidValue})
    nodalSid.EntityData.Leafs.Append("rflag", types.YLeaf{"Rflag", nodalSid.Rflag})
    nodalSid.EntityData.Leafs.Append("nflag", types.YLeaf{"Nflag", nodalSid.Nflag})
    nodalSid.EntityData.Leafs.Append("pflag", types.YLeaf{"Pflag", nodalSid.Pflag})
    nodalSid.EntityData.Leafs.Append("eflag", types.YLeaf{"Eflag", nodalSid.Eflag})
    nodalSid.EntityData.Leafs.Append("vflag", types.YLeaf{"Vflag", nodalSid.Vflag})
    nodalSid.EntityData.Leafs.Append("lflag", types.YLeaf{"Lflag", nodalSid.Lflag})
    nodalSid.EntityData.Leafs.Append("algorithm", types.YLeaf{"Algorithm", nodalSid.Algorithm})

    nodalSid.EntityData.YListKeys = []string {}

    return &(nodalSid.EntityData)
}

// Isis_Instances_Instance_NsrStatus
// NSR Status information
type Isis_Instances_Instance_NsrStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS VM STATE. The type is interface{} with range: 0..65535.
    IsisVmState interface{}

    // ISIS NSR PEER STATUS.
    IsisNsrPeer Isis_Instances_Instance_NsrStatus_IsisNsrPeer

    // ISIS NSR Infra.
    IsisNsrInfra Isis_Instances_Instance_NsrStatus_IsisNsrInfra
}

func (nsrStatus *Isis_Instances_Instance_NsrStatus) GetEntityData() *types.CommonEntityData {
    nsrStatus.EntityData.YFilter = nsrStatus.YFilter
    nsrStatus.EntityData.YangName = "nsr-status"
    nsrStatus.EntityData.BundleName = "cisco_ios_xr"
    nsrStatus.EntityData.ParentYangName = "instance"
    nsrStatus.EntityData.SegmentPath = "nsr-status"
    nsrStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/" + nsrStatus.EntityData.SegmentPath
    nsrStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrStatus.EntityData.Children = types.NewOrderedMap()
    nsrStatus.EntityData.Children.Append("isis-nsr-peer", types.YChild{"IsisNsrPeer", &nsrStatus.IsisNsrPeer})
    nsrStatus.EntityData.Children.Append("isis-nsr-infra", types.YChild{"IsisNsrInfra", &nsrStatus.IsisNsrInfra})
    nsrStatus.EntityData.Leafs = types.NewOrderedMap()
    nsrStatus.EntityData.Leafs.Append("isis-vm-state", types.YLeaf{"IsisVmState", nsrStatus.IsisVmState})

    nsrStatus.EntityData.YListKeys = []string {}

    return &(nsrStatus.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrPeer
// ISIS NSR PEER STATUS
type Isis_Instances_Instance_NsrStatus_IsisNsrPeer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // full sync achieved. The type is slice of
    // Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved.
    FullSyncAchieved []*Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved

    // man sync count. The type is slice of
    // Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount.
    ManSyncCount []*Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount

    // nsr chg count. The type is slice of
    // Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount.
    NsrChgCount []*Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount

    // uptime. The type is slice of
    // Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime.
    Uptime []*Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime

    // uptime valid. The type is slice of
    // Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid.
    UptimeValid []*Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid
}

func (isisNsrPeer *Isis_Instances_Instance_NsrStatus_IsisNsrPeer) GetEntityData() *types.CommonEntityData {
    isisNsrPeer.EntityData.YFilter = isisNsrPeer.YFilter
    isisNsrPeer.EntityData.YangName = "isis-nsr-peer"
    isisNsrPeer.EntityData.BundleName = "cisco_ios_xr"
    isisNsrPeer.EntityData.ParentYangName = "nsr-status"
    isisNsrPeer.EntityData.SegmentPath = "isis-nsr-peer"
    isisNsrPeer.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/" + isisNsrPeer.EntityData.SegmentPath
    isisNsrPeer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isisNsrPeer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isisNsrPeer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isisNsrPeer.EntityData.Children = types.NewOrderedMap()
    isisNsrPeer.EntityData.Children.Append("full-sync-achieved", types.YChild{"FullSyncAchieved", nil})
    for i := range isisNsrPeer.FullSyncAchieved {
        types.SetYListKey(isisNsrPeer.FullSyncAchieved[i], i)
        isisNsrPeer.EntityData.Children.Append(types.GetSegmentPath(isisNsrPeer.FullSyncAchieved[i]), types.YChild{"FullSyncAchieved", isisNsrPeer.FullSyncAchieved[i]})
    }
    isisNsrPeer.EntityData.Children.Append("man-sync-count", types.YChild{"ManSyncCount", nil})
    for i := range isisNsrPeer.ManSyncCount {
        types.SetYListKey(isisNsrPeer.ManSyncCount[i], i)
        isisNsrPeer.EntityData.Children.Append(types.GetSegmentPath(isisNsrPeer.ManSyncCount[i]), types.YChild{"ManSyncCount", isisNsrPeer.ManSyncCount[i]})
    }
    isisNsrPeer.EntityData.Children.Append("nsr-chg-count", types.YChild{"NsrChgCount", nil})
    for i := range isisNsrPeer.NsrChgCount {
        types.SetYListKey(isisNsrPeer.NsrChgCount[i], i)
        isisNsrPeer.EntityData.Children.Append(types.GetSegmentPath(isisNsrPeer.NsrChgCount[i]), types.YChild{"NsrChgCount", isisNsrPeer.NsrChgCount[i]})
    }
    isisNsrPeer.EntityData.Children.Append("uptime", types.YChild{"Uptime", nil})
    for i := range isisNsrPeer.Uptime {
        types.SetYListKey(isisNsrPeer.Uptime[i], i)
        isisNsrPeer.EntityData.Children.Append(types.GetSegmentPath(isisNsrPeer.Uptime[i]), types.YChild{"Uptime", isisNsrPeer.Uptime[i]})
    }
    isisNsrPeer.EntityData.Children.Append("uptime-valid", types.YChild{"UptimeValid", nil})
    for i := range isisNsrPeer.UptimeValid {
        types.SetYListKey(isisNsrPeer.UptimeValid[i], i)
        isisNsrPeer.EntityData.Children.Append(types.GetSegmentPath(isisNsrPeer.UptimeValid[i]), types.YChild{"UptimeValid", isisNsrPeer.UptimeValid[i]})
    }
    isisNsrPeer.EntityData.Leafs = types.NewOrderedMap()

    isisNsrPeer.EntityData.YListKeys = []string {}

    return &(isisNsrPeer.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved
// full sync achieved
type Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (fullSyncAchieved *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_FullSyncAchieved) GetEntityData() *types.CommonEntityData {
    fullSyncAchieved.EntityData.YFilter = fullSyncAchieved.YFilter
    fullSyncAchieved.EntityData.YangName = "full-sync-achieved"
    fullSyncAchieved.EntityData.BundleName = "cisco_ios_xr"
    fullSyncAchieved.EntityData.ParentYangName = "isis-nsr-peer"
    fullSyncAchieved.EntityData.SegmentPath = "full-sync-achieved" + types.AddNoKeyToken(fullSyncAchieved)
    fullSyncAchieved.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/isis-nsr-peer/" + fullSyncAchieved.EntityData.SegmentPath
    fullSyncAchieved.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fullSyncAchieved.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fullSyncAchieved.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fullSyncAchieved.EntityData.Children = types.NewOrderedMap()
    fullSyncAchieved.EntityData.Leafs = types.NewOrderedMap()
    fullSyncAchieved.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", fullSyncAchieved.Entry})

    fullSyncAchieved.EntityData.YListKeys = []string {}

    return &(fullSyncAchieved.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount
// man sync count
type Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (manSyncCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_ManSyncCount) GetEntityData() *types.CommonEntityData {
    manSyncCount.EntityData.YFilter = manSyncCount.YFilter
    manSyncCount.EntityData.YangName = "man-sync-count"
    manSyncCount.EntityData.BundleName = "cisco_ios_xr"
    manSyncCount.EntityData.ParentYangName = "isis-nsr-peer"
    manSyncCount.EntityData.SegmentPath = "man-sync-count" + types.AddNoKeyToken(manSyncCount)
    manSyncCount.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/isis-nsr-peer/" + manSyncCount.EntityData.SegmentPath
    manSyncCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    manSyncCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    manSyncCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    manSyncCount.EntityData.Children = types.NewOrderedMap()
    manSyncCount.EntityData.Leafs = types.NewOrderedMap()
    manSyncCount.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", manSyncCount.Entry})

    manSyncCount.EntityData.YListKeys = []string {}

    return &(manSyncCount.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount
// nsr chg count
type Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (nsrChgCount *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_NsrChgCount) GetEntityData() *types.CommonEntityData {
    nsrChgCount.EntityData.YFilter = nsrChgCount.YFilter
    nsrChgCount.EntityData.YangName = "nsr-chg-count"
    nsrChgCount.EntityData.BundleName = "cisco_ios_xr"
    nsrChgCount.EntityData.ParentYangName = "isis-nsr-peer"
    nsrChgCount.EntityData.SegmentPath = "nsr-chg-count" + types.AddNoKeyToken(nsrChgCount)
    nsrChgCount.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/isis-nsr-peer/" + nsrChgCount.EntityData.SegmentPath
    nsrChgCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrChgCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrChgCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrChgCount.EntityData.Children = types.NewOrderedMap()
    nsrChgCount.EntityData.Leafs = types.NewOrderedMap()
    nsrChgCount.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nsrChgCount.Entry})

    nsrChgCount.EntityData.YListKeys = []string {}

    return &(nsrChgCount.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime
// uptime
type Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (uptime *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_Uptime) GetEntityData() *types.CommonEntityData {
    uptime.EntityData.YFilter = uptime.YFilter
    uptime.EntityData.YangName = "uptime"
    uptime.EntityData.BundleName = "cisco_ios_xr"
    uptime.EntityData.ParentYangName = "isis-nsr-peer"
    uptime.EntityData.SegmentPath = "uptime" + types.AddNoKeyToken(uptime)
    uptime.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/isis-nsr-peer/" + uptime.EntityData.SegmentPath
    uptime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uptime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uptime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uptime.EntityData.Children = types.NewOrderedMap()
    uptime.EntityData.Leafs = types.NewOrderedMap()
    uptime.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", uptime.Entry})

    uptime.EntityData.YListKeys = []string {}

    return &(uptime.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid
// uptime valid
type Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Array entry. The type is bool.
    Entry interface{}
}

func (uptimeValid *Isis_Instances_Instance_NsrStatus_IsisNsrPeer_UptimeValid) GetEntityData() *types.CommonEntityData {
    uptimeValid.EntityData.YFilter = uptimeValid.YFilter
    uptimeValid.EntityData.YangName = "uptime-valid"
    uptimeValid.EntityData.BundleName = "cisco_ios_xr"
    uptimeValid.EntityData.ParentYangName = "isis-nsr-peer"
    uptimeValid.EntityData.SegmentPath = "uptime-valid" + types.AddNoKeyToken(uptimeValid)
    uptimeValid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/isis-nsr-peer/" + uptimeValid.EntityData.SegmentPath
    uptimeValid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    uptimeValid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    uptimeValid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    uptimeValid.EntityData.Children = types.NewOrderedMap()
    uptimeValid.EntityData.Leafs = types.NewOrderedMap()
    uptimeValid.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", uptimeValid.Entry})

    uptimeValid.EntityData.YListKeys = []string {}

    return &(uptimeValid.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra
// ISIS NSR Infra
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // gen.
    Gen Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Gen

    // pm.
    Pm Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Pm

    // ds.
    Ds Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds

    // te.
    Te Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Te

    // ncd. The type is slice of
    // Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd.
    Ncd []*Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd

    // nii idb. The type is slice of
    // Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb.
    NiiIdb []*Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb
}

func (isisNsrInfra *Isis_Instances_Instance_NsrStatus_IsisNsrInfra) GetEntityData() *types.CommonEntityData {
    isisNsrInfra.EntityData.YFilter = isisNsrInfra.YFilter
    isisNsrInfra.EntityData.YangName = "isis-nsr-infra"
    isisNsrInfra.EntityData.BundleName = "cisco_ios_xr"
    isisNsrInfra.EntityData.ParentYangName = "nsr-status"
    isisNsrInfra.EntityData.SegmentPath = "isis-nsr-infra"
    isisNsrInfra.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/" + isisNsrInfra.EntityData.SegmentPath
    isisNsrInfra.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isisNsrInfra.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isisNsrInfra.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isisNsrInfra.EntityData.Children = types.NewOrderedMap()
    isisNsrInfra.EntityData.Children.Append("gen", types.YChild{"Gen", &isisNsrInfra.Gen})
    isisNsrInfra.EntityData.Children.Append("pm", types.YChild{"Pm", &isisNsrInfra.Pm})
    isisNsrInfra.EntityData.Children.Append("ds", types.YChild{"Ds", &isisNsrInfra.Ds})
    isisNsrInfra.EntityData.Children.Append("te", types.YChild{"Te", &isisNsrInfra.Te})
    isisNsrInfra.EntityData.Children.Append("ncd", types.YChild{"Ncd", nil})
    for i := range isisNsrInfra.Ncd {
        types.SetYListKey(isisNsrInfra.Ncd[i], i)
        isisNsrInfra.EntityData.Children.Append(types.GetSegmentPath(isisNsrInfra.Ncd[i]), types.YChild{"Ncd", isisNsrInfra.Ncd[i]})
    }
    isisNsrInfra.EntityData.Children.Append("nii-idb", types.YChild{"NiiIdb", nil})
    for i := range isisNsrInfra.NiiIdb {
        types.SetYListKey(isisNsrInfra.NiiIdb[i], i)
        isisNsrInfra.EntityData.Children.Append(types.GetSegmentPath(isisNsrInfra.NiiIdb[i]), types.YChild{"NiiIdb", isisNsrInfra.NiiIdb[i]})
    }
    isisNsrInfra.EntityData.Leafs = types.NewOrderedMap()

    isisNsrInfra.EntityData.YListKeys = []string {}

    return &(isisNsrInfra.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Gen
// gen
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Gen struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // my nodeid. The type is interface{} with range: 0..4294967295.
    MyNodeid interface{}

    // my process id. The type is interface{} with range: 0..4294967295.
    MyProcessId interface{}

    // pm issu role. The type is interface{} with range: 0..255.
    PmIssuRole interface{}

    // pm ha role. The type is interface{} with range: 0..255.
    PmHaRole interface{}

    // sysmgr ha role. The type is interface{} with range: 0..255.
    SysmgrHaRole interface{}

    // nsr send ready. The type is interface{} with range: 0..255.
    NsrSendReady interface{}

    // nsr send unready. The type is interface{} with range: 0..255.
    NsrSendUnready interface{}

    // nsr send err. The type is interface{} with range: 0..4294967295.
    NsrSendErr interface{}

    // nsr recv err. The type is interface{} with range: 0..4294967295.
    NsrRecvErr interface{}

    // retry flag. The type is interface{} with range: 0..4294967295.
    RetryFlag interface{}

    // nsr enabled. The type is bool.
    NsrEnabled interface{}

    // nsr configured. The type is bool.
    NsrConfigured interface{}

    // nsf configured. The type is bool.
    NsfConfigured interface{}

    // failover. The type is bool.
    Failover interface{}

    // lanid req needed. The type is bool.
    LanidReqNeeded interface{}
}

func (gen *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Gen) GetEntityData() *types.CommonEntityData {
    gen.EntityData.YFilter = gen.YFilter
    gen.EntityData.YangName = "gen"
    gen.EntityData.BundleName = "cisco_ios_xr"
    gen.EntityData.ParentYangName = "isis-nsr-infra"
    gen.EntityData.SegmentPath = "gen"
    gen.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/isis-nsr-infra/" + gen.EntityData.SegmentPath
    gen.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gen.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gen.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gen.EntityData.Children = types.NewOrderedMap()
    gen.EntityData.Leafs = types.NewOrderedMap()
    gen.EntityData.Leafs.Append("my-nodeid", types.YLeaf{"MyNodeid", gen.MyNodeid})
    gen.EntityData.Leafs.Append("my-process-id", types.YLeaf{"MyProcessId", gen.MyProcessId})
    gen.EntityData.Leafs.Append("pm-issu-role", types.YLeaf{"PmIssuRole", gen.PmIssuRole})
    gen.EntityData.Leafs.Append("pm-ha-role", types.YLeaf{"PmHaRole", gen.PmHaRole})
    gen.EntityData.Leafs.Append("sysmgr-ha-role", types.YLeaf{"SysmgrHaRole", gen.SysmgrHaRole})
    gen.EntityData.Leafs.Append("nsr-send-ready", types.YLeaf{"NsrSendReady", gen.NsrSendReady})
    gen.EntityData.Leafs.Append("nsr-send-unready", types.YLeaf{"NsrSendUnready", gen.NsrSendUnready})
    gen.EntityData.Leafs.Append("nsr-send-err", types.YLeaf{"NsrSendErr", gen.NsrSendErr})
    gen.EntityData.Leafs.Append("nsr-recv-err", types.YLeaf{"NsrRecvErr", gen.NsrRecvErr})
    gen.EntityData.Leafs.Append("retry-flag", types.YLeaf{"RetryFlag", gen.RetryFlag})
    gen.EntityData.Leafs.Append("nsr-enabled", types.YLeaf{"NsrEnabled", gen.NsrEnabled})
    gen.EntityData.Leafs.Append("nsr-configured", types.YLeaf{"NsrConfigured", gen.NsrConfigured})
    gen.EntityData.Leafs.Append("nsf-configured", types.YLeaf{"NsfConfigured", gen.NsfConfigured})
    gen.EntityData.Leafs.Append("failover", types.YLeaf{"Failover", gen.Failover})
    gen.EntityData.Leafs.Append("lanid-req-needed", types.YLeaf{"LanidReqNeeded", gen.LanidReqNeeded})

    gen.EntityData.YListKeys = []string {}

    return &(gen.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Pm
// pm
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Pm struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // reg. The type is interface{} with range: 0..255.
    Reg interface{}

    // conn cb. The type is interface{} with range: 0..255.
    ConnCb interface{}

    // disconn cb. The type is interface{} with range: 0..255.
    DisconnCb interface{}

    // conn status. The type is bool.
    ConnStatus interface{}
}

func (pm *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Pm) GetEntityData() *types.CommonEntityData {
    pm.EntityData.YFilter = pm.YFilter
    pm.EntityData.YangName = "pm"
    pm.EntityData.BundleName = "cisco_ios_xr"
    pm.EntityData.ParentYangName = "isis-nsr-infra"
    pm.EntityData.SegmentPath = "pm"
    pm.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/isis-nsr-infra/" + pm.EntityData.SegmentPath
    pm.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pm.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pm.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pm.EntityData.Children = types.NewOrderedMap()
    pm.EntityData.Leafs = types.NewOrderedMap()
    pm.EntityData.Leafs.Append("reg", types.YLeaf{"Reg", pm.Reg})
    pm.EntityData.Leafs.Append("conn-cb", types.YLeaf{"ConnCb", pm.ConnCb})
    pm.EntityData.Leafs.Append("disconn-cb", types.YLeaf{"DisconnCb", pm.DisconnCb})
    pm.EntityData.Leafs.Append("conn-status", types.YLeaf{"ConnStatus", pm.ConnStatus})

    pm.EntityData.YListKeys = []string {}

    return &(pm.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds
// ds
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // conn. The type is interface{} with range: 0..255.
    Conn interface{}

    // conn cb. The type is interface{} with range: 0..255.
    ConnCb interface{}

    // pub. The type is interface{} with range: 0..255.
    Pub interface{}

    // pub cb. The type is interface{} with range: 0..255.
    PubCb interface{}

    // reg. The type is interface{} with range: 0..255.
    Reg interface{}

    // reg cb. The type is interface{} with range: 0..255.
    RegCb interface{}

    // unreg. The type is interface{} with range: 0..255.
    Unreg interface{}

    // unreg cb. The type is interface{} with range: 0..255.
    UnregCb interface{}

    // disconn cb. The type is interface{} with range: 0..255.
    DisconnCb interface{}

    // notify cb. The type is interface{} with range: 0..255.
    NotifyCb interface{}

    // notify peer xr. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    NotifyPeerXr interface{}

    // del cb. The type is interface{} with range: 0..255.
    DelCb interface{}

    // remove srv. The type is interface{} with range: 0..255.
    RemoveSrv interface{}

    // conn status. The type is bool.
    ConnStatus interface{}

    // conn ts.
    ConnTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnTs

    // conn cb ts.
    ConnCbTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnCbTs

    // pub ts.
    PubTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubTs

    // pub cb ts.
    PubCbTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubCbTs

    // reg ts.
    RegTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegTs

    // reg cb ts.
    RegCbTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegCbTs

    // unreg ts.
    UnregTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregTs

    // unreg cb ts.
    UnregCbTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregCbTs

    // disconn cb ts.
    DisconnCbTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DisconnCbTs

    // notify cb ts.
    NotifyCbTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyCbTs

    // del cb ts.
    DelCbTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DelCbTs

    // remove srv ts.
    RemoveSrvTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RemoveSrvTs

    // conn status ts.
    ConnStatusTs Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnStatusTs

    // notify peer. The type is slice of
    // Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer.
    NotifyPeer []*Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer
}

func (ds *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds) GetEntityData() *types.CommonEntityData {
    ds.EntityData.YFilter = ds.YFilter
    ds.EntityData.YangName = "ds"
    ds.EntityData.BundleName = "cisco_ios_xr"
    ds.EntityData.ParentYangName = "isis-nsr-infra"
    ds.EntityData.SegmentPath = "ds"
    ds.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/isis-nsr-infra/" + ds.EntityData.SegmentPath
    ds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ds.EntityData.Children = types.NewOrderedMap()
    ds.EntityData.Children.Append("conn-ts", types.YChild{"ConnTs", &ds.ConnTs})
    ds.EntityData.Children.Append("conn-cb-ts", types.YChild{"ConnCbTs", &ds.ConnCbTs})
    ds.EntityData.Children.Append("pub-ts", types.YChild{"PubTs", &ds.PubTs})
    ds.EntityData.Children.Append("pub-cb-ts", types.YChild{"PubCbTs", &ds.PubCbTs})
    ds.EntityData.Children.Append("reg-ts", types.YChild{"RegTs", &ds.RegTs})
    ds.EntityData.Children.Append("reg-cb-ts", types.YChild{"RegCbTs", &ds.RegCbTs})
    ds.EntityData.Children.Append("unreg-ts", types.YChild{"UnregTs", &ds.UnregTs})
    ds.EntityData.Children.Append("unreg-cb-ts", types.YChild{"UnregCbTs", &ds.UnregCbTs})
    ds.EntityData.Children.Append("disconn-cb-ts", types.YChild{"DisconnCbTs", &ds.DisconnCbTs})
    ds.EntityData.Children.Append("notify-cb-ts", types.YChild{"NotifyCbTs", &ds.NotifyCbTs})
    ds.EntityData.Children.Append("del-cb-ts", types.YChild{"DelCbTs", &ds.DelCbTs})
    ds.EntityData.Children.Append("remove-srv-ts", types.YChild{"RemoveSrvTs", &ds.RemoveSrvTs})
    ds.EntityData.Children.Append("conn-status-ts", types.YChild{"ConnStatusTs", &ds.ConnStatusTs})
    ds.EntityData.Children.Append("notify-peer", types.YChild{"NotifyPeer", nil})
    for i := range ds.NotifyPeer {
        types.SetYListKey(ds.NotifyPeer[i], i)
        ds.EntityData.Children.Append(types.GetSegmentPath(ds.NotifyPeer[i]), types.YChild{"NotifyPeer", ds.NotifyPeer[i]})
    }
    ds.EntityData.Leafs = types.NewOrderedMap()
    ds.EntityData.Leafs.Append("conn", types.YLeaf{"Conn", ds.Conn})
    ds.EntityData.Leafs.Append("conn-cb", types.YLeaf{"ConnCb", ds.ConnCb})
    ds.EntityData.Leafs.Append("pub", types.YLeaf{"Pub", ds.Pub})
    ds.EntityData.Leafs.Append("pub-cb", types.YLeaf{"PubCb", ds.PubCb})
    ds.EntityData.Leafs.Append("reg", types.YLeaf{"Reg", ds.Reg})
    ds.EntityData.Leafs.Append("reg-cb", types.YLeaf{"RegCb", ds.RegCb})
    ds.EntityData.Leafs.Append("unreg", types.YLeaf{"Unreg", ds.Unreg})
    ds.EntityData.Leafs.Append("unreg-cb", types.YLeaf{"UnregCb", ds.UnregCb})
    ds.EntityData.Leafs.Append("disconn-cb", types.YLeaf{"DisconnCb", ds.DisconnCb})
    ds.EntityData.Leafs.Append("notify-cb", types.YLeaf{"NotifyCb", ds.NotifyCb})
    ds.EntityData.Leafs.Append("notify-peer-xr", types.YLeaf{"NotifyPeerXr", ds.NotifyPeerXr})
    ds.EntityData.Leafs.Append("del-cb", types.YLeaf{"DelCb", ds.DelCb})
    ds.EntityData.Leafs.Append("remove-srv", types.YLeaf{"RemoveSrv", ds.RemoveSrv})
    ds.EntityData.Leafs.Append("conn-status", types.YLeaf{"ConnStatus", ds.ConnStatus})

    ds.EntityData.YListKeys = []string {}

    return &(ds.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnTs
// conn ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnTs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (connTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnTs) GetEntityData() *types.CommonEntityData {
    connTs.EntityData.YFilter = connTs.YFilter
    connTs.EntityData.YangName = "conn-ts"
    connTs.EntityData.BundleName = "cisco_ios_xr"
    connTs.EntityData.ParentYangName = "ds"
    connTs.EntityData.SegmentPath = "conn-ts"
    connTs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/isis-nsr-infra/ds/" + connTs.EntityData.SegmentPath
    connTs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connTs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connTs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connTs.EntityData.Children = types.NewOrderedMap()
    connTs.EntityData.Leafs = types.NewOrderedMap()
    connTs.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", connTs.Seconds})
    connTs.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", connTs.NanoSeconds})

    connTs.EntityData.YListKeys = []string {}

    return &(connTs.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnCbTs
// conn cb ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnCbTs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (connCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnCbTs) GetEntityData() *types.CommonEntityData {
    connCbTs.EntityData.YFilter = connCbTs.YFilter
    connCbTs.EntityData.YangName = "conn-cb-ts"
    connCbTs.EntityData.BundleName = "cisco_ios_xr"
    connCbTs.EntityData.ParentYangName = "ds"
    connCbTs.EntityData.SegmentPath = "conn-cb-ts"
    connCbTs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/isis-nsr-infra/ds/" + connCbTs.EntityData.SegmentPath
    connCbTs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connCbTs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connCbTs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connCbTs.EntityData.Children = types.NewOrderedMap()
    connCbTs.EntityData.Leafs = types.NewOrderedMap()
    connCbTs.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", connCbTs.Seconds})
    connCbTs.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", connCbTs.NanoSeconds})

    connCbTs.EntityData.YListKeys = []string {}

    return &(connCbTs.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubTs
// pub ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubTs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (pubTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubTs) GetEntityData() *types.CommonEntityData {
    pubTs.EntityData.YFilter = pubTs.YFilter
    pubTs.EntityData.YangName = "pub-ts"
    pubTs.EntityData.BundleName = "cisco_ios_xr"
    pubTs.EntityData.ParentYangName = "ds"
    pubTs.EntityData.SegmentPath = "pub-ts"
    pubTs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/isis-nsr-infra/ds/" + pubTs.EntityData.SegmentPath
    pubTs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pubTs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pubTs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pubTs.EntityData.Children = types.NewOrderedMap()
    pubTs.EntityData.Leafs = types.NewOrderedMap()
    pubTs.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", pubTs.Seconds})
    pubTs.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", pubTs.NanoSeconds})

    pubTs.EntityData.YListKeys = []string {}

    return &(pubTs.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubCbTs
// pub cb ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubCbTs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (pubCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_PubCbTs) GetEntityData() *types.CommonEntityData {
    pubCbTs.EntityData.YFilter = pubCbTs.YFilter
    pubCbTs.EntityData.YangName = "pub-cb-ts"
    pubCbTs.EntityData.BundleName = "cisco_ios_xr"
    pubCbTs.EntityData.ParentYangName = "ds"
    pubCbTs.EntityData.SegmentPath = "pub-cb-ts"
    pubCbTs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/isis-nsr-infra/ds/" + pubCbTs.EntityData.SegmentPath
    pubCbTs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pubCbTs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pubCbTs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pubCbTs.EntityData.Children = types.NewOrderedMap()
    pubCbTs.EntityData.Leafs = types.NewOrderedMap()
    pubCbTs.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", pubCbTs.Seconds})
    pubCbTs.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", pubCbTs.NanoSeconds})

    pubCbTs.EntityData.YListKeys = []string {}

    return &(pubCbTs.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegTs
// reg ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegTs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (regTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegTs) GetEntityData() *types.CommonEntityData {
    regTs.EntityData.YFilter = regTs.YFilter
    regTs.EntityData.YangName = "reg-ts"
    regTs.EntityData.BundleName = "cisco_ios_xr"
    regTs.EntityData.ParentYangName = "ds"
    regTs.EntityData.SegmentPath = "reg-ts"
    regTs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/isis-nsr-infra/ds/" + regTs.EntityData.SegmentPath
    regTs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    regTs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    regTs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    regTs.EntityData.Children = types.NewOrderedMap()
    regTs.EntityData.Leafs = types.NewOrderedMap()
    regTs.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", regTs.Seconds})
    regTs.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", regTs.NanoSeconds})

    regTs.EntityData.YListKeys = []string {}

    return &(regTs.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegCbTs
// reg cb ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegCbTs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (regCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RegCbTs) GetEntityData() *types.CommonEntityData {
    regCbTs.EntityData.YFilter = regCbTs.YFilter
    regCbTs.EntityData.YangName = "reg-cb-ts"
    regCbTs.EntityData.BundleName = "cisco_ios_xr"
    regCbTs.EntityData.ParentYangName = "ds"
    regCbTs.EntityData.SegmentPath = "reg-cb-ts"
    regCbTs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/isis-nsr-infra/ds/" + regCbTs.EntityData.SegmentPath
    regCbTs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    regCbTs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    regCbTs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    regCbTs.EntityData.Children = types.NewOrderedMap()
    regCbTs.EntityData.Leafs = types.NewOrderedMap()
    regCbTs.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", regCbTs.Seconds})
    regCbTs.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", regCbTs.NanoSeconds})

    regCbTs.EntityData.YListKeys = []string {}

    return &(regCbTs.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregTs
// unreg ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregTs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (unregTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregTs) GetEntityData() *types.CommonEntityData {
    unregTs.EntityData.YFilter = unregTs.YFilter
    unregTs.EntityData.YangName = "unreg-ts"
    unregTs.EntityData.BundleName = "cisco_ios_xr"
    unregTs.EntityData.ParentYangName = "ds"
    unregTs.EntityData.SegmentPath = "unreg-ts"
    unregTs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/isis-nsr-infra/ds/" + unregTs.EntityData.SegmentPath
    unregTs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unregTs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unregTs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unregTs.EntityData.Children = types.NewOrderedMap()
    unregTs.EntityData.Leafs = types.NewOrderedMap()
    unregTs.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", unregTs.Seconds})
    unregTs.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", unregTs.NanoSeconds})

    unregTs.EntityData.YListKeys = []string {}

    return &(unregTs.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregCbTs
// unreg cb ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregCbTs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (unregCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_UnregCbTs) GetEntityData() *types.CommonEntityData {
    unregCbTs.EntityData.YFilter = unregCbTs.YFilter
    unregCbTs.EntityData.YangName = "unreg-cb-ts"
    unregCbTs.EntityData.BundleName = "cisco_ios_xr"
    unregCbTs.EntityData.ParentYangName = "ds"
    unregCbTs.EntityData.SegmentPath = "unreg-cb-ts"
    unregCbTs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/isis-nsr-infra/ds/" + unregCbTs.EntityData.SegmentPath
    unregCbTs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unregCbTs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unregCbTs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unregCbTs.EntityData.Children = types.NewOrderedMap()
    unregCbTs.EntityData.Leafs = types.NewOrderedMap()
    unregCbTs.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", unregCbTs.Seconds})
    unregCbTs.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", unregCbTs.NanoSeconds})

    unregCbTs.EntityData.YListKeys = []string {}

    return &(unregCbTs.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DisconnCbTs
// disconn cb ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DisconnCbTs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (disconnCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DisconnCbTs) GetEntityData() *types.CommonEntityData {
    disconnCbTs.EntityData.YFilter = disconnCbTs.YFilter
    disconnCbTs.EntityData.YangName = "disconn-cb-ts"
    disconnCbTs.EntityData.BundleName = "cisco_ios_xr"
    disconnCbTs.EntityData.ParentYangName = "ds"
    disconnCbTs.EntityData.SegmentPath = "disconn-cb-ts"
    disconnCbTs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/isis-nsr-infra/ds/" + disconnCbTs.EntityData.SegmentPath
    disconnCbTs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    disconnCbTs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    disconnCbTs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    disconnCbTs.EntityData.Children = types.NewOrderedMap()
    disconnCbTs.EntityData.Leafs = types.NewOrderedMap()
    disconnCbTs.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", disconnCbTs.Seconds})
    disconnCbTs.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", disconnCbTs.NanoSeconds})

    disconnCbTs.EntityData.YListKeys = []string {}

    return &(disconnCbTs.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyCbTs
// notify cb ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyCbTs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (notifyCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyCbTs) GetEntityData() *types.CommonEntityData {
    notifyCbTs.EntityData.YFilter = notifyCbTs.YFilter
    notifyCbTs.EntityData.YangName = "notify-cb-ts"
    notifyCbTs.EntityData.BundleName = "cisco_ios_xr"
    notifyCbTs.EntityData.ParentYangName = "ds"
    notifyCbTs.EntityData.SegmentPath = "notify-cb-ts"
    notifyCbTs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/isis-nsr-infra/ds/" + notifyCbTs.EntityData.SegmentPath
    notifyCbTs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    notifyCbTs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    notifyCbTs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    notifyCbTs.EntityData.Children = types.NewOrderedMap()
    notifyCbTs.EntityData.Leafs = types.NewOrderedMap()
    notifyCbTs.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", notifyCbTs.Seconds})
    notifyCbTs.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", notifyCbTs.NanoSeconds})

    notifyCbTs.EntityData.YListKeys = []string {}

    return &(notifyCbTs.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DelCbTs
// del cb ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DelCbTs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (delCbTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_DelCbTs) GetEntityData() *types.CommonEntityData {
    delCbTs.EntityData.YFilter = delCbTs.YFilter
    delCbTs.EntityData.YangName = "del-cb-ts"
    delCbTs.EntityData.BundleName = "cisco_ios_xr"
    delCbTs.EntityData.ParentYangName = "ds"
    delCbTs.EntityData.SegmentPath = "del-cb-ts"
    delCbTs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/isis-nsr-infra/ds/" + delCbTs.EntityData.SegmentPath
    delCbTs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    delCbTs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    delCbTs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    delCbTs.EntityData.Children = types.NewOrderedMap()
    delCbTs.EntityData.Leafs = types.NewOrderedMap()
    delCbTs.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", delCbTs.Seconds})
    delCbTs.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", delCbTs.NanoSeconds})

    delCbTs.EntityData.YListKeys = []string {}

    return &(delCbTs.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RemoveSrvTs
// remove srv ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RemoveSrvTs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (removeSrvTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_RemoveSrvTs) GetEntityData() *types.CommonEntityData {
    removeSrvTs.EntityData.YFilter = removeSrvTs.YFilter
    removeSrvTs.EntityData.YangName = "remove-srv-ts"
    removeSrvTs.EntityData.BundleName = "cisco_ios_xr"
    removeSrvTs.EntityData.ParentYangName = "ds"
    removeSrvTs.EntityData.SegmentPath = "remove-srv-ts"
    removeSrvTs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/isis-nsr-infra/ds/" + removeSrvTs.EntityData.SegmentPath
    removeSrvTs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    removeSrvTs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    removeSrvTs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    removeSrvTs.EntityData.Children = types.NewOrderedMap()
    removeSrvTs.EntityData.Leafs = types.NewOrderedMap()
    removeSrvTs.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", removeSrvTs.Seconds})
    removeSrvTs.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", removeSrvTs.NanoSeconds})

    removeSrvTs.EntityData.YListKeys = []string {}

    return &(removeSrvTs.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnStatusTs
// conn status ts
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnStatusTs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (connStatusTs *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_ConnStatusTs) GetEntityData() *types.CommonEntityData {
    connStatusTs.EntityData.YFilter = connStatusTs.YFilter
    connStatusTs.EntityData.YangName = "conn-status-ts"
    connStatusTs.EntityData.BundleName = "cisco_ios_xr"
    connStatusTs.EntityData.ParentYangName = "ds"
    connStatusTs.EntityData.SegmentPath = "conn-status-ts"
    connStatusTs.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/isis-nsr-infra/ds/" + connStatusTs.EntityData.SegmentPath
    connStatusTs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connStatusTs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connStatusTs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connStatusTs.EntityData.Children = types.NewOrderedMap()
    connStatusTs.EntityData.Leafs = types.NewOrderedMap()
    connStatusTs.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", connStatusTs.Seconds})
    connStatusTs.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", connStatusTs.NanoSeconds})

    connStatusTs.EntityData.YListKeys = []string {}

    return &(connStatusTs.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer
// notify peer
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (notifyPeer *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ds_NotifyPeer) GetEntityData() *types.CommonEntityData {
    notifyPeer.EntityData.YFilter = notifyPeer.YFilter
    notifyPeer.EntityData.YangName = "notify-peer"
    notifyPeer.EntityData.BundleName = "cisco_ios_xr"
    notifyPeer.EntityData.ParentYangName = "ds"
    notifyPeer.EntityData.SegmentPath = "notify-peer" + types.AddNoKeyToken(notifyPeer)
    notifyPeer.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/isis-nsr-infra/ds/" + notifyPeer.EntityData.SegmentPath
    notifyPeer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    notifyPeer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    notifyPeer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    notifyPeer.EntityData.Children = types.NewOrderedMap()
    notifyPeer.EntityData.Leafs = types.NewOrderedMap()
    notifyPeer.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", notifyPeer.Seconds})
    notifyPeer.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", notifyPeer.NanoSeconds})

    notifyPeer.EntityData.YListKeys = []string {}

    return &(notifyPeer.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Te
// te
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Te struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // enabled. The type is interface{} with range: 0..255.
    Enabled interface{}

    // conn up. The type is interface{} with range: 0..255.
    ConnUp interface{}

    // te link cb. The type is interface{} with range: 0..255.
    TeLinkCb interface{}

    // te tunnel cb. The type is interface{} with range: 0..255.
    TeTunnelCb interface{}

    // adv sync data. The type is interface{} with range: 0..255.
    AdvSyncData interface{}

    // link purge time on. The type is interface{} with range: 0..255.
    LinkPurgeTimeOn interface{}

    // tunnel purge time on. The type is interface{} with range: 0..255.
    TunnelPurgeTimeOn interface{}

    // has info from te. The type is interface{} with range: 0..255.
    HasInfoFromTe interface{}
}

func (te *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Te) GetEntityData() *types.CommonEntityData {
    te.EntityData.YFilter = te.YFilter
    te.EntityData.YangName = "te"
    te.EntityData.BundleName = "cisco_ios_xr"
    te.EntityData.ParentYangName = "isis-nsr-infra"
    te.EntityData.SegmentPath = "te"
    te.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/isis-nsr-infra/" + te.EntityData.SegmentPath
    te.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    te.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    te.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    te.EntityData.Children = types.NewOrderedMap()
    te.EntityData.Leafs = types.NewOrderedMap()
    te.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", te.Enabled})
    te.EntityData.Leafs.Append("conn-up", types.YLeaf{"ConnUp", te.ConnUp})
    te.EntityData.Leafs.Append("te-link-cb", types.YLeaf{"TeLinkCb", te.TeLinkCb})
    te.EntityData.Leafs.Append("te-tunnel-cb", types.YLeaf{"TeTunnelCb", te.TeTunnelCb})
    te.EntityData.Leafs.Append("adv-sync-data", types.YLeaf{"AdvSyncData", te.AdvSyncData})
    te.EntityData.Leafs.Append("link-purge-time-on", types.YLeaf{"LinkPurgeTimeOn", te.LinkPurgeTimeOn})
    te.EntityData.Leafs.Append("tunnel-purge-time-on", types.YLeaf{"TunnelPurgeTimeOn", te.TunnelPurgeTimeOn})
    te.EntityData.Leafs.Append("has-info-from-te", types.YLeaf{"HasInfoFromTe", te.HasInfoFromTe})

    te.EntityData.YListKeys = []string {}

    return &(te.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd
// ncd
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // vm idx. The type is interface{} with range: 0..255.
    VmIdx interface{}

    // conn up. The type is bool.
    ConnUp interface{}

    // endp hdl. The type is interface{} with range: 0..255.
    EndpHdl interface{}

    // chksum. The type is interface{} with range: 0..65535.
    Chksum interface{}

    // send seqnum. The type is interface{} with range: 0..4294967295.
    SendSeqnum interface{}

    // recv cnt. The type is interface{} with range: 0..4294967295.
    RecvCnt interface{}
}

func (ncd *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_Ncd) GetEntityData() *types.CommonEntityData {
    ncd.EntityData.YFilter = ncd.YFilter
    ncd.EntityData.YangName = "ncd"
    ncd.EntityData.BundleName = "cisco_ios_xr"
    ncd.EntityData.ParentYangName = "isis-nsr-infra"
    ncd.EntityData.SegmentPath = "ncd" + types.AddNoKeyToken(ncd)
    ncd.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/isis-nsr-infra/" + ncd.EntityData.SegmentPath
    ncd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ncd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ncd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ncd.EntityData.Children = types.NewOrderedMap()
    ncd.EntityData.Leafs = types.NewOrderedMap()
    ncd.EntityData.Leafs.Append("vm-idx", types.YLeaf{"VmIdx", ncd.VmIdx})
    ncd.EntityData.Leafs.Append("conn-up", types.YLeaf{"ConnUp", ncd.ConnUp})
    ncd.EntityData.Leafs.Append("endp-hdl", types.YLeaf{"EndpHdl", ncd.EndpHdl})
    ncd.EntityData.Leafs.Append("chksum", types.YLeaf{"Chksum", ncd.Chksum})
    ncd.EntityData.Leafs.Append("send-seqnum", types.YLeaf{"SendSeqnum", ncd.SendSeqnum})
    ncd.EntityData.Leafs.Append("recv-cnt", types.YLeaf{"RecvCnt", ncd.RecvCnt})

    ncd.EntityData.YListKeys = []string {}

    return &(ncd.EntityData)
}

// Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb
// nii idb
type Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // exist. The type is bool.
    Exist interface{}

    // brought up. The type is bool.
    BroughtUp interface{}

    // retry timer. The type is bool.
    RetryTimer interface{}

    // running. The type is bool.
    Running interface{}

    // has adj. The type is bool.
    HasAdj interface{}
}

func (niiIdb *Isis_Instances_Instance_NsrStatus_IsisNsrInfra_NiiIdb) GetEntityData() *types.CommonEntityData {
    niiIdb.EntityData.YFilter = niiIdb.YFilter
    niiIdb.EntityData.YangName = "nii-idb"
    niiIdb.EntityData.BundleName = "cisco_ios_xr"
    niiIdb.EntityData.ParentYangName = "isis-nsr-infra"
    niiIdb.EntityData.SegmentPath = "nii-idb" + types.AddNoKeyToken(niiIdb)
    niiIdb.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-status/isis-nsr-infra/" + niiIdb.EntityData.SegmentPath
    niiIdb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    niiIdb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    niiIdb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    niiIdb.EntityData.Children = types.NewOrderedMap()
    niiIdb.EntityData.Leafs = types.NewOrderedMap()
    niiIdb.EntityData.Leafs.Append("exist", types.YLeaf{"Exist", niiIdb.Exist})
    niiIdb.EntityData.Leafs.Append("brought-up", types.YLeaf{"BroughtUp", niiIdb.BroughtUp})
    niiIdb.EntityData.Leafs.Append("retry-timer", types.YLeaf{"RetryTimer", niiIdb.RetryTimer})
    niiIdb.EntityData.Leafs.Append("running", types.YLeaf{"Running", niiIdb.Running})
    niiIdb.EntityData.Leafs.Append("has-adj", types.YLeaf{"HasAdj", niiIdb.HasAdj})

    niiIdb.EntityData.YListKeys = []string {}

    return &(niiIdb.EntityData)
}

// Isis_Instances_Instance_Interfaces
// Interface table
type Isis_Instances_Instance_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information about one IS-IS interface. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface.
    Interface []*Isis_Instances_Instance_Interfaces_Interface
}

func (interfaces *Isis_Instances_Instance_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "cisco_ios_xr"
    interfaces.EntityData.ParentYangName = "instance"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/" + interfaces.EntityData.SegmentPath
    interfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaces.Interface {
        interfaces.EntityData.Children.Append(types.GetSegmentPath(interfaces.Interface[i]), types.YChild{"Interface", interfaces.Interface[i]})
    }
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface
// Information about one IS-IS interface
type Isis_Instances_Instance_Interfaces_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Configured circuit type for the interface. The type is IsisLevels.
    ConfiguredCircuitType interface{}

    // Interface mesh group. The type is interface{} with range: 0..4294967295.
    MeshGroup interface{}

    // IS-type of the router. The type is IsisLevels.
    IsType interface{}

    // ISIS NSR Interface. The type is bool.
    NsrIntf interface{}

    // Configured interface status.
    ConfiguredStatus Isis_Instances_Instance_Interfaces_Interface_ConfiguredStatus

    // Information about the interface status and its data.
    InterfaceStatusAndData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData
}

func (self *Isis_Instances_Instance_Interfaces_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interfaces"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("configured-status", types.YChild{"ConfiguredStatus", &self.ConfiguredStatus})
    self.EntityData.Children.Append("interface-status-and-data", types.YChild{"InterfaceStatusAndData", &self.InterfaceStatusAndData})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("configured-circuit-type", types.YLeaf{"ConfiguredCircuitType", self.ConfiguredCircuitType})
    self.EntityData.Leafs.Append("mesh-group", types.YLeaf{"MeshGroup", self.MeshGroup})
    self.EntityData.Leafs.Append("is-type", types.YLeaf{"IsType", self.IsType})
    self.EntityData.Leafs.Append("nsr-intf", types.YLeaf{"NsrIntf", self.NsrIntf})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_ConfiguredStatus
// Configured interface status
type Isis_Instances_Instance_Interfaces_Interface_ConfiguredStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configured adjacency formation status. The type is bool.
    AdjacencyFormStatus interface{}

    // Configured prefix advertisement status. The type is bool.
    AdvPrefixStatus interface{}
}

func (configuredStatus *Isis_Instances_Instance_Interfaces_Interface_ConfiguredStatus) GetEntityData() *types.CommonEntityData {
    configuredStatus.EntityData.YFilter = configuredStatus.YFilter
    configuredStatus.EntityData.YangName = "configured-status"
    configuredStatus.EntityData.BundleName = "cisco_ios_xr"
    configuredStatus.EntityData.ParentYangName = "interface"
    configuredStatus.EntityData.SegmentPath = "configured-status"
    configuredStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/" + configuredStatus.EntityData.SegmentPath
    configuredStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    configuredStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    configuredStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    configuredStatus.EntityData.Children = types.NewOrderedMap()
    configuredStatus.EntityData.Leafs = types.NewOrderedMap()
    configuredStatus.EntityData.Leafs.Append("adjacency-form-status", types.YLeaf{"AdjacencyFormStatus", configuredStatus.AdjacencyFormStatus})
    configuredStatus.EntityData.Leafs.Append("adv-prefix-status", types.YLeaf{"AdvPrefixStatus", configuredStatus.AdvPrefixStatus})

    configuredStatus.EntityData.YListKeys = []string {}

    return &(configuredStatus.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData
// Information about the interface status and its
// data
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisEnabled.
    Status interface{}

    // The interface state if disabled.
    Disabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Disabled

    // The interface state if enabled.
    Enabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled
}

func (interfaceStatusAndData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData) GetEntityData() *types.CommonEntityData {
    interfaceStatusAndData.EntityData.YFilter = interfaceStatusAndData.YFilter
    interfaceStatusAndData.EntityData.YangName = "interface-status-and-data"
    interfaceStatusAndData.EntityData.BundleName = "cisco_ios_xr"
    interfaceStatusAndData.EntityData.ParentYangName = "interface"
    interfaceStatusAndData.EntityData.SegmentPath = "interface-status-and-data"
    interfaceStatusAndData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/" + interfaceStatusAndData.EntityData.SegmentPath
    interfaceStatusAndData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStatusAndData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStatusAndData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStatusAndData.EntityData.Children = types.NewOrderedMap()
    interfaceStatusAndData.EntityData.Children.Append("disabled", types.YChild{"Disabled", &interfaceStatusAndData.Disabled})
    interfaceStatusAndData.EntityData.Children.Append("enabled", types.YChild{"Enabled", &interfaceStatusAndData.Enabled})
    interfaceStatusAndData.EntityData.Leafs = types.NewOrderedMap()
    interfaceStatusAndData.EntityData.Leafs.Append("status", types.YLeaf{"Status", interfaceStatusAndData.Status})

    interfaceStatusAndData.EntityData.YListKeys = []string {}

    return &(interfaceStatusAndData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Disabled
// The interface state if disabled
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Disabled struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the interface is disabled. The type is IsisIfDisabledReason.
    ReasonCode interface{}
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Disabled) GetEntityData() *types.CommonEntityData {
    disabled.EntityData.YFilter = disabled.YFilter
    disabled.EntityData.YangName = "disabled"
    disabled.EntityData.BundleName = "cisco_ios_xr"
    disabled.EntityData.ParentYangName = "interface-status-and-data"
    disabled.EntityData.SegmentPath = "disabled"
    disabled.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/" + disabled.EntityData.SegmentPath
    disabled.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    disabled.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    disabled.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    disabled.EntityData.Children = types.NewOrderedMap()
    disabled.EntityData.Leafs = types.NewOrderedMap()
    disabled.EntityData.Leafs.Append("reason-code", types.YLeaf{"ReasonCode", disabled.ReasonCode})

    disabled.EntityData.YListKeys = []string {}

    return &(disabled.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled
// The interface state if enabled
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Media type of the interface. The type is IsisMediaClass.
    InterfaceMediaType interface{}

    // Enabled Circuit type of the interface. The type is IsisLevels.
    EnabledCircuitType interface{}

    // Local Circuit Number of the interface. The type is interface{} with range:
    // 0..255.
    LocalCircuitNumber interface{}

    // Rsi Srlg Registered. The type is bool.
    RsiSrlgRegistered interface{}

    // Bandwidth of the interface. The type is interface{} with range:
    // 0..4294967295.
    Bandwidth interface{}

    // Interface's Adjacency Formation status.
    AdjacencyFormStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus

    // Interface's Prefix Advertisement status.
    AdvPrefixStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus

    // Data for an active P2P interface, NULL if not active or P2P.
    P2pData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_P2pData

    // The BFD data for the given interface.
    BfdData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_BfdData

    // Interface data specific to CLNS I/O services.
    ClnsData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData

    // Underlying interface list for bundle interfaces. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface.
    UnderlyingInterface []*Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface

    // Array of area information for an active interface. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData.
    PerAreaData []*Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData

    // Array of topology information. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData.
    PerTopologyData []*Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData

    // Array of address family information. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData.
    PerAddressFamilyData []*Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData
}

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled) GetEntityData() *types.CommonEntityData {
    enabled.EntityData.YFilter = enabled.YFilter
    enabled.EntityData.YangName = "enabled"
    enabled.EntityData.BundleName = "cisco_ios_xr"
    enabled.EntityData.ParentYangName = "interface-status-and-data"
    enabled.EntityData.SegmentPath = "enabled"
    enabled.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/" + enabled.EntityData.SegmentPath
    enabled.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    enabled.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    enabled.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    enabled.EntityData.Children = types.NewOrderedMap()
    enabled.EntityData.Children.Append("adjacency-form-status", types.YChild{"AdjacencyFormStatus", &enabled.AdjacencyFormStatus})
    enabled.EntityData.Children.Append("adv-prefix-status", types.YChild{"AdvPrefixStatus", &enabled.AdvPrefixStatus})
    enabled.EntityData.Children.Append("p2p-data", types.YChild{"P2pData", &enabled.P2pData})
    enabled.EntityData.Children.Append("bfd-data", types.YChild{"BfdData", &enabled.BfdData})
    enabled.EntityData.Children.Append("clns-data", types.YChild{"ClnsData", &enabled.ClnsData})
    enabled.EntityData.Children.Append("underlying-interface", types.YChild{"UnderlyingInterface", nil})
    for i := range enabled.UnderlyingInterface {
        types.SetYListKey(enabled.UnderlyingInterface[i], i)
        enabled.EntityData.Children.Append(types.GetSegmentPath(enabled.UnderlyingInterface[i]), types.YChild{"UnderlyingInterface", enabled.UnderlyingInterface[i]})
    }
    enabled.EntityData.Children.Append("per-area-data", types.YChild{"PerAreaData", nil})
    for i := range enabled.PerAreaData {
        types.SetYListKey(enabled.PerAreaData[i], i)
        enabled.EntityData.Children.Append(types.GetSegmentPath(enabled.PerAreaData[i]), types.YChild{"PerAreaData", enabled.PerAreaData[i]})
    }
    enabled.EntityData.Children.Append("per-topology-data", types.YChild{"PerTopologyData", nil})
    for i := range enabled.PerTopologyData {
        types.SetYListKey(enabled.PerTopologyData[i], i)
        enabled.EntityData.Children.Append(types.GetSegmentPath(enabled.PerTopologyData[i]), types.YChild{"PerTopologyData", enabled.PerTopologyData[i]})
    }
    enabled.EntityData.Children.Append("per-address-family-data", types.YChild{"PerAddressFamilyData", nil})
    for i := range enabled.PerAddressFamilyData {
        types.SetYListKey(enabled.PerAddressFamilyData[i], i)
        enabled.EntityData.Children.Append(types.GetSegmentPath(enabled.PerAddressFamilyData[i]), types.YChild{"PerAddressFamilyData", enabled.PerAddressFamilyData[i]})
    }
    enabled.EntityData.Leafs = types.NewOrderedMap()
    enabled.EntityData.Leafs.Append("interface-media-type", types.YLeaf{"InterfaceMediaType", enabled.InterfaceMediaType})
    enabled.EntityData.Leafs.Append("enabled-circuit-type", types.YLeaf{"EnabledCircuitType", enabled.EnabledCircuitType})
    enabled.EntityData.Leafs.Append("local-circuit-number", types.YLeaf{"LocalCircuitNumber", enabled.LocalCircuitNumber})
    enabled.EntityData.Leafs.Append("rsi-srlg-registered", types.YLeaf{"RsiSrlgRegistered", enabled.RsiSrlgRegistered})
    enabled.EntityData.Leafs.Append("bandwidth", types.YLeaf{"Bandwidth", enabled.Bandwidth})

    enabled.EntityData.YListKeys = []string {}

    return &(enabled.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus
// Interface's Adjacency Formation status
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisEnabled.
    Status interface{}

    // Disabled info for the adjacency formation status.
    Disabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus_Disabled
}

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus) GetEntityData() *types.CommonEntityData {
    adjacencyFormStatus.EntityData.YFilter = adjacencyFormStatus.YFilter
    adjacencyFormStatus.EntityData.YangName = "adjacency-form-status"
    adjacencyFormStatus.EntityData.BundleName = "cisco_ios_xr"
    adjacencyFormStatus.EntityData.ParentYangName = "enabled"
    adjacencyFormStatus.EntityData.SegmentPath = "adjacency-form-status"
    adjacencyFormStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/" + adjacencyFormStatus.EntityData.SegmentPath
    adjacencyFormStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyFormStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyFormStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyFormStatus.EntityData.Children = types.NewOrderedMap()
    adjacencyFormStatus.EntityData.Children.Append("disabled", types.YChild{"Disabled", &adjacencyFormStatus.Disabled})
    adjacencyFormStatus.EntityData.Leafs = types.NewOrderedMap()
    adjacencyFormStatus.EntityData.Leafs.Append("status", types.YLeaf{"Status", adjacencyFormStatus.Status})

    adjacencyFormStatus.EntityData.YListKeys = []string {}

    return &(adjacencyFormStatus.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus_Disabled
// Disabled info for the adjacency formation status
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus_Disabled struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the interface is not able to form adjacencies. The type is
    // IsisIfAdjFormDisabledReason.
    ReasonCode interface{}
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdjacencyFormStatus_Disabled) GetEntityData() *types.CommonEntityData {
    disabled.EntityData.YFilter = disabled.YFilter
    disabled.EntityData.YangName = "disabled"
    disabled.EntityData.BundleName = "cisco_ios_xr"
    disabled.EntityData.ParentYangName = "adjacency-form-status"
    disabled.EntityData.SegmentPath = "disabled"
    disabled.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/adjacency-form-status/" + disabled.EntityData.SegmentPath
    disabled.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    disabled.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    disabled.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    disabled.EntityData.Children = types.NewOrderedMap()
    disabled.EntityData.Leafs = types.NewOrderedMap()
    disabled.EntityData.Leafs.Append("reason-code", types.YLeaf{"ReasonCode", disabled.ReasonCode})

    disabled.EntityData.YListKeys = []string {}

    return &(disabled.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus
// Interface's Prefix Advertisement status
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisEnabled.
    Status interface{}

    // Disabled info for the prefix advertisement status.
    Disabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus_Disabled
}

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus) GetEntityData() *types.CommonEntityData {
    advPrefixStatus.EntityData.YFilter = advPrefixStatus.YFilter
    advPrefixStatus.EntityData.YangName = "adv-prefix-status"
    advPrefixStatus.EntityData.BundleName = "cisco_ios_xr"
    advPrefixStatus.EntityData.ParentYangName = "enabled"
    advPrefixStatus.EntityData.SegmentPath = "adv-prefix-status"
    advPrefixStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/" + advPrefixStatus.EntityData.SegmentPath
    advPrefixStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advPrefixStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advPrefixStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advPrefixStatus.EntityData.Children = types.NewOrderedMap()
    advPrefixStatus.EntityData.Children.Append("disabled", types.YChild{"Disabled", &advPrefixStatus.Disabled})
    advPrefixStatus.EntityData.Leafs = types.NewOrderedMap()
    advPrefixStatus.EntityData.Leafs.Append("status", types.YLeaf{"Status", advPrefixStatus.Status})

    advPrefixStatus.EntityData.YListKeys = []string {}

    return &(advPrefixStatus.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus_Disabled
// Disabled info for the prefix advertisement
// status
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus_Disabled struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the interface is not able to advertise prefixes. The type is
    // IsisIfAdvPrefixDisabledReason.
    ReasonCode interface{}
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_AdvPrefixStatus_Disabled) GetEntityData() *types.CommonEntityData {
    disabled.EntityData.YFilter = disabled.YFilter
    disabled.EntityData.YangName = "disabled"
    disabled.EntityData.BundleName = "cisco_ios_xr"
    disabled.EntityData.ParentYangName = "adv-prefix-status"
    disabled.EntityData.SegmentPath = "disabled"
    disabled.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/adv-prefix-status/" + disabled.EntityData.SegmentPath
    disabled.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    disabled.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    disabled.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    disabled.EntityData.Children = types.NewOrderedMap()
    disabled.EntityData.Leafs = types.NewOrderedMap()
    disabled.EntityData.Leafs.Append("reason-code", types.YLeaf{"ReasonCode", disabled.ReasonCode})

    disabled.EntityData.YListKeys = []string {}

    return &(disabled.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_P2pData
// Data for an active P2P interface, NULL if not
// active or P2P
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_P2pData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in ms before the next IIH can be sent. The type is interface{} with
    // range: 0..4294967295.
    TimeUntilNextIih interface{}

    // No. of LSPs queued to be retransmitted. The type is interface{} with range:
    // 0..4294967295.
    RetransmitLspQueueSize interface{}

    // Time in ms until the next scheduled LSP is retransmitted. The type is
    // interface{} with range: 0..4294967295.
    RetransmitLspInterval interface{}

    // Extended Circuit Number valid for a P2P interface. The type is interface{}
    // with range: 0..4294967295.
    ExtendedCircuitNumber interface{}
}

func (p2pData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_P2pData) GetEntityData() *types.CommonEntityData {
    p2pData.EntityData.YFilter = p2pData.YFilter
    p2pData.EntityData.YangName = "p2p-data"
    p2pData.EntityData.BundleName = "cisco_ios_xr"
    p2pData.EntityData.ParentYangName = "enabled"
    p2pData.EntityData.SegmentPath = "p2p-data"
    p2pData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/" + p2pData.EntityData.SegmentPath
    p2pData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    p2pData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    p2pData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    p2pData.EntityData.Children = types.NewOrderedMap()
    p2pData.EntityData.Leafs = types.NewOrderedMap()
    p2pData.EntityData.Leafs.Append("time-until-next-iih", types.YLeaf{"TimeUntilNextIih", p2pData.TimeUntilNextIih})
    p2pData.EntityData.Leafs.Append("retransmit-lsp-queue-size", types.YLeaf{"RetransmitLspQueueSize", p2pData.RetransmitLspQueueSize})
    p2pData.EntityData.Leafs.Append("retransmit-lsp-interval", types.YLeaf{"RetransmitLspInterval", p2pData.RetransmitLspInterval})
    p2pData.EntityData.Leafs.Append("extended-circuit-number", types.YLeaf{"ExtendedCircuitNumber", p2pData.ExtendedCircuitNumber})

    p2pData.EntityData.YListKeys = []string {}

    return &(p2pData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_BfdData
// The BFD data for the given interface
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_BfdData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 BFD enabled status. The type is bool.
    Enabled interface{}

    // IPv6 BFD enabled status. The type is bool.
    Ipv6Enabled interface{}

    // BFD hello minimum interval in milliseconds. The type is interface{} with
    // range: 0..4294967295. Units are millisecond.
    Interval interface{}

    // BFD hello multiplier. The type is interface{} with range: 0..4294967295.
    Multiplier interface{}
}

func (bfdData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_BfdData) GetEntityData() *types.CommonEntityData {
    bfdData.EntityData.YFilter = bfdData.YFilter
    bfdData.EntityData.YangName = "bfd-data"
    bfdData.EntityData.BundleName = "cisco_ios_xr"
    bfdData.EntityData.ParentYangName = "enabled"
    bfdData.EntityData.SegmentPath = "bfd-data"
    bfdData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/" + bfdData.EntityData.SegmentPath
    bfdData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfdData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfdData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfdData.EntityData.Children = types.NewOrderedMap()
    bfdData.EntityData.Leafs = types.NewOrderedMap()
    bfdData.EntityData.Leafs.Append("enabled", types.YLeaf{"Enabled", bfdData.Enabled})
    bfdData.EntityData.Leafs.Append("ipv6-enabled", types.YLeaf{"Ipv6Enabled", bfdData.Ipv6Enabled})
    bfdData.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", bfdData.Interval})
    bfdData.EntityData.Leafs.Append("multiplier", types.YLeaf{"Multiplier", bfdData.Multiplier})

    bfdData.EntityData.YListKeys = []string {}

    return &(bfdData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData
// Interface data specific to CLNS I/O services
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time until next LSP may be sent (ms). The type is interface{} with range:
    // 0..4294967295.
    TimeUntilNextLsp interface{}

    // TRUE if an LSP transmission has been requested. The type is bool.
    LspTransmitRequestedFlag interface{}

    // TRUE if an LSP transmission has been sent, indicates
    // LastLSPLevelTransmitted and LastLSP_IDTransmitted valid. The type is bool.
    LspTransmittedFlag interface{}

    // Number of LSPs that can be sent back to back in the current window without
    // exceeding the pacing limit. The type is interface{} with range:
    // 0..4294967295.
    LspTxmitdB2bLimit interface{}

    // Time im msecs indicating the end of the window in which the 'back to back
    // lsps to be sent' counter applies. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    LspTxmtB2bMsecs interface{}

    // Level of the Last LSP Transmitted. The type is IsisLevel.
    LastLspLevelTransmitted interface{}

    // Last LSP ID Transmitted. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    LastLspIdTransmitted interface{}

    // Is CLNS protcol up or if not, the reason why it is not up.
    ClnsStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus

    // A valid MTU or the reason for the MTU being invalid.
    MtuInfo Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo

    // SNPA state.
    SnpaState Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState

    // Media Specific CLNS state.
    MediaSpecificState Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState
}

func (clnsData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData) GetEntityData() *types.CommonEntityData {
    clnsData.EntityData.YFilter = clnsData.YFilter
    clnsData.EntityData.YangName = "clns-data"
    clnsData.EntityData.BundleName = "cisco_ios_xr"
    clnsData.EntityData.ParentYangName = "enabled"
    clnsData.EntityData.SegmentPath = "clns-data"
    clnsData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/" + clnsData.EntityData.SegmentPath
    clnsData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clnsData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clnsData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clnsData.EntityData.Children = types.NewOrderedMap()
    clnsData.EntityData.Children.Append("clns-status", types.YChild{"ClnsStatus", &clnsData.ClnsStatus})
    clnsData.EntityData.Children.Append("mtu-info", types.YChild{"MtuInfo", &clnsData.MtuInfo})
    clnsData.EntityData.Children.Append("snpa-state", types.YChild{"SnpaState", &clnsData.SnpaState})
    clnsData.EntityData.Children.Append("media-specific-state", types.YChild{"MediaSpecificState", &clnsData.MediaSpecificState})
    clnsData.EntityData.Leafs = types.NewOrderedMap()
    clnsData.EntityData.Leafs.Append("time-until-next-lsp", types.YLeaf{"TimeUntilNextLsp", clnsData.TimeUntilNextLsp})
    clnsData.EntityData.Leafs.Append("lsp-transmit-requested-flag", types.YLeaf{"LspTransmitRequestedFlag", clnsData.LspTransmitRequestedFlag})
    clnsData.EntityData.Leafs.Append("lsp-transmitted-flag", types.YLeaf{"LspTransmittedFlag", clnsData.LspTransmittedFlag})
    clnsData.EntityData.Leafs.Append("lsp-txmitd-b2b-limit", types.YLeaf{"LspTxmitdB2bLimit", clnsData.LspTxmitdB2bLimit})
    clnsData.EntityData.Leafs.Append("lsp-txmt-b2b-msecs", types.YLeaf{"LspTxmtB2bMsecs", clnsData.LspTxmtB2bMsecs})
    clnsData.EntityData.Leafs.Append("last-lsp-level-transmitted", types.YLeaf{"LastLspLevelTransmitted", clnsData.LastLspLevelTransmitted})
    clnsData.EntityData.Leafs.Append("last-lsp-id-transmitted", types.YLeaf{"LastLspIdTransmitted", clnsData.LastLspIdTransmitted})

    clnsData.EntityData.YListKeys = []string {}

    return &(clnsData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus
// Is CLNS protcol up or if not, the reason why it
// is not up
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisUp.
    Status interface{}

    // State describing why CLNS is down.
    ClnsDownInfo Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus_ClnsDownInfo
}

func (clnsStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus) GetEntityData() *types.CommonEntityData {
    clnsStatus.EntityData.YFilter = clnsStatus.YFilter
    clnsStatus.EntityData.YangName = "clns-status"
    clnsStatus.EntityData.BundleName = "cisco_ios_xr"
    clnsStatus.EntityData.ParentYangName = "clns-data"
    clnsStatus.EntityData.SegmentPath = "clns-status"
    clnsStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/clns-data/" + clnsStatus.EntityData.SegmentPath
    clnsStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clnsStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clnsStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clnsStatus.EntityData.Children = types.NewOrderedMap()
    clnsStatus.EntityData.Children.Append("clns-down-info", types.YChild{"ClnsDownInfo", &clnsStatus.ClnsDownInfo})
    clnsStatus.EntityData.Leafs = types.NewOrderedMap()
    clnsStatus.EntityData.Leafs.Append("status", types.YLeaf{"Status", clnsStatus.Status})

    clnsStatus.EntityData.YListKeys = []string {}

    return &(clnsStatus.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus_ClnsDownInfo
// State describing why CLNS is down
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus_ClnsDownInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why CLNS is down. The type is IsisIfClnsProtoDownReason.
    ReasonCode interface{}
}

func (clnsDownInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_ClnsStatus_ClnsDownInfo) GetEntityData() *types.CommonEntityData {
    clnsDownInfo.EntityData.YFilter = clnsDownInfo.YFilter
    clnsDownInfo.EntityData.YangName = "clns-down-info"
    clnsDownInfo.EntityData.BundleName = "cisco_ios_xr"
    clnsDownInfo.EntityData.ParentYangName = "clns-status"
    clnsDownInfo.EntityData.SegmentPath = "clns-down-info"
    clnsDownInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/clns-data/clns-status/" + clnsDownInfo.EntityData.SegmentPath
    clnsDownInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clnsDownInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clnsDownInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clnsDownInfo.EntityData.Children = types.NewOrderedMap()
    clnsDownInfo.EntityData.Leafs = types.NewOrderedMap()
    clnsDownInfo.EntityData.Leafs.Append("reason-code", types.YLeaf{"ReasonCode", clnsDownInfo.ReasonCode})

    clnsDownInfo.EntityData.YListKeys = []string {}

    return &(clnsDownInfo.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo
// A valid MTU or the reason for the MTU being
// invalid
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisValid.
    Status interface{}

    // Valid MTU. The type is interface{} with range: 0..4294967295.
    Mtu interface{}

    // Information pertaining to the invalid CLNS MTU.
    Invalid Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo_Invalid
}

func (mtuInfo *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo) GetEntityData() *types.CommonEntityData {
    mtuInfo.EntityData.YFilter = mtuInfo.YFilter
    mtuInfo.EntityData.YangName = "mtu-info"
    mtuInfo.EntityData.BundleName = "cisco_ios_xr"
    mtuInfo.EntityData.ParentYangName = "clns-data"
    mtuInfo.EntityData.SegmentPath = "mtu-info"
    mtuInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/clns-data/" + mtuInfo.EntityData.SegmentPath
    mtuInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mtuInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mtuInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mtuInfo.EntityData.Children = types.NewOrderedMap()
    mtuInfo.EntityData.Children.Append("invalid", types.YChild{"Invalid", &mtuInfo.Invalid})
    mtuInfo.EntityData.Leafs = types.NewOrderedMap()
    mtuInfo.EntityData.Leafs.Append("status", types.YLeaf{"Status", mtuInfo.Status})
    mtuInfo.EntityData.Leafs.Append("mtu", types.YLeaf{"Mtu", mtuInfo.Mtu})

    mtuInfo.EntityData.YListKeys = []string {}

    return &(mtuInfo.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo_Invalid
// Information pertaining to the invalid CLNS MTU
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo_Invalid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the MTU is invalid. The type is IsisIfClnsMtuInvalidReason.
    ReasonCode interface{}
}

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MtuInfo_Invalid) GetEntityData() *types.CommonEntityData {
    invalid.EntityData.YFilter = invalid.YFilter
    invalid.EntityData.YangName = "invalid"
    invalid.EntityData.BundleName = "cisco_ios_xr"
    invalid.EntityData.ParentYangName = "mtu-info"
    invalid.EntityData.SegmentPath = "invalid"
    invalid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/clns-data/mtu-info/" + invalid.EntityData.SegmentPath
    invalid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invalid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invalid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invalid.EntityData.Children = types.NewOrderedMap()
    invalid.EntityData.Leafs = types.NewOrderedMap()
    invalid.EntityData.Leafs.Append("reason-code", types.YLeaf{"ReasonCode", invalid.ReasonCode})

    invalid.EntityData.YListKeys = []string {}

    return &(invalid.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState
// SNPA state
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisKnown.
    Status interface{}

    // Information pertaining to the unknown SNPA state.
    Unknown Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Unknown

    // Information pertaining to the known SNPA state.
    Known Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Known
}

func (snpaState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState) GetEntityData() *types.CommonEntityData {
    snpaState.EntityData.YFilter = snpaState.YFilter
    snpaState.EntityData.YangName = "snpa-state"
    snpaState.EntityData.BundleName = "cisco_ios_xr"
    snpaState.EntityData.ParentYangName = "clns-data"
    snpaState.EntityData.SegmentPath = "snpa-state"
    snpaState.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/clns-data/" + snpaState.EntityData.SegmentPath
    snpaState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snpaState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snpaState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snpaState.EntityData.Children = types.NewOrderedMap()
    snpaState.EntityData.Children.Append("unknown", types.YChild{"Unknown", &snpaState.Unknown})
    snpaState.EntityData.Children.Append("known", types.YChild{"Known", &snpaState.Known})
    snpaState.EntityData.Leafs = types.NewOrderedMap()
    snpaState.EntityData.Leafs.Append("status", types.YLeaf{"Status", snpaState.Status})

    snpaState.EntityData.YListKeys = []string {}

    return &(snpaState.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Unknown
// Information pertaining to the unknown SNPA state
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Unknown struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the SNPA is unknown. The type is IsisIfClnsSnpaUnknownReason.
    ReasonCode interface{}
}

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Unknown) GetEntityData() *types.CommonEntityData {
    unknown.EntityData.YFilter = unknown.YFilter
    unknown.EntityData.YangName = "unknown"
    unknown.EntityData.BundleName = "cisco_ios_xr"
    unknown.EntityData.ParentYangName = "snpa-state"
    unknown.EntityData.SegmentPath = "unknown"
    unknown.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/clns-data/snpa-state/" + unknown.EntityData.SegmentPath
    unknown.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknown.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknown.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknown.EntityData.Children = types.NewOrderedMap()
    unknown.EntityData.Leafs = types.NewOrderedMap()
    unknown.EntityData.Leafs.Append("reason-code", types.YLeaf{"ReasonCode", unknown.ReasonCode})

    unknown.EntityData.YListKeys = []string {}

    return &(unknown.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Known
// Information pertaining to the known SNPA state
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Known struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Valid SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    Snpa interface{}
}

func (known *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_SnpaState_Known) GetEntityData() *types.CommonEntityData {
    known.EntityData.YFilter = known.YFilter
    known.EntityData.YangName = "known"
    known.EntityData.BundleName = "cisco_ios_xr"
    known.EntityData.ParentYangName = "snpa-state"
    known.EntityData.SegmentPath = "known"
    known.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/clns-data/snpa-state/" + known.EntityData.SegmentPath
    known.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    known.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    known.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    known.EntityData.Children = types.NewOrderedMap()
    known.EntityData.Leafs = types.NewOrderedMap()
    known.EntityData.Leafs.Append("snpa", types.YLeaf{"Snpa", known.Snpa})

    known.EntityData.YListKeys = []string {}

    return &(known.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState
// Media Specific CLNS state
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // CLNSMediaType. The type is IsisMediaClass.
    ClnsMediaType interface{}

    // LAN state.
    ClnsLanData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData

    // Point-to-point state.
    ClnsP2pData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2pData
}

func (mediaSpecificState *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState) GetEntityData() *types.CommonEntityData {
    mediaSpecificState.EntityData.YFilter = mediaSpecificState.YFilter
    mediaSpecificState.EntityData.YangName = "media-specific-state"
    mediaSpecificState.EntityData.BundleName = "cisco_ios_xr"
    mediaSpecificState.EntityData.ParentYangName = "clns-data"
    mediaSpecificState.EntityData.SegmentPath = "media-specific-state"
    mediaSpecificState.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/clns-data/" + mediaSpecificState.EntityData.SegmentPath
    mediaSpecificState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mediaSpecificState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mediaSpecificState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mediaSpecificState.EntityData.Children = types.NewOrderedMap()
    mediaSpecificState.EntityData.Children.Append("clns-lan-data", types.YChild{"ClnsLanData", &mediaSpecificState.ClnsLanData})
    mediaSpecificState.EntityData.Children.Append("clns-p2p-data", types.YChild{"ClnsP2pData", &mediaSpecificState.ClnsP2pData})
    mediaSpecificState.EntityData.Leafs = types.NewOrderedMap()
    mediaSpecificState.EntityData.Leafs.Append("clns-media-type", types.YLeaf{"ClnsMediaType", mediaSpecificState.ClnsMediaType})

    mediaSpecificState.EntityData.YListKeys = []string {}

    return &(mediaSpecificState.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData
// LAN state
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Array of per area CLNS data. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData.
    PerAreaData []*Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData
}

func (clnsLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData) GetEntityData() *types.CommonEntityData {
    clnsLanData.EntityData.YFilter = clnsLanData.YFilter
    clnsLanData.EntityData.YangName = "clns-lan-data"
    clnsLanData.EntityData.BundleName = "cisco_ios_xr"
    clnsLanData.EntityData.ParentYangName = "media-specific-state"
    clnsLanData.EntityData.SegmentPath = "clns-lan-data"
    clnsLanData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/clns-data/media-specific-state/" + clnsLanData.EntityData.SegmentPath
    clnsLanData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clnsLanData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clnsLanData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clnsLanData.EntityData.Children = types.NewOrderedMap()
    clnsLanData.EntityData.Children.Append("per-area-data", types.YChild{"PerAreaData", nil})
    for i := range clnsLanData.PerAreaData {
        types.SetYListKey(clnsLanData.PerAreaData[i], i)
        clnsLanData.EntityData.Children.Append(types.GetSegmentPath(clnsLanData.PerAreaData[i]), types.YChild{"PerAreaData", clnsLanData.PerAreaData[i]})
    }
    clnsLanData.EntityData.Leafs = types.NewOrderedMap()

    clnsLanData.EntityData.YListKeys = []string {}

    return &(clnsLanData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData
// Array of per area CLNS data
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Level of the area. The type is IsisLevel.
    Level interface{}

    // Multicast group membership status.
    MulticastStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus
}

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData) GetEntityData() *types.CommonEntityData {
    perAreaData.EntityData.YFilter = perAreaData.YFilter
    perAreaData.EntityData.YangName = "per-area-data"
    perAreaData.EntityData.BundleName = "cisco_ios_xr"
    perAreaData.EntityData.ParentYangName = "clns-lan-data"
    perAreaData.EntityData.SegmentPath = "per-area-data" + types.AddNoKeyToken(perAreaData)
    perAreaData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/clns-data/media-specific-state/clns-lan-data/" + perAreaData.EntityData.SegmentPath
    perAreaData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perAreaData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perAreaData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perAreaData.EntityData.Children = types.NewOrderedMap()
    perAreaData.EntityData.Children.Append("multicast-status", types.YChild{"MulticastStatus", &perAreaData.MulticastStatus})
    perAreaData.EntityData.Leafs = types.NewOrderedMap()
    perAreaData.EntityData.Leafs.Append("level", types.YLeaf{"Level", perAreaData.Level})

    perAreaData.EntityData.YListKeys = []string {}

    return &(perAreaData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus
// Multicast group membership status
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisValid.
    Status interface{}

    // Information pertaining to the invalid multicast status.
    Invalid Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus_Invalid
}

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus) GetEntityData() *types.CommonEntityData {
    multicastStatus.EntityData.YFilter = multicastStatus.YFilter
    multicastStatus.EntityData.YangName = "multicast-status"
    multicastStatus.EntityData.BundleName = "cisco_ios_xr"
    multicastStatus.EntityData.ParentYangName = "per-area-data"
    multicastStatus.EntityData.SegmentPath = "multicast-status"
    multicastStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/clns-data/media-specific-state/clns-lan-data/per-area-data/" + multicastStatus.EntityData.SegmentPath
    multicastStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastStatus.EntityData.Children = types.NewOrderedMap()
    multicastStatus.EntityData.Children.Append("invalid", types.YChild{"Invalid", &multicastStatus.Invalid})
    multicastStatus.EntityData.Leafs = types.NewOrderedMap()
    multicastStatus.EntityData.Leafs.Append("status", types.YLeaf{"Status", multicastStatus.Status})

    multicastStatus.EntityData.YListKeys = []string {}

    return &(multicastStatus.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus_Invalid
// Information pertaining to the invalid multicast
// status
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus_Invalid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the multicast status is invalid. The type is
    // IsisIfMcastInvalidReason.
    ReasonCode interface{}
}

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsLanData_PerAreaData_MulticastStatus_Invalid) GetEntityData() *types.CommonEntityData {
    invalid.EntityData.YFilter = invalid.YFilter
    invalid.EntityData.YangName = "invalid"
    invalid.EntityData.BundleName = "cisco_ios_xr"
    invalid.EntityData.ParentYangName = "multicast-status"
    invalid.EntityData.SegmentPath = "invalid"
    invalid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/clns-data/media-specific-state/clns-lan-data/per-area-data/multicast-status/" + invalid.EntityData.SegmentPath
    invalid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invalid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invalid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invalid.EntityData.Children = types.NewOrderedMap()
    invalid.EntityData.Leafs = types.NewOrderedMap()
    invalid.EntityData.Leafs.Append("reason-code", types.YLeaf{"ReasonCode", invalid.ReasonCode})

    invalid.EntityData.YListKeys = []string {}

    return &(invalid.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2pData
// Point-to-point state
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2pData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Point-to-point over LAN data.
    P2pOverLanData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2pData_P2pOverLanData
}

func (clnsP2pData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2pData) GetEntityData() *types.CommonEntityData {
    clnsP2pData.EntityData.YFilter = clnsP2pData.YFilter
    clnsP2pData.EntityData.YangName = "clns-p2p-data"
    clnsP2pData.EntityData.BundleName = "cisco_ios_xr"
    clnsP2pData.EntityData.ParentYangName = "media-specific-state"
    clnsP2pData.EntityData.SegmentPath = "clns-p2p-data"
    clnsP2pData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/clns-data/media-specific-state/" + clnsP2pData.EntityData.SegmentPath
    clnsP2pData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clnsP2pData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clnsP2pData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clnsP2pData.EntityData.Children = types.NewOrderedMap()
    clnsP2pData.EntityData.Children.Append("p2p-over-lan-data", types.YChild{"P2pOverLanData", &clnsP2pData.P2pOverLanData})
    clnsP2pData.EntityData.Leafs = types.NewOrderedMap()

    clnsP2pData.EntityData.YListKeys = []string {}

    return &(clnsP2pData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2pData_P2pOverLanData
// Point-to-point over LAN data
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2pData_P2pOverLanData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Multicast group membership status.
    MulticastStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2pData_P2pOverLanData_MulticastStatus
}

func (p2pOverLanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2pData_P2pOverLanData) GetEntityData() *types.CommonEntityData {
    p2pOverLanData.EntityData.YFilter = p2pOverLanData.YFilter
    p2pOverLanData.EntityData.YangName = "p2p-over-lan-data"
    p2pOverLanData.EntityData.BundleName = "cisco_ios_xr"
    p2pOverLanData.EntityData.ParentYangName = "clns-p2p-data"
    p2pOverLanData.EntityData.SegmentPath = "p2p-over-lan-data"
    p2pOverLanData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/clns-data/media-specific-state/clns-p2p-data/" + p2pOverLanData.EntityData.SegmentPath
    p2pOverLanData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    p2pOverLanData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    p2pOverLanData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    p2pOverLanData.EntityData.Children = types.NewOrderedMap()
    p2pOverLanData.EntityData.Children.Append("multicast-status", types.YChild{"MulticastStatus", &p2pOverLanData.MulticastStatus})
    p2pOverLanData.EntityData.Leafs = types.NewOrderedMap()

    p2pOverLanData.EntityData.YListKeys = []string {}

    return &(p2pOverLanData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2pData_P2pOverLanData_MulticastStatus
// Multicast group membership status
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2pData_P2pOverLanData_MulticastStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisValid.
    Status interface{}

    // Information pertaining to the invalid multicast status.
    Invalid Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2pData_P2pOverLanData_MulticastStatus_Invalid
}

func (multicastStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2pData_P2pOverLanData_MulticastStatus) GetEntityData() *types.CommonEntityData {
    multicastStatus.EntityData.YFilter = multicastStatus.YFilter
    multicastStatus.EntityData.YangName = "multicast-status"
    multicastStatus.EntityData.BundleName = "cisco_ios_xr"
    multicastStatus.EntityData.ParentYangName = "p2p-over-lan-data"
    multicastStatus.EntityData.SegmentPath = "multicast-status"
    multicastStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/clns-data/media-specific-state/clns-p2p-data/p2p-over-lan-data/" + multicastStatus.EntityData.SegmentPath
    multicastStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multicastStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multicastStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multicastStatus.EntityData.Children = types.NewOrderedMap()
    multicastStatus.EntityData.Children.Append("invalid", types.YChild{"Invalid", &multicastStatus.Invalid})
    multicastStatus.EntityData.Leafs = types.NewOrderedMap()
    multicastStatus.EntityData.Leafs.Append("status", types.YLeaf{"Status", multicastStatus.Status})

    multicastStatus.EntityData.YListKeys = []string {}

    return &(multicastStatus.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2pData_P2pOverLanData_MulticastStatus_Invalid
// Information pertaining to the invalid multicast
// status
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2pData_P2pOverLanData_MulticastStatus_Invalid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the multicast status is invalid. The type is
    // IsisIfMcastInvalidReason.
    ReasonCode interface{}
}

func (invalid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_ClnsData_MediaSpecificState_ClnsP2pData_P2pOverLanData_MulticastStatus_Invalid) GetEntityData() *types.CommonEntityData {
    invalid.EntityData.YFilter = invalid.YFilter
    invalid.EntityData.YangName = "invalid"
    invalid.EntityData.BundleName = "cisco_ios_xr"
    invalid.EntityData.ParentYangName = "multicast-status"
    invalid.EntityData.SegmentPath = "invalid"
    invalid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/clns-data/media-specific-state/clns-p2p-data/p2p-over-lan-data/multicast-status/" + invalid.EntityData.SegmentPath
    invalid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invalid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invalid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invalid.EntityData.Children = types.NewOrderedMap()
    invalid.EntityData.Leafs = types.NewOrderedMap()
    invalid.EntityData.Leafs.Append("reason-code", types.YLeaf{"ReasonCode", invalid.ReasonCode})

    invalid.EntityData.YListKeys = []string {}

    return &(invalid.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface
// Underlying interface list for bundle interfaces
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Local interface handle. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (underlyingInterface *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_UnderlyingInterface) GetEntityData() *types.CommonEntityData {
    underlyingInterface.EntityData.YFilter = underlyingInterface.YFilter
    underlyingInterface.EntityData.YangName = "underlying-interface"
    underlyingInterface.EntityData.BundleName = "cisco_ios_xr"
    underlyingInterface.EntityData.ParentYangName = "enabled"
    underlyingInterface.EntityData.SegmentPath = "underlying-interface" + types.AddNoKeyToken(underlyingInterface)
    underlyingInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/" + underlyingInterface.EntityData.SegmentPath
    underlyingInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    underlyingInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    underlyingInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    underlyingInterface.EntityData.Children = types.NewOrderedMap()
    underlyingInterface.EntityData.Leafs = types.NewOrderedMap()
    underlyingInterface.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", underlyingInterface.InterfaceIndex})
    underlyingInterface.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", underlyingInterface.InterfaceName})

    underlyingInterface.EntityData.YListKeys = []string {}

    return &(underlyingInterface.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData
// Array of area information for an active
// interface
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Level of the area. The type is IsisLevel.
    Level interface{}

    // Number of adjacencies. The type is interface{} with range: 0..4294967295.
    AdjacencyCount interface{}

    // LSP pacing time period (ms). The type is interface{} with range:
    // 0..4294967295.
    LspPacingInterval interface{}

    // No. of SNP entries queued to be transmitted. The type is interface{} with
    // range: 0..4294967295.
    PsnpTransmitQueueSize interface{}

    // Hello interval. The type is interface{} with range: 0..4294967295.
    HelloInterval interface{}

    // Hello Multiplier. The type is interface{} with range: 0..4294967295.
    HelloMultiplier interface{}

    // LAN data, NULL iff interface has non-LAN media type.
    LanData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData_LanData
}

func (perAreaData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData) GetEntityData() *types.CommonEntityData {
    perAreaData.EntityData.YFilter = perAreaData.YFilter
    perAreaData.EntityData.YangName = "per-area-data"
    perAreaData.EntityData.BundleName = "cisco_ios_xr"
    perAreaData.EntityData.ParentYangName = "enabled"
    perAreaData.EntityData.SegmentPath = "per-area-data" + types.AddNoKeyToken(perAreaData)
    perAreaData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/" + perAreaData.EntityData.SegmentPath
    perAreaData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perAreaData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perAreaData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perAreaData.EntityData.Children = types.NewOrderedMap()
    perAreaData.EntityData.Children.Append("lan-data", types.YChild{"LanData", &perAreaData.LanData})
    perAreaData.EntityData.Leafs = types.NewOrderedMap()
    perAreaData.EntityData.Leafs.Append("level", types.YLeaf{"Level", perAreaData.Level})
    perAreaData.EntityData.Leafs.Append("adjacency-count", types.YLeaf{"AdjacencyCount", perAreaData.AdjacencyCount})
    perAreaData.EntityData.Leafs.Append("lsp-pacing-interval", types.YLeaf{"LspPacingInterval", perAreaData.LspPacingInterval})
    perAreaData.EntityData.Leafs.Append("psnp-transmit-queue-size", types.YLeaf{"PsnpTransmitQueueSize", perAreaData.PsnpTransmitQueueSize})
    perAreaData.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", perAreaData.HelloInterval})
    perAreaData.EntityData.Leafs.Append("hello-multiplier", types.YLeaf{"HelloMultiplier", perAreaData.HelloMultiplier})

    perAreaData.EntityData.YListKeys = []string {}

    return &(perAreaData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData_LanData
// LAN data, NULL iff interface has non-LAN media
// type
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData_LanData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Circuit LAN ID. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    CircuitLanId interface{}

    // Time (ms) until next IIH. The type is interface{} with range:
    // 0..4294967295.
    TimeUntilNextIih interface{}

    // Interface's DIS-election priority. The type is interface{} with range:
    // 0..255.
    InterfacePriority interface{}

    // Priority of current DIS on this LAN. The type is interface{} with range:
    // 0..255.
    Dispriority interface{}

    // Flag indicating if this LAN circuit is the DIS. The type is bool.
    AreWeDis interface{}
}

func (lanData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAreaData_LanData) GetEntityData() *types.CommonEntityData {
    lanData.EntityData.YFilter = lanData.YFilter
    lanData.EntityData.YangName = "lan-data"
    lanData.EntityData.BundleName = "cisco_ios_xr"
    lanData.EntityData.ParentYangName = "per-area-data"
    lanData.EntityData.SegmentPath = "lan-data"
    lanData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-area-data/" + lanData.EntityData.SegmentPath
    lanData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lanData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lanData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lanData.EntityData.Children = types.NewOrderedMap()
    lanData.EntityData.Leafs = types.NewOrderedMap()
    lanData.EntityData.Leafs.Append("circuit-lan-id", types.YLeaf{"CircuitLanId", lanData.CircuitLanId})
    lanData.EntityData.Leafs.Append("time-until-next-iih", types.YLeaf{"TimeUntilNextIih", lanData.TimeUntilNextIih})
    lanData.EntityData.Leafs.Append("interface-priority", types.YLeaf{"InterfacePriority", lanData.InterfacePriority})
    lanData.EntityData.Leafs.Append("dispriority", types.YLeaf{"Dispriority", lanData.Dispriority})
    lanData.EntityData.Leafs.Append("are-we-dis", types.YLeaf{"AreWeDis", lanData.AreWeDis})

    lanData.EntityData.YListKeys = []string {}

    return &(lanData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData
// Array of topology information
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Topology identifier.
    TopologyId Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_TopologyId

    // Status of the topology.
    Status Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status
}

func (perTopologyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData) GetEntityData() *types.CommonEntityData {
    perTopologyData.EntityData.YFilter = perTopologyData.YFilter
    perTopologyData.EntityData.YangName = "per-topology-data"
    perTopologyData.EntityData.BundleName = "cisco_ios_xr"
    perTopologyData.EntityData.ParentYangName = "enabled"
    perTopologyData.EntityData.SegmentPath = "per-topology-data" + types.AddNoKeyToken(perTopologyData)
    perTopologyData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/" + perTopologyData.EntityData.SegmentPath
    perTopologyData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perTopologyData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perTopologyData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perTopologyData.EntityData.Children = types.NewOrderedMap()
    perTopologyData.EntityData.Children.Append("topology-id", types.YChild{"TopologyId", &perTopologyData.TopologyId})
    perTopologyData.EntityData.Children.Append("status", types.YChild{"Status", &perTopologyData.Status})
    perTopologyData.EntityData.Leafs = types.NewOrderedMap()

    perTopologyData.EntityData.YListKeys = []string {}

    return &(perTopologyData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_TopologyId
// Topology identifier
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_TopologyId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF name. The type is IsisAfId.
    AfName interface{}

    // Sub-AF name. The type is IsisSubAfId.
    SafName interface{}

    // VRF Name. The type is string.
    VrfName interface{}

    // Topology Name. The type is string.
    TopologyName interface{}
}

func (topologyId *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_TopologyId) GetEntityData() *types.CommonEntityData {
    topologyId.EntityData.YFilter = topologyId.YFilter
    topologyId.EntityData.YangName = "topology-id"
    topologyId.EntityData.BundleName = "cisco_ios_xr"
    topologyId.EntityData.ParentYangName = "per-topology-data"
    topologyId.EntityData.SegmentPath = "topology-id"
    topologyId.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-topology-data/" + topologyId.EntityData.SegmentPath
    topologyId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topologyId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topologyId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topologyId.EntityData.Children = types.NewOrderedMap()
    topologyId.EntityData.Leafs = types.NewOrderedMap()
    topologyId.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", topologyId.AfName})
    topologyId.EntityData.Leafs.Append("saf-name", types.YLeaf{"SafName", topologyId.SafName})
    topologyId.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", topologyId.VrfName})
    topologyId.EntityData.Leafs.Append("topology-name", types.YLeaf{"TopologyName", topologyId.TopologyName})

    topologyId.EntityData.YListKeys = []string {}

    return &(topologyId.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status
// Status of the topology
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisEnabled.
    Status interface{}

    // Disabled information of a topology.
    Disabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Disabled

    // Enabled information of a topology.
    Enabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled
}

func (status *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status) GetEntityData() *types.CommonEntityData {
    status.EntityData.YFilter = status.YFilter
    status.EntityData.YangName = "status"
    status.EntityData.BundleName = "cisco_ios_xr"
    status.EntityData.ParentYangName = "per-topology-data"
    status.EntityData.SegmentPath = "status"
    status.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-topology-data/" + status.EntityData.SegmentPath
    status.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    status.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    status.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    status.EntityData.Children = types.NewOrderedMap()
    status.EntityData.Children.Append("disabled", types.YChild{"Disabled", &status.Disabled})
    status.EntityData.Children.Append("enabled", types.YChild{"Enabled", &status.Enabled})
    status.EntityData.Leafs = types.NewOrderedMap()
    status.EntityData.Leafs.Append("status", types.YLeaf{"Status", status.Status})

    status.EntityData.YListKeys = []string {}

    return &(status.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Disabled
// Disabled information of a topology
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Disabled struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the topology is disabled. The type is IsisIfTopoDisabledReason.
    ReasonCode interface{}
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Disabled) GetEntityData() *types.CommonEntityData {
    disabled.EntityData.YFilter = disabled.YFilter
    disabled.EntityData.YangName = "disabled"
    disabled.EntityData.BundleName = "cisco_ios_xr"
    disabled.EntityData.ParentYangName = "status"
    disabled.EntityData.SegmentPath = "disabled"
    disabled.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-topology-data/status/" + disabled.EntityData.SegmentPath
    disabled.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    disabled.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    disabled.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    disabled.EntityData.Children = types.NewOrderedMap()
    disabled.EntityData.Leafs = types.NewOrderedMap()
    disabled.EntityData.Leafs.Append("reason-code", types.YLeaf{"ReasonCode", disabled.ReasonCode})

    disabled.EntityData.YListKeys = []string {}

    return &(disabled.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled
// Enabled information of a topology
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // L1 metric for this topology. The type is interface{} with range:
    // 0..4294967295.
    Level1Metric interface{}

    // L2 metric for this topology. The type is interface{} with range:
    // 0..4294967295.
    Level2Metric interface{}

    // L1 metric for this topology. The type is interface{} with range:
    // 0..4294967295.
    Level1Weight interface{}

    // L2 metric for this topology. The type is interface{} with range:
    // 0..4294967295.
    Level2Weight interface{}

    // MPLS maximum number of pri labels supported. The type is interface{} with
    // range: 0..255.
    MaxLabelSupported interface{}

    // MPLS maximum number of backup labels supported. The type is interface{}
    // with range: 0..255.
    MaxBkpLabelSupported interface{}

    // MPLS maximum number of srte labels supported. The type is interface{} with
    // range: 0..255.
    MaxSrteLabelSupported interface{}

    // MPLS maximum number of sr auto-tunnel labels supported. The type is
    // interface{} with range: 0..255.
    MaxSratLabelSupported interface{}

    // MPLS LDP sync enabled status for L1. The type is bool.
    Level1ldpSyncEnabled interface{}

    // MPLS LDP sync enabled status for L2. The type is bool.
    Level2ldpSyncEnabled interface{}

    // Status of MPLS LDP synchronization. The type is bool.
    LdpSyncStatus interface{}

    // Status of MPLS LDPv6 synchronization. The type is bool.
    LdPv6SyncStatus interface{}

    // L1 metric-offset for this topology. The type is interface{} with range:
    // 0..4294967295.
    Level1OffsetMetric interface{}

    // L2 metric-offset for this topology. The type is interface{} with range:
    // 0..4294967295.
    Level2OffsetMetric interface{}

    // Link-Group configure status for L1. The type is bool.
    Level1LkgpConfigured interface{}

    // Link-Group configure status for L2. The type is bool.
    Level2LkgpConfigured interface{}

    // L1 PP-metric for this topology. The type is interface{} with range:
    // 0..4294967295.
    Level1ppMetric interface{}

    // L2 PP-metric for this topology. The type is interface{} with range:
    // 0..4294967295.
    Level2ppMetric interface{}

    // PP configure status for L1. The type is bool.
    Level1ppConfigured interface{}

    // PP configure status for L2. The type is bool.
    Level2ppConfigured interface{}

    // Adjacency formation status of a topology.
    AdjacencyFormStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus

    // Prefix advertisement status of a topology.
    AdvPrefixStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus

    // Level1 FRR information.
    Level1Frr Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr

    // Level2 FRR information.
    Level2Frr Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr

    // Array of Manual Adjacency SIDs. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_ManualAdjSid.
    ManualAdjSid []*Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_ManualAdjSid
}

func (enabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled) GetEntityData() *types.CommonEntityData {
    enabled.EntityData.YFilter = enabled.YFilter
    enabled.EntityData.YangName = "enabled"
    enabled.EntityData.BundleName = "cisco_ios_xr"
    enabled.EntityData.ParentYangName = "status"
    enabled.EntityData.SegmentPath = "enabled"
    enabled.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-topology-data/status/" + enabled.EntityData.SegmentPath
    enabled.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    enabled.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    enabled.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    enabled.EntityData.Children = types.NewOrderedMap()
    enabled.EntityData.Children.Append("adjacency-form-status", types.YChild{"AdjacencyFormStatus", &enabled.AdjacencyFormStatus})
    enabled.EntityData.Children.Append("adv-prefix-status", types.YChild{"AdvPrefixStatus", &enabled.AdvPrefixStatus})
    enabled.EntityData.Children.Append("level1-frr", types.YChild{"Level1Frr", &enabled.Level1Frr})
    enabled.EntityData.Children.Append("level2-frr", types.YChild{"Level2Frr", &enabled.Level2Frr})
    enabled.EntityData.Children.Append("manual-adj-sid", types.YChild{"ManualAdjSid", nil})
    for i := range enabled.ManualAdjSid {
        types.SetYListKey(enabled.ManualAdjSid[i], i)
        enabled.EntityData.Children.Append(types.GetSegmentPath(enabled.ManualAdjSid[i]), types.YChild{"ManualAdjSid", enabled.ManualAdjSid[i]})
    }
    enabled.EntityData.Leafs = types.NewOrderedMap()
    enabled.EntityData.Leafs.Append("level1-metric", types.YLeaf{"Level1Metric", enabled.Level1Metric})
    enabled.EntityData.Leafs.Append("level2-metric", types.YLeaf{"Level2Metric", enabled.Level2Metric})
    enabled.EntityData.Leafs.Append("level1-weight", types.YLeaf{"Level1Weight", enabled.Level1Weight})
    enabled.EntityData.Leafs.Append("level2-weight", types.YLeaf{"Level2Weight", enabled.Level2Weight})
    enabled.EntityData.Leafs.Append("max-label-supported", types.YLeaf{"MaxLabelSupported", enabled.MaxLabelSupported})
    enabled.EntityData.Leafs.Append("max-bkp-label-supported", types.YLeaf{"MaxBkpLabelSupported", enabled.MaxBkpLabelSupported})
    enabled.EntityData.Leafs.Append("max-srte-label-supported", types.YLeaf{"MaxSrteLabelSupported", enabled.MaxSrteLabelSupported})
    enabled.EntityData.Leafs.Append("max-srat-label-supported", types.YLeaf{"MaxSratLabelSupported", enabled.MaxSratLabelSupported})
    enabled.EntityData.Leafs.Append("level1ldp-sync-enabled", types.YLeaf{"Level1ldpSyncEnabled", enabled.Level1ldpSyncEnabled})
    enabled.EntityData.Leafs.Append("level2ldp-sync-enabled", types.YLeaf{"Level2ldpSyncEnabled", enabled.Level2ldpSyncEnabled})
    enabled.EntityData.Leafs.Append("ldp-sync-status", types.YLeaf{"LdpSyncStatus", enabled.LdpSyncStatus})
    enabled.EntityData.Leafs.Append("ld-pv6-sync-status", types.YLeaf{"LdPv6SyncStatus", enabled.LdPv6SyncStatus})
    enabled.EntityData.Leafs.Append("level1-offset-metric", types.YLeaf{"Level1OffsetMetric", enabled.Level1OffsetMetric})
    enabled.EntityData.Leafs.Append("level2-offset-metric", types.YLeaf{"Level2OffsetMetric", enabled.Level2OffsetMetric})
    enabled.EntityData.Leafs.Append("level1-lkgp-configured", types.YLeaf{"Level1LkgpConfigured", enabled.Level1LkgpConfigured})
    enabled.EntityData.Leafs.Append("level2-lkgp-configured", types.YLeaf{"Level2LkgpConfigured", enabled.Level2LkgpConfigured})
    enabled.EntityData.Leafs.Append("level1pp-metric", types.YLeaf{"Level1ppMetric", enabled.Level1ppMetric})
    enabled.EntityData.Leafs.Append("level2pp-metric", types.YLeaf{"Level2ppMetric", enabled.Level2ppMetric})
    enabled.EntityData.Leafs.Append("level1pp-configured", types.YLeaf{"Level1ppConfigured", enabled.Level1ppConfigured})
    enabled.EntityData.Leafs.Append("level2pp-configured", types.YLeaf{"Level2ppConfigured", enabled.Level2ppConfigured})

    enabled.EntityData.YListKeys = []string {}

    return &(enabled.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus
// Adjacency formation status of a topology
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisEnabled.
    Status interface{}

    // Disabled state for the adjacency formation status of a topology.
    Disabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus_Disabled
}

func (adjacencyFormStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus) GetEntityData() *types.CommonEntityData {
    adjacencyFormStatus.EntityData.YFilter = adjacencyFormStatus.YFilter
    adjacencyFormStatus.EntityData.YangName = "adjacency-form-status"
    adjacencyFormStatus.EntityData.BundleName = "cisco_ios_xr"
    adjacencyFormStatus.EntityData.ParentYangName = "enabled"
    adjacencyFormStatus.EntityData.SegmentPath = "adjacency-form-status"
    adjacencyFormStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-topology-data/status/enabled/" + adjacencyFormStatus.EntityData.SegmentPath
    adjacencyFormStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyFormStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyFormStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyFormStatus.EntityData.Children = types.NewOrderedMap()
    adjacencyFormStatus.EntityData.Children.Append("disabled", types.YChild{"Disabled", &adjacencyFormStatus.Disabled})
    adjacencyFormStatus.EntityData.Leafs = types.NewOrderedMap()
    adjacencyFormStatus.EntityData.Leafs.Append("status", types.YLeaf{"Status", adjacencyFormStatus.Status})

    adjacencyFormStatus.EntityData.YListKeys = []string {}

    return &(adjacencyFormStatus.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus_Disabled
// Disabled state for the adjacency formation
// status of a topology
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus_Disabled struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the adjacency formation status of a topology is disabled. The
    // type is IsisIfTopoAdjFormDisabledReason.
    ReasonCode interface{}
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdjacencyFormStatus_Disabled) GetEntityData() *types.CommonEntityData {
    disabled.EntityData.YFilter = disabled.YFilter
    disabled.EntityData.YangName = "disabled"
    disabled.EntityData.BundleName = "cisco_ios_xr"
    disabled.EntityData.ParentYangName = "adjacency-form-status"
    disabled.EntityData.SegmentPath = "disabled"
    disabled.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-topology-data/status/enabled/adjacency-form-status/" + disabled.EntityData.SegmentPath
    disabled.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    disabled.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    disabled.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    disabled.EntityData.Children = types.NewOrderedMap()
    disabled.EntityData.Leafs = types.NewOrderedMap()
    disabled.EntityData.Leafs.Append("reason-code", types.YLeaf{"ReasonCode", disabled.ReasonCode})

    disabled.EntityData.YListKeys = []string {}

    return &(disabled.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus
// Prefix advertisement status of a topology
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisEnabled.
    Status interface{}

    // Disabled state for the prefix advertisement status of a topology.
    Disabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus_Disabled
}

func (advPrefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus) GetEntityData() *types.CommonEntityData {
    advPrefixStatus.EntityData.YFilter = advPrefixStatus.YFilter
    advPrefixStatus.EntityData.YangName = "adv-prefix-status"
    advPrefixStatus.EntityData.BundleName = "cisco_ios_xr"
    advPrefixStatus.EntityData.ParentYangName = "enabled"
    advPrefixStatus.EntityData.SegmentPath = "adv-prefix-status"
    advPrefixStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-topology-data/status/enabled/" + advPrefixStatus.EntityData.SegmentPath
    advPrefixStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advPrefixStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advPrefixStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advPrefixStatus.EntityData.Children = types.NewOrderedMap()
    advPrefixStatus.EntityData.Children.Append("disabled", types.YChild{"Disabled", &advPrefixStatus.Disabled})
    advPrefixStatus.EntityData.Leafs = types.NewOrderedMap()
    advPrefixStatus.EntityData.Leafs.Append("status", types.YLeaf{"Status", advPrefixStatus.Status})

    advPrefixStatus.EntityData.YListKeys = []string {}

    return &(advPrefixStatus.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus_Disabled
// Disabled state for the prefix advertisement
// status of a topology
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus_Disabled struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the prefix advertisement status of a topology is disabled. The
    // type is IsisIfTopoAdvPrefixDisabledReason.
    ReasonCode interface{}
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_AdvPrefixStatus_Disabled) GetEntityData() *types.CommonEntityData {
    disabled.EntityData.YFilter = disabled.YFilter
    disabled.EntityData.YangName = "disabled"
    disabled.EntityData.BundleName = "cisco_ios_xr"
    disabled.EntityData.ParentYangName = "adv-prefix-status"
    disabled.EntityData.SegmentPath = "disabled"
    disabled.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-topology-data/status/enabled/adv-prefix-status/" + disabled.EntityData.SegmentPath
    disabled.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    disabled.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    disabled.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    disabled.EntityData.Children = types.NewOrderedMap()
    disabled.EntityData.Leafs = types.NewOrderedMap()
    disabled.EntityData.Leafs.Append("reason-code", types.YLeaf{"ReasonCode", disabled.ReasonCode})

    disabled.EntityData.YListKeys = []string {}

    return &(disabled.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr
// Level1 FRR information
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FRR type configured per level for this interface. The type is IsisFrr.
    FrrType interface{}

    // Is FRR enabled per level on this interface. The type is bool.
    IsFrr interface{}

    // Is FRR Remote LFA enabled per level for this interface. The type is bool.
    IsRemoteLfa interface{}

    // Is FRR TI LFA enabled per level for this interface. The type is bool.
    IsTiLfa interface{}

    // TI LFA node-protecting Tie breaker index. The type is interface{} with
    // range: 0..255.
    TiLfaNodeTieBreakerIndex interface{}

    // TI LFA srlg Tie breaker index. The type is interface{} with range: 0..255.
    TiLfaSrlgTieBreaker interface{}

    // Is Tiebreaker configured per level for this interface. The type is bool.
    IsTieBreakersConfigured interface{}

    // FRR TieBreakers array per level for this interface. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr_FrrTieBreaker.
    FrrTieBreaker []*Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr_FrrTieBreaker
}

func (level1Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr) GetEntityData() *types.CommonEntityData {
    level1Frr.EntityData.YFilter = level1Frr.YFilter
    level1Frr.EntityData.YangName = "level1-frr"
    level1Frr.EntityData.BundleName = "cisco_ios_xr"
    level1Frr.EntityData.ParentYangName = "enabled"
    level1Frr.EntityData.SegmentPath = "level1-frr"
    level1Frr.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-topology-data/status/enabled/" + level1Frr.EntityData.SegmentPath
    level1Frr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    level1Frr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    level1Frr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    level1Frr.EntityData.Children = types.NewOrderedMap()
    level1Frr.EntityData.Children.Append("frr-tie-breaker", types.YChild{"FrrTieBreaker", nil})
    for i := range level1Frr.FrrTieBreaker {
        types.SetYListKey(level1Frr.FrrTieBreaker[i], i)
        level1Frr.EntityData.Children.Append(types.GetSegmentPath(level1Frr.FrrTieBreaker[i]), types.YChild{"FrrTieBreaker", level1Frr.FrrTieBreaker[i]})
    }
    level1Frr.EntityData.Leafs = types.NewOrderedMap()
    level1Frr.EntityData.Leafs.Append("frr-type", types.YLeaf{"FrrType", level1Frr.FrrType})
    level1Frr.EntityData.Leafs.Append("is-frr", types.YLeaf{"IsFrr", level1Frr.IsFrr})
    level1Frr.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", level1Frr.IsRemoteLfa})
    level1Frr.EntityData.Leafs.Append("is-ti-lfa", types.YLeaf{"IsTiLfa", level1Frr.IsTiLfa})
    level1Frr.EntityData.Leafs.Append("ti-lfa-node-tie-breaker-index", types.YLeaf{"TiLfaNodeTieBreakerIndex", level1Frr.TiLfaNodeTieBreakerIndex})
    level1Frr.EntityData.Leafs.Append("ti-lfa-srlg-tie-breaker", types.YLeaf{"TiLfaSrlgTieBreaker", level1Frr.TiLfaSrlgTieBreaker})
    level1Frr.EntityData.Leafs.Append("is-tie-breakers-configured", types.YLeaf{"IsTieBreakersConfigured", level1Frr.IsTieBreakersConfigured})

    level1Frr.EntityData.YListKeys = []string {}

    return &(level1Frr.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr_FrrTieBreaker
// FRR TieBreakers array per level for this
// interface
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr_FrrTieBreaker struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Tie Breaker Type. The type is IsisFrrTiebreaker.
    TieBreaker interface{}

    // Tie Breaker Index. The type is interface{} with range: 0..255.
    Index interface{}
}

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level1Frr_FrrTieBreaker) GetEntityData() *types.CommonEntityData {
    frrTieBreaker.EntityData.YFilter = frrTieBreaker.YFilter
    frrTieBreaker.EntityData.YangName = "frr-tie-breaker"
    frrTieBreaker.EntityData.BundleName = "cisco_ios_xr"
    frrTieBreaker.EntityData.ParentYangName = "level1-frr"
    frrTieBreaker.EntityData.SegmentPath = "frr-tie-breaker" + types.AddNoKeyToken(frrTieBreaker)
    frrTieBreaker.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-topology-data/status/enabled/level1-frr/" + frrTieBreaker.EntityData.SegmentPath
    frrTieBreaker.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrTieBreaker.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrTieBreaker.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrTieBreaker.EntityData.Children = types.NewOrderedMap()
    frrTieBreaker.EntityData.Leafs = types.NewOrderedMap()
    frrTieBreaker.EntityData.Leafs.Append("tie-breaker", types.YLeaf{"TieBreaker", frrTieBreaker.TieBreaker})
    frrTieBreaker.EntityData.Leafs.Append("index", types.YLeaf{"Index", frrTieBreaker.Index})

    frrTieBreaker.EntityData.YListKeys = []string {}

    return &(frrTieBreaker.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr
// Level2 FRR information
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FRR type configured per level for this interface. The type is IsisFrr.
    FrrType interface{}

    // Is FRR enabled per level on this interface. The type is bool.
    IsFrr interface{}

    // Is FRR Remote LFA enabled per level for this interface. The type is bool.
    IsRemoteLfa interface{}

    // Is FRR TI LFA enabled per level for this interface. The type is bool.
    IsTiLfa interface{}

    // TI LFA node-protecting Tie breaker index. The type is interface{} with
    // range: 0..255.
    TiLfaNodeTieBreakerIndex interface{}

    // TI LFA srlg Tie breaker index. The type is interface{} with range: 0..255.
    TiLfaSrlgTieBreaker interface{}

    // Is Tiebreaker configured per level for this interface. The type is bool.
    IsTieBreakersConfigured interface{}

    // FRR TieBreakers array per level for this interface. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr_FrrTieBreaker.
    FrrTieBreaker []*Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr_FrrTieBreaker
}

func (level2Frr *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr) GetEntityData() *types.CommonEntityData {
    level2Frr.EntityData.YFilter = level2Frr.YFilter
    level2Frr.EntityData.YangName = "level2-frr"
    level2Frr.EntityData.BundleName = "cisco_ios_xr"
    level2Frr.EntityData.ParentYangName = "enabled"
    level2Frr.EntityData.SegmentPath = "level2-frr"
    level2Frr.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-topology-data/status/enabled/" + level2Frr.EntityData.SegmentPath
    level2Frr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    level2Frr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    level2Frr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    level2Frr.EntityData.Children = types.NewOrderedMap()
    level2Frr.EntityData.Children.Append("frr-tie-breaker", types.YChild{"FrrTieBreaker", nil})
    for i := range level2Frr.FrrTieBreaker {
        types.SetYListKey(level2Frr.FrrTieBreaker[i], i)
        level2Frr.EntityData.Children.Append(types.GetSegmentPath(level2Frr.FrrTieBreaker[i]), types.YChild{"FrrTieBreaker", level2Frr.FrrTieBreaker[i]})
    }
    level2Frr.EntityData.Leafs = types.NewOrderedMap()
    level2Frr.EntityData.Leafs.Append("frr-type", types.YLeaf{"FrrType", level2Frr.FrrType})
    level2Frr.EntityData.Leafs.Append("is-frr", types.YLeaf{"IsFrr", level2Frr.IsFrr})
    level2Frr.EntityData.Leafs.Append("is-remote-lfa", types.YLeaf{"IsRemoteLfa", level2Frr.IsRemoteLfa})
    level2Frr.EntityData.Leafs.Append("is-ti-lfa", types.YLeaf{"IsTiLfa", level2Frr.IsTiLfa})
    level2Frr.EntityData.Leafs.Append("ti-lfa-node-tie-breaker-index", types.YLeaf{"TiLfaNodeTieBreakerIndex", level2Frr.TiLfaNodeTieBreakerIndex})
    level2Frr.EntityData.Leafs.Append("ti-lfa-srlg-tie-breaker", types.YLeaf{"TiLfaSrlgTieBreaker", level2Frr.TiLfaSrlgTieBreaker})
    level2Frr.EntityData.Leafs.Append("is-tie-breakers-configured", types.YLeaf{"IsTieBreakersConfigured", level2Frr.IsTieBreakersConfigured})

    level2Frr.EntityData.YListKeys = []string {}

    return &(level2Frr.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr_FrrTieBreaker
// FRR TieBreakers array per level for this
// interface
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr_FrrTieBreaker struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Tie Breaker Type. The type is IsisFrrTiebreaker.
    TieBreaker interface{}

    // Tie Breaker Index. The type is interface{} with range: 0..255.
    Index interface{}
}

func (frrTieBreaker *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_Level2Frr_FrrTieBreaker) GetEntityData() *types.CommonEntityData {
    frrTieBreaker.EntityData.YFilter = frrTieBreaker.YFilter
    frrTieBreaker.EntityData.YangName = "frr-tie-breaker"
    frrTieBreaker.EntityData.BundleName = "cisco_ios_xr"
    frrTieBreaker.EntityData.ParentYangName = "level2-frr"
    frrTieBreaker.EntityData.SegmentPath = "frr-tie-breaker" + types.AddNoKeyToken(frrTieBreaker)
    frrTieBreaker.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-topology-data/status/enabled/level2-frr/" + frrTieBreaker.EntityData.SegmentPath
    frrTieBreaker.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrTieBreaker.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrTieBreaker.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrTieBreaker.EntityData.Children = types.NewOrderedMap()
    frrTieBreaker.EntityData.Leafs = types.NewOrderedMap()
    frrTieBreaker.EntityData.Leafs.Append("tie-breaker", types.YLeaf{"TieBreaker", frrTieBreaker.TieBreaker})
    frrTieBreaker.EntityData.Leafs.Append("index", types.YLeaf{"Index", frrTieBreaker.Index})

    frrTieBreaker.EntityData.YListKeys = []string {}

    return &(frrTieBreaker.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_ManualAdjSid
// Array of Manual Adjacency SIDs
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_ManualAdjSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Manual Adjacency SID Label. The type is interface{} with range:
    // 0..4294967295.
    ManualAdjacencySidLabel interface{}

    // Manual Adjacency SID Index (if configured as index). The type is
    // interface{} with range: 0..4294967295.
    ManualAdjacencySidIndex interface{}

    // Manual Adjacency SID Type (Absolute or Index). The type is interface{} with
    // range: 0..255.
    ManualAdjacencySidType interface{}

    // SID configured as protected by backup path. The type is bool.
    SidProtected interface{}

    // SID is in use. The type is bool.
    SidActive interface{}
}

func (manualAdjSid *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerTopologyData_Status_Enabled_ManualAdjSid) GetEntityData() *types.CommonEntityData {
    manualAdjSid.EntityData.YFilter = manualAdjSid.YFilter
    manualAdjSid.EntityData.YangName = "manual-adj-sid"
    manualAdjSid.EntityData.BundleName = "cisco_ios_xr"
    manualAdjSid.EntityData.ParentYangName = "enabled"
    manualAdjSid.EntityData.SegmentPath = "manual-adj-sid" + types.AddNoKeyToken(manualAdjSid)
    manualAdjSid.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-topology-data/status/enabled/" + manualAdjSid.EntityData.SegmentPath
    manualAdjSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    manualAdjSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    manualAdjSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    manualAdjSid.EntityData.Children = types.NewOrderedMap()
    manualAdjSid.EntityData.Leafs = types.NewOrderedMap()
    manualAdjSid.EntityData.Leafs.Append("manual-adjacency-sid-label", types.YLeaf{"ManualAdjacencySidLabel", manualAdjSid.ManualAdjacencySidLabel})
    manualAdjSid.EntityData.Leafs.Append("manual-adjacency-sid-index", types.YLeaf{"ManualAdjacencySidIndex", manualAdjSid.ManualAdjacencySidIndex})
    manualAdjSid.EntityData.Leafs.Append("manual-adjacency-sid-type", types.YLeaf{"ManualAdjacencySidType", manualAdjSid.ManualAdjacencySidType})
    manualAdjSid.EntityData.Leafs.Append("sid-protected", types.YLeaf{"SidProtected", manualAdjSid.SidProtected})
    manualAdjSid.EntityData.Leafs.Append("sid-active", types.YLeaf{"SidActive", manualAdjSid.SidActive})

    manualAdjSid.EntityData.YListKeys = []string {}

    return &(manualAdjSid.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData
// Array of address family information
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Address Family Identifier of the interface. The type is IsisAfId.
    AfName interface{}

    // Address Family status of the interface.
    AfStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus
}

func (perAddressFamilyData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData) GetEntityData() *types.CommonEntityData {
    perAddressFamilyData.EntityData.YFilter = perAddressFamilyData.YFilter
    perAddressFamilyData.EntityData.YangName = "per-address-family-data"
    perAddressFamilyData.EntityData.BundleName = "cisco_ios_xr"
    perAddressFamilyData.EntityData.ParentYangName = "enabled"
    perAddressFamilyData.EntityData.SegmentPath = "per-address-family-data" + types.AddNoKeyToken(perAddressFamilyData)
    perAddressFamilyData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/" + perAddressFamilyData.EntityData.SegmentPath
    perAddressFamilyData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perAddressFamilyData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perAddressFamilyData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perAddressFamilyData.EntityData.Children = types.NewOrderedMap()
    perAddressFamilyData.EntityData.Children.Append("af-status", types.YChild{"AfStatus", &perAddressFamilyData.AfStatus})
    perAddressFamilyData.EntityData.Leafs = types.NewOrderedMap()
    perAddressFamilyData.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", perAddressFamilyData.AfName})

    perAddressFamilyData.EntityData.YListKeys = []string {}

    return &(perAddressFamilyData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus
// Address Family status of the interface
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisEnabled.
    Status interface{}

    // Disabled info for the AF of an interface.
    Disabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_Disabled

    // Enabled data for the AF of an interface.
    AfData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData
}

func (afStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus) GetEntityData() *types.CommonEntityData {
    afStatus.EntityData.YFilter = afStatus.YFilter
    afStatus.EntityData.YangName = "af-status"
    afStatus.EntityData.BundleName = "cisco_ios_xr"
    afStatus.EntityData.ParentYangName = "per-address-family-data"
    afStatus.EntityData.SegmentPath = "af-status"
    afStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-address-family-data/" + afStatus.EntityData.SegmentPath
    afStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    afStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    afStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    afStatus.EntityData.Children = types.NewOrderedMap()
    afStatus.EntityData.Children.Append("disabled", types.YChild{"Disabled", &afStatus.Disabled})
    afStatus.EntityData.Children.Append("af-data", types.YChild{"AfData", &afStatus.AfData})
    afStatus.EntityData.Leafs = types.NewOrderedMap()
    afStatus.EntityData.Leafs.Append("status", types.YLeaf{"Status", afStatus.Status})

    afStatus.EntityData.YListKeys = []string {}

    return &(afStatus.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_Disabled
// Disabled info for the AF of an interface
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_Disabled struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the Address Family is disabled. The type is
    // IsisIfAfDisabledReason.
    ReasonCode interface{}
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_Disabled) GetEntityData() *types.CommonEntityData {
    disabled.EntityData.YFilter = disabled.YFilter
    disabled.EntityData.YangName = "disabled"
    disabled.EntityData.BundleName = "cisco_ios_xr"
    disabled.EntityData.ParentYangName = "af-status"
    disabled.EntityData.SegmentPath = "disabled"
    disabled.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-address-family-data/af-status/" + disabled.EntityData.SegmentPath
    disabled.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    disabled.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    disabled.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    disabled.EntityData.Children = types.NewOrderedMap()
    disabled.EntityData.Leafs = types.NewOrderedMap()
    disabled.EntityData.Leafs.Append("reason-code", types.YLeaf{"ReasonCode", disabled.ReasonCode})

    disabled.EntityData.YListKeys = []string {}

    return &(disabled.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData
// Enabled data for the AF of an interface
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol status of the AF.
    ProtocolStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus

    // Forwarding status of the AF.
    ForwardingAddressStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus

    // Prefix status of the AF.
    PrefixStatus Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus
}

func (afData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData) GetEntityData() *types.CommonEntityData {
    afData.EntityData.YFilter = afData.YFilter
    afData.EntityData.YangName = "af-data"
    afData.EntityData.BundleName = "cisco_ios_xr"
    afData.EntityData.ParentYangName = "af-status"
    afData.EntityData.SegmentPath = "af-data"
    afData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-address-family-data/af-status/" + afData.EntityData.SegmentPath
    afData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    afData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    afData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    afData.EntityData.Children = types.NewOrderedMap()
    afData.EntityData.Children.Append("protocol-status", types.YChild{"ProtocolStatus", &afData.ProtocolStatus})
    afData.EntityData.Children.Append("forwarding-address-status", types.YChild{"ForwardingAddressStatus", &afData.ForwardingAddressStatus})
    afData.EntityData.Children.Append("prefix-status", types.YChild{"PrefixStatus", &afData.PrefixStatus})
    afData.EntityData.Leafs = types.NewOrderedMap()

    afData.EntityData.YListKeys = []string {}

    return &(afData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus
// Protocol status of the AF
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisUp.
    Status interface{}

    // Disabled state of the Address Family protocol.
    Disabled Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus_Disabled
}

func (protocolStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus) GetEntityData() *types.CommonEntityData {
    protocolStatus.EntityData.YFilter = protocolStatus.YFilter
    protocolStatus.EntityData.YangName = "protocol-status"
    protocolStatus.EntityData.BundleName = "cisco_ios_xr"
    protocolStatus.EntityData.ParentYangName = "af-data"
    protocolStatus.EntityData.SegmentPath = "protocol-status"
    protocolStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-address-family-data/af-status/af-data/" + protocolStatus.EntityData.SegmentPath
    protocolStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolStatus.EntityData.Children = types.NewOrderedMap()
    protocolStatus.EntityData.Children.Append("disabled", types.YChild{"Disabled", &protocolStatus.Disabled})
    protocolStatus.EntityData.Leafs = types.NewOrderedMap()
    protocolStatus.EntityData.Leafs.Append("status", types.YLeaf{"Status", protocolStatus.Status})

    protocolStatus.EntityData.YListKeys = []string {}

    return &(protocolStatus.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus_Disabled
// Disabled state of the Address Family protocol
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus_Disabled struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the Address Family protocol status is down. The type is
    // IsisIfAfProtoDownReason.
    ReasonCode interface{}
}

func (disabled *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ProtocolStatus_Disabled) GetEntityData() *types.CommonEntityData {
    disabled.EntityData.YFilter = disabled.YFilter
    disabled.EntityData.YangName = "disabled"
    disabled.EntityData.BundleName = "cisco_ios_xr"
    disabled.EntityData.ParentYangName = "protocol-status"
    disabled.EntityData.SegmentPath = "disabled"
    disabled.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-address-family-data/af-status/af-data/protocol-status/" + disabled.EntityData.SegmentPath
    disabled.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    disabled.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    disabled.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    disabled.EntityData.Children = types.NewOrderedMap()
    disabled.EntityData.Leafs = types.NewOrderedMap()
    disabled.EntityData.Leafs.Append("reason-code", types.YLeaf{"ReasonCode", disabled.ReasonCode})

    disabled.EntityData.YListKeys = []string {}

    return &(disabled.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus
// Forwarding status of the AF
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisKnown.
    Status interface{}

    // Unknown forwarding address data.
    Unknown Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_Unknown

    // Known Forwarding address data.
    ForwardingAddressData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData
}

func (forwardingAddressStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus) GetEntityData() *types.CommonEntityData {
    forwardingAddressStatus.EntityData.YFilter = forwardingAddressStatus.YFilter
    forwardingAddressStatus.EntityData.YangName = "forwarding-address-status"
    forwardingAddressStatus.EntityData.BundleName = "cisco_ios_xr"
    forwardingAddressStatus.EntityData.ParentYangName = "af-data"
    forwardingAddressStatus.EntityData.SegmentPath = "forwarding-address-status"
    forwardingAddressStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-address-family-data/af-status/af-data/" + forwardingAddressStatus.EntityData.SegmentPath
    forwardingAddressStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardingAddressStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardingAddressStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardingAddressStatus.EntityData.Children = types.NewOrderedMap()
    forwardingAddressStatus.EntityData.Children.Append("unknown", types.YChild{"Unknown", &forwardingAddressStatus.Unknown})
    forwardingAddressStatus.EntityData.Children.Append("forwarding-address-data", types.YChild{"ForwardingAddressData", &forwardingAddressStatus.ForwardingAddressData})
    forwardingAddressStatus.EntityData.Leafs = types.NewOrderedMap()
    forwardingAddressStatus.EntityData.Leafs.Append("status", types.YLeaf{"Status", forwardingAddressStatus.Status})

    forwardingAddressStatus.EntityData.YListKeys = []string {}

    return &(forwardingAddressStatus.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_Unknown
// Unknown forwarding address data
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_Unknown struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the forwarding address(es) of an AF is(are) unknown. The type is
    // IsisIfAfFwdAddrUnknownReason.
    ReasonCode interface{}
}

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_Unknown) GetEntityData() *types.CommonEntityData {
    unknown.EntityData.YFilter = unknown.YFilter
    unknown.EntityData.YangName = "unknown"
    unknown.EntityData.BundleName = "cisco_ios_xr"
    unknown.EntityData.ParentYangName = "forwarding-address-status"
    unknown.EntityData.SegmentPath = "unknown"
    unknown.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-address-family-data/af-status/af-data/forwarding-address-status/" + unknown.EntityData.SegmentPath
    unknown.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknown.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknown.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknown.EntityData.Children = types.NewOrderedMap()
    unknown.EntityData.Leafs = types.NewOrderedMap()
    unknown.EntityData.Leafs.Append("reason-code", types.YLeaf{"ReasonCode", unknown.ReasonCode})

    unknown.EntityData.YListKeys = []string {}

    return &(unknown.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData
// Known Forwarding address data
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If the interface is unnumbered, then its name, else NULL. The type is
    // string.
    UnnumberedInterfaceName interface{}

    // Array of forwarding addresses. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress.
    ForwardingAddress []*Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress
}

func (forwardingAddressData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData) GetEntityData() *types.CommonEntityData {
    forwardingAddressData.EntityData.YFilter = forwardingAddressData.YFilter
    forwardingAddressData.EntityData.YangName = "forwarding-address-data"
    forwardingAddressData.EntityData.BundleName = "cisco_ios_xr"
    forwardingAddressData.EntityData.ParentYangName = "forwarding-address-status"
    forwardingAddressData.EntityData.SegmentPath = "forwarding-address-data"
    forwardingAddressData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-address-family-data/af-status/af-data/forwarding-address-status/" + forwardingAddressData.EntityData.SegmentPath
    forwardingAddressData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardingAddressData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardingAddressData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardingAddressData.EntityData.Children = types.NewOrderedMap()
    forwardingAddressData.EntityData.Children.Append("forwarding-address", types.YChild{"ForwardingAddress", nil})
    for i := range forwardingAddressData.ForwardingAddress {
        types.SetYListKey(forwardingAddressData.ForwardingAddress[i], i)
        forwardingAddressData.EntityData.Children.Append(types.GetSegmentPath(forwardingAddressData.ForwardingAddress[i]), types.YChild{"ForwardingAddress", forwardingAddressData.ForwardingAddress[i]})
    }
    forwardingAddressData.EntityData.Leafs = types.NewOrderedMap()
    forwardingAddressData.EntityData.Leafs.Append("unnumbered-interface-name", types.YLeaf{"UnnumberedInterfaceName", forwardingAddressData.UnnumberedInterfaceName})

    forwardingAddressData.EntityData.YListKeys = []string {}

    return &(forwardingAddressData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress
// Array of forwarding addresses
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // AFName. The type is IsisAfId.
    AfName interface{}

    // IPV4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPV6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (forwardingAddress *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_ForwardingAddressStatus_ForwardingAddressData_ForwardingAddress) GetEntityData() *types.CommonEntityData {
    forwardingAddress.EntityData.YFilter = forwardingAddress.YFilter
    forwardingAddress.EntityData.YangName = "forwarding-address"
    forwardingAddress.EntityData.BundleName = "cisco_ios_xr"
    forwardingAddress.EntityData.ParentYangName = "forwarding-address-data"
    forwardingAddress.EntityData.SegmentPath = "forwarding-address" + types.AddNoKeyToken(forwardingAddress)
    forwardingAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-address-family-data/af-status/af-data/forwarding-address-status/forwarding-address-data/" + forwardingAddress.EntityData.SegmentPath
    forwardingAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardingAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardingAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardingAddress.EntityData.Children = types.NewOrderedMap()
    forwardingAddress.EntityData.Leafs = types.NewOrderedMap()
    forwardingAddress.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", forwardingAddress.AfName})
    forwardingAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", forwardingAddress.Ipv4})
    forwardingAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", forwardingAddress.Ipv6})

    forwardingAddress.EntityData.YListKeys = []string {}

    return &(forwardingAddress.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus
// Prefix status of the AF
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status. The type is IsisKnown.
    Status interface{}

    // Unknown state for the global prefixes.
    Unknown Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_Unknown

    // Global prefix data for the Address Family.
    PrefixData Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData
}

func (prefixStatus *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus) GetEntityData() *types.CommonEntityData {
    prefixStatus.EntityData.YFilter = prefixStatus.YFilter
    prefixStatus.EntityData.YangName = "prefix-status"
    prefixStatus.EntityData.BundleName = "cisco_ios_xr"
    prefixStatus.EntityData.ParentYangName = "af-data"
    prefixStatus.EntityData.SegmentPath = "prefix-status"
    prefixStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-address-family-data/af-status/af-data/" + prefixStatus.EntityData.SegmentPath
    prefixStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixStatus.EntityData.Children = types.NewOrderedMap()
    prefixStatus.EntityData.Children.Append("unknown", types.YChild{"Unknown", &prefixStatus.Unknown})
    prefixStatus.EntityData.Children.Append("prefix-data", types.YChild{"PrefixData", &prefixStatus.PrefixData})
    prefixStatus.EntityData.Leafs = types.NewOrderedMap()
    prefixStatus.EntityData.Leafs.Append("status", types.YLeaf{"Status", prefixStatus.Status})

    prefixStatus.EntityData.YListKeys = []string {}

    return &(prefixStatus.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_Unknown
// Unknown state for the global prefixes
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_Unknown struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reason why the global prefix(es) is(are) unknown. The type is
    // IsisIfAfPrefixUnknownReason.
    ReasonCode interface{}
}

func (unknown *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_Unknown) GetEntityData() *types.CommonEntityData {
    unknown.EntityData.YFilter = unknown.YFilter
    unknown.EntityData.YangName = "unknown"
    unknown.EntityData.BundleName = "cisco_ios_xr"
    unknown.EntityData.ParentYangName = "prefix-status"
    unknown.EntityData.SegmentPath = "unknown"
    unknown.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-address-family-data/af-status/af-data/prefix-status/" + unknown.EntityData.SegmentPath
    unknown.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknown.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknown.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknown.EntityData.Children = types.NewOrderedMap()
    unknown.EntityData.Leafs = types.NewOrderedMap()
    unknown.EntityData.Leafs.Append("reason-code", types.YLeaf{"ReasonCode", unknown.ReasonCode})

    unknown.EntityData.YListKeys = []string {}

    return &(unknown.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData
// Global prefix data for the Address Family
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is the interface unnumbered. The type is bool.
    IsUnnumbered interface{}

    // Array of global prefixes. The type is slice of
    // Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix.
    Prefix []*Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix
}

func (prefixData *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData) GetEntityData() *types.CommonEntityData {
    prefixData.EntityData.YFilter = prefixData.YFilter
    prefixData.EntityData.YangName = "prefix-data"
    prefixData.EntityData.BundleName = "cisco_ios_xr"
    prefixData.EntityData.ParentYangName = "prefix-status"
    prefixData.EntityData.SegmentPath = "prefix-data"
    prefixData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-address-family-data/af-status/af-data/prefix-status/" + prefixData.EntityData.SegmentPath
    prefixData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixData.EntityData.Children = types.NewOrderedMap()
    prefixData.EntityData.Children.Append("prefix", types.YChild{"Prefix", nil})
    for i := range prefixData.Prefix {
        types.SetYListKey(prefixData.Prefix[i], i)
        prefixData.EntityData.Children.Append(types.GetSegmentPath(prefixData.Prefix[i]), types.YChild{"Prefix", prefixData.Prefix[i]})
    }
    prefixData.EntityData.Leafs = types.NewOrderedMap()
    prefixData.EntityData.Leafs.Append("is-unnumbered", types.YLeaf{"IsUnnumbered", prefixData.IsUnnumbered})

    prefixData.EntityData.YListKeys = []string {}

    return &(prefixData.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix
// Array of global prefixes
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // AFName. The type is IsisAfId.
    AfName interface{}

    // ipv4.
    Ipv4 Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv4

    // ipv6.
    Ipv6 Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv6
}

func (prefix *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix) GetEntityData() *types.CommonEntityData {
    prefix.EntityData.YFilter = prefix.YFilter
    prefix.EntityData.YangName = "prefix"
    prefix.EntityData.BundleName = "cisco_ios_xr"
    prefix.EntityData.ParentYangName = "prefix-data"
    prefix.EntityData.SegmentPath = "prefix" + types.AddNoKeyToken(prefix)
    prefix.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-address-family-data/af-status/af-data/prefix-status/prefix-data/" + prefix.EntityData.SegmentPath
    prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefix.EntityData.Children = types.NewOrderedMap()
    prefix.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &prefix.Ipv4})
    prefix.EntityData.Children.Append("ipv6", types.YChild{"Ipv6", &prefix.Ipv6})
    prefix.EntityData.Leafs = types.NewOrderedMap()
    prefix.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", prefix.AfName})

    prefix.EntityData.YListKeys = []string {}

    return &(prefix.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv4
// ipv4
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv4 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "prefix"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-address-family-data/af-status/af-data/prefix-status/prefix-data/prefix/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4.Prefix})
    ipv4.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4.PrefixLength})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv6
// ipv6
type Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv6 *Isis_Instances_Instance_Interfaces_Interface_InterfaceStatusAndData_Enabled_PerAddressFamilyData_AfStatus_AfData_PrefixStatus_PrefixData_Prefix_Ipv6) GetEntityData() *types.CommonEntityData {
    ipv6.EntityData.YFilter = ipv6.YFilter
    ipv6.EntityData.YangName = "ipv6"
    ipv6.EntityData.BundleName = "cisco_ios_xr"
    ipv6.EntityData.ParentYangName = "prefix"
    ipv6.EntityData.SegmentPath = "ipv6"
    ipv6.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interfaces/interface/interface-status-and-data/enabled/per-address-family-data/af-status/af-data/prefix-status/prefix-data/prefix/" + ipv6.EntityData.SegmentPath
    ipv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6.EntityData.Children = types.NewOrderedMap()
    ipv6.EntityData.Leafs = types.NewOrderedMap()
    ipv6.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6.Prefix})
    ipv6.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6.PrefixLength})

    ipv6.EntityData.YListKeys = []string {}

    return &(ipv6.EntityData)
}

// Isis_Instances_Instance_CheckpointAdjacencies
// Checkpointed adjacency table
type Isis_Instances_Instance_CheckpointAdjacencies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A checkpointed IS-IS adjacency. The type is slice of
    // Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency.
    CheckpointAdjacency []*Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency
}

func (checkpointAdjacencies *Isis_Instances_Instance_CheckpointAdjacencies) GetEntityData() *types.CommonEntityData {
    checkpointAdjacencies.EntityData.YFilter = checkpointAdjacencies.YFilter
    checkpointAdjacencies.EntityData.YangName = "checkpoint-adjacencies"
    checkpointAdjacencies.EntityData.BundleName = "cisco_ios_xr"
    checkpointAdjacencies.EntityData.ParentYangName = "instance"
    checkpointAdjacencies.EntityData.SegmentPath = "checkpoint-adjacencies"
    checkpointAdjacencies.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/" + checkpointAdjacencies.EntityData.SegmentPath
    checkpointAdjacencies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    checkpointAdjacencies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    checkpointAdjacencies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    checkpointAdjacencies.EntityData.Children = types.NewOrderedMap()
    checkpointAdjacencies.EntityData.Children.Append("checkpoint-adjacency", types.YChild{"CheckpointAdjacency", nil})
    for i := range checkpointAdjacencies.CheckpointAdjacency {
        types.SetYListKey(checkpointAdjacencies.CheckpointAdjacency[i], i)
        checkpointAdjacencies.EntityData.Children.Append(types.GetSegmentPath(checkpointAdjacencies.CheckpointAdjacency[i]), types.YChild{"CheckpointAdjacency", checkpointAdjacencies.CheckpointAdjacency[i]})
    }
    checkpointAdjacencies.EntityData.Leafs = types.NewOrderedMap()

    checkpointAdjacencies.EntityData.YListKeys = []string {}

    return &(checkpointAdjacencies.EntityData)
}

// Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency
// A checkpointed IS-IS adjacency
type Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Level. The type is IsisInternalLevel.
    Level interface{}

    // System ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    SystemId interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Checkpoint object ID. The type is interface{} with range: 0..4294967295.
    CheckpointAdjacencyObjectId interface{}

    // Neighbor system ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    CheckpointAdjacencySystemId interface{}

    // Neighbor SNPA. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    CheckpointAdjacencySnpa interface{}

    // Local interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    CheckpointAdjacencyInterface interface{}

    // Adjacency level. The type is IsisLevel.
    CheckpointAdjacencyLevel interface{}

    // Adjacency holdtime (s). The type is interface{} with range: 0..65535.
    CheckpointAdjacencyHoldtime interface{}

    // Adjacency LAN priority. The type is interface{} with range: 0..255.
    CheckpointAdjacencyLanPriority interface{}

    // Neighbor circuit number. The type is interface{} with range: 0..255.
    CheckpointAdjacencyCircuitNumber interface{}

    // Per address family next hops. The type is slice of
    // Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop.
    CheckpointAdjacencyPerAddressFamilyNextHop []*Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop
}

func (checkpointAdjacency *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency) GetEntityData() *types.CommonEntityData {
    checkpointAdjacency.EntityData.YFilter = checkpointAdjacency.YFilter
    checkpointAdjacency.EntityData.YangName = "checkpoint-adjacency"
    checkpointAdjacency.EntityData.BundleName = "cisco_ios_xr"
    checkpointAdjacency.EntityData.ParentYangName = "checkpoint-adjacencies"
    checkpointAdjacency.EntityData.SegmentPath = "checkpoint-adjacency" + types.AddNoKeyToken(checkpointAdjacency)
    checkpointAdjacency.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/checkpoint-adjacencies/" + checkpointAdjacency.EntityData.SegmentPath
    checkpointAdjacency.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    checkpointAdjacency.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    checkpointAdjacency.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    checkpointAdjacency.EntityData.Children = types.NewOrderedMap()
    checkpointAdjacency.EntityData.Children.Append("checkpoint-adjacency-per-address-family-next-hop", types.YChild{"CheckpointAdjacencyPerAddressFamilyNextHop", nil})
    for i := range checkpointAdjacency.CheckpointAdjacencyPerAddressFamilyNextHop {
        types.SetYListKey(checkpointAdjacency.CheckpointAdjacencyPerAddressFamilyNextHop[i], i)
        checkpointAdjacency.EntityData.Children.Append(types.GetSegmentPath(checkpointAdjacency.CheckpointAdjacencyPerAddressFamilyNextHop[i]), types.YChild{"CheckpointAdjacencyPerAddressFamilyNextHop", checkpointAdjacency.CheckpointAdjacencyPerAddressFamilyNextHop[i]})
    }
    checkpointAdjacency.EntityData.Leafs = types.NewOrderedMap()
    checkpointAdjacency.EntityData.Leafs.Append("level", types.YLeaf{"Level", checkpointAdjacency.Level})
    checkpointAdjacency.EntityData.Leafs.Append("system-id", types.YLeaf{"SystemId", checkpointAdjacency.SystemId})
    checkpointAdjacency.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", checkpointAdjacency.InterfaceName})
    checkpointAdjacency.EntityData.Leafs.Append("checkpoint-adjacency-object-id", types.YLeaf{"CheckpointAdjacencyObjectId", checkpointAdjacency.CheckpointAdjacencyObjectId})
    checkpointAdjacency.EntityData.Leafs.Append("checkpoint-adjacency-system-id", types.YLeaf{"CheckpointAdjacencySystemId", checkpointAdjacency.CheckpointAdjacencySystemId})
    checkpointAdjacency.EntityData.Leafs.Append("checkpoint-adjacency-snpa", types.YLeaf{"CheckpointAdjacencySnpa", checkpointAdjacency.CheckpointAdjacencySnpa})
    checkpointAdjacency.EntityData.Leafs.Append("checkpoint-adjacency-interface", types.YLeaf{"CheckpointAdjacencyInterface", checkpointAdjacency.CheckpointAdjacencyInterface})
    checkpointAdjacency.EntityData.Leafs.Append("checkpoint-adjacency-level", types.YLeaf{"CheckpointAdjacencyLevel", checkpointAdjacency.CheckpointAdjacencyLevel})
    checkpointAdjacency.EntityData.Leafs.Append("checkpoint-adjacency-holdtime", types.YLeaf{"CheckpointAdjacencyHoldtime", checkpointAdjacency.CheckpointAdjacencyHoldtime})
    checkpointAdjacency.EntityData.Leafs.Append("checkpoint-adjacency-lan-priority", types.YLeaf{"CheckpointAdjacencyLanPriority", checkpointAdjacency.CheckpointAdjacencyLanPriority})
    checkpointAdjacency.EntityData.Leafs.Append("checkpoint-adjacency-circuit-number", types.YLeaf{"CheckpointAdjacencyCircuitNumber", checkpointAdjacency.CheckpointAdjacencyCircuitNumber})

    checkpointAdjacency.EntityData.YListKeys = []string {}

    return &(checkpointAdjacency.EntityData)
}

// Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop
// Per address family next hops
type Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // AFName. The type is IsisAfId.
    AfName interface{}

    // IPV4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPV6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (checkpointAdjacencyPerAddressFamilyNextHop *Isis_Instances_Instance_CheckpointAdjacencies_CheckpointAdjacency_CheckpointAdjacencyPerAddressFamilyNextHop) GetEntityData() *types.CommonEntityData {
    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.YFilter = checkpointAdjacencyPerAddressFamilyNextHop.YFilter
    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.YangName = "checkpoint-adjacency-per-address-family-next-hop"
    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.BundleName = "cisco_ios_xr"
    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.ParentYangName = "checkpoint-adjacency"
    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.SegmentPath = "checkpoint-adjacency-per-address-family-next-hop" + types.AddNoKeyToken(checkpointAdjacencyPerAddressFamilyNextHop)
    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/checkpoint-adjacencies/checkpoint-adjacency/" + checkpointAdjacencyPerAddressFamilyNextHop.EntityData.SegmentPath
    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.Children = types.NewOrderedMap()
    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.Leafs = types.NewOrderedMap()
    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", checkpointAdjacencyPerAddressFamilyNextHop.AfName})
    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", checkpointAdjacencyPerAddressFamilyNextHop.Ipv4})
    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", checkpointAdjacencyPerAddressFamilyNextHop.Ipv6})

    checkpointAdjacencyPerAddressFamilyNextHop.EntityData.YListKeys = []string {}

    return &(checkpointAdjacencyPerAddressFamilyNextHop.EntityData)
}

// Isis_Instances_Instance_FlexAlgos
// Flex-Algo Table
type Isis_Instances_Instance_FlexAlgos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Flex-Algo Definition Data. The type is slice of
    // Isis_Instances_Instance_FlexAlgos_FlexAlgo.
    FlexAlgo []*Isis_Instances_Instance_FlexAlgos_FlexAlgo
}

func (flexAlgos *Isis_Instances_Instance_FlexAlgos) GetEntityData() *types.CommonEntityData {
    flexAlgos.EntityData.YFilter = flexAlgos.YFilter
    flexAlgos.EntityData.YangName = "flex-algos"
    flexAlgos.EntityData.BundleName = "cisco_ios_xr"
    flexAlgos.EntityData.ParentYangName = "instance"
    flexAlgos.EntityData.SegmentPath = "flex-algos"
    flexAlgos.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/" + flexAlgos.EntityData.SegmentPath
    flexAlgos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flexAlgos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flexAlgos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flexAlgos.EntityData.Children = types.NewOrderedMap()
    flexAlgos.EntityData.Children.Append("flex-algo", types.YChild{"FlexAlgo", nil})
    for i := range flexAlgos.FlexAlgo {
        flexAlgos.EntityData.Children.Append(types.GetSegmentPath(flexAlgos.FlexAlgo[i]), types.YChild{"FlexAlgo", flexAlgos.FlexAlgo[i]})
    }
    flexAlgos.EntityData.Leafs = types.NewOrderedMap()

    flexAlgos.EntityData.YListKeys = []string {}

    return &(flexAlgos.EntityData)
}

// Isis_Instances_Instance_FlexAlgos_FlexAlgo
// Flex-Algo Definition Data
type Isis_Instances_Instance_FlexAlgos_FlexAlgo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Flex Algo. The type is interface{} with range:
    // 0..4294967295.
    FlexAlg interface{}

    // Flex-Algo Number. The type is interface{} with range: 0..4294967295.
    Number interface{}

    // Flex_algo Local Priority. The type is interface{} with range:
    // 0..4294967295.
    LocalPriority interface{}

    // Flex-Algo Disabled. The type is bool.
    Disabled interface{}

    // Flex-Algo Definition Priority. The type is interface{} with range:
    // 0..4294967295.
    DefinitionPrioroty interface{}

    // Flex-Algo Definition Is Local. The type is bool.
    DefinitionLocal interface{}

    // Flex-Algo Definition Is Equal To Local. The type is bool.
    DefinitionEqualLocal interface{}

    // Flex-Algo Definition Node-ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}.
    DefiniionNodeId interface{}
}

func (flexAlgo *Isis_Instances_Instance_FlexAlgos_FlexAlgo) GetEntityData() *types.CommonEntityData {
    flexAlgo.EntityData.YFilter = flexAlgo.YFilter
    flexAlgo.EntityData.YangName = "flex-algo"
    flexAlgo.EntityData.BundleName = "cisco_ios_xr"
    flexAlgo.EntityData.ParentYangName = "flex-algos"
    flexAlgo.EntityData.SegmentPath = "flex-algo" + types.AddKeyToken(flexAlgo.FlexAlg, "flex-alg")
    flexAlgo.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/flex-algos/" + flexAlgo.EntityData.SegmentPath
    flexAlgo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flexAlgo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flexAlgo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flexAlgo.EntityData.Children = types.NewOrderedMap()
    flexAlgo.EntityData.Leafs = types.NewOrderedMap()
    flexAlgo.EntityData.Leafs.Append("flex-alg", types.YLeaf{"FlexAlg", flexAlgo.FlexAlg})
    flexAlgo.EntityData.Leafs.Append("number", types.YLeaf{"Number", flexAlgo.Number})
    flexAlgo.EntityData.Leafs.Append("local-priority", types.YLeaf{"LocalPriority", flexAlgo.LocalPriority})
    flexAlgo.EntityData.Leafs.Append("disabled", types.YLeaf{"Disabled", flexAlgo.Disabled})
    flexAlgo.EntityData.Leafs.Append("definition-prioroty", types.YLeaf{"DefinitionPrioroty", flexAlgo.DefinitionPrioroty})
    flexAlgo.EntityData.Leafs.Append("definition-local", types.YLeaf{"DefinitionLocal", flexAlgo.DefinitionLocal})
    flexAlgo.EntityData.Leafs.Append("definition-equal-local", types.YLeaf{"DefinitionEqualLocal", flexAlgo.DefinitionEqualLocal})
    flexAlgo.EntityData.Leafs.Append("definiion-node-id", types.YLeaf{"DefiniionNodeId", flexAlgo.DefiniionNodeId})

    flexAlgo.EntityData.YListKeys = []string {"FlexAlg"}

    return &(flexAlgo.EntityData)
}

// Isis_Instances_Instance_Srms
// Segment Routing Mapping Server operational
// data
type Isis_Instances_Instance_Srms struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Policy operational data.
    Policy Isis_Instances_Instance_Srms_Policy
}

func (srms *Isis_Instances_Instance_Srms) GetEntityData() *types.CommonEntityData {
    srms.EntityData.YFilter = srms.YFilter
    srms.EntityData.YangName = "srms"
    srms.EntityData.BundleName = "cisco_ios_xr"
    srms.EntityData.ParentYangName = "instance"
    srms.EntityData.SegmentPath = "srms"
    srms.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/" + srms.EntityData.SegmentPath
    srms.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srms.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srms.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srms.EntityData.Children = types.NewOrderedMap()
    srms.EntityData.Children.Append("policy", types.YChild{"Policy", &srms.Policy})
    srms.EntityData.Leafs = types.NewOrderedMap()

    srms.EntityData.YListKeys = []string {}

    return &(srms.EntityData)
}

// Isis_Instances_Instance_Srms_Policy
// Policy operational data
type Isis_Instances_Instance_Srms_Policy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 policy operational data.
    PolicyIpv4 Isis_Instances_Instance_Srms_Policy_PolicyIpv4

    // IPv6 policy operational data.
    PolicyIpv6 Isis_Instances_Instance_Srms_Policy_PolicyIpv6
}

func (policy *Isis_Instances_Instance_Srms_Policy) GetEntityData() *types.CommonEntityData {
    policy.EntityData.YFilter = policy.YFilter
    policy.EntityData.YangName = "policy"
    policy.EntityData.BundleName = "cisco_ios_xr"
    policy.EntityData.ParentYangName = "srms"
    policy.EntityData.SegmentPath = "policy"
    policy.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/srms/" + policy.EntityData.SegmentPath
    policy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policy.EntityData.Children = types.NewOrderedMap()
    policy.EntityData.Children.Append("policy-ipv4", types.YChild{"PolicyIpv4", &policy.PolicyIpv4})
    policy.EntityData.Children.Append("policy-ipv6", types.YChild{"PolicyIpv6", &policy.PolicyIpv6})
    policy.EntityData.Leafs = types.NewOrderedMap()

    policy.EntityData.YListKeys = []string {}

    return &(policy.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv4
// IPv4 policy operational data
type Isis_Instances_Instance_Srms_Policy_PolicyIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 active policy operational data.
    PolicyIpv4Active Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active

    // IPv4 backup policy operational data.
    PolicyIpv4Backup Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup
}

func (policyIpv4 *Isis_Instances_Instance_Srms_Policy_PolicyIpv4) GetEntityData() *types.CommonEntityData {
    policyIpv4.EntityData.YFilter = policyIpv4.YFilter
    policyIpv4.EntityData.YangName = "policy-ipv4"
    policyIpv4.EntityData.BundleName = "cisco_ios_xr"
    policyIpv4.EntityData.ParentYangName = "policy"
    policyIpv4.EntityData.SegmentPath = "policy-ipv4"
    policyIpv4.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/srms/policy/" + policyIpv4.EntityData.SegmentPath
    policyIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyIpv4.EntityData.Children = types.NewOrderedMap()
    policyIpv4.EntityData.Children.Append("policy-ipv4-active", types.YChild{"PolicyIpv4Active", &policyIpv4.PolicyIpv4Active})
    policyIpv4.EntityData.Children.Append("policy-ipv4-backup", types.YChild{"PolicyIpv4Backup", &policyIpv4.PolicyIpv4Backup})
    policyIpv4.EntityData.Leafs = types.NewOrderedMap()

    policyIpv4.EntityData.YListKeys = []string {}

    return &(policyIpv4.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active
// IPv4 active policy operational data
type Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Mapping Item. The type is slice of
    // Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi.
    PolicyMi []*Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi
}

func (policyIpv4Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active) GetEntityData() *types.CommonEntityData {
    policyIpv4Active.EntityData.YFilter = policyIpv4Active.YFilter
    policyIpv4Active.EntityData.YangName = "policy-ipv4-active"
    policyIpv4Active.EntityData.BundleName = "cisco_ios_xr"
    policyIpv4Active.EntityData.ParentYangName = "policy-ipv4"
    policyIpv4Active.EntityData.SegmentPath = "policy-ipv4-active"
    policyIpv4Active.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/srms/policy/policy-ipv4/" + policyIpv4Active.EntityData.SegmentPath
    policyIpv4Active.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyIpv4Active.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyIpv4Active.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyIpv4Active.EntityData.Children = types.NewOrderedMap()
    policyIpv4Active.EntityData.Children.Append("policy-mi", types.YChild{"PolicyMi", nil})
    for i := range policyIpv4Active.PolicyMi {
        policyIpv4Active.EntityData.Children.Append(types.GetSegmentPath(policyIpv4Active.PolicyMi[i]), types.YChild{"PolicyMi", policyIpv4Active.PolicyMi[i]})
    }
    policyIpv4Active.EntityData.Leafs = types.NewOrderedMap()

    policyIpv4Active.EntityData.YListKeys = []string {}

    return &(policyIpv4Active.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi
// Mapping Item
type Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Mapping Item ID (0, 1, 2, ...). The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    MiId interface{}

    // src. The type is SrmsMiSrcEB.
    Src interface{}

    // Router ID. The type is string with length: 0..30.
    Router interface{}

    // Area (OSPF) or Level (ISIS). The type is string with length: 0..30.
    Area interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    Prefix interface{}

    // Starting SID. The type is interface{} with range: 0..4294967295.
    SidStart interface{}

    // SID range. The type is interface{} with range: 0..4294967295.
    SidCount interface{}

    // Last IP Prefix. The type is string with length: 0..50.
    LastPrefix interface{}

    // Last SID Index. The type is interface{} with range: 0..4294967295.
    LastSidIndex interface{}

    // Attached flag. The type is SrmsMiFlagEB.
    FlagAttached interface{}

    // addr.
    Addr Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi) GetEntityData() *types.CommonEntityData {
    policyMi.EntityData.YFilter = policyMi.YFilter
    policyMi.EntityData.YangName = "policy-mi"
    policyMi.EntityData.BundleName = "cisco_ios_xr"
    policyMi.EntityData.ParentYangName = "policy-ipv4-active"
    policyMi.EntityData.SegmentPath = "policy-mi" + types.AddKeyToken(policyMi.MiId, "mi-id")
    policyMi.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/srms/policy/policy-ipv4/policy-ipv4-active/" + policyMi.EntityData.SegmentPath
    policyMi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyMi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyMi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyMi.EntityData.Children = types.NewOrderedMap()
    policyMi.EntityData.Children.Append("addr", types.YChild{"Addr", &policyMi.Addr})
    policyMi.EntityData.Leafs = types.NewOrderedMap()
    policyMi.EntityData.Leafs.Append("mi-id", types.YLeaf{"MiId", policyMi.MiId})
    policyMi.EntityData.Leafs.Append("src", types.YLeaf{"Src", policyMi.Src})
    policyMi.EntityData.Leafs.Append("router", types.YLeaf{"Router", policyMi.Router})
    policyMi.EntityData.Leafs.Append("area", types.YLeaf{"Area", policyMi.Area})
    policyMi.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", policyMi.Prefix})
    policyMi.EntityData.Leafs.Append("sid-start", types.YLeaf{"SidStart", policyMi.SidStart})
    policyMi.EntityData.Leafs.Append("sid-count", types.YLeaf{"SidCount", policyMi.SidCount})
    policyMi.EntityData.Leafs.Append("last-prefix", types.YLeaf{"LastPrefix", policyMi.LastPrefix})
    policyMi.EntityData.Leafs.Append("last-sid-index", types.YLeaf{"LastSidIndex", policyMi.LastSidIndex})
    policyMi.EntityData.Leafs.Append("flag-attached", types.YLeaf{"FlagAttached", policyMi.FlagAttached})

    policyMi.EntityData.YListKeys = []string {"MiId"}

    return &(policyMi.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr
// addr
type Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF. The type is SrmsMiAfEB.
    Af interface{}

    // IPv4. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Active_PolicyMi_Addr) GetEntityData() *types.CommonEntityData {
    addr.EntityData.YFilter = addr.YFilter
    addr.EntityData.YangName = "addr"
    addr.EntityData.BundleName = "cisco_ios_xr"
    addr.EntityData.ParentYangName = "policy-mi"
    addr.EntityData.SegmentPath = "addr"
    addr.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/srms/policy/policy-ipv4/policy-ipv4-active/policy-mi/" + addr.EntityData.SegmentPath
    addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    addr.EntityData.Children = types.NewOrderedMap()
    addr.EntityData.Leafs = types.NewOrderedMap()
    addr.EntityData.Leafs.Append("af", types.YLeaf{"Af", addr.Af})
    addr.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", addr.Ipv4})
    addr.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", addr.Ipv6})

    addr.EntityData.YListKeys = []string {}

    return &(addr.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup
// IPv4 backup policy operational data
type Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Mapping Item. The type is slice of
    // Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi.
    PolicyMi []*Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi
}

func (policyIpv4Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup) GetEntityData() *types.CommonEntityData {
    policyIpv4Backup.EntityData.YFilter = policyIpv4Backup.YFilter
    policyIpv4Backup.EntityData.YangName = "policy-ipv4-backup"
    policyIpv4Backup.EntityData.BundleName = "cisco_ios_xr"
    policyIpv4Backup.EntityData.ParentYangName = "policy-ipv4"
    policyIpv4Backup.EntityData.SegmentPath = "policy-ipv4-backup"
    policyIpv4Backup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/srms/policy/policy-ipv4/" + policyIpv4Backup.EntityData.SegmentPath
    policyIpv4Backup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyIpv4Backup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyIpv4Backup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyIpv4Backup.EntityData.Children = types.NewOrderedMap()
    policyIpv4Backup.EntityData.Children.Append("policy-mi", types.YChild{"PolicyMi", nil})
    for i := range policyIpv4Backup.PolicyMi {
        policyIpv4Backup.EntityData.Children.Append(types.GetSegmentPath(policyIpv4Backup.PolicyMi[i]), types.YChild{"PolicyMi", policyIpv4Backup.PolicyMi[i]})
    }
    policyIpv4Backup.EntityData.Leafs = types.NewOrderedMap()

    policyIpv4Backup.EntityData.YListKeys = []string {}

    return &(policyIpv4Backup.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi
// Mapping Item
type Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Mapping Item ID (0, 1, 2, ...). The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    MiId interface{}

    // src. The type is SrmsMiSrcEB.
    Src interface{}

    // Router ID. The type is string with length: 0..30.
    Router interface{}

    // Area (OSPF) or Level (ISIS). The type is string with length: 0..30.
    Area interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    Prefix interface{}

    // Starting SID. The type is interface{} with range: 0..4294967295.
    SidStart interface{}

    // SID range. The type is interface{} with range: 0..4294967295.
    SidCount interface{}

    // Last IP Prefix. The type is string with length: 0..50.
    LastPrefix interface{}

    // Last SID Index. The type is interface{} with range: 0..4294967295.
    LastSidIndex interface{}

    // Attached flag. The type is SrmsMiFlagEB.
    FlagAttached interface{}

    // addr.
    Addr Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi) GetEntityData() *types.CommonEntityData {
    policyMi.EntityData.YFilter = policyMi.YFilter
    policyMi.EntityData.YangName = "policy-mi"
    policyMi.EntityData.BundleName = "cisco_ios_xr"
    policyMi.EntityData.ParentYangName = "policy-ipv4-backup"
    policyMi.EntityData.SegmentPath = "policy-mi" + types.AddKeyToken(policyMi.MiId, "mi-id")
    policyMi.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/srms/policy/policy-ipv4/policy-ipv4-backup/" + policyMi.EntityData.SegmentPath
    policyMi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyMi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyMi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyMi.EntityData.Children = types.NewOrderedMap()
    policyMi.EntityData.Children.Append("addr", types.YChild{"Addr", &policyMi.Addr})
    policyMi.EntityData.Leafs = types.NewOrderedMap()
    policyMi.EntityData.Leafs.Append("mi-id", types.YLeaf{"MiId", policyMi.MiId})
    policyMi.EntityData.Leafs.Append("src", types.YLeaf{"Src", policyMi.Src})
    policyMi.EntityData.Leafs.Append("router", types.YLeaf{"Router", policyMi.Router})
    policyMi.EntityData.Leafs.Append("area", types.YLeaf{"Area", policyMi.Area})
    policyMi.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", policyMi.Prefix})
    policyMi.EntityData.Leafs.Append("sid-start", types.YLeaf{"SidStart", policyMi.SidStart})
    policyMi.EntityData.Leafs.Append("sid-count", types.YLeaf{"SidCount", policyMi.SidCount})
    policyMi.EntityData.Leafs.Append("last-prefix", types.YLeaf{"LastPrefix", policyMi.LastPrefix})
    policyMi.EntityData.Leafs.Append("last-sid-index", types.YLeaf{"LastSidIndex", policyMi.LastSidIndex})
    policyMi.EntityData.Leafs.Append("flag-attached", types.YLeaf{"FlagAttached", policyMi.FlagAttached})

    policyMi.EntityData.YListKeys = []string {"MiId"}

    return &(policyMi.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr
// addr
type Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF. The type is SrmsMiAfEB.
    Af interface{}

    // IPv4. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv4_PolicyIpv4Backup_PolicyMi_Addr) GetEntityData() *types.CommonEntityData {
    addr.EntityData.YFilter = addr.YFilter
    addr.EntityData.YangName = "addr"
    addr.EntityData.BundleName = "cisco_ios_xr"
    addr.EntityData.ParentYangName = "policy-mi"
    addr.EntityData.SegmentPath = "addr"
    addr.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/srms/policy/policy-ipv4/policy-ipv4-backup/policy-mi/" + addr.EntityData.SegmentPath
    addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    addr.EntityData.Children = types.NewOrderedMap()
    addr.EntityData.Leafs = types.NewOrderedMap()
    addr.EntityData.Leafs.Append("af", types.YLeaf{"Af", addr.Af})
    addr.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", addr.Ipv4})
    addr.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", addr.Ipv6})

    addr.EntityData.YListKeys = []string {}

    return &(addr.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv6
// IPv6 policy operational data
type Isis_Instances_Instance_Srms_Policy_PolicyIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 backup policy operational data.
    PolicyIpv6Backup Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup

    // IPv6 active policy operational data.
    PolicyIpv6Active Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active
}

func (policyIpv6 *Isis_Instances_Instance_Srms_Policy_PolicyIpv6) GetEntityData() *types.CommonEntityData {
    policyIpv6.EntityData.YFilter = policyIpv6.YFilter
    policyIpv6.EntityData.YangName = "policy-ipv6"
    policyIpv6.EntityData.BundleName = "cisco_ios_xr"
    policyIpv6.EntityData.ParentYangName = "policy"
    policyIpv6.EntityData.SegmentPath = "policy-ipv6"
    policyIpv6.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/srms/policy/" + policyIpv6.EntityData.SegmentPath
    policyIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyIpv6.EntityData.Children = types.NewOrderedMap()
    policyIpv6.EntityData.Children.Append("policy-ipv6-backup", types.YChild{"PolicyIpv6Backup", &policyIpv6.PolicyIpv6Backup})
    policyIpv6.EntityData.Children.Append("policy-ipv6-active", types.YChild{"PolicyIpv6Active", &policyIpv6.PolicyIpv6Active})
    policyIpv6.EntityData.Leafs = types.NewOrderedMap()

    policyIpv6.EntityData.YListKeys = []string {}

    return &(policyIpv6.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup
// IPv6 backup policy operational data
type Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Mapping Item. The type is slice of
    // Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi.
    PolicyMi []*Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi
}

func (policyIpv6Backup *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup) GetEntityData() *types.CommonEntityData {
    policyIpv6Backup.EntityData.YFilter = policyIpv6Backup.YFilter
    policyIpv6Backup.EntityData.YangName = "policy-ipv6-backup"
    policyIpv6Backup.EntityData.BundleName = "cisco_ios_xr"
    policyIpv6Backup.EntityData.ParentYangName = "policy-ipv6"
    policyIpv6Backup.EntityData.SegmentPath = "policy-ipv6-backup"
    policyIpv6Backup.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/srms/policy/policy-ipv6/" + policyIpv6Backup.EntityData.SegmentPath
    policyIpv6Backup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyIpv6Backup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyIpv6Backup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyIpv6Backup.EntityData.Children = types.NewOrderedMap()
    policyIpv6Backup.EntityData.Children.Append("policy-mi", types.YChild{"PolicyMi", nil})
    for i := range policyIpv6Backup.PolicyMi {
        policyIpv6Backup.EntityData.Children.Append(types.GetSegmentPath(policyIpv6Backup.PolicyMi[i]), types.YChild{"PolicyMi", policyIpv6Backup.PolicyMi[i]})
    }
    policyIpv6Backup.EntityData.Leafs = types.NewOrderedMap()

    policyIpv6Backup.EntityData.YListKeys = []string {}

    return &(policyIpv6Backup.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi
// Mapping Item
type Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Mapping Item ID (0, 1, 2, ...). The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    MiId interface{}

    // src. The type is SrmsMiSrcEB.
    Src interface{}

    // Router ID. The type is string with length: 0..30.
    Router interface{}

    // Area (OSPF) or Level (ISIS). The type is string with length: 0..30.
    Area interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    Prefix interface{}

    // Starting SID. The type is interface{} with range: 0..4294967295.
    SidStart interface{}

    // SID range. The type is interface{} with range: 0..4294967295.
    SidCount interface{}

    // Last IP Prefix. The type is string with length: 0..50.
    LastPrefix interface{}

    // Last SID Index. The type is interface{} with range: 0..4294967295.
    LastSidIndex interface{}

    // Attached flag. The type is SrmsMiFlagEB.
    FlagAttached interface{}

    // addr.
    Addr Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi_Addr
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi) GetEntityData() *types.CommonEntityData {
    policyMi.EntityData.YFilter = policyMi.YFilter
    policyMi.EntityData.YangName = "policy-mi"
    policyMi.EntityData.BundleName = "cisco_ios_xr"
    policyMi.EntityData.ParentYangName = "policy-ipv6-backup"
    policyMi.EntityData.SegmentPath = "policy-mi" + types.AddKeyToken(policyMi.MiId, "mi-id")
    policyMi.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/srms/policy/policy-ipv6/policy-ipv6-backup/" + policyMi.EntityData.SegmentPath
    policyMi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyMi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyMi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyMi.EntityData.Children = types.NewOrderedMap()
    policyMi.EntityData.Children.Append("addr", types.YChild{"Addr", &policyMi.Addr})
    policyMi.EntityData.Leafs = types.NewOrderedMap()
    policyMi.EntityData.Leafs.Append("mi-id", types.YLeaf{"MiId", policyMi.MiId})
    policyMi.EntityData.Leafs.Append("src", types.YLeaf{"Src", policyMi.Src})
    policyMi.EntityData.Leafs.Append("router", types.YLeaf{"Router", policyMi.Router})
    policyMi.EntityData.Leafs.Append("area", types.YLeaf{"Area", policyMi.Area})
    policyMi.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", policyMi.Prefix})
    policyMi.EntityData.Leafs.Append("sid-start", types.YLeaf{"SidStart", policyMi.SidStart})
    policyMi.EntityData.Leafs.Append("sid-count", types.YLeaf{"SidCount", policyMi.SidCount})
    policyMi.EntityData.Leafs.Append("last-prefix", types.YLeaf{"LastPrefix", policyMi.LastPrefix})
    policyMi.EntityData.Leafs.Append("last-sid-index", types.YLeaf{"LastSidIndex", policyMi.LastSidIndex})
    policyMi.EntityData.Leafs.Append("flag-attached", types.YLeaf{"FlagAttached", policyMi.FlagAttached})

    policyMi.EntityData.YListKeys = []string {"MiId"}

    return &(policyMi.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi_Addr
// addr
type Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi_Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF. The type is SrmsMiAfEB.
    Af interface{}

    // IPv4. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Backup_PolicyMi_Addr) GetEntityData() *types.CommonEntityData {
    addr.EntityData.YFilter = addr.YFilter
    addr.EntityData.YangName = "addr"
    addr.EntityData.BundleName = "cisco_ios_xr"
    addr.EntityData.ParentYangName = "policy-mi"
    addr.EntityData.SegmentPath = "addr"
    addr.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/srms/policy/policy-ipv6/policy-ipv6-backup/policy-mi/" + addr.EntityData.SegmentPath
    addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    addr.EntityData.Children = types.NewOrderedMap()
    addr.EntityData.Leafs = types.NewOrderedMap()
    addr.EntityData.Leafs.Append("af", types.YLeaf{"Af", addr.Af})
    addr.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", addr.Ipv4})
    addr.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", addr.Ipv6})

    addr.EntityData.YListKeys = []string {}

    return &(addr.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active
// IPv6 active policy operational data
type Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Mapping Item. The type is slice of
    // Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi.
    PolicyMi []*Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi
}

func (policyIpv6Active *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active) GetEntityData() *types.CommonEntityData {
    policyIpv6Active.EntityData.YFilter = policyIpv6Active.YFilter
    policyIpv6Active.EntityData.YangName = "policy-ipv6-active"
    policyIpv6Active.EntityData.BundleName = "cisco_ios_xr"
    policyIpv6Active.EntityData.ParentYangName = "policy-ipv6"
    policyIpv6Active.EntityData.SegmentPath = "policy-ipv6-active"
    policyIpv6Active.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/srms/policy/policy-ipv6/" + policyIpv6Active.EntityData.SegmentPath
    policyIpv6Active.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyIpv6Active.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyIpv6Active.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyIpv6Active.EntityData.Children = types.NewOrderedMap()
    policyIpv6Active.EntityData.Children.Append("policy-mi", types.YChild{"PolicyMi", nil})
    for i := range policyIpv6Active.PolicyMi {
        policyIpv6Active.EntityData.Children.Append(types.GetSegmentPath(policyIpv6Active.PolicyMi[i]), types.YChild{"PolicyMi", policyIpv6Active.PolicyMi[i]})
    }
    policyIpv6Active.EntityData.Leafs = types.NewOrderedMap()

    policyIpv6Active.EntityData.YListKeys = []string {}

    return &(policyIpv6Active.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi
// Mapping Item
type Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Mapping Item ID (0, 1, 2, ...). The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    MiId interface{}

    // src. The type is SrmsMiSrcEB.
    Src interface{}

    // Router ID. The type is string with length: 0..30.
    Router interface{}

    // Area (OSPF) or Level (ISIS). The type is string with length: 0..30.
    Area interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    Prefix interface{}

    // Starting SID. The type is interface{} with range: 0..4294967295.
    SidStart interface{}

    // SID range. The type is interface{} with range: 0..4294967295.
    SidCount interface{}

    // Last IP Prefix. The type is string with length: 0..50.
    LastPrefix interface{}

    // Last SID Index. The type is interface{} with range: 0..4294967295.
    LastSidIndex interface{}

    // Attached flag. The type is SrmsMiFlagEB.
    FlagAttached interface{}

    // addr.
    Addr Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi_Addr
}

func (policyMi *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi) GetEntityData() *types.CommonEntityData {
    policyMi.EntityData.YFilter = policyMi.YFilter
    policyMi.EntityData.YangName = "policy-mi"
    policyMi.EntityData.BundleName = "cisco_ios_xr"
    policyMi.EntityData.ParentYangName = "policy-ipv6-active"
    policyMi.EntityData.SegmentPath = "policy-mi" + types.AddKeyToken(policyMi.MiId, "mi-id")
    policyMi.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/srms/policy/policy-ipv6/policy-ipv6-active/" + policyMi.EntityData.SegmentPath
    policyMi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyMi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyMi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyMi.EntityData.Children = types.NewOrderedMap()
    policyMi.EntityData.Children.Append("addr", types.YChild{"Addr", &policyMi.Addr})
    policyMi.EntityData.Leafs = types.NewOrderedMap()
    policyMi.EntityData.Leafs.Append("mi-id", types.YLeaf{"MiId", policyMi.MiId})
    policyMi.EntityData.Leafs.Append("src", types.YLeaf{"Src", policyMi.Src})
    policyMi.EntityData.Leafs.Append("router", types.YLeaf{"Router", policyMi.Router})
    policyMi.EntityData.Leafs.Append("area", types.YLeaf{"Area", policyMi.Area})
    policyMi.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", policyMi.Prefix})
    policyMi.EntityData.Leafs.Append("sid-start", types.YLeaf{"SidStart", policyMi.SidStart})
    policyMi.EntityData.Leafs.Append("sid-count", types.YLeaf{"SidCount", policyMi.SidCount})
    policyMi.EntityData.Leafs.Append("last-prefix", types.YLeaf{"LastPrefix", policyMi.LastPrefix})
    policyMi.EntityData.Leafs.Append("last-sid-index", types.YLeaf{"LastSidIndex", policyMi.LastSidIndex})
    policyMi.EntityData.Leafs.Append("flag-attached", types.YLeaf{"FlagAttached", policyMi.FlagAttached})

    policyMi.EntityData.YListKeys = []string {"MiId"}

    return &(policyMi.EntityData)
}

// Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi_Addr
// addr
type Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi_Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF. The type is SrmsMiAfEB.
    Af interface{}

    // IPv4. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (addr *Isis_Instances_Instance_Srms_Policy_PolicyIpv6_PolicyIpv6Active_PolicyMi_Addr) GetEntityData() *types.CommonEntityData {
    addr.EntityData.YFilter = addr.YFilter
    addr.EntityData.YangName = "addr"
    addr.EntityData.BundleName = "cisco_ios_xr"
    addr.EntityData.ParentYangName = "policy-mi"
    addr.EntityData.SegmentPath = "addr"
    addr.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/srms/policy/policy-ipv6/policy-ipv6-active/policy-mi/" + addr.EntityData.SegmentPath
    addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    addr.EntityData.Children = types.NewOrderedMap()
    addr.EntityData.Leafs = types.NewOrderedMap()
    addr.EntityData.Leafs.Append("af", types.YLeaf{"Af", addr.Af})
    addr.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", addr.Ipv4})
    addr.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", addr.Ipv6})

    addr.EntityData.YListKeys = []string {}

    return &(addr.EntityData)
}

// Isis_Instances_Instance_ErrorLog
// Log of errors and warnings
type Isis_Instances_Instance_ErrorLog struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Error Log entries. The type is slice of
    // Isis_Instances_Instance_ErrorLog_LogEntry.
    LogEntry []*Isis_Instances_Instance_ErrorLog_LogEntry
}

func (errorLog *Isis_Instances_Instance_ErrorLog) GetEntityData() *types.CommonEntityData {
    errorLog.EntityData.YFilter = errorLog.YFilter
    errorLog.EntityData.YangName = "error-log"
    errorLog.EntityData.BundleName = "cisco_ios_xr"
    errorLog.EntityData.ParentYangName = "instance"
    errorLog.EntityData.SegmentPath = "error-log"
    errorLog.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/" + errorLog.EntityData.SegmentPath
    errorLog.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    errorLog.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    errorLog.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    errorLog.EntityData.Children = types.NewOrderedMap()
    errorLog.EntityData.Children.Append("log-entry", types.YChild{"LogEntry", nil})
    for i := range errorLog.LogEntry {
        types.SetYListKey(errorLog.LogEntry[i], i)
        errorLog.EntityData.Children.Append(types.GetSegmentPath(errorLog.LogEntry[i]), types.YChild{"LogEntry", errorLog.LogEntry[i]})
    }
    errorLog.EntityData.Leafs = types.NewOrderedMap()

    errorLog.EntityData.YListKeys = []string {}

    return &(errorLog.EntityData)
}

// Isis_Instances_Instance_ErrorLog_LogEntry
// Error Log entries
type Isis_Instances_Instance_ErrorLog_LogEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Logging level. The type is IsisErrLogLevel.
    ErrorLogLevel interface{}

    // Error code. The type is interface{} with range: 0..4294967295.
    ErrorCode interface{}

    // Error details. The type is string.
    ErrorReason interface{}

    // Generic entry data.
    GenericData Isis_Instances_Instance_ErrorLog_LogEntry_GenericData
}

func (logEntry *Isis_Instances_Instance_ErrorLog_LogEntry) GetEntityData() *types.CommonEntityData {
    logEntry.EntityData.YFilter = logEntry.YFilter
    logEntry.EntityData.YangName = "log-entry"
    logEntry.EntityData.BundleName = "cisco_ios_xr"
    logEntry.EntityData.ParentYangName = "error-log"
    logEntry.EntityData.SegmentPath = "log-entry" + types.AddNoKeyToken(logEntry)
    logEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/error-log/" + logEntry.EntityData.SegmentPath
    logEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    logEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    logEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    logEntry.EntityData.Children = types.NewOrderedMap()
    logEntry.EntityData.Children.Append("generic-data", types.YChild{"GenericData", &logEntry.GenericData})
    logEntry.EntityData.Leafs = types.NewOrderedMap()
    logEntry.EntityData.Leafs.Append("error-log-level", types.YLeaf{"ErrorLogLevel", logEntry.ErrorLogLevel})
    logEntry.EntityData.Leafs.Append("error-code", types.YLeaf{"ErrorCode", logEntry.ErrorCode})
    logEntry.EntityData.Leafs.Append("error-reason", types.YLeaf{"ErrorReason", logEntry.ErrorReason})

    logEntry.EntityData.YListKeys = []string {}

    return &(logEntry.EntityData)
}

// Isis_Instances_Instance_ErrorLog_LogEntry_GenericData
// Generic entry data
type Isis_Instances_Instance_ErrorLog_LogEntry_GenericData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in UTC relative to Jan 1st, 1970.
    Timestamp Isis_Instances_Instance_ErrorLog_LogEntry_GenericData_Timestamp
}

func (genericData *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData) GetEntityData() *types.CommonEntityData {
    genericData.EntityData.YFilter = genericData.YFilter
    genericData.EntityData.YangName = "generic-data"
    genericData.EntityData.BundleName = "cisco_ios_xr"
    genericData.EntityData.ParentYangName = "log-entry"
    genericData.EntityData.SegmentPath = "generic-data"
    genericData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/error-log/log-entry/" + genericData.EntityData.SegmentPath
    genericData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericData.EntityData.Children = types.NewOrderedMap()
    genericData.EntityData.Children.Append("timestamp", types.YChild{"Timestamp", &genericData.Timestamp})
    genericData.EntityData.Leafs = types.NewOrderedMap()

    genericData.EntityData.YListKeys = []string {}

    return &(genericData.EntityData)
}

// Isis_Instances_Instance_ErrorLog_LogEntry_GenericData_Timestamp
// Time in UTC relative to Jan 1st, 1970
type Isis_Instances_Instance_ErrorLog_LogEntry_GenericData_Timestamp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Timestamp value (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    Seconds interface{}

    // Timestamp value (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    NanoSeconds interface{}
}

func (timestamp *Isis_Instances_Instance_ErrorLog_LogEntry_GenericData_Timestamp) GetEntityData() *types.CommonEntityData {
    timestamp.EntityData.YFilter = timestamp.YFilter
    timestamp.EntityData.YangName = "timestamp"
    timestamp.EntityData.BundleName = "cisco_ios_xr"
    timestamp.EntityData.ParentYangName = "generic-data"
    timestamp.EntityData.SegmentPath = "timestamp"
    timestamp.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/error-log/log-entry/generic-data/" + timestamp.EntityData.SegmentPath
    timestamp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timestamp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timestamp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timestamp.EntityData.Children = types.NewOrderedMap()
    timestamp.EntityData.Leafs = types.NewOrderedMap()
    timestamp.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", timestamp.Seconds})
    timestamp.EntityData.Leafs.Append("nano-seconds", types.YLeaf{"NanoSeconds", timestamp.NanoSeconds})

    timestamp.EntityData.YListKeys = []string {}

    return &(timestamp.EntityData)
}

// Isis_Instances_Instance_CheckpointInterfaces
// Checkpointed interface table
type Isis_Instances_Instance_CheckpointInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Checkpointed information about one IS-IS interface. The type is slice of
    // Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface.
    CheckpointInterface []*Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface
}

func (checkpointInterfaces *Isis_Instances_Instance_CheckpointInterfaces) GetEntityData() *types.CommonEntityData {
    checkpointInterfaces.EntityData.YFilter = checkpointInterfaces.YFilter
    checkpointInterfaces.EntityData.YangName = "checkpoint-interfaces"
    checkpointInterfaces.EntityData.BundleName = "cisco_ios_xr"
    checkpointInterfaces.EntityData.ParentYangName = "instance"
    checkpointInterfaces.EntityData.SegmentPath = "checkpoint-interfaces"
    checkpointInterfaces.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/" + checkpointInterfaces.EntityData.SegmentPath
    checkpointInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    checkpointInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    checkpointInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    checkpointInterfaces.EntityData.Children = types.NewOrderedMap()
    checkpointInterfaces.EntityData.Children.Append("checkpoint-interface", types.YChild{"CheckpointInterface", nil})
    for i := range checkpointInterfaces.CheckpointInterface {
        checkpointInterfaces.EntityData.Children.Append(types.GetSegmentPath(checkpointInterfaces.CheckpointInterface[i]), types.YChild{"CheckpointInterface", checkpointInterfaces.CheckpointInterface[i]})
    }
    checkpointInterfaces.EntityData.Leafs = types.NewOrderedMap()

    checkpointInterfaces.EntityData.YListKeys = []string {}

    return &(checkpointInterfaces.EntityData)
}

// Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface
// Checkpointed information about one IS-IS
// interface
type Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Checkpoint object ID. The type is interface{} with range: 0..4294967295.
    CheckpointObjectId interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // Local interface handle. The type is string with pattern: [a-zA-Z0-9._/-]+.
    CheckpointInterfaceHandle interface{}

    // Local circuit number. The type is interface{} with range: 0..255.
    LocalCircuitNumber interface{}

    // Areas in which this system is DIS. The type is IsisLevels.
    DisAreas interface{}

    // TRUE if there is an adjacency on this interface. The type is bool.
    HasAdjacency interface{}

    // SNPA of this interface. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    LocalSnpa interface{}

    // TRUE if multicast group registration succeeded on this interface. The type
    // is bool.
    HasJoinedMcastGroup interface{}

    // MPLS LDP sync status. The type is bool.
    HasAchievedLdpSync interface{}

    // MPLS LDPv6 sync status. The type is bool.
    HasAchievedLdPv6Sync interface{}
}

func (checkpointInterface *Isis_Instances_Instance_CheckpointInterfaces_CheckpointInterface) GetEntityData() *types.CommonEntityData {
    checkpointInterface.EntityData.YFilter = checkpointInterface.YFilter
    checkpointInterface.EntityData.YangName = "checkpoint-interface"
    checkpointInterface.EntityData.BundleName = "cisco_ios_xr"
    checkpointInterface.EntityData.ParentYangName = "checkpoint-interfaces"
    checkpointInterface.EntityData.SegmentPath = "checkpoint-interface" + types.AddKeyToken(checkpointInterface.InterfaceName, "interface-name")
    checkpointInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/checkpoint-interfaces/" + checkpointInterface.EntityData.SegmentPath
    checkpointInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    checkpointInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    checkpointInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    checkpointInterface.EntityData.Children = types.NewOrderedMap()
    checkpointInterface.EntityData.Leafs = types.NewOrderedMap()
    checkpointInterface.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", checkpointInterface.InterfaceName})
    checkpointInterface.EntityData.Leafs.Append("checkpoint-object-id", types.YLeaf{"CheckpointObjectId", checkpointInterface.CheckpointObjectId})
    checkpointInterface.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", checkpointInterface.InterfaceNameXr})
    checkpointInterface.EntityData.Leafs.Append("checkpoint-interface-handle", types.YLeaf{"CheckpointInterfaceHandle", checkpointInterface.CheckpointInterfaceHandle})
    checkpointInterface.EntityData.Leafs.Append("local-circuit-number", types.YLeaf{"LocalCircuitNumber", checkpointInterface.LocalCircuitNumber})
    checkpointInterface.EntityData.Leafs.Append("dis-areas", types.YLeaf{"DisAreas", checkpointInterface.DisAreas})
    checkpointInterface.EntityData.Leafs.Append("has-adjacency", types.YLeaf{"HasAdjacency", checkpointInterface.HasAdjacency})
    checkpointInterface.EntityData.Leafs.Append("local-snpa", types.YLeaf{"LocalSnpa", checkpointInterface.LocalSnpa})
    checkpointInterface.EntityData.Leafs.Append("has-joined-mcast-group", types.YLeaf{"HasJoinedMcastGroup", checkpointInterface.HasJoinedMcastGroup})
    checkpointInterface.EntityData.Leafs.Append("has-achieved-ldp-sync", types.YLeaf{"HasAchievedLdpSync", checkpointInterface.HasAchievedLdpSync})
    checkpointInterface.EntityData.Leafs.Append("has-achieved-ld-pv6-sync", types.YLeaf{"HasAchievedLdPv6Sync", checkpointInterface.HasAchievedLdPv6Sync})

    checkpointInterface.EntityData.YListKeys = []string {"InterfaceName"}

    return &(checkpointInterface.EntityData)
}

// Isis_Instances_Instance_SrLabels
// SR Label table
type Isis_Instances_Instance_SrLabels struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SrLabel table entry. The type is slice of
    // Isis_Instances_Instance_SrLabels_SrLabel.
    SrLabel []*Isis_Instances_Instance_SrLabels_SrLabel
}

func (srLabels *Isis_Instances_Instance_SrLabels) GetEntityData() *types.CommonEntityData {
    srLabels.EntityData.YFilter = srLabels.YFilter
    srLabels.EntityData.YangName = "sr-labels"
    srLabels.EntityData.BundleName = "cisco_ios_xr"
    srLabels.EntityData.ParentYangName = "instance"
    srLabels.EntityData.SegmentPath = "sr-labels"
    srLabels.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/" + srLabels.EntityData.SegmentPath
    srLabels.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srLabels.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srLabels.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srLabels.EntityData.Children = types.NewOrderedMap()
    srLabels.EntityData.Children.Append("sr-label", types.YChild{"SrLabel", nil})
    for i := range srLabels.SrLabel {
        srLabels.EntityData.Children.Append(types.GetSegmentPath(srLabels.SrLabel[i]), types.YChild{"SrLabel", srLabels.SrLabel[i]})
    }
    srLabels.EntityData.Leafs = types.NewOrderedMap()

    srLabels.EntityData.YListKeys = []string {}

    return &(srLabels.EntityData)
}

// Isis_Instances_Instance_SrLabels_SrLabel
// SrLabel table entry
type Isis_Instances_Instance_SrLabels_SrLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. SR Label. The type is interface{} with range:
    // 0..4294967295.
    Label interface{}

    // label type. The type is IsisEdmLabelTypeEnum.
    LabelType interface{}

    // label flags. The type is interface{} with range: 0..255.
    LabelFlags interface{}

    // label refcount. The type is interface{} with range: 0..255.
    LabelRefcount interface{}

    // label value. The type is interface{} with range: 0..4294967295.
    LabelValue interface{}

    // label interface. The type is string.
    LabelInterface interface{}

    // label ifh. The type is string with pattern: [a-zA-Z0-9._/-]+.
    LabelIfh interface{}

    // label table id. The type is interface{} with range: 0..4294967295.
    LabelTableId interface{}

    // label af id. The type is IsisAfId.
    LabelAfId interface{}

    // label prefix.
    LabelPrefix Isis_Instances_Instance_SrLabels_SrLabel_LabelPrefix
}

func (srLabel *Isis_Instances_Instance_SrLabels_SrLabel) GetEntityData() *types.CommonEntityData {
    srLabel.EntityData.YFilter = srLabel.YFilter
    srLabel.EntityData.YangName = "sr-label"
    srLabel.EntityData.BundleName = "cisco_ios_xr"
    srLabel.EntityData.ParentYangName = "sr-labels"
    srLabel.EntityData.SegmentPath = "sr-label" + types.AddKeyToken(srLabel.Label, "label")
    srLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/sr-labels/" + srLabel.EntityData.SegmentPath
    srLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srLabel.EntityData.Children = types.NewOrderedMap()
    srLabel.EntityData.Children.Append("label-prefix", types.YChild{"LabelPrefix", &srLabel.LabelPrefix})
    srLabel.EntityData.Leafs = types.NewOrderedMap()
    srLabel.EntityData.Leafs.Append("label", types.YLeaf{"Label", srLabel.Label})
    srLabel.EntityData.Leafs.Append("label-type", types.YLeaf{"LabelType", srLabel.LabelType})
    srLabel.EntityData.Leafs.Append("label-flags", types.YLeaf{"LabelFlags", srLabel.LabelFlags})
    srLabel.EntityData.Leafs.Append("label-refcount", types.YLeaf{"LabelRefcount", srLabel.LabelRefcount})
    srLabel.EntityData.Leafs.Append("label-value", types.YLeaf{"LabelValue", srLabel.LabelValue})
    srLabel.EntityData.Leafs.Append("label-interface", types.YLeaf{"LabelInterface", srLabel.LabelInterface})
    srLabel.EntityData.Leafs.Append("label-ifh", types.YLeaf{"LabelIfh", srLabel.LabelIfh})
    srLabel.EntityData.Leafs.Append("label-table-id", types.YLeaf{"LabelTableId", srLabel.LabelTableId})
    srLabel.EntityData.Leafs.Append("label-af-id", types.YLeaf{"LabelAfId", srLabel.LabelAfId})

    srLabel.EntityData.YListKeys = []string {"Label"}

    return &(srLabel.EntityData)
}

// Isis_Instances_Instance_SrLabels_SrLabel_LabelPrefix
// label prefix
type Isis_Instances_Instance_SrLabels_SrLabel_LabelPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFName. The type is IsisAfId.
    AfName interface{}

    // ipv4.
    Ipv4 Isis_Instances_Instance_SrLabels_SrLabel_LabelPrefix_Ipv4

    // ipv6.
    Ipv6 Isis_Instances_Instance_SrLabels_SrLabel_LabelPrefix_Ipv6
}

func (labelPrefix *Isis_Instances_Instance_SrLabels_SrLabel_LabelPrefix) GetEntityData() *types.CommonEntityData {
    labelPrefix.EntityData.YFilter = labelPrefix.YFilter
    labelPrefix.EntityData.YangName = "label-prefix"
    labelPrefix.EntityData.BundleName = "cisco_ios_xr"
    labelPrefix.EntityData.ParentYangName = "sr-label"
    labelPrefix.EntityData.SegmentPath = "label-prefix"
    labelPrefix.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/sr-labels/sr-label/" + labelPrefix.EntityData.SegmentPath
    labelPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelPrefix.EntityData.Children = types.NewOrderedMap()
    labelPrefix.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &labelPrefix.Ipv4})
    labelPrefix.EntityData.Children.Append("ipv6", types.YChild{"Ipv6", &labelPrefix.Ipv6})
    labelPrefix.EntityData.Leafs = types.NewOrderedMap()
    labelPrefix.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", labelPrefix.AfName})

    labelPrefix.EntityData.YListKeys = []string {}

    return &(labelPrefix.EntityData)
}

// Isis_Instances_Instance_SrLabels_SrLabel_LabelPrefix_Ipv4
// ipv4
type Isis_Instances_Instance_SrLabels_SrLabel_LabelPrefix_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv4 *Isis_Instances_Instance_SrLabels_SrLabel_LabelPrefix_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "label-prefix"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/sr-labels/sr-label/label-prefix/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4.Prefix})
    ipv4.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4.PrefixLength})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// Isis_Instances_Instance_SrLabels_SrLabel_LabelPrefix_Ipv6
// ipv6
type Isis_Instances_Instance_SrLabels_SrLabel_LabelPrefix_Ipv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv6 *Isis_Instances_Instance_SrLabels_SrLabel_LabelPrefix_Ipv6) GetEntityData() *types.CommonEntityData {
    ipv6.EntityData.YFilter = ipv6.YFilter
    ipv6.EntityData.YangName = "ipv6"
    ipv6.EntityData.BundleName = "cisco_ios_xr"
    ipv6.EntityData.ParentYangName = "label-prefix"
    ipv6.EntityData.SegmentPath = "ipv6"
    ipv6.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/sr-labels/sr-label/label-prefix/" + ipv6.EntityData.SegmentPath
    ipv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6.EntityData.Children = types.NewOrderedMap()
    ipv6.EntityData.Leafs = types.NewOrderedMap()
    ipv6.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6.Prefix})
    ipv6.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6.PrefixLength})

    ipv6.EntityData.YListKeys = []string {}

    return &(ipv6.EntityData)
}

// Isis_Instances_Instance_InterfaceStatistics
// Interface statistics table
type Isis_Instances_Instance_InterfaceStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Statistics data for one IS-IS interface. The type is slice of
    // Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic.
    InterfaceStatistic []*Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic
}

func (interfaceStatistics *Isis_Instances_Instance_InterfaceStatistics) GetEntityData() *types.CommonEntityData {
    interfaceStatistics.EntityData.YFilter = interfaceStatistics.YFilter
    interfaceStatistics.EntityData.YangName = "interface-statistics"
    interfaceStatistics.EntityData.BundleName = "cisco_ios_xr"
    interfaceStatistics.EntityData.ParentYangName = "instance"
    interfaceStatistics.EntityData.SegmentPath = "interface-statistics"
    interfaceStatistics.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/" + interfaceStatistics.EntityData.SegmentPath
    interfaceStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStatistics.EntityData.Children = types.NewOrderedMap()
    interfaceStatistics.EntityData.Children.Append("interface-statistic", types.YChild{"InterfaceStatistic", nil})
    for i := range interfaceStatistics.InterfaceStatistic {
        interfaceStatistics.EntityData.Children.Append(types.GetSegmentPath(interfaceStatistics.InterfaceStatistic[i]), types.YChild{"InterfaceStatistic", interfaceStatistics.InterfaceStatistic[i]})
    }
    interfaceStatistics.EntityData.Leafs = types.NewOrderedMap()

    interfaceStatistics.EntityData.YListKeys = []string {}

    return &(interfaceStatistics.EntityData)
}

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic
// Statistics data for one IS-IS interface
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Interface to which traffic statistics apply. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    TrafficInterface interface{}

    // Interface media class. The type is IsisMediaClass.
    InterfaceMediaType interface{}

    // P2P interface statistics. NULL for non-P2P interfaces.
    P2pStatistics Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2pStatistics

    // Per-area data. The type is slice of
    // Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData.
    PerAreaData []*Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData
}

func (interfaceStatistic *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic) GetEntityData() *types.CommonEntityData {
    interfaceStatistic.EntityData.YFilter = interfaceStatistic.YFilter
    interfaceStatistic.EntityData.YangName = "interface-statistic"
    interfaceStatistic.EntityData.BundleName = "cisco_ios_xr"
    interfaceStatistic.EntityData.ParentYangName = "interface-statistics"
    interfaceStatistic.EntityData.SegmentPath = "interface-statistic" + types.AddKeyToken(interfaceStatistic.InterfaceName, "interface-name")
    interfaceStatistic.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interface-statistics/" + interfaceStatistic.EntityData.SegmentPath
    interfaceStatistic.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceStatistic.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceStatistic.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceStatistic.EntityData.Children = types.NewOrderedMap()
    interfaceStatistic.EntityData.Children.Append("p2p-statistics", types.YChild{"P2pStatistics", &interfaceStatistic.P2pStatistics})
    interfaceStatistic.EntityData.Children.Append("per-area-data", types.YChild{"PerAreaData", nil})
    for i := range interfaceStatistic.PerAreaData {
        types.SetYListKey(interfaceStatistic.PerAreaData[i], i)
        interfaceStatistic.EntityData.Children.Append(types.GetSegmentPath(interfaceStatistic.PerAreaData[i]), types.YChild{"PerAreaData", interfaceStatistic.PerAreaData[i]})
    }
    interfaceStatistic.EntityData.Leafs = types.NewOrderedMap()
    interfaceStatistic.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceStatistic.InterfaceName})
    interfaceStatistic.EntityData.Leafs.Append("traffic-interface", types.YLeaf{"TrafficInterface", interfaceStatistic.TrafficInterface})
    interfaceStatistic.EntityData.Leafs.Append("interface-media-type", types.YLeaf{"InterfaceMediaType", interfaceStatistic.InterfaceMediaType})

    interfaceStatistic.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceStatistic.EntityData)
}

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2pStatistics
// P2P interface statistics. NULL for non-P2P
// interfaces
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2pStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IIHs not sent due to memory exhaustion. The type is interface{} with range:
    // 0..4294967295.
    MemoryExhaustedIihCount interface{}

    // LSP retransmissions. The type is interface{} with range: 0..4294967295.
    LspRetransmitCount interface{}

    // IIH statistics.
    IihCount Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2pStatistics_IihCount
}

func (p2pStatistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2pStatistics) GetEntityData() *types.CommonEntityData {
    p2pStatistics.EntityData.YFilter = p2pStatistics.YFilter
    p2pStatistics.EntityData.YangName = "p2p-statistics"
    p2pStatistics.EntityData.BundleName = "cisco_ios_xr"
    p2pStatistics.EntityData.ParentYangName = "interface-statistic"
    p2pStatistics.EntityData.SegmentPath = "p2p-statistics"
    p2pStatistics.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interface-statistics/interface-statistic/" + p2pStatistics.EntityData.SegmentPath
    p2pStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    p2pStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    p2pStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    p2pStatistics.EntityData.Children = types.NewOrderedMap()
    p2pStatistics.EntityData.Children.Append("iih-count", types.YChild{"IihCount", &p2pStatistics.IihCount})
    p2pStatistics.EntityData.Leafs = types.NewOrderedMap()
    p2pStatistics.EntityData.Leafs.Append("memory-exhausted-iih-count", types.YLeaf{"MemoryExhaustedIihCount", p2pStatistics.MemoryExhaustedIihCount})
    p2pStatistics.EntityData.Leafs.Append("lsp-retransmit-count", types.YLeaf{"LspRetransmitCount", p2pStatistics.LspRetransmitCount})

    p2pStatistics.EntityData.YListKeys = []string {}

    return &(p2pStatistics.EntityData)
}

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2pStatistics_IihCount
// IIH statistics
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2pStatistics_IihCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PDUs received. The type is interface{} with range: 0..4294967295.
    PduReceiveCount interface{}

    // PDUs sent. The type is interface{} with range: 0..4294967295.
    PduSendCount interface{}
}

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_P2pStatistics_IihCount) GetEntityData() *types.CommonEntityData {
    iihCount.EntityData.YFilter = iihCount.YFilter
    iihCount.EntityData.YangName = "iih-count"
    iihCount.EntityData.BundleName = "cisco_ios_xr"
    iihCount.EntityData.ParentYangName = "p2p-statistics"
    iihCount.EntityData.SegmentPath = "iih-count"
    iihCount.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interface-statistics/interface-statistic/p2p-statistics/" + iihCount.EntityData.SegmentPath
    iihCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iihCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iihCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iihCount.EntityData.Children = types.NewOrderedMap()
    iihCount.EntityData.Leafs = types.NewOrderedMap()
    iihCount.EntityData.Leafs.Append("pdu-receive-count", types.YLeaf{"PduReceiveCount", iihCount.PduReceiveCount})
    iihCount.EntityData.Leafs.Append("pdu-send-count", types.YLeaf{"PduSendCount", iihCount.PduSendCount})

    iihCount.EntityData.YListKeys = []string {}

    return &(iihCount.EntityData)
}

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData
// Per-area data
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Level of the area this data relates to. The type is IsisLevel.
    Level interface{}

    // Statistics.
    Statistics Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics

    // LAN interface statistics. NULL for non-LAN interfaces.
    LanData Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData
}

func (perAreaData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData) GetEntityData() *types.CommonEntityData {
    perAreaData.EntityData.YFilter = perAreaData.YFilter
    perAreaData.EntityData.YangName = "per-area-data"
    perAreaData.EntityData.BundleName = "cisco_ios_xr"
    perAreaData.EntityData.ParentYangName = "interface-statistic"
    perAreaData.EntityData.SegmentPath = "per-area-data" + types.AddNoKeyToken(perAreaData)
    perAreaData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interface-statistics/interface-statistic/" + perAreaData.EntityData.SegmentPath
    perAreaData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perAreaData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perAreaData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perAreaData.EntityData.Children = types.NewOrderedMap()
    perAreaData.EntityData.Children.Append("statistics", types.YChild{"Statistics", &perAreaData.Statistics})
    perAreaData.EntityData.Children.Append("lan-data", types.YChild{"LanData", &perAreaData.LanData})
    perAreaData.EntityData.Leafs = types.NewOrderedMap()
    perAreaData.EntityData.Leafs.Append("level", types.YLeaf{"Level", perAreaData.Level})

    perAreaData.EntityData.YListKeys = []string {}

    return &(perAreaData.EntityData)
}

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics
// Statistics
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of LSPs dropped due to minimum arrival time config. The type is
    // interface{} with range: 0..4294967295.
    LspDropCount interface{}

    // Count of LSPs already received by neighbors and not flooded. The type is
    // interface{} with range: 0..4294967295.
    LspFloodingDupCount interface{}

    // LSP statistics.
    LspCount Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_LspCount

    // CSNP statistics.
    CsnpCount Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_CsnpCount

    // PSNP statistics.
    PsnpCount Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_PsnpCount
}

func (statistics *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "per-area-data"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interface-statistics/interface-statistic/per-area-data/" + statistics.EntityData.SegmentPath
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("lsp-count", types.YChild{"LspCount", &statistics.LspCount})
    statistics.EntityData.Children.Append("csnp-count", types.YChild{"CsnpCount", &statistics.CsnpCount})
    statistics.EntityData.Children.Append("psnp-count", types.YChild{"PsnpCount", &statistics.PsnpCount})
    statistics.EntityData.Leafs = types.NewOrderedMap()
    statistics.EntityData.Leafs.Append("lsp-drop-count", types.YLeaf{"LspDropCount", statistics.LspDropCount})
    statistics.EntityData.Leafs.Append("lsp-flooding-dup-count", types.YLeaf{"LspFloodingDupCount", statistics.LspFloodingDupCount})

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_LspCount
// LSP statistics
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_LspCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PDUs received. The type is interface{} with range: 0..4294967295.
    PduReceiveCount interface{}

    // PDUs sent. The type is interface{} with range: 0..4294967295.
    PduSendCount interface{}
}

func (lspCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_LspCount) GetEntityData() *types.CommonEntityData {
    lspCount.EntityData.YFilter = lspCount.YFilter
    lspCount.EntityData.YangName = "lsp-count"
    lspCount.EntityData.BundleName = "cisco_ios_xr"
    lspCount.EntityData.ParentYangName = "statistics"
    lspCount.EntityData.SegmentPath = "lsp-count"
    lspCount.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interface-statistics/interface-statistic/per-area-data/statistics/" + lspCount.EntityData.SegmentPath
    lspCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lspCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lspCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lspCount.EntityData.Children = types.NewOrderedMap()
    lspCount.EntityData.Leafs = types.NewOrderedMap()
    lspCount.EntityData.Leafs.Append("pdu-receive-count", types.YLeaf{"PduReceiveCount", lspCount.PduReceiveCount})
    lspCount.EntityData.Leafs.Append("pdu-send-count", types.YLeaf{"PduSendCount", lspCount.PduSendCount})

    lspCount.EntityData.YListKeys = []string {}

    return &(lspCount.EntityData)
}

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_CsnpCount
// CSNP statistics
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_CsnpCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PDUs received. The type is interface{} with range: 0..4294967295.
    PduReceiveCount interface{}

    // PDUs sent. The type is interface{} with range: 0..4294967295.
    PduSendCount interface{}
}

func (csnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_CsnpCount) GetEntityData() *types.CommonEntityData {
    csnpCount.EntityData.YFilter = csnpCount.YFilter
    csnpCount.EntityData.YangName = "csnp-count"
    csnpCount.EntityData.BundleName = "cisco_ios_xr"
    csnpCount.EntityData.ParentYangName = "statistics"
    csnpCount.EntityData.SegmentPath = "csnp-count"
    csnpCount.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interface-statistics/interface-statistic/per-area-data/statistics/" + csnpCount.EntityData.SegmentPath
    csnpCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    csnpCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    csnpCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    csnpCount.EntityData.Children = types.NewOrderedMap()
    csnpCount.EntityData.Leafs = types.NewOrderedMap()
    csnpCount.EntityData.Leafs.Append("pdu-receive-count", types.YLeaf{"PduReceiveCount", csnpCount.PduReceiveCount})
    csnpCount.EntityData.Leafs.Append("pdu-send-count", types.YLeaf{"PduSendCount", csnpCount.PduSendCount})

    csnpCount.EntityData.YListKeys = []string {}

    return &(csnpCount.EntityData)
}

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_PsnpCount
// PSNP statistics
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_PsnpCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PDUs received. The type is interface{} with range: 0..4294967295.
    PduReceiveCount interface{}

    // PDUs sent. The type is interface{} with range: 0..4294967295.
    PduSendCount interface{}
}

func (psnpCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_Statistics_PsnpCount) GetEntityData() *types.CommonEntityData {
    psnpCount.EntityData.YFilter = psnpCount.YFilter
    psnpCount.EntityData.YangName = "psnp-count"
    psnpCount.EntityData.BundleName = "cisco_ios_xr"
    psnpCount.EntityData.ParentYangName = "statistics"
    psnpCount.EntityData.SegmentPath = "psnp-count"
    psnpCount.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interface-statistics/interface-statistic/per-area-data/statistics/" + psnpCount.EntityData.SegmentPath
    psnpCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    psnpCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    psnpCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    psnpCount.EntityData.Children = types.NewOrderedMap()
    psnpCount.EntityData.Leafs = types.NewOrderedMap()
    psnpCount.EntityData.Leafs.Append("pdu-receive-count", types.YLeaf{"PduReceiveCount", psnpCount.PduReceiveCount})
    psnpCount.EntityData.Leafs.Append("pdu-send-count", types.YLeaf{"PduSendCount", psnpCount.PduSendCount})

    psnpCount.EntityData.YListKeys = []string {}

    return &(psnpCount.EntityData)
}

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData
// LAN interface statistics. NULL for non-LAN
// interfaces
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IIHs not sent due to memory exhaustion. The type is interface{} with range:
    // 0..4294967295.
    MemoryExhaustedIihCount interface{}

    // DIS elections. The type is interface{} with range: 0..4294967295.
    DisElectionCount interface{}

    // IIH statistics.
    IihCount Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData_IihCount
}

func (lanData *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData) GetEntityData() *types.CommonEntityData {
    lanData.EntityData.YFilter = lanData.YFilter
    lanData.EntityData.YangName = "lan-data"
    lanData.EntityData.BundleName = "cisco_ios_xr"
    lanData.EntityData.ParentYangName = "per-area-data"
    lanData.EntityData.SegmentPath = "lan-data"
    lanData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interface-statistics/interface-statistic/per-area-data/" + lanData.EntityData.SegmentPath
    lanData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lanData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lanData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lanData.EntityData.Children = types.NewOrderedMap()
    lanData.EntityData.Children.Append("iih-count", types.YChild{"IihCount", &lanData.IihCount})
    lanData.EntityData.Leafs = types.NewOrderedMap()
    lanData.EntityData.Leafs.Append("memory-exhausted-iih-count", types.YLeaf{"MemoryExhaustedIihCount", lanData.MemoryExhaustedIihCount})
    lanData.EntityData.Leafs.Append("dis-election-count", types.YLeaf{"DisElectionCount", lanData.DisElectionCount})

    lanData.EntityData.YListKeys = []string {}

    return &(lanData.EntityData)
}

// Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData_IihCount
// IIH statistics
type Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData_IihCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // PDUs received. The type is interface{} with range: 0..4294967295.
    PduReceiveCount interface{}

    // PDUs sent. The type is interface{} with range: 0..4294967295.
    PduSendCount interface{}
}

func (iihCount *Isis_Instances_Instance_InterfaceStatistics_InterfaceStatistic_PerAreaData_LanData_IihCount) GetEntityData() *types.CommonEntityData {
    iihCount.EntityData.YFilter = iihCount.YFilter
    iihCount.EntityData.YangName = "iih-count"
    iihCount.EntityData.BundleName = "cisco_ios_xr"
    iihCount.EntityData.ParentYangName = "lan-data"
    iihCount.EntityData.SegmentPath = "iih-count"
    iihCount.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/interface-statistics/interface-statistic/per-area-data/lan-data/" + iihCount.EntityData.SegmentPath
    iihCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iihCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iihCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iihCount.EntityData.Children = types.NewOrderedMap()
    iihCount.EntityData.Leafs = types.NewOrderedMap()
    iihCount.EntityData.Leafs.Append("pdu-receive-count", types.YLeaf{"PduReceiveCount", iihCount.PduReceiveCount})
    iihCount.EntityData.Leafs.Append("pdu-send-count", types.YLeaf{"PduSendCount", iihCount.PduSendCount})

    iihCount.EntityData.YListKeys = []string {}

    return &(iihCount.EntityData)
}

// Isis_Instances_Instance_Protocol
// Basic protocol information about an IS-IS
// instance
type Isis_Instances_Instance_Protocol struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF context. The type is string.
    VrfContext interface{}

    // Local system ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    NsapSystemId interface{}

    // Indicates if system ID valid. The type is bool.
    ValidNsapSystemId interface{}

    // instance id. The type is interface{} with range: 0..65535.
    InstanceId interface{}

    // Levels running. The type is IsisLevels.
    RunningLevels interface{}

    // Configured NSF type. The type is IsisNsfFlavor.
    ConfiguredNsfFlavor interface{}

    // NSF type of last restart. The type is IsisNsfFlavor.
    LastRestartNsfFlavor interface{}

    // Last restart status. The type is IsisStartupStatus.
    LastRestartStatus interface{}

    // TE connection. The type is IsisUp.
    TeConnection interface{}

    // Time remaining until the next NSF restart may be attempted. The type is
    // interface{} with range: 0..4294967295.
    RemainingTimeForNextNsfRestart interface{}

    // Adj Forming count. The type is interface{} with range: 0..4294967295.
    AdjFormCount interface{}

    // Adj Full count. The type is interface{} with range: 0..4294967295.
    AdjFullCount interface{}

    // Adjacency Stagger Enabled. The type is bool.
    AdjStaggerEnabled interface{}

    // Adjacency Stagger Initiall Number of Forming Neighbors Allowed. The type is
    // interface{} with range: 0..4294967295.
    AdjStaggerInit interface{}

    // Adjacency Stagger Max Number of Forming Neighbors Allowed. The type is
    // interface{} with range: 0..4294967295.
    AdjStaggerMax interface{}

    // Is SRGB allocated ?. The type is bool.
    SrgbAllocated interface{}

    // First label in SRGB. The type is interface{} with range: 0..4294967295.
    SrgbStart interface{}

    // Last label in SRGB. The type is interface{} with range: 0..4294967295.
    SrgbEnd interface{}

    // Is SRLB allocated ?. The type is bool.
    SrlbAllocated interface{}

    // First label in SRLB. The type is interface{} with range: 0..4294967295.
    SrlbStart interface{}

    // Last label in SRLB. The type is interface{} with range: 0..4294967295.
    SrlbEnd interface{}

    // Manual area addresses. The type is slice of
    // Isis_Instances_Instance_Protocol_ManualAreaAddress.
    ManualAreaAddress []*Isis_Instances_Instance_Protocol_ManualAreaAddress

    // Active area addresses. The type is slice of
    // Isis_Instances_Instance_Protocol_ActiveAreaAddress.
    ActiveAreaAddress []*Isis_Instances_Instance_Protocol_ActiveAreaAddress

    // Per-topology data. The type is slice of
    // Isis_Instances_Instance_Protocol_PerTopoData.
    PerTopoData []*Isis_Instances_Instance_Protocol_PerTopoData
}

func (protocol *Isis_Instances_Instance_Protocol) GetEntityData() *types.CommonEntityData {
    protocol.EntityData.YFilter = protocol.YFilter
    protocol.EntityData.YangName = "protocol"
    protocol.EntityData.BundleName = "cisco_ios_xr"
    protocol.EntityData.ParentYangName = "instance"
    protocol.EntityData.SegmentPath = "protocol"
    protocol.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/" + protocol.EntityData.SegmentPath
    protocol.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocol.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocol.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocol.EntityData.Children = types.NewOrderedMap()
    protocol.EntityData.Children.Append("manual-area-address", types.YChild{"ManualAreaAddress", nil})
    for i := range protocol.ManualAreaAddress {
        types.SetYListKey(protocol.ManualAreaAddress[i], i)
        protocol.EntityData.Children.Append(types.GetSegmentPath(protocol.ManualAreaAddress[i]), types.YChild{"ManualAreaAddress", protocol.ManualAreaAddress[i]})
    }
    protocol.EntityData.Children.Append("active-area-address", types.YChild{"ActiveAreaAddress", nil})
    for i := range protocol.ActiveAreaAddress {
        types.SetYListKey(protocol.ActiveAreaAddress[i], i)
        protocol.EntityData.Children.Append(types.GetSegmentPath(protocol.ActiveAreaAddress[i]), types.YChild{"ActiveAreaAddress", protocol.ActiveAreaAddress[i]})
    }
    protocol.EntityData.Children.Append("per-topo-data", types.YChild{"PerTopoData", nil})
    for i := range protocol.PerTopoData {
        types.SetYListKey(protocol.PerTopoData[i], i)
        protocol.EntityData.Children.Append(types.GetSegmentPath(protocol.PerTopoData[i]), types.YChild{"PerTopoData", protocol.PerTopoData[i]})
    }
    protocol.EntityData.Leafs = types.NewOrderedMap()
    protocol.EntityData.Leafs.Append("vrf-context", types.YLeaf{"VrfContext", protocol.VrfContext})
    protocol.EntityData.Leafs.Append("nsap-system-id", types.YLeaf{"NsapSystemId", protocol.NsapSystemId})
    protocol.EntityData.Leafs.Append("valid-nsap-system-id", types.YLeaf{"ValidNsapSystemId", protocol.ValidNsapSystemId})
    protocol.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", protocol.InstanceId})
    protocol.EntityData.Leafs.Append("running-levels", types.YLeaf{"RunningLevels", protocol.RunningLevels})
    protocol.EntityData.Leafs.Append("configured-nsf-flavor", types.YLeaf{"ConfiguredNsfFlavor", protocol.ConfiguredNsfFlavor})
    protocol.EntityData.Leafs.Append("last-restart-nsf-flavor", types.YLeaf{"LastRestartNsfFlavor", protocol.LastRestartNsfFlavor})
    protocol.EntityData.Leafs.Append("last-restart-status", types.YLeaf{"LastRestartStatus", protocol.LastRestartStatus})
    protocol.EntityData.Leafs.Append("te-connection", types.YLeaf{"TeConnection", protocol.TeConnection})
    protocol.EntityData.Leafs.Append("remaining-time-for-next-nsf-restart", types.YLeaf{"RemainingTimeForNextNsfRestart", protocol.RemainingTimeForNextNsfRestart})
    protocol.EntityData.Leafs.Append("adj-form-count", types.YLeaf{"AdjFormCount", protocol.AdjFormCount})
    protocol.EntityData.Leafs.Append("adj-full-count", types.YLeaf{"AdjFullCount", protocol.AdjFullCount})
    protocol.EntityData.Leafs.Append("adj-stagger-enabled", types.YLeaf{"AdjStaggerEnabled", protocol.AdjStaggerEnabled})
    protocol.EntityData.Leafs.Append("adj-stagger-init", types.YLeaf{"AdjStaggerInit", protocol.AdjStaggerInit})
    protocol.EntityData.Leafs.Append("adj-stagger-max", types.YLeaf{"AdjStaggerMax", protocol.AdjStaggerMax})
    protocol.EntityData.Leafs.Append("srgb-allocated", types.YLeaf{"SrgbAllocated", protocol.SrgbAllocated})
    protocol.EntityData.Leafs.Append("srgb-start", types.YLeaf{"SrgbStart", protocol.SrgbStart})
    protocol.EntityData.Leafs.Append("srgb-end", types.YLeaf{"SrgbEnd", protocol.SrgbEnd})
    protocol.EntityData.Leafs.Append("srlb-allocated", types.YLeaf{"SrlbAllocated", protocol.SrlbAllocated})
    protocol.EntityData.Leafs.Append("srlb-start", types.YLeaf{"SrlbStart", protocol.SrlbStart})
    protocol.EntityData.Leafs.Append("srlb-end", types.YLeaf{"SrlbEnd", protocol.SrlbEnd})

    protocol.EntityData.YListKeys = []string {}

    return &(protocol.EntityData)
}

// Isis_Instances_Instance_Protocol_ManualAreaAddress
// Manual area addresses
type Isis_Instances_Instance_Protocol_ManualAreaAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is string with pattern: [a-fA-F0-9]{2}(\.[a-fA-F0-9]{4}){0,6}.
    Entry interface{}
}

func (manualAreaAddress *Isis_Instances_Instance_Protocol_ManualAreaAddress) GetEntityData() *types.CommonEntityData {
    manualAreaAddress.EntityData.YFilter = manualAreaAddress.YFilter
    manualAreaAddress.EntityData.YangName = "manual-area-address"
    manualAreaAddress.EntityData.BundleName = "cisco_ios_xr"
    manualAreaAddress.EntityData.ParentYangName = "protocol"
    manualAreaAddress.EntityData.SegmentPath = "manual-area-address" + types.AddNoKeyToken(manualAreaAddress)
    manualAreaAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/protocol/" + manualAreaAddress.EntityData.SegmentPath
    manualAreaAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    manualAreaAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    manualAreaAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    manualAreaAddress.EntityData.Children = types.NewOrderedMap()
    manualAreaAddress.EntityData.Leafs = types.NewOrderedMap()
    manualAreaAddress.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", manualAreaAddress.Entry})

    manualAreaAddress.EntityData.YListKeys = []string {}

    return &(manualAreaAddress.EntityData)
}

// Isis_Instances_Instance_Protocol_ActiveAreaAddress
// Active area addresses
type Isis_Instances_Instance_Protocol_ActiveAreaAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The type is string with pattern: [a-fA-F0-9]{2}(\.[a-fA-F0-9]{4}){0,6}.
    Entry interface{}
}

func (activeAreaAddress *Isis_Instances_Instance_Protocol_ActiveAreaAddress) GetEntityData() *types.CommonEntityData {
    activeAreaAddress.EntityData.YFilter = activeAreaAddress.YFilter
    activeAreaAddress.EntityData.YangName = "active-area-address"
    activeAreaAddress.EntityData.BundleName = "cisco_ios_xr"
    activeAreaAddress.EntityData.ParentYangName = "protocol"
    activeAreaAddress.EntityData.SegmentPath = "active-area-address" + types.AddNoKeyToken(activeAreaAddress)
    activeAreaAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/protocol/" + activeAreaAddress.EntityData.SegmentPath
    activeAreaAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    activeAreaAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    activeAreaAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    activeAreaAddress.EntityData.Children = types.NewOrderedMap()
    activeAreaAddress.EntityData.Leafs = types.NewOrderedMap()
    activeAreaAddress.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", activeAreaAddress.Entry})

    activeAreaAddress.EntityData.YListKeys = []string {}

    return &(activeAreaAddress.EntityData)
}

// Isis_Instances_Instance_Protocol_PerTopoData
// Per-topology data
type Isis_Instances_Instance_Protocol_PerTopoData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Default administrative distance. The type is interface{} with range:
    // 0..4294967295.
    DefaultAdminDistance interface{}

    // Advertise passive interface prefixes only. The type is bool.
    AdvertisePassiveOnly interface{}

    // Waiting for redist complete RIB event. The type is bool.
    WaitRedistComplete interface{}

    // Topology ID.
    Id Isis_Instances_Instance_Protocol_PerTopoData_Id

    // List of redistributed protocols.
    RedistProtocolsList Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList

    // Per-area data. The type is slice of
    // Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData.
    PerAreaData []*Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData
}

func (perTopoData *Isis_Instances_Instance_Protocol_PerTopoData) GetEntityData() *types.CommonEntityData {
    perTopoData.EntityData.YFilter = perTopoData.YFilter
    perTopoData.EntityData.YangName = "per-topo-data"
    perTopoData.EntityData.BundleName = "cisco_ios_xr"
    perTopoData.EntityData.ParentYangName = "protocol"
    perTopoData.EntityData.SegmentPath = "per-topo-data" + types.AddNoKeyToken(perTopoData)
    perTopoData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/protocol/" + perTopoData.EntityData.SegmentPath
    perTopoData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perTopoData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perTopoData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perTopoData.EntityData.Children = types.NewOrderedMap()
    perTopoData.EntityData.Children.Append("id", types.YChild{"Id", &perTopoData.Id})
    perTopoData.EntityData.Children.Append("redist-protocols-list", types.YChild{"RedistProtocolsList", &perTopoData.RedistProtocolsList})
    perTopoData.EntityData.Children.Append("per-area-data", types.YChild{"PerAreaData", nil})
    for i := range perTopoData.PerAreaData {
        types.SetYListKey(perTopoData.PerAreaData[i], i)
        perTopoData.EntityData.Children.Append(types.GetSegmentPath(perTopoData.PerAreaData[i]), types.YChild{"PerAreaData", perTopoData.PerAreaData[i]})
    }
    perTopoData.EntityData.Leafs = types.NewOrderedMap()
    perTopoData.EntityData.Leafs.Append("default-admin-distance", types.YLeaf{"DefaultAdminDistance", perTopoData.DefaultAdminDistance})
    perTopoData.EntityData.Leafs.Append("advertise-passive-only", types.YLeaf{"AdvertisePassiveOnly", perTopoData.AdvertisePassiveOnly})
    perTopoData.EntityData.Leafs.Append("wait-redist-complete", types.YLeaf{"WaitRedistComplete", perTopoData.WaitRedistComplete})

    perTopoData.EntityData.YListKeys = []string {}

    return &(perTopoData.EntityData)
}

// Isis_Instances_Instance_Protocol_PerTopoData_Id
// Topology ID
type Isis_Instances_Instance_Protocol_PerTopoData_Id struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF name. The type is IsisAfId.
    AfName interface{}

    // Sub-AF name. The type is IsisSubAfId.
    SafName interface{}

    // VRF Name. The type is string.
    VrfName interface{}

    // Topology Name. The type is string.
    TopologyName interface{}
}

func (id *Isis_Instances_Instance_Protocol_PerTopoData_Id) GetEntityData() *types.CommonEntityData {
    id.EntityData.YFilter = id.YFilter
    id.EntityData.YangName = "id"
    id.EntityData.BundleName = "cisco_ios_xr"
    id.EntityData.ParentYangName = "per-topo-data"
    id.EntityData.SegmentPath = "id"
    id.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/protocol/per-topo-data/" + id.EntityData.SegmentPath
    id.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    id.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    id.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    id.EntityData.Children = types.NewOrderedMap()
    id.EntityData.Leafs = types.NewOrderedMap()
    id.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", id.AfName})
    id.EntityData.Leafs.Append("saf-name", types.YLeaf{"SafName", id.SafName})
    id.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", id.VrfName})
    id.EntityData.Leafs.Append("topology-name", types.YLeaf{"TopologyName", id.TopologyName})

    id.EntityData.YListKeys = []string {}

    return &(id.EntityData)
}

// Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList
// List of redistributed protocols
type Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // isis sh redist entry. The type is slice of
    // Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry.
    IsisShRedistEntry []*Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry
}

func (redistProtocolsList *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList) GetEntityData() *types.CommonEntityData {
    redistProtocolsList.EntityData.YFilter = redistProtocolsList.YFilter
    redistProtocolsList.EntityData.YangName = "redist-protocols-list"
    redistProtocolsList.EntityData.BundleName = "cisco_ios_xr"
    redistProtocolsList.EntityData.ParentYangName = "per-topo-data"
    redistProtocolsList.EntityData.SegmentPath = "redist-protocols-list"
    redistProtocolsList.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/protocol/per-topo-data/" + redistProtocolsList.EntityData.SegmentPath
    redistProtocolsList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistProtocolsList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistProtocolsList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistProtocolsList.EntityData.Children = types.NewOrderedMap()
    redistProtocolsList.EntityData.Children.Append("isis-sh-redist-entry", types.YChild{"IsisShRedistEntry", nil})
    for i := range redistProtocolsList.IsisShRedistEntry {
        types.SetYListKey(redistProtocolsList.IsisShRedistEntry[i], i)
        redistProtocolsList.EntityData.Children.Append(types.GetSegmentPath(redistProtocolsList.IsisShRedistEntry[i]), types.YChild{"IsisShRedistEntry", redistProtocolsList.IsisShRedistEntry[i]})
    }
    redistProtocolsList.EntityData.Leafs = types.NewOrderedMap()

    redistProtocolsList.EntityData.YListKeys = []string {}

    return &(redistProtocolsList.EntityData)
}

// Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry
// isis sh redist entry
type Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Relevant details of the redistributed protocol.
    ProtocolDetails Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry_ProtocolDetails
}

func (isisShRedistEntry *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry) GetEntityData() *types.CommonEntityData {
    isisShRedistEntry.EntityData.YFilter = isisShRedistEntry.YFilter
    isisShRedistEntry.EntityData.YangName = "isis-sh-redist-entry"
    isisShRedistEntry.EntityData.BundleName = "cisco_ios_xr"
    isisShRedistEntry.EntityData.ParentYangName = "redist-protocols-list"
    isisShRedistEntry.EntityData.SegmentPath = "isis-sh-redist-entry" + types.AddNoKeyToken(isisShRedistEntry)
    isisShRedistEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/protocol/per-topo-data/redist-protocols-list/" + isisShRedistEntry.EntityData.SegmentPath
    isisShRedistEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isisShRedistEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isisShRedistEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isisShRedistEntry.EntityData.Children = types.NewOrderedMap()
    isisShRedistEntry.EntityData.Children.Append("protocol-details", types.YChild{"ProtocolDetails", &isisShRedistEntry.ProtocolDetails})
    isisShRedistEntry.EntityData.Leafs = types.NewOrderedMap()

    isisShRedistEntry.EntityData.YListKeys = []string {}

    return &(isisShRedistEntry.EntityData)
}

// Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry_ProtocolDetails
// Relevant details of the redistributed protocol
type Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry_ProtocolDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol. The type is IsisRedistProto.
    Protocol interface{}

    // IS-IS instance identifier. The type is string.
    IsisInstanceId interface{}

    // OSPF process identifier. The type is string.
    OspfProcessId interface{}

    // OSPFv3 process identifier. The type is string.
    Ospfv3ProcessId interface{}

    // BGP Autonomous System number. The type is string.
    BgpAsNumber interface{}

    // EIGRP Autonomous System number. The type is string.
    EigrpAsNumber interface{}

    // Application Name. The type is string.
    ApplicationName interface{}
}

func (protocolDetails *Isis_Instances_Instance_Protocol_PerTopoData_RedistProtocolsList_IsisShRedistEntry_ProtocolDetails) GetEntityData() *types.CommonEntityData {
    protocolDetails.EntityData.YFilter = protocolDetails.YFilter
    protocolDetails.EntityData.YangName = "protocol-details"
    protocolDetails.EntityData.BundleName = "cisco_ios_xr"
    protocolDetails.EntityData.ParentYangName = "isis-sh-redist-entry"
    protocolDetails.EntityData.SegmentPath = "protocol-details"
    protocolDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/protocol/per-topo-data/redist-protocols-list/isis-sh-redist-entry/" + protocolDetails.EntityData.SegmentPath
    protocolDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolDetails.EntityData.Children = types.NewOrderedMap()
    protocolDetails.EntityData.Leafs = types.NewOrderedMap()
    protocolDetails.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", protocolDetails.Protocol})
    protocolDetails.EntityData.Leafs.Append("isis-instance-id", types.YLeaf{"IsisInstanceId", protocolDetails.IsisInstanceId})
    protocolDetails.EntityData.Leafs.Append("ospf-process-id", types.YLeaf{"OspfProcessId", protocolDetails.OspfProcessId})
    protocolDetails.EntityData.Leafs.Append("ospfv3-process-id", types.YLeaf{"Ospfv3ProcessId", protocolDetails.Ospfv3ProcessId})
    protocolDetails.EntityData.Leafs.Append("bgp-as-number", types.YLeaf{"BgpAsNumber", protocolDetails.BgpAsNumber})
    protocolDetails.EntityData.Leafs.Append("eigrp-as-number", types.YLeaf{"EigrpAsNumber", protocolDetails.EigrpAsNumber})
    protocolDetails.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", protocolDetails.ApplicationName})

    protocolDetails.EntityData.YListKeys = []string {}

    return &(protocolDetails.EntityData)
}

// Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData
// Per-area data
type Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The level this data refers to. The type is IsisLevel.
    Level interface{}

    // Does this topology use the default link topology. The type is bool.
    UsesDefaultLinkTopoFlag interface{}

    // Generate metric style. The type is IsisMetricStyle.
    GeneratedMetricStyle interface{}

    // Accept metric style. The type is IsisMetricStyle.
    AcceptedMetricStyle interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // ISPF state. The type is IsisEnabled.
    IspfState interface{}

    // Indicates whether MPLS TE is enabled. The type is bool.
    TeEnabled interface{}

    // Microloop avoidance type. The type is IsisUloopAvoidance.
    UloopAvoidanceType interface{}

    // Microloop RIB update delay. The type is interface{} with range:
    // 0..4294967295.
    RibUpdateDelay interface{}

    // Explicit paths installed in the RIB. The type is bool.
    SrUloopIsActive interface{}

    // SR microloop avoidance duration. The type is interface{} with range:
    // 0..4294967295.
    Duration interface{}

    // SR microloop avoidance event. The type is IsisUloopEvent.
    SrUloopEvent interface{}

    // SR microloop near node. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}.
    SrUloopNearNodeId interface{}

    // SR microloop far node. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}.
    SrUloopFarNodeId interface{}
}

func (perAreaData *Isis_Instances_Instance_Protocol_PerTopoData_PerAreaData) GetEntityData() *types.CommonEntityData {
    perAreaData.EntityData.YFilter = perAreaData.YFilter
    perAreaData.EntityData.YangName = "per-area-data"
    perAreaData.EntityData.BundleName = "cisco_ios_xr"
    perAreaData.EntityData.ParentYangName = "per-topo-data"
    perAreaData.EntityData.SegmentPath = "per-area-data" + types.AddNoKeyToken(perAreaData)
    perAreaData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/protocol/per-topo-data/" + perAreaData.EntityData.SegmentPath
    perAreaData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perAreaData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perAreaData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perAreaData.EntityData.Children = types.NewOrderedMap()
    perAreaData.EntityData.Leafs = types.NewOrderedMap()
    perAreaData.EntityData.Leafs.Append("level", types.YLeaf{"Level", perAreaData.Level})
    perAreaData.EntityData.Leafs.Append("uses-default-link-topo-flag", types.YLeaf{"UsesDefaultLinkTopoFlag", perAreaData.UsesDefaultLinkTopoFlag})
    perAreaData.EntityData.Leafs.Append("generated-metric-style", types.YLeaf{"GeneratedMetricStyle", perAreaData.GeneratedMetricStyle})
    perAreaData.EntityData.Leafs.Append("accepted-metric-style", types.YLeaf{"AcceptedMetricStyle", perAreaData.AcceptedMetricStyle})
    perAreaData.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", perAreaData.Metric})
    perAreaData.EntityData.Leafs.Append("ispf-state", types.YLeaf{"IspfState", perAreaData.IspfState})
    perAreaData.EntityData.Leafs.Append("te-enabled", types.YLeaf{"TeEnabled", perAreaData.TeEnabled})
    perAreaData.EntityData.Leafs.Append("uloop-avoidance-type", types.YLeaf{"UloopAvoidanceType", perAreaData.UloopAvoidanceType})
    perAreaData.EntityData.Leafs.Append("rib-update-delay", types.YLeaf{"RibUpdateDelay", perAreaData.RibUpdateDelay})
    perAreaData.EntityData.Leafs.Append("sr-uloop-is-active", types.YLeaf{"SrUloopIsActive", perAreaData.SrUloopIsActive})
    perAreaData.EntityData.Leafs.Append("duration", types.YLeaf{"Duration", perAreaData.Duration})
    perAreaData.EntityData.Leafs.Append("sr-uloop-event", types.YLeaf{"SrUloopEvent", perAreaData.SrUloopEvent})
    perAreaData.EntityData.Leafs.Append("sr-uloop-near-node-id", types.YLeaf{"SrUloopNearNodeId", perAreaData.SrUloopNearNodeId})
    perAreaData.EntityData.Leafs.Append("sr-uloop-far-node-id", types.YLeaf{"SrUloopFarNodeId", perAreaData.SrUloopFarNodeId})

    perAreaData.EntityData.YListKeys = []string {}

    return &(perAreaData.EntityData)
}

// Isis_Instances_Instance_NeighborSummaries
// Neighbor-summary table
type Isis_Instances_Instance_NeighborSummaries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor-summary data for a single interface. The type is slice of
    // Isis_Instances_Instance_NeighborSummaries_NeighborSummary.
    NeighborSummary []*Isis_Instances_Instance_NeighborSummaries_NeighborSummary
}

func (neighborSummaries *Isis_Instances_Instance_NeighborSummaries) GetEntityData() *types.CommonEntityData {
    neighborSummaries.EntityData.YFilter = neighborSummaries.YFilter
    neighborSummaries.EntityData.YangName = "neighbor-summaries"
    neighborSummaries.EntityData.BundleName = "cisco_ios_xr"
    neighborSummaries.EntityData.ParentYangName = "instance"
    neighborSummaries.EntityData.SegmentPath = "neighbor-summaries"
    neighborSummaries.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/" + neighborSummaries.EntityData.SegmentPath
    neighborSummaries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborSummaries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborSummaries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborSummaries.EntityData.Children = types.NewOrderedMap()
    neighborSummaries.EntityData.Children.Append("neighbor-summary", types.YChild{"NeighborSummary", nil})
    for i := range neighborSummaries.NeighborSummary {
        neighborSummaries.EntityData.Children.Append(types.GetSegmentPath(neighborSummaries.NeighborSummary[i]), types.YChild{"NeighborSummary", neighborSummaries.NeighborSummary[i]})
    }
    neighborSummaries.EntityData.Leafs = types.NewOrderedMap()

    neighborSummaries.EntityData.YListKeys = []string {}

    return &(neighborSummaries.EntityData)
}

// Isis_Instances_Instance_NeighborSummaries_NeighborSummary
// Neighbor-summary data for a single interface
type Isis_Instances_Instance_NeighborSummaries_NeighborSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // L1-only neighbors.
    Level1Neighbors Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level1Neighbors

    // L2-only neighbors.
    Level2Neighbors Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level2Neighbors

    // L12 neighbors.
    Level12Neigbors Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level12Neigbors
}

func (neighborSummary *Isis_Instances_Instance_NeighborSummaries_NeighborSummary) GetEntityData() *types.CommonEntityData {
    neighborSummary.EntityData.YFilter = neighborSummary.YFilter
    neighborSummary.EntityData.YangName = "neighbor-summary"
    neighborSummary.EntityData.BundleName = "cisco_ios_xr"
    neighborSummary.EntityData.ParentYangName = "neighbor-summaries"
    neighborSummary.EntityData.SegmentPath = "neighbor-summary" + types.AddKeyToken(neighborSummary.InterfaceName, "interface-name")
    neighborSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbor-summaries/" + neighborSummary.EntityData.SegmentPath
    neighborSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborSummary.EntityData.Children = types.NewOrderedMap()
    neighborSummary.EntityData.Children.Append("level1-neighbors", types.YChild{"Level1Neighbors", &neighborSummary.Level1Neighbors})
    neighborSummary.EntityData.Children.Append("level2-neighbors", types.YChild{"Level2Neighbors", &neighborSummary.Level2Neighbors})
    neighborSummary.EntityData.Children.Append("level12-neigbors", types.YChild{"Level12Neigbors", &neighborSummary.Level12Neigbors})
    neighborSummary.EntityData.Leafs = types.NewOrderedMap()
    neighborSummary.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", neighborSummary.InterfaceName})

    neighborSummary.EntityData.YListKeys = []string {"InterfaceName"}

    return &(neighborSummary.EntityData)
}

// Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level1Neighbors
// L1-only neighbors
type Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level1Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbors up. The type is interface{} with range: 0..4294967295.
    NeighborUpCount interface{}

    // Neighbors being initialized. The type is interface{} with range:
    // 0..4294967295.
    NeighborInitCount interface{}

    // Neighbors down. The type is interface{} with range: 0..4294967295.
    NeighborDownCount interface{}
}

func (level1Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level1Neighbors) GetEntityData() *types.CommonEntityData {
    level1Neighbors.EntityData.YFilter = level1Neighbors.YFilter
    level1Neighbors.EntityData.YangName = "level1-neighbors"
    level1Neighbors.EntityData.BundleName = "cisco_ios_xr"
    level1Neighbors.EntityData.ParentYangName = "neighbor-summary"
    level1Neighbors.EntityData.SegmentPath = "level1-neighbors"
    level1Neighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbor-summaries/neighbor-summary/" + level1Neighbors.EntityData.SegmentPath
    level1Neighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    level1Neighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    level1Neighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    level1Neighbors.EntityData.Children = types.NewOrderedMap()
    level1Neighbors.EntityData.Leafs = types.NewOrderedMap()
    level1Neighbors.EntityData.Leafs.Append("neighbor-up-count", types.YLeaf{"NeighborUpCount", level1Neighbors.NeighborUpCount})
    level1Neighbors.EntityData.Leafs.Append("neighbor-init-count", types.YLeaf{"NeighborInitCount", level1Neighbors.NeighborInitCount})
    level1Neighbors.EntityData.Leafs.Append("neighbor-down-count", types.YLeaf{"NeighborDownCount", level1Neighbors.NeighborDownCount})

    level1Neighbors.EntityData.YListKeys = []string {}

    return &(level1Neighbors.EntityData)
}

// Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level2Neighbors
// L2-only neighbors
type Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level2Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbors up. The type is interface{} with range: 0..4294967295.
    NeighborUpCount interface{}

    // Neighbors being initialized. The type is interface{} with range:
    // 0..4294967295.
    NeighborInitCount interface{}

    // Neighbors down. The type is interface{} with range: 0..4294967295.
    NeighborDownCount interface{}
}

func (level2Neighbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level2Neighbors) GetEntityData() *types.CommonEntityData {
    level2Neighbors.EntityData.YFilter = level2Neighbors.YFilter
    level2Neighbors.EntityData.YangName = "level2-neighbors"
    level2Neighbors.EntityData.BundleName = "cisco_ios_xr"
    level2Neighbors.EntityData.ParentYangName = "neighbor-summary"
    level2Neighbors.EntityData.SegmentPath = "level2-neighbors"
    level2Neighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbor-summaries/neighbor-summary/" + level2Neighbors.EntityData.SegmentPath
    level2Neighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    level2Neighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    level2Neighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    level2Neighbors.EntityData.Children = types.NewOrderedMap()
    level2Neighbors.EntityData.Leafs = types.NewOrderedMap()
    level2Neighbors.EntityData.Leafs.Append("neighbor-up-count", types.YLeaf{"NeighborUpCount", level2Neighbors.NeighborUpCount})
    level2Neighbors.EntityData.Leafs.Append("neighbor-init-count", types.YLeaf{"NeighborInitCount", level2Neighbors.NeighborInitCount})
    level2Neighbors.EntityData.Leafs.Append("neighbor-down-count", types.YLeaf{"NeighborDownCount", level2Neighbors.NeighborDownCount})

    level2Neighbors.EntityData.YListKeys = []string {}

    return &(level2Neighbors.EntityData)
}

// Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level12Neigbors
// L12 neighbors
type Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level12Neigbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbors up. The type is interface{} with range: 0..4294967295.
    NeighborUpCount interface{}

    // Neighbors being initialized. The type is interface{} with range:
    // 0..4294967295.
    NeighborInitCount interface{}

    // Neighbors down. The type is interface{} with range: 0..4294967295.
    NeighborDownCount interface{}
}

func (level12Neigbors *Isis_Instances_Instance_NeighborSummaries_NeighborSummary_Level12Neigbors) GetEntityData() *types.CommonEntityData {
    level12Neigbors.EntityData.YFilter = level12Neigbors.YFilter
    level12Neigbors.EntityData.YangName = "level12-neigbors"
    level12Neigbors.EntityData.BundleName = "cisco_ios_xr"
    level12Neigbors.EntityData.ParentYangName = "neighbor-summary"
    level12Neigbors.EntityData.SegmentPath = "level12-neigbors"
    level12Neigbors.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/neighbor-summaries/neighbor-summary/" + level12Neigbors.EntityData.SegmentPath
    level12Neigbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    level12Neigbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    level12Neigbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    level12Neigbors.EntityData.Children = types.NewOrderedMap()
    level12Neigbors.EntityData.Leafs = types.NewOrderedMap()
    level12Neigbors.EntityData.Leafs.Append("neighbor-up-count", types.YLeaf{"NeighborUpCount", level12Neigbors.NeighborUpCount})
    level12Neigbors.EntityData.Leafs.Append("neighbor-init-count", types.YLeaf{"NeighborInitCount", level12Neigbors.NeighborInitCount})
    level12Neigbors.EntityData.Leafs.Append("neighbor-down-count", types.YLeaf{"NeighborDownCount", level12Neigbors.NeighborDownCount})

    level12Neigbors.EntityData.YListKeys = []string {}

    return &(level12Neigbors.EntityData)
}

// Isis_Instances_Instance_CheckpointLsps
// Checkpointed LSP table
type Isis_Instances_Instance_CheckpointLsps struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A checkpointed IS-IS LSP. The type is slice of
    // Isis_Instances_Instance_CheckpointLsps_CheckpointLsp.
    CheckpointLsp []*Isis_Instances_Instance_CheckpointLsps_CheckpointLsp
}

func (checkpointLsps *Isis_Instances_Instance_CheckpointLsps) GetEntityData() *types.CommonEntityData {
    checkpointLsps.EntityData.YFilter = checkpointLsps.YFilter
    checkpointLsps.EntityData.YangName = "checkpoint-lsps"
    checkpointLsps.EntityData.BundleName = "cisco_ios_xr"
    checkpointLsps.EntityData.ParentYangName = "instance"
    checkpointLsps.EntityData.SegmentPath = "checkpoint-lsps"
    checkpointLsps.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/" + checkpointLsps.EntityData.SegmentPath
    checkpointLsps.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    checkpointLsps.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    checkpointLsps.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    checkpointLsps.EntityData.Children = types.NewOrderedMap()
    checkpointLsps.EntityData.Children.Append("checkpoint-lsp", types.YChild{"CheckpointLsp", nil})
    for i := range checkpointLsps.CheckpointLsp {
        types.SetYListKey(checkpointLsps.CheckpointLsp[i], i)
        checkpointLsps.EntityData.Children.Append(types.GetSegmentPath(checkpointLsps.CheckpointLsp[i]), types.YChild{"CheckpointLsp", checkpointLsps.CheckpointLsp[i]})
    }
    checkpointLsps.EntityData.Leafs = types.NewOrderedMap()

    checkpointLsps.EntityData.YListKeys = []string {}

    return &(checkpointLsps.EntityData)
}

// Isis_Instances_Instance_CheckpointLsps_CheckpointLsp
// A checkpointed IS-IS LSP
type Isis_Instances_Instance_CheckpointLsps_CheckpointLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Level. The type is IsisInternalLevel.
    Level interface{}

    // LSP ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    LspId interface{}

    // LSP Checkpoint table object ID. The type is interface{} with range:
    // 0..4294967295.
    CheckpointLspObjectId interface{}

    // LSP level. The type is interface{} with range: 0..255.
    CheckpointLspLevel interface{}

    // TRUE if this is a local LSP. The type is bool.
    CheckpointLspLocalFlag interface{}

    // LSP ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}\.[a-fA-F0-9]{2}\-[a-fA-F0-9]{2}.
    CheckpointLspId interface{}
}

func (checkpointLsp *Isis_Instances_Instance_CheckpointLsps_CheckpointLsp) GetEntityData() *types.CommonEntityData {
    checkpointLsp.EntityData.YFilter = checkpointLsp.YFilter
    checkpointLsp.EntityData.YangName = "checkpoint-lsp"
    checkpointLsp.EntityData.BundleName = "cisco_ios_xr"
    checkpointLsp.EntityData.ParentYangName = "checkpoint-lsps"
    checkpointLsp.EntityData.SegmentPath = "checkpoint-lsp" + types.AddNoKeyToken(checkpointLsp)
    checkpointLsp.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/checkpoint-lsps/" + checkpointLsp.EntityData.SegmentPath
    checkpointLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    checkpointLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    checkpointLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    checkpointLsp.EntityData.Children = types.NewOrderedMap()
    checkpointLsp.EntityData.Leafs = types.NewOrderedMap()
    checkpointLsp.EntityData.Leafs.Append("level", types.YLeaf{"Level", checkpointLsp.Level})
    checkpointLsp.EntityData.Leafs.Append("lsp-id", types.YLeaf{"LspId", checkpointLsp.LspId})
    checkpointLsp.EntityData.Leafs.Append("checkpoint-lsp-object-id", types.YLeaf{"CheckpointLspObjectId", checkpointLsp.CheckpointLspObjectId})
    checkpointLsp.EntityData.Leafs.Append("checkpoint-lsp-level", types.YLeaf{"CheckpointLspLevel", checkpointLsp.CheckpointLspLevel})
    checkpointLsp.EntityData.Leafs.Append("checkpoint-lsp-local-flag", types.YLeaf{"CheckpointLspLocalFlag", checkpointLsp.CheckpointLspLocalFlag})
    checkpointLsp.EntityData.Leafs.Append("checkpoint-lsp-id", types.YLeaf{"CheckpointLspId", checkpointLsp.CheckpointLspId})

    checkpointLsp.EntityData.YListKeys = []string {}

    return &(checkpointLsp.EntityData)
}

// Isis_Instances_Instance_MeshGroups
// Mesh-group information
type Isis_Instances_Instance_MeshGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of mesh-group-configured interfaces.
    MeshGroupConfiguredInterfaceList Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList
}

func (meshGroups *Isis_Instances_Instance_MeshGroups) GetEntityData() *types.CommonEntityData {
    meshGroups.EntityData.YFilter = meshGroups.YFilter
    meshGroups.EntityData.YangName = "mesh-groups"
    meshGroups.EntityData.BundleName = "cisco_ios_xr"
    meshGroups.EntityData.ParentYangName = "instance"
    meshGroups.EntityData.SegmentPath = "mesh-groups"
    meshGroups.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/" + meshGroups.EntityData.SegmentPath
    meshGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    meshGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    meshGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    meshGroups.EntityData.Children = types.NewOrderedMap()
    meshGroups.EntityData.Children.Append("mesh-group-configured-interface-list", types.YChild{"MeshGroupConfiguredInterfaceList", &meshGroups.MeshGroupConfiguredInterfaceList})
    meshGroups.EntityData.Leafs = types.NewOrderedMap()

    meshGroups.EntityData.YListKeys = []string {}

    return &(meshGroups.EntityData)
}

// Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList
// List of mesh-group-configured interfaces
type Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // isis sh mesh entry. The type is slice of
    // Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry.
    IsisShMeshEntry []*Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry
}

func (meshGroupConfiguredInterfaceList *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList) GetEntityData() *types.CommonEntityData {
    meshGroupConfiguredInterfaceList.EntityData.YFilter = meshGroupConfiguredInterfaceList.YFilter
    meshGroupConfiguredInterfaceList.EntityData.YangName = "mesh-group-configured-interface-list"
    meshGroupConfiguredInterfaceList.EntityData.BundleName = "cisco_ios_xr"
    meshGroupConfiguredInterfaceList.EntityData.ParentYangName = "mesh-groups"
    meshGroupConfiguredInterfaceList.EntityData.SegmentPath = "mesh-group-configured-interface-list"
    meshGroupConfiguredInterfaceList.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/mesh-groups/" + meshGroupConfiguredInterfaceList.EntityData.SegmentPath
    meshGroupConfiguredInterfaceList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    meshGroupConfiguredInterfaceList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    meshGroupConfiguredInterfaceList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    meshGroupConfiguredInterfaceList.EntityData.Children = types.NewOrderedMap()
    meshGroupConfiguredInterfaceList.EntityData.Children.Append("isis-sh-mesh-entry", types.YChild{"IsisShMeshEntry", nil})
    for i := range meshGroupConfiguredInterfaceList.IsisShMeshEntry {
        types.SetYListKey(meshGroupConfiguredInterfaceList.IsisShMeshEntry[i], i)
        meshGroupConfiguredInterfaceList.EntityData.Children.Append(types.GetSegmentPath(meshGroupConfiguredInterfaceList.IsisShMeshEntry[i]), types.YChild{"IsisShMeshEntry", meshGroupConfiguredInterfaceList.IsisShMeshEntry[i]})
    }
    meshGroupConfiguredInterfaceList.EntityData.Leafs = types.NewOrderedMap()

    meshGroupConfiguredInterfaceList.EntityData.YListKeys = []string {}

    return &(meshGroupConfiguredInterfaceList.EntityData)
}

// Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry
// isis sh mesh entry
type Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    MeshGroupInterface interface{}

    // Mesh-group number. The type is interface{} with range: 0..4294967295.
    MeshGroupNumber interface{}
}

func (isisShMeshEntry *Isis_Instances_Instance_MeshGroups_MeshGroupConfiguredInterfaceList_IsisShMeshEntry) GetEntityData() *types.CommonEntityData {
    isisShMeshEntry.EntityData.YFilter = isisShMeshEntry.YFilter
    isisShMeshEntry.EntityData.YangName = "isis-sh-mesh-entry"
    isisShMeshEntry.EntityData.BundleName = "cisco_ios_xr"
    isisShMeshEntry.EntityData.ParentYangName = "mesh-group-configured-interface-list"
    isisShMeshEntry.EntityData.SegmentPath = "isis-sh-mesh-entry" + types.AddNoKeyToken(isisShMeshEntry)
    isisShMeshEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/mesh-groups/mesh-group-configured-interface-list/" + isisShMeshEntry.EntityData.SegmentPath
    isisShMeshEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isisShMeshEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isisShMeshEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isisShMeshEntry.EntityData.Children = types.NewOrderedMap()
    isisShMeshEntry.EntityData.Leafs = types.NewOrderedMap()
    isisShMeshEntry.EntityData.Leafs.Append("mesh-group-interface", types.YLeaf{"MeshGroupInterface", isisShMeshEntry.MeshGroupInterface})
    isisShMeshEntry.EntityData.Leafs.Append("mesh-group-number", types.YLeaf{"MeshGroupNumber", isisShMeshEntry.MeshGroupNumber})

    isisShMeshEntry.EntityData.YListKeys = []string {}

    return &(isisShMeshEntry.EntityData)
}

// Isis_Instances_Instance_NsrStatistics
// NSR Statistics information
type Isis_Instances_Instance_NsrStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ISIS VM STATE. The type is interface{} with range: 0..65535.
    IsisVmState interface{}

    // ISIS NSR STATS Data.
    IsisNsrStatsData Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData
}

func (nsrStatistics *Isis_Instances_Instance_NsrStatistics) GetEntityData() *types.CommonEntityData {
    nsrStatistics.EntityData.YFilter = nsrStatistics.YFilter
    nsrStatistics.EntityData.YangName = "nsr-statistics"
    nsrStatistics.EntityData.BundleName = "cisco_ios_xr"
    nsrStatistics.EntityData.ParentYangName = "instance"
    nsrStatistics.EntityData.SegmentPath = "nsr-statistics"
    nsrStatistics.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/" + nsrStatistics.EntityData.SegmentPath
    nsrStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrStatistics.EntityData.Children = types.NewOrderedMap()
    nsrStatistics.EntityData.Children.Append("isis-nsr-stats-data", types.YChild{"IsisNsrStatsData", &nsrStatistics.IsisNsrStatsData})
    nsrStatistics.EntityData.Leafs = types.NewOrderedMap()
    nsrStatistics.EntityData.Leafs.Append("isis-vm-state", types.YLeaf{"IsisVmState", nsrStatistics.IsisVmState})

    nsrStatistics.EntityData.YListKeys = []string {}

    return &(nsrStatistics.EntityData)
}

// Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData
// ISIS NSR STATS Data
type Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // self.
    Self Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Self

    // peer. The type is slice of
    // Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer.
    Peer []*Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer
}

func (isisNsrStatsData *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData) GetEntityData() *types.CommonEntityData {
    isisNsrStatsData.EntityData.YFilter = isisNsrStatsData.YFilter
    isisNsrStatsData.EntityData.YangName = "isis-nsr-stats-data"
    isisNsrStatsData.EntityData.BundleName = "cisco_ios_xr"
    isisNsrStatsData.EntityData.ParentYangName = "nsr-statistics"
    isisNsrStatsData.EntityData.SegmentPath = "isis-nsr-stats-data"
    isisNsrStatsData.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-statistics/" + isisNsrStatsData.EntityData.SegmentPath
    isisNsrStatsData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isisNsrStatsData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isisNsrStatsData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isisNsrStatsData.EntityData.Children = types.NewOrderedMap()
    isisNsrStatsData.EntityData.Children.Append("self", types.YChild{"Self", &isisNsrStatsData.Self})
    isisNsrStatsData.EntityData.Children.Append("peer", types.YChild{"Peer", nil})
    for i := range isisNsrStatsData.Peer {
        types.SetYListKey(isisNsrStatsData.Peer[i], i)
        isisNsrStatsData.EntityData.Children.Append(types.GetSegmentPath(isisNsrStatsData.Peer[i]), types.YChild{"Peer", isisNsrStatsData.Peer[i]})
    }
    isisNsrStatsData.EntityData.Leafs = types.NewOrderedMap()

    isisNsrStatsData.EntityData.YListKeys = []string {}

    return &(isisNsrStatsData.EntityData)
}

// Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Self
// self
type Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Self struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // no of l1 lsp. The type is interface{} with range: 0..4294967295.
    NoOfL1Lsp interface{}

    // no of l2 lsp. The type is interface{} with range: 0..4294967295.
    NoOfL2Lsp interface{}

    // no of l1 adj. The type is interface{} with range: 0..65535.
    NoOfL1Adj interface{}

    // no of l2 adj. The type is interface{} with range: 0..65535.
    NoOfL2Adj interface{}

    // no of live interface. The type is interface{} with range: 0..65535.
    NoOfLiveInterface interface{}

    // no of ptp interface. The type is interface{} with range: 0..65535.
    NoOfPtpInterface interface{}

    // no of lan interface. The type is interface{} with range: 0..65535.
    NoOfLanInterface interface{}

    // no of loopback interface. The type is interface{} with range: 0..65535.
    NoOfLoopbackInterface interface{}

    // no of te tunnels. The type is interface{} with range: 0..65535.
    NoOfTeTunnels interface{}

    // no of te links. The type is interface{} with range: 0..65535.
    NoOfTeLinks interface{}

    // no of ipv4 routes. The type is interface{} with range: 0..4294967295.
    NoOfIpv4Routes interface{}

    // no of ipv6 routes. The type is interface{} with range: 0..4294967295.
    NoOfIpv6Routes interface{}

    // seqnum. The type is interface{} with range: 0..4294967295.
    Seqnum interface{}
}

func (self *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Self) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "self"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "isis-nsr-stats-data"
    self.EntityData.SegmentPath = "self"
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-statistics/isis-nsr-stats-data/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("no-of-l1-lsp", types.YLeaf{"NoOfL1Lsp", self.NoOfL1Lsp})
    self.EntityData.Leafs.Append("no-of-l2-lsp", types.YLeaf{"NoOfL2Lsp", self.NoOfL2Lsp})
    self.EntityData.Leafs.Append("no-of-l1-adj", types.YLeaf{"NoOfL1Adj", self.NoOfL1Adj})
    self.EntityData.Leafs.Append("no-of-l2-adj", types.YLeaf{"NoOfL2Adj", self.NoOfL2Adj})
    self.EntityData.Leafs.Append("no-of-live-interface", types.YLeaf{"NoOfLiveInterface", self.NoOfLiveInterface})
    self.EntityData.Leafs.Append("no-of-ptp-interface", types.YLeaf{"NoOfPtpInterface", self.NoOfPtpInterface})
    self.EntityData.Leafs.Append("no-of-lan-interface", types.YLeaf{"NoOfLanInterface", self.NoOfLanInterface})
    self.EntityData.Leafs.Append("no-of-loopback-interface", types.YLeaf{"NoOfLoopbackInterface", self.NoOfLoopbackInterface})
    self.EntityData.Leafs.Append("no-of-te-tunnels", types.YLeaf{"NoOfTeTunnels", self.NoOfTeTunnels})
    self.EntityData.Leafs.Append("no-of-te-links", types.YLeaf{"NoOfTeLinks", self.NoOfTeLinks})
    self.EntityData.Leafs.Append("no-of-ipv4-routes", types.YLeaf{"NoOfIpv4Routes", self.NoOfIpv4Routes})
    self.EntityData.Leafs.Append("no-of-ipv6-routes", types.YLeaf{"NoOfIpv6Routes", self.NoOfIpv6Routes})
    self.EntityData.Leafs.Append("seqnum", types.YLeaf{"Seqnum", self.Seqnum})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer
// peer
type Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // no of l1 lsp. The type is interface{} with range: 0..4294967295.
    NoOfL1Lsp interface{}

    // no of l2 lsp. The type is interface{} with range: 0..4294967295.
    NoOfL2Lsp interface{}

    // no of l1 adj. The type is interface{} with range: 0..65535.
    NoOfL1Adj interface{}

    // no of l2 adj. The type is interface{} with range: 0..65535.
    NoOfL2Adj interface{}

    // no of live interface. The type is interface{} with range: 0..65535.
    NoOfLiveInterface interface{}

    // no of ptp interface. The type is interface{} with range: 0..65535.
    NoOfPtpInterface interface{}

    // no of lan interface. The type is interface{} with range: 0..65535.
    NoOfLanInterface interface{}

    // no of loopback interface. The type is interface{} with range: 0..65535.
    NoOfLoopbackInterface interface{}

    // no of te tunnels. The type is interface{} with range: 0..65535.
    NoOfTeTunnels interface{}

    // no of te links. The type is interface{} with range: 0..65535.
    NoOfTeLinks interface{}

    // no of ipv4 routes. The type is interface{} with range: 0..4294967295.
    NoOfIpv4Routes interface{}

    // no of ipv6 routes. The type is interface{} with range: 0..4294967295.
    NoOfIpv6Routes interface{}

    // seqnum. The type is interface{} with range: 0..4294967295.
    Seqnum interface{}
}

func (peer *Isis_Instances_Instance_NsrStatistics_IsisNsrStatsData_Peer) GetEntityData() *types.CommonEntityData {
    peer.EntityData.YFilter = peer.YFilter
    peer.EntityData.YangName = "peer"
    peer.EntityData.BundleName = "cisco_ios_xr"
    peer.EntityData.ParentYangName = "isis-nsr-stats-data"
    peer.EntityData.SegmentPath = "peer" + types.AddNoKeyToken(peer)
    peer.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/nsr-statistics/isis-nsr-stats-data/" + peer.EntityData.SegmentPath
    peer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peer.EntityData.Children = types.NewOrderedMap()
    peer.EntityData.Leafs = types.NewOrderedMap()
    peer.EntityData.Leafs.Append("no-of-l1-lsp", types.YLeaf{"NoOfL1Lsp", peer.NoOfL1Lsp})
    peer.EntityData.Leafs.Append("no-of-l2-lsp", types.YLeaf{"NoOfL2Lsp", peer.NoOfL2Lsp})
    peer.EntityData.Leafs.Append("no-of-l1-adj", types.YLeaf{"NoOfL1Adj", peer.NoOfL1Adj})
    peer.EntityData.Leafs.Append("no-of-l2-adj", types.YLeaf{"NoOfL2Adj", peer.NoOfL2Adj})
    peer.EntityData.Leafs.Append("no-of-live-interface", types.YLeaf{"NoOfLiveInterface", peer.NoOfLiveInterface})
    peer.EntityData.Leafs.Append("no-of-ptp-interface", types.YLeaf{"NoOfPtpInterface", peer.NoOfPtpInterface})
    peer.EntityData.Leafs.Append("no-of-lan-interface", types.YLeaf{"NoOfLanInterface", peer.NoOfLanInterface})
    peer.EntityData.Leafs.Append("no-of-loopback-interface", types.YLeaf{"NoOfLoopbackInterface", peer.NoOfLoopbackInterface})
    peer.EntityData.Leafs.Append("no-of-te-tunnels", types.YLeaf{"NoOfTeTunnels", peer.NoOfTeTunnels})
    peer.EntityData.Leafs.Append("no-of-te-links", types.YLeaf{"NoOfTeLinks", peer.NoOfTeLinks})
    peer.EntityData.Leafs.Append("no-of-ipv4-routes", types.YLeaf{"NoOfIpv4Routes", peer.NoOfIpv4Routes})
    peer.EntityData.Leafs.Append("no-of-ipv6-routes", types.YLeaf{"NoOfIpv6Routes", peer.NoOfIpv6Routes})
    peer.EntityData.Leafs.Append("seqnum", types.YLeaf{"Seqnum", peer.Seqnum})

    peer.EntityData.YListKeys = []string {}

    return &(peer.EntityData)
}

// Isis_Instances_Instance_CheckpointTeTunnels
// Checkpointed TE tunnel table
type Isis_Instances_Instance_CheckpointTeTunnels struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A checkpointed TE tunnel. The type is slice of
    // Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel.
    CheckpointTeTunnel []*Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel
}

func (checkpointTeTunnels *Isis_Instances_Instance_CheckpointTeTunnels) GetEntityData() *types.CommonEntityData {
    checkpointTeTunnels.EntityData.YFilter = checkpointTeTunnels.YFilter
    checkpointTeTunnels.EntityData.YangName = "checkpoint-te-tunnels"
    checkpointTeTunnels.EntityData.BundleName = "cisco_ios_xr"
    checkpointTeTunnels.EntityData.ParentYangName = "instance"
    checkpointTeTunnels.EntityData.SegmentPath = "checkpoint-te-tunnels"
    checkpointTeTunnels.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/" + checkpointTeTunnels.EntityData.SegmentPath
    checkpointTeTunnels.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    checkpointTeTunnels.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    checkpointTeTunnels.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    checkpointTeTunnels.EntityData.Children = types.NewOrderedMap()
    checkpointTeTunnels.EntityData.Children.Append("checkpoint-te-tunnel", types.YChild{"CheckpointTeTunnel", nil})
    for i := range checkpointTeTunnels.CheckpointTeTunnel {
        types.SetYListKey(checkpointTeTunnels.CheckpointTeTunnel[i], i)
        checkpointTeTunnels.EntityData.Children.Append(types.GetSegmentPath(checkpointTeTunnels.CheckpointTeTunnel[i]), types.YChild{"CheckpointTeTunnel", checkpointTeTunnels.CheckpointTeTunnel[i]})
    }
    checkpointTeTunnels.EntityData.Leafs = types.NewOrderedMap()

    checkpointTeTunnels.EntityData.YListKeys = []string {}

    return &(checkpointTeTunnels.EntityData)
}

// Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel
// A checkpointed TE tunnel
type Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Level. The type is IsisInternalLevel.
    Level interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // TE database level. The type is IsisLevel.
    CheckpointTeLevel interface{}

    // Destination system ID. The type is string with pattern:
    // [a-fA-F0-9]{4}(\.[a-fA-F0-9]{4}){2}.
    CheckpointTeSystemId interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    CheckpointTeInterface interface{}

    // Tunnel flags. The type is interface{} with range: 0..4294967295.
    CheckpointTeFlags interface{}

    // Tunnel next-hop IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    CheckpointTeNexthop interface{}

    // Tunnel metric. The type is interface{} with range: -2147483648..2147483647.
    CheckpointTeMetric interface{}

    // Tunnel metric mode. The type is IsisMetricMode.
    CheckpointTeMetricMode interface{}

    // Tunnel bandwidth. The type is interface{} with range: 0..4294967295.
    CheckpointTeBandwidth interface{}

    // Tunnel checkpoint object ID. The type is interface{} with range:
    // 0..4294967295.
    CheckpointTeObjectId interface{}
}

func (checkpointTeTunnel *Isis_Instances_Instance_CheckpointTeTunnels_CheckpointTeTunnel) GetEntityData() *types.CommonEntityData {
    checkpointTeTunnel.EntityData.YFilter = checkpointTeTunnel.YFilter
    checkpointTeTunnel.EntityData.YangName = "checkpoint-te-tunnel"
    checkpointTeTunnel.EntityData.BundleName = "cisco_ios_xr"
    checkpointTeTunnel.EntityData.ParentYangName = "checkpoint-te-tunnels"
    checkpointTeTunnel.EntityData.SegmentPath = "checkpoint-te-tunnel" + types.AddNoKeyToken(checkpointTeTunnel)
    checkpointTeTunnel.EntityData.AbsolutePath = "Cisco-IOS-XR-clns-isis-oper:isis/instances/instance/checkpoint-te-tunnels/" + checkpointTeTunnel.EntityData.SegmentPath
    checkpointTeTunnel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    checkpointTeTunnel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    checkpointTeTunnel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    checkpointTeTunnel.EntityData.Children = types.NewOrderedMap()
    checkpointTeTunnel.EntityData.Leafs = types.NewOrderedMap()
    checkpointTeTunnel.EntityData.Leafs.Append("level", types.YLeaf{"Level", checkpointTeTunnel.Level})
    checkpointTeTunnel.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", checkpointTeTunnel.InterfaceName})
    checkpointTeTunnel.EntityData.Leafs.Append("checkpoint-te-level", types.YLeaf{"CheckpointTeLevel", checkpointTeTunnel.CheckpointTeLevel})
    checkpointTeTunnel.EntityData.Leafs.Append("checkpoint-te-system-id", types.YLeaf{"CheckpointTeSystemId", checkpointTeTunnel.CheckpointTeSystemId})
    checkpointTeTunnel.EntityData.Leafs.Append("checkpoint-te-interface", types.YLeaf{"CheckpointTeInterface", checkpointTeTunnel.CheckpointTeInterface})
    checkpointTeTunnel.EntityData.Leafs.Append("checkpoint-te-flags", types.YLeaf{"CheckpointTeFlags", checkpointTeTunnel.CheckpointTeFlags})
    checkpointTeTunnel.EntityData.Leafs.Append("checkpoint-te-nexthop", types.YLeaf{"CheckpointTeNexthop", checkpointTeTunnel.CheckpointTeNexthop})
    checkpointTeTunnel.EntityData.Leafs.Append("checkpoint-te-metric", types.YLeaf{"CheckpointTeMetric", checkpointTeTunnel.CheckpointTeMetric})
    checkpointTeTunnel.EntityData.Leafs.Append("checkpoint-te-metric-mode", types.YLeaf{"CheckpointTeMetricMode", checkpointTeTunnel.CheckpointTeMetricMode})
    checkpointTeTunnel.EntityData.Leafs.Append("checkpoint-te-bandwidth", types.YLeaf{"CheckpointTeBandwidth", checkpointTeTunnel.CheckpointTeBandwidth})
    checkpointTeTunnel.EntityData.Leafs.Append("checkpoint-te-object-id", types.YLeaf{"CheckpointTeObjectId", checkpointTeTunnel.CheckpointTeObjectId})

    checkpointTeTunnel.EntityData.YListKeys = []string {}

    return &(checkpointTeTunnel.EntityData)
}

